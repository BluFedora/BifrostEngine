Need to have a good tweening lib. Easy to use with built in ways to tween: ("position", "scale", "rotation")
With a callback: OnComplete(DestroyPopup)

[https://assetstore.unity.com/packages/tools/animation/leantween-3595]

Ex:

startButton.onClick(
  [](const MouseEvent& evt)
  {
    Tween.doStartScreenAnimation(
      ...
    );

    evt.target.removeEventListener(evt.self/currentListener);
  }
);

To have animations be able to be undone after an interaction (press) we should always be animating towards a goal.
To "Undo" the goal is the starting value.


-------------------------------- Scripted Particles -------------------------------- 

To boot strap the first version an actual scripting language can be used with binding functions
with the sole purpose of emitting a simple particle bytecode.

-------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------
-------------------------------- Transform Hierarchy -------------------------------- 
-------------------------------------------------------------------------------------

* This will be an immediate update type of system.
* Systems that update the transform need to happen before any reads.
* With this immediate design we can have a Gameplay API for batch updating transforms?
    - If updating multiple objects that do not share an ancestor then multithread??

Things that don't need speed.
- Looping through Children.

Things that need to just work.
- Mesh Renderer, Particles needs to read a component's world_transform matrix.
- Physics, AI needs the current position, rotation and scale of the object.
- Transform needs to get the latest updates from the physics component.

Things that could be made fast.
- Physics only needs to sync if the Transform was messed with this frame.
- Transforms need to read from physics any updates it has.

Min Spec of Systems:
Audio          -> postition: Vec3;
In-Game GUI    -> postition: Vec3;
Cam Target     -> postition: Vec3;
Mesh Rendering -> obj-world: Matrix4x4;
Lights         -> postition: Vec3, scale: Vec3, obj-world: Matrix4x4;
Sprites        -> obj-world: Matrix4x4;
Particles      -> postition: Vec3, scale: Vec3, rotation: Vec3, obj-world: Matrix4x4;
Physics        -> postition: Vec3, scale: Vec3, rotation: Vec3;
Text Rendering -> obj-world: Matrix4x4;
Gameplay       -> postition: Vec3, scale: Vec3, rotation: Vec3;

-------------------------------------------------------------------------------------
