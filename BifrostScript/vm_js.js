// Copyright 2010 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)

if (!Module.expectedDataFileDownloads) {
  Module.expectedDataFileDownloads = 0;
  Module.finishedDataFileDownloads = 0;
}
Module.expectedDataFileDownloads++;
(function() {
 var loadPackage = function(metadata) {

    var PACKAGE_PATH;
    if (typeof window === 'object') {
      PACKAGE_PATH = window['encodeURIComponent'](window.location.pathname.toString().substring(0, window.location.pathname.toString().lastIndexOf('/')) + '/');
    } else if (typeof location !== 'undefined') {
      // worker
      PACKAGE_PATH = encodeURIComponent(location.pathname.toString().substring(0, location.pathname.toString().lastIndexOf('/')) + '/');
    } else {
      throw 'using preloaded data can only be done on a web page or in a web worker';
    }
    var PACKAGE_NAME = 'vm_js.data';
    var REMOTE_PACKAGE_BASE = 'vm_js.data';
    if (typeof Module['locateFilePackage'] === 'function' && !Module['locateFile']) {
      Module['locateFile'] = Module['locateFilePackage'];
      err('warning: you defined Module.locateFilePackage, that has been renamed to Module.locateFile (using your locateFilePackage for now)');
    }
    var REMOTE_PACKAGE_NAME = Module['locateFile'] ? Module['locateFile'](REMOTE_PACKAGE_BASE, '') : REMOTE_PACKAGE_BASE;
  
    var REMOTE_PACKAGE_SIZE = metadata.remote_package_size;
    var PACKAGE_UUID = metadata.package_uuid;
  
    function fetchRemotePackage(packageName, packageSize, callback, errback) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', packageName, true);
      xhr.responseType = 'arraybuffer';
      xhr.onprogress = function(event) {
        var url = packageName;
        var size = packageSize;
        if (event.total) size = event.total;
        if (event.loaded) {
          if (!xhr.addedTotal) {
            xhr.addedTotal = true;
            if (!Module.dataFileDownloads) Module.dataFileDownloads = {};
            Module.dataFileDownloads[url] = {
              loaded: event.loaded,
              total: size
            };
          } else {
            Module.dataFileDownloads[url].loaded = event.loaded;
          }
          var total = 0;
          var loaded = 0;
          var num = 0;
          for (var download in Module.dataFileDownloads) {
          var data = Module.dataFileDownloads[download];
            total += data.total;
            loaded += data.loaded;
            num++;
          }
          total = Math.ceil(total * Module.expectedDataFileDownloads/num);
          if (Module['setStatus']) Module['setStatus']('Downloading data... (' + loaded + '/' + total + ')');
        } else if (!Module.dataFileDownloads) {
          if (Module['setStatus']) Module['setStatus']('Downloading data...');
        }
      };
      xhr.onerror = function(event) {
        throw new Error("NetworkError for: " + packageName);
      }
      xhr.onload = function(event) {
        if (xhr.status == 200 || xhr.status == 304 || xhr.status == 206 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
          var packageData = xhr.response;
          callback(packageData);
        } else {
          throw new Error(xhr.statusText + " : " + xhr.responseURL);
        }
      };
      xhr.send(null);
    };

    function handleError(error) {
      console.error('package error:', error);
    };
  
      var fetchedCallback = null;
      var fetched = Module['getPreloadedPackage'] ? Module['getPreloadedPackage'](REMOTE_PACKAGE_NAME, REMOTE_PACKAGE_SIZE) : null;

      if (!fetched) fetchRemotePackage(REMOTE_PACKAGE_NAME, REMOTE_PACKAGE_SIZE, function(data) {
        if (fetchedCallback) {
          fetchedCallback(data);
          fetchedCallback = null;
        } else {
          fetched = data;
        }
      }, handleError);
    
  function runWithFS() {

    function assert(check, msg) {
      if (!check) throw msg + new Error().stack;
    }

    function DataRequest(start, end, audio) {
      this.start = start;
      this.end = end;
      this.audio = audio;
    }
    DataRequest.prototype = {
      requests: {},
      open: function(mode, name) {
        this.name = name;
        this.requests[name] = this;
        Module['addRunDependency']('fp ' + this.name);
      },
      send: function() {},
      onload: function() {
        var byteArray = this.byteArray.subarray(this.start, this.end);
        this.finish(byteArray);
      },
      finish: function(byteArray) {
        var that = this;

        Module['FS_createDataFile'](this.name, null, byteArray, true, true, true); // canOwn this data in the filesystem, it is a slide into the heap that will never change
        Module['removeRunDependency']('fp ' + that.name);

        this.requests[this.name] = null;
      }
    };

        var files = metadata.files;
        for (var i = 0; i < files.length; ++i) {
          new DataRequest(files[i].start, files[i].end, files[i].audio).open('GET', files[i].filename);
        }

  
    function processPackageData(arrayBuffer) {
      Module.finishedDataFileDownloads++;
      assert(arrayBuffer, 'Loading data file failed.');
      assert(arrayBuffer instanceof ArrayBuffer, 'bad input to processPackageData');
      var byteArray = new Uint8Array(arrayBuffer);
      var curr;
      
        // copy the entire loaded file into a spot in the heap. Files will refer to slices in that. They cannot be freed though
        // (we may be allocating before malloc is ready, during startup).
        var ptr = Module['getMemory'](byteArray.length);
        Module['HEAPU8'].set(byteArray, ptr);
        DataRequest.prototype.byteArray = Module['HEAPU8'].subarray(ptr, ptr+byteArray.length);
  
          var files = metadata.files;
          for (var i = 0; i < files.length; ++i) {
            DataRequest.prototype.requests[files[i].filename].onload();
          }
              Module['removeRunDependency']('datafile_vm_js.data');

    };
    Module['addRunDependency']('datafile_vm_js.data');
  
    if (!Module.preloadResults) Module.preloadResults = {};
  
      Module.preloadResults[PACKAGE_NAME] = {fromCache: false};
      if (fetched) {
        processPackageData(fetched);
        fetched = null;
      } else {
        fetchedCallback = processPackageData;
      }
    
  }
  if (Module['calledRun']) {
    runWithFS();
  } else {
    if (!Module['preRun']) Module['preRun'] = [];
    Module["preRun"].push(runWithFS); // FS is not initialized yet, wait for it
  }

 }
 loadPackage({"files": [{"start": 0, "audio": 0, "end": 1719, "filename": "/test_script.bscript"}], "remote_package_size": 1719, "package_uuid": "b902b8be-5b34-48f0-9c77-d12382e57438"});

})();



// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

Module['arguments'] = [];
Module['thisProgram'] = './this.program';
Module['quit'] = function(status, toThrow) {
  throw toThrow;
};
Module['preRun'] = [];
Module['postRun'] = [];

// Determine the runtime environment we are in. You can customize this by
// setting the ENVIRONMENT setting at compile time (see settings.js).

var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_HAS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;
ENVIRONMENT_IS_WEB = typeof window === 'object';
ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
// A web environment like Electron.js can have Node enabled, so we must
// distinguish between Node-enabled environments and Node environments per se.
// This will allow the former to do things like mount NODEFS.
ENVIRONMENT_HAS_NODE = typeof process === 'object' && typeof require === 'function';
ENVIRONMENT_IS_NODE = ENVIRONMENT_HAS_NODE && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (Module['ENVIRONMENT']) {
  throw new Error('Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -s ENVIRONMENT=web or -s ENVIRONMENT=node)');
}


// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)




// `/` should be present at the end if `scriptDirectory` is not empty
var scriptDirectory = '';
function locateFile(path) {
  if (Module['locateFile']) {
    return Module['locateFile'](path, scriptDirectory);
  } else {
    return scriptDirectory + path;
  }
}

if (ENVIRONMENT_IS_NODE) {
  scriptDirectory = __dirname + '/';

  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  var nodeFS;
  var nodePath;

  Module['read'] = function shell_read(filename, binary) {
    var ret;
    ret = tryParseAsDataURI(filename);
    if (!ret) {
      if (!nodeFS) nodeFS = require('fs');
      if (!nodePath) nodePath = require('path');
      filename = nodePath['normalize'](filename);
      ret = nodeFS['readFileSync'](filename);
    }
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  if (process['argv'].length > 1) {
    Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
  // Currently node will swallow unhandled rejections, but this behavior is
  // deprecated, and in the future it will exit with error status.
  process['on']('unhandledRejection', abort);

  Module['quit'] = function(status) {
    process['exit'](status);
  };

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
} else
if (ENVIRONMENT_IS_SHELL) {


  if (typeof read != 'undefined') {
    Module['read'] = function shell_read(f) {
      var data = tryParseAsDataURI(f);
      if (data) {
        return intArrayToString(data);
      }
      return read(f);
    };
  }

  Module['readBinary'] = function readBinary(f) {
    var data;
    data = tryParseAsDataURI(f);
    if (data) {
      return data;
    }
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof quit === 'function') {
    Module['quit'] = function(status) {
      quit(status);
    }
  }
} else
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  if (ENVIRONMENT_IS_WORKER) { // Check worker, not web, since window could be polyfilled
    scriptDirectory = self.location.href;
  } else if (document.currentScript) { // web
    scriptDirectory = document.currentScript.src;
  }
  // blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.
  // otherwise, slice off the final part of the url to find the script directory.
  // if scriptDirectory does not contain a slash, lastIndexOf will return -1,
  // and scriptDirectory will correctly be replaced with an empty string.
  if (scriptDirectory.indexOf('blob:') !== 0) {
    scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf('/')+1);
  } else {
    scriptDirectory = '';
  }


  Module['read'] = function shell_read(url) {
    try {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
    } catch (err) {
      var data = tryParseAsDataURI(url);
      if (data) {
        return intArrayToString(data);
      }
      throw err;
    }
  };

  if (ENVIRONMENT_IS_WORKER) {
    Module['readBinary'] = function readBinary(url) {
      try {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(xhr.response);
      } catch (err) {
        var data = tryParseAsDataURI(url);
        if (data) {
          return data;
        }
        throw err;
      }
    };
  }

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      var data = tryParseAsDataURI(url);
      if (data) {
        onload(data.buffer);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  Module['setWindowTitle'] = function(title) { document.title = title };
} else
{
  throw new Error('environment detection error');
}

// Set up the out() and err() hooks, which are how we can print to stdout or
// stderr, respectively.
// If the user provided Module.print or printErr, use that. Otherwise,
// console.log is checked first, as 'print' on the web will open a print dialogue
// printErr is preferable to console.warn (works better in shells)
// bind(console) is necessary to fix IE/Edge closed dev tools panel behavior.
var out = Module['print'] || (typeof console !== 'undefined' ? console.log.bind(console) : (typeof print !== 'undefined' ? print : null));
var err = Module['printErr'] || (typeof printErr !== 'undefined' ? printErr : ((typeof console !== 'undefined' && console.warn.bind(console)) || out));

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;

// perform assertions in shell.js after we set up out() and err(), as otherwise if an assertion fails it cannot print the message
assert(typeof Module['memoryInitializerPrefixURL'] === 'undefined', 'Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['pthreadMainPrefixURL'] === 'undefined', 'Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['cdInitializerPrefixURL'] === 'undefined', 'Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['filePackagePrefixURL'] === 'undefined', 'Module.filePackagePrefixURL option was removed, use Module.locateFile instead');



// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// {{PREAMBLE_ADDITIONS}}

var STACK_ALIGN = 16;

// stack management, and other functionality that is provided by the compiled code,
// should not be used before it is ready
stackSave = stackRestore = stackAlloc = function() {
  abort('cannot use the stack before compiled code is ready to run, and has provided stack access');
};

function staticAlloc(size) {
  abort('staticAlloc is no longer available at runtime; instead, perform static allocations at compile time (using makeStaticAlloc)');
}

function dynamicAlloc(size) {
  assert(DYNAMICTOP_PTR);
  var ret = HEAP32[DYNAMICTOP_PTR>>2];
  var end = (ret + size + 15) & -16;
  if (end > _emscripten_get_heap_size()) {
    abort('failure to dynamicAlloc - memory growth etc. is not supported there, call malloc/sbrk directly');
  }
  HEAP32[DYNAMICTOP_PTR>>2] = end;
  return ret;
}

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  return Math.ceil(size / factor) * factor;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 === 0, 'getNativeTypeSize invalid bits ' + bits + ', type ' + type);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    err(text);
  }
}

var asm2wasmImports = { // special asm2wasm imports
    "f64-rem": function(x, y) {
        return x % y;
    },
    "debugger": function() {
        debugger;
    }
};



var jsCallStartIndex = 1;
var functionPointers = new Array(0);


// 'sig' parameter is required for the llvm backend but only when func is not
// already a WebAssembly function.
function addFunction(func, sig) {
  if (typeof sig === 'undefined') {
    err('warning: addFunction(): You should provide a wasm function signature string as a second argument. This is not necessary for asm.js and asm2wasm, but can be required for the LLVM wasm backend, so it is recommended for full portability.');
  }


  var base = 0;
  for (var i = base; i < base + 0; i++) {
    if (!functionPointers[i]) {
      functionPointers[i] = func;
      return jsCallStartIndex + i;
    }
  }
  throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';

}

function removeFunction(index) {

  functionPointers[index-jsCallStartIndex] = null;
}

var funcWrappers = {};

function getFuncWrapper(func, sig) {
  if (!func) return; // on null pointer, return undefined
  assert(sig);
  if (!funcWrappers[sig]) {
    funcWrappers[sig] = {};
  }
  var sigCache = funcWrappers[sig];
  if (!sigCache[func]) {
    // optimize away arguments usage in common cases
    if (sig.length === 1) {
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func);
      };
    } else if (sig.length === 2) {
      sigCache[func] = function dynCall_wrapper(arg) {
        return dynCall(sig, func, [arg]);
      };
    } else {
      // general case
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func, Array.prototype.slice.call(arguments));
      };
    }
  }
  return sigCache[func];
}


function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

function dynCall(sig, ptr, args) {
  if (args && args.length) {
    assert(args.length == sig.length-1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
  } else {
    assert(sig.length == 1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].call(null, ptr);
  }
}

var tempRet0 = 0;

var setTempRet0 = function(value) {
  tempRet0 = value;
}

var getTempRet0 = function() {
  return tempRet0;
}

function getCompilerSetting(name) {
  throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for getCompilerSetting or emscripten_get_compiler_setting to work';
}

var Runtime = {
  // helpful errors
  getTempRet0: function() { abort('getTempRet0() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  staticAlloc: function() { abort('staticAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  stackAlloc: function() { abort('stackAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
};

// The address globals begin at. Very low in memory, for code size and optimization opportunities.
// Above 0 is static memory, starting with globals.
// Then the stack.
// Then 'dynamic' memory for sbrk.
var GLOBAL_BASE = 8;




// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html





// In MINIMAL_RUNTIME, setValue() and getValue() are only available when building with safe heap enabled, for heap safety checking.
// In traditional runtime, setValue() and getValue() are always available (although their use is highly discouraged due to perf penalties)

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}





// Wasm globals

var wasmMemory;

// Potentially used for direct table calls.
var wasmTable;


//========================================
// Runtime essentials
//========================================

// whether we are quitting the application. no code should run after this.
// set in exit() and abort()
var ABORT = false;

// set by exit() and abort().  Passed to 'onExit' handler.
// NOTE: This is also used as the process return code code in shell environments
// but only when noExitRuntime is false.
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

// C calling interface.
function ccall(ident, returnType, argTypes, args, opts) {
  // For fast lookup of conversion functions
  var toC = {
    'string': function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        var len = (str.length << 2) + 1;
        ret = stackAlloc(len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    },
    'array': function(arr) {
      var ret = stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    }
  };

  function convertReturnValue(ret) {
    if (returnType === 'string') return UTF8ToString(ret);
    if (returnType === 'boolean') return Boolean(ret);
    return ret;
  }

  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  assert(returnType !== 'array', 'Return type should not be "array".');
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);
  ret = convertReturnValue(ret);
  if (stack !== 0) stackRestore(stack);
  return ret;
}

function cwrap(ident, returnType, argTypes, opts) {
  return function() {
    return ccall(ident, returnType, argTypes, arguments, opts);
  }
}

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_DYNAMIC = 2; // Cannot be freed except through sbrk
var ALLOC_NONE = 3; // Do not allocate

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc,
    stackAlloc,
    dynamicAlloc][allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var stop;
    ptr = ret;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!runtimeInitialized) return dynamicAlloc(size);
  return _malloc(size);
}




/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
  abort("this function has been removed - you should use UTF8ToString(ptr, maxBytesToRead) instead!");
}

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAPU8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}


// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;

/**
 * @param {number} idx
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ArrayToString(u8Array, idx, maxBytesToRead) {
  var endIdx = idx + maxBytesToRead;
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  // (As a tiny code save trick, compare endPtr against endIdx using a negation, so that undefined means Infinity)
  while (u8Array[endPtr] && !(endPtr >= endIdx)) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var str = '';
    // If building with TextDecoder, we have already computed the string length above, so test loop end condition against that
    while (idx < endPtr) {
      // For UTF8 byte structure, see:
      // http://en.wikipedia.org/wiki/UTF-8#Description
      // https://www.ietf.org/rfc/rfc2279.txt
      // https://tools.ietf.org/html/rfc3629
      var u0 = u8Array[idx++];
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      var u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      var u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        if ((u0 & 0xF8) != 0xF0) warnOnce('Invalid UTF-8 leading byte 0x' + u0.toString(16) + ' encountered when deserializing a UTF-8 string on the asm.js/wasm heap to a JS string!');
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | (u8Array[idx++] & 63);
      }

      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
  return str;
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns a
// copy of that string as a Javascript String object.
// maxBytesToRead: an optional length that specifies the maximum number of bytes to read. You can omit
//                 this parameter to scan the string until the first \0 byte. If maxBytesToRead is
//                 passed, and the string at [ptr, ptr+maxBytesToReadr[ contains a null byte in the
//                 middle, then the string will cut short at that byte index (i.e. maxBytesToRead will
//                 not produce a string of exact length [ptr, ptr+maxBytesToRead[)
//                 N.B. mixing frequent uses of UTF8ToString() with and without maxBytesToRead may
//                 throw JS JIT optimizations off, so it is worth to consider consistently using one
//                 style or the other.
/**
 * @param {number} ptr
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ToString(ptr, maxBytesToRead) {
  return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : '';
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array.
//                    This count should include the null terminator,
//                    i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) {
      var u1 = str.charCodeAt(++i);
      u = 0x10000 + ((u & 0x3FF) << 10) | (u1 & 0x3FF);
    }
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 3 >= endIdx) break;
      if (u >= 0x200000) warnOnce('Invalid Unicode code point 0x' + u.toString(16) + ' encountered when serializing a JS string to an UTF-8 string on the asm.js/wasm heap! (Valid unicode code points should be in range 0-0x1FFFFF).');
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.
function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) ++len;
    else if (u <= 0x7FF) len += 2;
    else if (u <= 0xFFFF) len += 3;
    else len += 4;
  }
  return len;
}


// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}





function demangle(func) {
  return func;
}

function demangleAll(text) {
  var regex =
    /__Z[\w\d_]+/g;
  return text.replace(regex,
    function(x) {
      var y = demangle(x);
      return x === y ? x : (y + ' [' + x + ']');
    });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}



// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}


var STATIC_BASE = 8,
    STACK_BASE = 10928,
    STACKTOP = STACK_BASE,
    STACK_MAX = 5253808,
    DYNAMIC_BASE = 5253808,
    DYNAMICTOP_PTR = 10896;

assert(STACK_BASE % 16 === 0, 'stack must start aligned');
assert(DYNAMIC_BASE % 16 === 0, 'heap must start aligned');



var TOTAL_STACK = 5242880;
if (Module['TOTAL_STACK']) assert(TOTAL_STACK === Module['TOTAL_STACK'], 'the stack size can no longer be determined at runtime')

var INITIAL_TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
if (INITIAL_TOTAL_MEMORY < TOTAL_STACK) err('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + INITIAL_TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');







// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
  assert(buffer.byteLength === INITIAL_TOTAL_MEMORY, 'provided buffer should be ' + INITIAL_TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
} else {
  // Use a WebAssembly memory where available
  {
    buffer = new ArrayBuffer(INITIAL_TOTAL_MEMORY);
  }
  assert(buffer.byteLength === INITIAL_TOTAL_MEMORY);
}
updateGlobalBufferViews();


HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  HEAPU32[(STACK_MAX >> 2)-1] = 0x02135467;
  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;
}

function checkStackCookie() {
  var cookie1 = HEAPU32[(STACK_MAX >> 2)-1];
  var cookie2 = HEAPU32[(STACK_MAX >> 2)-2];
  if (cookie1 != 0x02135467 || cookie2 != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + cookie2.toString(16) + ' ' + cookie1.toString(16));
  }
  // Also test the global address 0 for integrity.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) abort('Runtime error: The application has corrupted its heap memory area (address zero)!');
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - stackSave() + allocSize) + ' bytes available!');
}


  HEAP32[0] = 0x63736d65; /* 'emsc' */



// Endianness check (note: assumes compiler arch was little-endian)
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the main() is called

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function initRuntime() {
  checkStackCookie();
  assert(!runtimeInitialized);
  runtimeInitialized = true;
  if (!Module["noFSInit"] && !FS.init.initialized) FS.init();
TTY.init();
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  FS.ignorePermissions = false;
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


assert(Math.imul, 'This browser does not support Math.imul(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.fround, 'This browser does not support Math.fround(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.clz32, 'This browser does not support Math.clz32(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.trunc, 'This browser does not support Math.trunc(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_max = Math.max;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;



// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// Module.preRun (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            err('still waiting on run dependencies:');
          }
          err('dependency: ' + dep);
        }
        if (shown) {
          err('(end of list)');
        }
      }, 10000);
    }
  } else {
    err('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    err('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


var memoryInitializer = null;






// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return String.prototype.startsWith ?
      filename.startsWith(dataURIPrefix) :
      filename.indexOf(dataURIPrefix) === 0;
}





// === Body ===

var ASM_CONSTS = [];





// STATICTOP = STATIC_BASE + 10920;
/* global initializers */ /*__ATINIT__.push();*/


memoryInitializer = "data:application/octet-stream;base64,";





/* no memory initializer */
var tempDoublePtr = 10912
assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
}

function copyTempDouble(ptr) {
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];
  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];
  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];
  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];
}

// {{PRE_LIBRARY}}


  function ___assert_fail(condition, filename, line, func) {
      abort('Assertion failed: ' + UTF8ToString(condition) + ', at: ' + [filename ? UTF8ToString(filename) : 'unknown filename', line, func ? UTF8ToString(func) : 'unknown function']);
    }

  function ___cxa_uncaught_exception() {
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }

  function ___gxx_personality_v0() {
    }

  function ___lock() {}

  
    

  
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up; up--) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      }};
  
  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else err('failed to set errno from JS');
      return value;
    }
  
  var PATH_FS={resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH_FS.resolve(from).substr(1);
        to = PATH_FS.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(19);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(6);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(5);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(11);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(6);
          }
          try {
            for (var i = 0; i < length; i++) {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            }
          } catch (e) {
            throw new FS.ErrnoError(5);
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var isPosixPlatform = (process.platform != 'win32'); // Node doesn't offer a direct check, so test by exclusion
  
              var fd = process.stdin.fd;
              if (isPosixPlatform) {
                // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
                var usingDevice = false;
                try {
                  fd = fs.openSync('/dev/stdin', 'r');
                  usingDevice = true;
                } catch (e) {}
              }
  
              try {
                bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().indexOf('EOF') != -1) bytesRead = 0;
                else throw e;
              }
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
            } else
            if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(1);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        var prevCapacity = node.contents ? node.contents.length : 0;
        if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
        // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
        // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
        // avoid overshooting the allocation cap by a very large margin.
        var CAPACITY_DOUBLING_MAX = 1024 * 1024;
        newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
        if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
        var oldContents = node.contents;
        node.contents = new Uint8Array(newCapacity); // Allocate new storage.
        if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
        return;
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[2];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(39);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(39);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(22);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
  
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(22);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(19);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(12);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(19);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        if (!req) {
          return callback("Unable to connect to IndexedDB");
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          try {
            var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
            transaction.onerror = function(e) {
              callback(this.error);
              e.preventDefault();
            };
  
            var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
            var index = store.index('timestamp');
  
            index.openKeyCursor().onsuccess = function(event) {
              var cursor = event.target.result;
  
              if (!cursor) {
                return callback(null, { type: 'remote', db: db, entries: entries });
              }
  
              entries[cursor.primaryKey] = { timestamp: cursor.key };
  
              cursor.continue();
            };
          } catch (e) {
            return callback(e);
          }
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
        var flags = process["binding"]("constants");
        // Node.js 4 compatibility: it has no namespaces for constants
        if (flags["fs"]) {
          flags = flags["fs"];
        }
        NODEFS.flagsForNodeMap = {
          "1024": flags["O_APPEND"],
          "64": flags["O_CREAT"],
          "128": flags["O_EXCL"],
          "0": flags["O_RDONLY"],
          "2": flags["O_RDWR"],
          "4096": flags["O_SYNC"],
          "512": flags["O_TRUNC"],
          "1": flags["O_WRONLY"]
        };
      },bufferFrom:function (arrayBuffer) {
        // Node.js < 4.5 compatibility: Buffer.from does not support ArrayBuffer
        // Buffer.from before 4.5 was just a method inherited from Uint8Array
        // Buffer.alloc has been added with Buffer.from together, so check it instead
        return Buffer.alloc ? Buffer.from(arrayBuffer) : new Buffer(arrayBuffer);
      },mount:function (mount) {
        assert(ENVIRONMENT_HAS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(22);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // Node.js on Windows never represents permission bit 'x', so
            // propagate read bits to execute bits
            stat.mode = stat.mode | ((stat.mode & 292) >> 2);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(-e.errno); // syscall errnos are negated, node's are not
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsForNode:function (flags) {
        flags &= ~0x200000 /*O_PATH*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x800 /*O_NONBLOCK*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x8000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x80000 /*O_CLOEXEC*/; // Some applications may pass it; it makes no sense for a single process.
        var newFlags = 0;
        for (var k in NODEFS.flagsForNodeMap) {
          if (flags & k) {
            newFlags |= NODEFS.flagsForNodeMap[k];
            flags ^= k;
          }
        }
  
        if (!flags) {
          return newFlags;
        } else {
          throw new FS.ErrnoError(22);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsForNode(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
        },read:function (stream, buffer, offset, length, position) {
          // Node.js < 6 compatibility: node errors on 0 length reads
          if (length === 0) return 0;
          try {
            return fs.readSync(stream.nfd, NODEFS.bufferFrom(buffer.buffer), offset, length, position);
          } catch (e) {
            throw new FS.ErrnoError(-e.errno);
          }
        },write:function (stream, buffer, offset, length, position) {
          try {
            return fs.writeSync(stream.nfd, NODEFS.bufferFrom(buffer.buffer), offset, length, position);
          } catch (e) {
            throw new FS.ErrnoError(-e.errno);
          }
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(-e.errno);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(22);
          }
  
          return position;
        }}};
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            // Issue 4254: Using curr as a node name will prevent the node
            // from being found in FS.nameTable when FS.open is called on
            // a path which holds a child of this node,
            // given that all FS functions assume node names
            // are just their corresponding parts within their given path,
            // rather than incremental aggregates which include their parent's
            // directories.
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, parts[i], WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(2);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(1);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(1);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(1);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(1);
        },readdir:function (node) {
          var entries = ['.', '..'];
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(1);
        },readlink:function (node) {
          throw new FS.ErrnoError(1);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(5);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(22);
          }
          return position;
        }}};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};var FS={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH_FS.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(40);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH_FS.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(40);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return 13;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return 13;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return 13;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return 13;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return 17;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return 20;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return 16;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return 21;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return 2;
        }
        if (FS.isLink(node.mode)) {
          return 40;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return 21;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(24);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(29);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          console.log('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(err) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(err);
        }
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(16);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(16);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(20);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(22);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(22);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(1);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:function (path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != 17) throw e;
          }
        }
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH_FS.resolve(oldpath)) {
          throw new FS.ErrnoError(2);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(2);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(1);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(16);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(2);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(18);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH_FS.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(22);
        }
        // new path should not be an ancestor of the old path
        relative = PATH_FS.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(39);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(1);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(16);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(1);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(16);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(20);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(1);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(16);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(2);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(22);
        }
        return PATH_FS.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(2);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(1);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(1);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(9);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(1);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(9);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(22);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(1);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(21);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(22);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(9);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(22);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(2);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(17);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(2);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(20);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            console.log("FS.trackingDelegate error on read file: " + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(9);
        }
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
        stream.fd = null;
      },isClosed:function (stream) {
        return stream.fd === null;
      },llseek:function (stream, offset, whence) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(9);
        }
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(29);
        }
        if (whence != 0 /* SEEK_SET */ && whence != 1 /* SEEK_CUR */ && whence != 2 /* SEEK_END */) {
          throw new FS.ErrnoError(22);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(22);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(9);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(9);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(21);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(22);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(29);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(22);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(9);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(9);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(21);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(22);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(29);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+stream.path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(9);
        }
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(22);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(9);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(19);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(95);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // User requests writing to file (prot & PROT_WRITE != 0).
        // Checking if we have permissions to write to the file unless
        // MAP_PRIVATE flag is set. According to POSIX spec it is possible
        // to write to file opened in read-only mode with MAP_PRIVATE flag,
        // as all modifications will be visible only in the memory of
        // the current process.
        if ((prot & 2) !== 0
            && (flags & 2) === 0
            && (stream.flags & 2097155) !== 2) {
          throw new FS.ErrnoError(13);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(13);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(19);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(25);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        var stream = FS.open(path, opts.flags, opts.mode);
        if (typeof data === 'string') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);
        } else if (ArrayBuffer.isView(data)) {
          FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);
        } else {
          throw new Error('Unsupported data type');
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(2);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(20);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto === 'object' && typeof crypto['getRandomValues'] === 'function') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else
        if (ENVIRONMENT_IS_NODE) {
          // for nodejs with or without crypto support included
          try {
            var crypto_module = require('crypto');
            // nodejs has crypto support
            random_device = function() { return crypto_module['randomBytes'](1)[0]; };
          } catch (e) {
            // nodejs doesn't have crypto support
          }
        } else
        {}
        if (!random_device) {
          // we couldn't find a proper implementation, as Math.random() is not suitable for /dev/random, see emscripten-core/emscripten/pull/7096
          random_device = function() { abort("no cryptographic support found for random_device. consider polyfilling it if you want to use something insecure like Math.random(), e.g. put this in a --pre-js: var crypto = { getRandomValues: function(array) { for (var i = 0; i < array.length; i++) array[i] = (Math.random()*256)|0 } };"); };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(9);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        var stdout = FS.open('/dev/stdout', 'w');
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          // Node.js compatibility: assigning on this.stack fails on Node 4 (but fixed on Node 8)
          if (this.stack) Object.defineProperty(this, "stack", { value: (new Error).stack, writable: true });
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [2].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH_FS.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(5);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(11);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(5);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(5);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            console.log("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(5);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(5);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH_FS.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(9);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -20;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        (tempI64 = [stat.size>>>0,(tempDouble=stat.size,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((buf)+(40))>>2)]=tempI64[0],HEAP32[(((buf)+(44))>>2)]=tempI64[1]);
        HEAP32[(((buf)+(48))>>2)]=4096;
        HEAP32[(((buf)+(52))>>2)]=stat.blocks;
        HEAP32[(((buf)+(56))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(76))>>2)]=0;
        (tempI64 = [stat.ino>>>0,(tempDouble=stat.ino,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((buf)+(80))>>2)]=tempI64[0],HEAP32[(((buf)+(84))>>2)]=tempI64[1]);
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -22;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -22;
        var ret = FS.readlink(path);
  
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;
  
        return len;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -22;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -13;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = UTF8ToString(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(9);
        return stream;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      var HIGH_OFFSET = 0x100000000; // 2^32
      // use an unsigned operator on low and shift high by 32-bits
      var offset = offset_high * HIGH_OFFSET + (offset_low >>> 0);
  
      var DOUBLE_LIMIT = 0x20000000000000; // 2^53
      // we also check for equality since DOUBLE_LIMIT + 1 == DOUBLE_LIMIT
      if (offset <= -DOUBLE_LIMIT || offset >= DOUBLE_LIMIT) {
        return -75;
      }
  
      FS.llseek(stream, offset, whence);
      (tempI64 = [stream.position>>>0,(tempDouble=stream.position,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((result)>>2)]=tempI64[0],HEAP32[(((result)+(4))>>2)]=tempI64[1]);
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall145(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // readv
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doReadv(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall221(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fcntl64
      var stream = SYSCALLS.getStreamFromFD(), cmd = SYSCALLS.get();
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -22;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        /* case 12: Currently in musl F_GETLK64 has same value as F_GETLK, so omitted to avoid duplicate case blocks. If that changes, uncomment this */ {
          
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        /* case 13: Currently in musl F_SETLK64 has same value as F_SETLK, so omitted to avoid duplicate case blocks. If that changes, uncomment this */
        /* case 14: Currently in musl F_SETLKW64 has same value as F_SETLKW, so omitted to avoid duplicate case blocks. If that changes, uncomment this */
          
          
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -22; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          ___setErrNo(22);
          return -1;
        default: {
          return -22;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall5(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // open
      var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get() // optional TODO
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21509:
        case 21505: {
          if (!stream.tty) return -25;
          return 0;
        }
        case 21510:
        case 21511:
        case 21512:
        case 21506:
        case 21507:
        case 21508: {
          if (!stream.tty) return -25;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -25;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -25;
          return -22; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        case 21523: {
          // TODO: in theory we should write to the winsize struct that gets
          // passed in, but for now musl doesn't read anything on it
          if (!stream.tty) return -25;
          return 0;
        }
        case 21524: {
          // TODO: technically, this ioctl call should change the window size.
          // but, since emscripten doesn't have any concept of a terminal window
          // yet, we'll just silently throw it away as we do TIOCGWINSZ
          if (!stream.tty) return -25;
          return 0;
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  
   
  
   
  
     

  function ___unlock() {}

   

   

  function _emscripten_get_heap_size() {
      return HEAP8.length;
    }



  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
    }
  
   

   

   

  
  
  function abortOnCannotGrowMemory(requestedSize) {
      abort('Cannot enlarge memory arrays to size ' + requestedSize + ' bytes (OOM). Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + HEAP8.length + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or (4) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
    }function _emscripten_resize_heap(requestedSize) {
      abortOnCannotGrowMemory(requestedSize);
    } 

FS.staticInit();Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;Module["FS_unlink"] = FS.unlink;;
if (ENVIRONMENT_HAS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); };
var ASSERTIONS = true;

// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}


// Copied from https://github.com/strophe/strophejs/blob/e06d027/src/polyfills.js#L149

// This code was written by Tyler Akins and has been placed in the
// public domain.  It would be nice if you left this header intact.
// Base64 code from Tyler Akins -- http://rumkin.com

/**
 * Decodes a base64 string.
 * @param {String} input The string to decode.
 */
var decodeBase64 = typeof atob === 'function' ? atob : function (input) {
  var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

  var output = '';
  var chr1, chr2, chr3;
  var enc1, enc2, enc3, enc4;
  var i = 0;
  // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');
  do {
    enc1 = keyStr.indexOf(input.charAt(i++));
    enc2 = keyStr.indexOf(input.charAt(i++));
    enc3 = keyStr.indexOf(input.charAt(i++));
    enc4 = keyStr.indexOf(input.charAt(i++));

    chr1 = (enc1 << 2) | (enc2 >> 4);
    chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
    chr3 = ((enc3 & 3) << 6) | enc4;

    output = output + String.fromCharCode(chr1);

    if (enc3 !== 64) {
      output = output + String.fromCharCode(chr2);
    }
    if (enc4 !== 64) {
      output = output + String.fromCharCode(chr3);
    }
  } while (i < input.length);
  return output;
};

// Converts a string of base64 into a byte array.
// Throws error on invalid input.
function intArrayFromBase64(s) {
  if (typeof ENVIRONMENT_IS_NODE === 'boolean' && ENVIRONMENT_IS_NODE) {
    var buf;
    try {
      buf = Buffer.from(s, 'base64');
    } catch (_) {
      buf = new Buffer(s, 'base64');
    }
    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);
  }

  try {
    var decoded = decodeBase64(s);
    var bytes = new Uint8Array(decoded.length);
    for (var i = 0 ; i < decoded.length ; ++i) {
      bytes[i] = decoded.charCodeAt(i);
    }
    return bytes;
  } catch (_) {
    throw new Error('Converting base64 string to bytes failed.');
  }
}

// If filename is a base64 data URI, parses and returns data (Buffer on node,
// Uint8Array otherwise). If filename is not a base64 data URI, returns undefined.
function tryParseAsDataURI(filename) {
  if (!isDataURI(filename)) {
    return;
  }

  return intArrayFromBase64(filename.slice(dataURIPrefix.length));
}


// ASM_LIBRARY EXTERN PRIMITIVES: Math_imul,Math_clz32,Int8Array,Int32Array


var debug_table_ii = ["0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "___stdio_close", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "_bfLexer_isWhitespace", "_bfLexer_isNotNewline", "_bfLexer_isID", "_bfLexer_isNotQuote", "0", "_bfHashMap_defaultHash", "0", "0", "_ModuleMap_hash", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"];
var debug_table_iidiiii = ["0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "_fmt_fp", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"];
var debug_table_iii = ["0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "_bfVM_getSymbolHelper", "0", "0", "0", "0", "0", "0", "_bfHashMap_defaultCmp", "0", "0", "_ModuleMap_cmp", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"];
var debug_table_iiii = ["0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "___stdout_write", "0", "_sn_write", "0", "0", "0", "0", "__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "___stdio_write", "0", "0", "___stdio_read", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"];
var debug_table_iiiii = ["0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "___stdio_seek", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "__ZL13memoryHandlerPvS_mm", "0", "0", "0", "0", "0", "0", "0", "0", "_bfGCDefaultAllocator", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"];
var debug_table_vi = ["0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "__ZN10__cxxabiv116__shim_type_infoD2Ev", "__ZN10__cxxabiv117__class_type_infoD0Ev", "__ZNK10__cxxabiv116__shim_type_info5noop1Ev", "__ZNK10__cxxabiv116__shim_type_info5noop2Ev", "0", "0", "0", "0", "__ZN10__cxxabiv120__si_class_type_infoD0Ev", "0", "0", "0", "0", "0", "0"];
var debug_table_vii = ["0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "__ZL12printHandlerP11BifrostVM_tPKc", "0", "0", "0", "0", "0", "0", "0", "_bfHashMap_defaultDtor", "0", "0", "0", "0", "0", "_bfVM_moduleLoadStdIOPrint", "0", "0", "_pop_arg_long_double", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"];
var debug_table_viii = ["0", "_parseGroup", "0", "0", "0", "0", "0", "0", "_parseVariable", "_parseFunctionExpr", "_parseLiteral", "_parseNew", "_parseSuper", "0", "0", "0"];
var debug_table_viiii = ["0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi", "0", "0", "0", "__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi", "__ZL12errorHandlerP11BifrostVM_t14BifrostVMErroriPKc", "0", "__ZL13moduleHandlerP11BifrostVM_tPKcS2_P21BifrostVMModuleLookUp"];
var debug_table_viiiii = ["0", "0", "_parseCall", "_parseSubscript", "_parseMethodCall", "_parseAssign", "_parseBinOp", "_parseDotOp", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib", "0", "0", "0", "__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib", "0", "0", "0", "0"];
var debug_table_viiiiii = ["0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib", "0", "0", "0", "__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib", "0", "0", "0", "0", "0"];
function nullFunc_ii(x) { err("Invalid function pointer '" + x + "' called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("This pointer might make sense in another type signature: iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iidiiii: " + debug_table_iidiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  "); abort(x) }

function nullFunc_iidiiii(x) { err("Invalid function pointer '" + x + "' called with signature 'iidiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("This pointer might make sense in another type signature: ii: " + debug_table_ii[x] + "  iiii: " + debug_table_iiii[x] + "  iii: " + debug_table_iii[x] + "  iiiii: " + debug_table_iiiii[x] + "  viiii: " + debug_table_viiii[x] + "  viii: " + debug_table_viii[x] + "  vii: " + debug_table_vii[x] + "  viiiii: " + debug_table_viiiii[x] + "  vi: " + debug_table_vi[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  "); abort(x) }

function nullFunc_iii(x) { err("Invalid function pointer '" + x + "' called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("This pointer might make sense in another type signature: ii: " + debug_table_ii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  viii: " + debug_table_viii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  iidiiii: " + debug_table_iidiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  "); abort(x) }

function nullFunc_iiii(x) { err("Invalid function pointer '" + x + "' called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("This pointer might make sense in another type signature: iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiii: " + debug_table_iiiii[x] + "  viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiii: " + debug_table_viiiii[x] + "  iidiiii: " + debug_table_iidiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  "); abort(x) }

function nullFunc_iiiii(x) { err("Invalid function pointer '" + x + "' called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("This pointer might make sense in another type signature: iiii: " + debug_table_iiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  viiii: " + debug_table_viiii[x] + "  viii: " + debug_table_viii[x] + "  viiiii: " + debug_table_viiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  iidiiii: " + debug_table_iidiiii[x] + "  "); abort(x) }

function nullFunc_vi(x) { err("Invalid function pointer '" + x + "' called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("This pointer might make sense in another type signature: vii: " + debug_table_vii[x] + "  viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  ii: " + debug_table_ii[x] + "  iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iidiiii: " + debug_table_iidiiii[x] + "  "); abort(x) }

function nullFunc_vii(x) { err("Invalid function pointer '" + x + "' called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("This pointer might make sense in another type signature: vi: " + debug_table_vi[x] + "  viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  ii: " + debug_table_ii[x] + "  iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iidiiii: " + debug_table_iidiiii[x] + "  "); abort(x) }

function nullFunc_viii(x) { err("Invalid function pointer '" + x + "' called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("This pointer might make sense in another type signature: vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iidiiii: " + debug_table_iidiiii[x] + "  "); abort(x) }

function nullFunc_viiii(x) { err("Invalid function pointer '" + x + "' called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("This pointer might make sense in another type signature: viii: " + debug_table_viii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  iiii: " + debug_table_iiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iidiiii: " + debug_table_iidiiii[x] + "  "); abort(x) }

function nullFunc_viiiii(x) { err("Invalid function pointer '" + x + "' called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("This pointer might make sense in another type signature: viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iidiiii: " + debug_table_iidiiii[x] + "  "); abort(x) }

function nullFunc_viiiiii(x) { err("Invalid function pointer '" + x + "' called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("This pointer might make sense in another type signature: viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iidiiii: " + debug_table_iidiiii[x] + "  "); abort(x) }

var asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity }

var asmLibraryArg = {
  "abort": abort,
  "setTempRet0": setTempRet0,
  "getTempRet0": getTempRet0,
  "abortStackOverflow": abortStackOverflow,
  "nullFunc_ii": nullFunc_ii,
  "nullFunc_iidiiii": nullFunc_iidiiii,
  "nullFunc_iii": nullFunc_iii,
  "nullFunc_iiii": nullFunc_iiii,
  "nullFunc_iiiii": nullFunc_iiiii,
  "nullFunc_vi": nullFunc_vi,
  "nullFunc_vii": nullFunc_vii,
  "nullFunc_viii": nullFunc_viii,
  "nullFunc_viiii": nullFunc_viiii,
  "nullFunc_viiiii": nullFunc_viiiii,
  "nullFunc_viiiiii": nullFunc_viiiiii,
  "___assert_fail": ___assert_fail,
  "___cxa_uncaught_exception": ___cxa_uncaught_exception,
  "___gxx_personality_v0": ___gxx_personality_v0,
  "___lock": ___lock,
  "___setErrNo": ___setErrNo,
  "___syscall140": ___syscall140,
  "___syscall145": ___syscall145,
  "___syscall146": ___syscall146,
  "___syscall221": ___syscall221,
  "___syscall5": ___syscall5,
  "___syscall54": ___syscall54,
  "___syscall6": ___syscall6,
  "___unlock": ___unlock,
  "_emscripten_get_heap_size": _emscripten_get_heap_size,
  "_emscripten_memcpy_big": _emscripten_memcpy_big,
  "_emscripten_resize_heap": _emscripten_resize_heap,
  "abortOnCannotGrowMemory": abortOnCannotGrowMemory,
  "tempDoublePtr": tempDoublePtr,
  "DYNAMICTOP_PTR": DYNAMICTOP_PTR
}
// EMSCRIPTEN_START_ASM
var asm = (/** @suppress {uselessCode} */ function(global, env, buffer) {
'almost asm';

  var HEAP8 = new global.Int8Array(buffer),
  HEAP16 = new global.Int16Array(buffer),
  HEAP32 = new global.Int32Array(buffer),
  HEAPU8 = new global.Uint8Array(buffer),
  HEAPU16 = new global.Uint16Array(buffer),
  HEAPF32 = new global.Float32Array(buffer),
  HEAPF64 = new global.Float64Array(buffer),
  tempDoublePtr=env.tempDoublePtr|0,
  DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0,
  __THREW__ = 0,
  threwValue = 0,
  setjmpId = 0,
  tempInt = 0,
  tempBigInt = 0,
  tempBigIntS = 0,
  tempValue = 0,
  tempDouble = 0.0,
  nan = global.NaN,
  inf = global.Infinity,
  Math_abs=global.Math.abs,
  Math_imul=global.Math.imul,
  Math_clz32=global.Math.clz32,
  abort=env.abort,
  setTempRet0=env.setTempRet0,
  getTempRet0=env.getTempRet0,
  abortStackOverflow=env.abortStackOverflow,
  nullFunc_ii=env.nullFunc_ii,
  nullFunc_iidiiii=env.nullFunc_iidiiii,
  nullFunc_iii=env.nullFunc_iii,
  nullFunc_iiii=env.nullFunc_iiii,
  nullFunc_iiiii=env.nullFunc_iiiii,
  nullFunc_vi=env.nullFunc_vi,
  nullFunc_vii=env.nullFunc_vii,
  nullFunc_viii=env.nullFunc_viii,
  nullFunc_viiii=env.nullFunc_viiii,
  nullFunc_viiiii=env.nullFunc_viiiii,
  nullFunc_viiiiii=env.nullFunc_viiiiii,
  ___assert_fail=env.___assert_fail,
  ___cxa_uncaught_exception=env.___cxa_uncaught_exception,
  ___gxx_personality_v0=env.___gxx_personality_v0,
  ___lock=env.___lock,
  ___setErrNo=env.___setErrNo,
  ___syscall140=env.___syscall140,
  ___syscall145=env.___syscall145,
  ___syscall146=env.___syscall146,
  ___syscall221=env.___syscall221,
  ___syscall5=env.___syscall5,
  ___syscall54=env.___syscall54,
  ___syscall6=env.___syscall6,
  ___unlock=env.___unlock,
  _emscripten_get_heap_size=env._emscripten_get_heap_size,
  _emscripten_memcpy_big=env._emscripten_memcpy_big,
  _emscripten_resize_heap=env._emscripten_resize_heap,
  abortOnCannotGrowMemory=env.abortOnCannotGrowMemory,
  STACKTOP = 10928,
  STACK_MAX = 5253808,
  tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS

function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
    if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(size|0);

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function _main($argc,$argv) {
 $argc = $argc|0;
 $argv = $argv|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $argc$addr = 0, $argv$addr = 0, $call = 0, $call11 = 0, $call13 = 0, $call6 = 0, $cleanup$dest$slot = 0, $cmp = 0;
 var $current_usage = 0, $err = 0, $file_name = 0, $load_file = 0, $mem_tracker = 0, $memory_fn = 0, $module_fn = 0, $mul = 0, $params = 0, $print_fn = 0, $retval = 0, $source_len = 0, $source_len15 = 0, $source_len5 = 0, $tobool = 0, $tobool7 = 0, $user_data = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0;
 var $vararg_buffer6 = 0, $vm = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 784|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(784|0);
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $mem_tracker = sp + 752|0;
 $params = sp + 720|0;
 $vm = sp + 48|0;
 $load_file = sp + 40|0;
 $retval = 0;
 $argc$addr = $argc;
 $argv$addr = $argv;
 $file_name = 2332;
 ;HEAP32[$mem_tracker>>2]=0|0;HEAP32[$mem_tracker+4>>2]=0|0;
 __ZN7bifrost8VMParamsC2Ev($params);
 HEAP32[$params>>2] = 29;
 $print_fn = ((($params)) + 4|0);
 HEAP32[$print_fn>>2] = 30;
 $module_fn = ((($params)) + 8|0);
 HEAP32[$module_fn>>2] = 31;
 $memory_fn = ((($params)) + 12|0);
 HEAP32[$memory_fn>>2] = 32;
 $user_data = ((($params)) + 28|0);
 HEAP32[$user_data>>2] = $mem_tracker;
 __ZN7bifrost2VMC2ERK15BifrostVMParams($vm,$params);
 $call = (__ZNK7bifrost6VMViewcvP11BifrostVM_tEv($vm)|0);
 __ZL13moduleHandlerP11BifrostVM_tPKcS2_P21BifrostVMModuleLookUp($call,0,2332,$load_file);
 $0 = HEAP32[$load_file>>2]|0;
 $tobool = ($0|0)!=(0|0);
 if ($tobool) {
  $source_len = ((($load_file)) + 4|0);
  $1 = HEAP32[$source_len>>2]|0;
  $cmp = ($1|0)==(0);
  if (!($cmp)) {
   (__ZN7bifrost6VMView11stackResizeEm($vm,1)|0);
   __ZN7bifrost6VMView10moduleLoadEmj($vm,0,-1);
   $2 = HEAP32[$load_file>>2]|0;
   $source_len5 = ((($load_file)) + 4|0);
   $3 = HEAP32[$source_len5>>2]|0;
   $call6 = (__ZN7bifrost6VMView12execInModuleEPKcS2_m($vm,0,$2,$3)|0);
   $err = $call6;
   $4 = $err;
   $tobool7 = ($4|0)!=(0);
   if ($tobool7) {
    __ZL12waitForInputv();
    $5 = $err;
    $retval = $5;
    $cleanup$dest$slot = 1;
    __ZN7bifrost2VMD2Ev($vm);
    $10 = $retval;
    STACKTOP = sp;return ($10|0);
   } else {
    $call11 = (__ZNK7bifrost6VMViewcvP11BifrostVM_tEv($vm)|0);
    $call13 = (_bfVM_userData($call11)|0);
    $6 = HEAP32[$load_file>>2]|0;
    $source_len15 = ((($load_file)) + 4|0);
    $7 = HEAP32[$source_len15>>2]|0;
    $add = (($7) + 1)|0;
    $mul = $add;
    (__ZL13memoryHandlerPvS_mm($call13,$6,$mul,0)|0);
    (_printf(2373,$vararg_buffer1)|0);
    $8 = HEAP32[$mem_tracker>>2]|0;
    HEAP32[$vararg_buffer3>>2] = $8;
    (_printf(2388,$vararg_buffer3)|0);
    $current_usage = ((($mem_tracker)) + 4|0);
    $9 = HEAP32[$current_usage>>2]|0;
    HEAP32[$vararg_buffer6>>2] = $9;
    (_printf(2416,$vararg_buffer6)|0);
    __ZL12waitForInputv();
    $retval = 0;
    $cleanup$dest$slot = 1;
    __ZN7bifrost2VMD2Ev($vm);
    $10 = $retval;
    STACKTOP = sp;return ($10|0);
   }
  }
 }
 HEAP32[$vararg_buffer>>2] = 2332;
 (_printf(2352,$vararg_buffer)|0);
 $retval = 1;
 $cleanup$dest$slot = 1;
 __ZN7bifrost2VMD2Ev($vm);
 $10 = $retval;
 STACKTOP = sp;return ($10|0);
}
function __ZN7bifrost8VMParamsC2Ev($this) {
 $this = $this|0;
 var $this$addr = 0, $this1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $this$addr = $this;
 $this1 = $this$addr;
 ;HEAP32[$this1>>2]=0|0;HEAP32[$this1+4>>2]=0|0;HEAP32[$this1+8>>2]=0|0;HEAP32[$this1+12>>2]=0|0;HEAP32[$this1+16>>2]=0|0;HEAP32[$this1+20>>2]=0|0;HEAP32[$this1+24>>2]=0|0;HEAP32[$this1+28>>2]=0|0;
 _bfVMParams_init($this1);
 STACKTOP = sp;return;
}
function __ZL12errorHandlerP11BifrostVM_t14BifrostVMErroriPKc($0,$err,$line_no,$message) {
 $0 = $0|0;
 $err = $err|0;
 $line_no = $line_no|0;
 $message = $message|0;
 var $$addr = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $err$addr = 0, $err_type_str = 0, $line_no$addr = 0, $message$addr = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $$addr = $0;
 $err$addr = $err;
 $line_no$addr = $line_no;
 $message$addr = $message;
 $1 = $err$addr;
 do {
  switch ($1|0) {
  case 1:  {
   $err_type_str = 2444;
   break;
  }
  case 2:  {
   $err_type_str = 2448;
   break;
  }
  case 3:  {
   $err_type_str = 2456;
   break;
  }
  case 4:  {
   $err_type_str = 2462;
   break;
  }
  case 5:  {
   $err_type_str = 2471;
   break;
  }
  case 6:  {
   $err_type_str = 2495;
   break;
  }
  case 7:  {
   $err_type_str = 2517;
   break;
  }
  case 8:  {
   $err_type_str = 2532;
   break;
  }
  case 9:  {
   $err_type_str = 2545;
   break;
  }
  case 10:  {
   $err_type_str = 2557;
   break;
  }
  case 11:  {
   $err_type_str = 2567;
   break;
  }
  case 12:  {
   $err_type_str = 2573;
   break;
  }
  default: {
   $err_type_str = 2583;
  }
  }
 } while(0);
 $2 = $err_type_str;
 $3 = $line_no$addr;
 $4 = $message$addr;
 HEAP32[$vararg_buffer>>2] = $2;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $3;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $4;
 (_printf(2588,$vararg_buffer)|0);
 STACKTOP = sp;return;
}
function __ZL12printHandlerP11BifrostVM_tPKc($0,$message) {
 $0 = $0|0;
 $message = $message|0;
 var $$addr = 0, $1 = 0, $message$addr = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $$addr = $0;
 $message$addr = $message;
 $1 = $message$addr;
 HEAP32[$vararg_buffer>>2] = $1;
 (_printf(2611,$vararg_buffer)|0);
 STACKTOP = sp;return;
}
function __ZL13moduleHandlerP11BifrostVM_tPKcS2_P21BifrostVMModuleLookUp($vm,$0,$module,$out) {
 $vm = $vm|0;
 $0 = $0|0;
 $module = $module|0;
 $out = $out|0;
 var $$addr = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $add = 0, $arrayidx = 0, $buffer = 0, $call = 0, $call10 = 0, $call4 = 0, $call9 = 0, $cmp = 0, $file = 0, $file_size = 0, $module$addr = 0, $mul = 0, $out$addr = 0, $source_len = 0, $tobool = 0, $tobool11 = 0, $vm$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vm$addr = $vm;
 $$addr = $0;
 $module$addr = $module;
 $out$addr = $out;
 $1 = $module$addr;
 $call = (_fopen($1,2615)|0);
 $file = $call;
 $buffer = 0;
 $file_size = 0;
 $2 = $file;
 $tobool = ($2|0)!=(0|0);
 if (!($tobool)) {
  $16 = $buffer;
  $17 = $out$addr;
  HEAP32[$17>>2] = $16;
  $18 = $file_size;
  $19 = $out$addr;
  $source_len = ((($19)) + 4|0);
  HEAP32[$source_len>>2] = $18;
  STACKTOP = sp;return;
 }
 $3 = $file;
 (_fseek($3,0,2)|0);
 $4 = $file;
 $call4 = (_ftell($4)|0);
 $file_size = $call4;
 $5 = $file_size;
 $cmp = ($5|0)!=(-1);
 do {
  if ($cmp) {
   $6 = $file;
   (_fseek($6,0,0)|0);
   $7 = $vm$addr;
   $call9 = (_bfVM_userData($7)|0);
   $8 = $file_size;
   $add = (($8) + 1)|0;
   $mul = $add;
   $call10 = (__ZL13memoryHandlerPvS_mm($call9,0,0,$mul)|0);
   $buffer = $call10;
   $9 = $buffer;
   $tobool11 = ($9|0)!=(0|0);
   if ($tobool11) {
    $10 = $buffer;
    $11 = $file_size;
    $12 = $file;
    (_fread($10,1,$11,$12)|0);
    $13 = $buffer;
    $14 = $file_size;
    $arrayidx = (($13) + ($14)|0);
    HEAP8[$arrayidx>>0] = 0;
    break;
   } else {
    $file_size = 0;
    break;
   }
  } else {
   $file_size = 0;
  }
 } while(0);
 $15 = $file;
 (_fclose($15)|0);
 $16 = $buffer;
 $17 = $out$addr;
 HEAP32[$17>>2] = $16;
 $18 = $file_size;
 $19 = $out$addr;
 $source_len = ((($19)) + 4|0);
 HEAP32[$source_len>>2] = $18;
 STACKTOP = sp;return;
}
function __ZL13memoryHandlerPvS_mm($user_data,$ptr,$old_size,$new_size) {
 $user_data = $user_data|0;
 $ptr = $ptr|0;
 $old_size = $old_size|0;
 $new_size = $new_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $add = 0, $call = 0, $call14 = 0, $cmp = 0, $cmp10 = 0, $cmp5 = 0, $cmp6 = 0, $cmp8 = 0, $cond = 0, $current_usage = 0, $current_usage1 = 0, $current_usage2 = 0, $current_usage3 = 0, $mum_tracker = 0, $new_size$addr = 0, $old_size$addr = 0, $or$cond = 0, $ptr$addr = 0, $retval = 0;
 var $sub = 0, $user_data$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $user_data$addr = $user_data;
 $ptr$addr = $ptr;
 $old_size$addr = $old_size;
 $new_size$addr = $new_size;
 $0 = $user_data$addr;
 $mum_tracker = $0;
 $1 = $old_size$addr;
 $2 = $mum_tracker;
 $current_usage = ((($2)) + 4|0);
 $3 = HEAP32[$current_usage>>2]|0;
 $sub = (($3) - ($1))|0;
 HEAP32[$current_usage>>2] = $sub;
 $4 = $new_size$addr;
 $5 = $mum_tracker;
 $current_usage1 = ((($5)) + 4|0);
 $6 = HEAP32[$current_usage1>>2]|0;
 $add = (($6) + ($4))|0;
 HEAP32[$current_usage1>>2] = $add;
 $7 = $mum_tracker;
 $current_usage2 = ((($7)) + 4|0);
 $8 = HEAP32[$current_usage2>>2]|0;
 $9 = $mum_tracker;
 $10 = HEAP32[$9>>2]|0;
 $cmp = ($8>>>0)>($10>>>0);
 if ($cmp) {
  $11 = $mum_tracker;
  $current_usage3 = ((($11)) + 4|0);
  $12 = HEAP32[$current_usage3>>2]|0;
  $13 = $mum_tracker;
  HEAP32[$13>>2] = $12;
 }
 $14 = $old_size$addr;
 $cmp5 = ($14|0)==(0);
 $15 = $ptr$addr;
 $cmp6 = ($15|0)==(0|0);
 $or$cond = $cmp5 | $cmp6;
 $16 = $new_size$addr;
 if ($or$cond) {
  $cmp8 = ($16|0)!=(0);
  if ($cmp8) {
   $17 = $new_size$addr;
   $call = (_malloc($17)|0);
   $cond = $call;
  } else {
   $cond = 0;
  }
  $retval = $cond;
  $20 = $retval;
  STACKTOP = sp;return ($20|0);
 }
 $cmp10 = ($16|0)==(0);
 $18 = $ptr$addr;
 if ($cmp10) {
  _free($18);
  $retval = 0;
  $20 = $retval;
  STACKTOP = sp;return ($20|0);
 } else {
  $19 = $new_size$addr;
  $call14 = (_realloc($18,$19)|0);
  $retval = $call14;
  $20 = $retval;
  STACKTOP = sp;return ($20|0);
 }
 return (0)|0;
}
function __ZN7bifrost2VMC2ERK15BifrostVMParams($this,$params) {
 $this = $this|0;
 $params = $params|0;
 var $0 = 0, $params$addr = 0, $this$addr = 0, $this1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $this$addr = $this;
 $params$addr = $params;
 $this1 = $this$addr;
 __ZN7bifrost2VMC2Ev($this1);
 $0 = $params$addr;
 __ZN7bifrost2VM6createERK15BifrostVMParams($this1,$0);
 STACKTOP = sp;return;
}
function __ZNK7bifrost6VMViewcvP11BifrostVM_tEv($this) {
 $this = $this|0;
 var $0 = 0, $this$addr = 0, $this1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $this$addr = $this;
 $this1 = $this$addr;
 $0 = HEAP32[$this1>>2]|0;
 STACKTOP = sp;return ($0|0);
}
function __ZN7bifrost6VMView11stackResizeEm($this,$size) {
 $this = $this|0;
 $size = $size|0;
 var $0 = 0, $call = 0, $call2 = 0, $size$addr = 0, $this$addr = 0, $this1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $this$addr = $this;
 $size$addr = $size;
 $this1 = $this$addr;
 $call = (__ZN7bifrost6VMView4selfEv($this1)|0);
 $0 = $size$addr;
 $call2 = (_bfVM_stackResize($call,$0)|0);
 STACKTOP = sp;return ($call2|0);
}
function __ZN7bifrost6VMView10moduleLoadEmj($this,$idx,$std_module_flags) {
 $this = $this|0;
 $idx = $idx|0;
 $std_module_flags = $std_module_flags|0;
 var $0 = 0, $1 = 0, $call = 0, $idx$addr = 0, $std_module_flags$addr = 0, $this$addr = 0, $this1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $this$addr = $this;
 $idx$addr = $idx;
 $std_module_flags$addr = $std_module_flags;
 $this1 = $this$addr;
 $call = (__ZN7bifrost6VMView4selfEv($this1)|0);
 $0 = $idx$addr;
 $1 = $std_module_flags$addr;
 _bfVM_moduleLoadStd($call,$0,$1);
 STACKTOP = sp;return;
}
function __ZN7bifrost6VMView12execInModuleEPKcS2_m($this,$module,$source,$source_length) {
 $this = $this|0;
 $module = $module|0;
 $source = $source|0;
 $source_length = $source_length|0;
 var $0 = 0, $1 = 0, $2 = 0, $call = 0, $call2 = 0, $module$addr = 0, $source$addr = 0, $source_length$addr = 0, $this$addr = 0, $this1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $this$addr = $this;
 $module$addr = $module;
 $source$addr = $source;
 $source_length$addr = $source_length;
 $this1 = $this$addr;
 $call = (__ZN7bifrost6VMView4selfEv($this1)|0);
 $0 = $module$addr;
 $1 = $source$addr;
 $2 = $source_length$addr;
 $call2 = (_bfVM_execInModule($call,$0,$1,$2)|0);
 STACKTOP = sp;return ($call2|0);
}
function __ZL12waitForInputv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN7bifrost2VMD2Ev($this) {
 $this = $this|0;
 var $this$addr = 0, $this1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $this$addr = $this;
 $this1 = $this$addr;
 __ZN7bifrost2VM7destroyEv($this1);
 STACKTOP = sp;return;
}
function __ZN7bifrost2VMC2Ev($this) {
 $this = $this|0;
 var $m_VM = 0, $this$addr = 0, $this1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $this$addr = $this;
 $this1 = $this$addr;
 __ZN7bifrost6VMViewC2EP11BifrostVM_t($this1,0);
 $m_VM = ((($this1)) + 4|0);
 _memset(($m_VM|0),0,664)|0;
 STACKTOP = sp;return;
}
function __ZN7bifrost2VM6createERK15BifrostVMParams($this,$params) {
 $this = $this|0;
 $params = $params|0;
 var $0 = 0, $call = 0, $call2 = 0, $m_VM = 0, $params$addr = 0, $this$addr = 0, $this1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $this$addr = $this;
 $params$addr = $params;
 $this1 = $this$addr;
 $call = (__ZNK7bifrost6VMView7isValidEv($this1)|0);
 if ($call) {
  STACKTOP = sp;return;
 }
 $m_VM = ((($this1)) + 4|0);
 HEAP32[$this1>>2] = $m_VM;
 $call2 = (__ZN7bifrost6VMView4selfEv($this1)|0);
 $0 = $params$addr;
 _bfVM_ctor($call2,$0);
 STACKTOP = sp;return;
}
function __ZN7bifrost6VMViewC2EP11BifrostVM_t($this,$self) {
 $this = $this|0;
 $self = $self|0;
 var $0 = 0, $self$addr = 0, $this$addr = 0, $this1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $this$addr = $this;
 $self$addr = $self;
 $this1 = $this$addr;
 $0 = $self$addr;
 HEAP32[$this1>>2] = $0;
 STACKTOP = sp;return;
}
function __ZNK7bifrost6VMView7isValidEv($this) {
 $this = $this|0;
 var $0 = 0, $cmp = 0, $this$addr = 0, $this1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $this$addr = $this;
 $this1 = $this$addr;
 $0 = HEAP32[$this1>>2]|0;
 $cmp = ($0|0)!=(0|0);
 STACKTOP = sp;return ($cmp|0);
}
function __ZN7bifrost6VMView4selfEv($this) {
 $this = $this|0;
 var $0 = 0, $this$addr = 0, $this1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $this$addr = $this;
 $this1 = $this$addr;
 $0 = HEAP32[$this1>>2]|0;
 STACKTOP = sp;return ($0|0);
}
function __ZN7bifrost2VM7destroyEv($this) {
 $this = $this|0;
 var $call = 0, $call2 = 0, $this$addr = 0, $this1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $this$addr = $this;
 $this1 = $this$addr;
 $call = (__ZNK7bifrost6VMView7isValidEv($this1)|0);
 if (!($call)) {
  STACKTOP = sp;return;
 }
 $call2 = (__ZN7bifrost6VMView4selfEv($this1)|0);
 _bfVM_dtor($call2);
 HEAP32[$this1>>2] = 0;
 STACKTOP = sp;return;
}
function _bfVM_xSetVariable($variables,$vm,$name,$0,$1) {
 $variables = $variables|0;
 $vm = $vm|0;
 $name = $name|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $arrayidx = 0, $arrayidx10 = 0, $arrayidx5 = 0, $arrayidx7 = 0, $arrayidx8 = 0, $call = 0, $call1 = 0, $cmp = 0, $cmp2 = 0, $i = 0, $idx = 0;
 var $inc = 0, $name$byval_copy = 0, $new_size = 0, $old_size = 0, $symbols = 0, $value$addr = 0, $value11 = 0, $value6 = 0, $variables$addr = 0, $vm$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $name$byval_copy = sp + 32|0;
 $value$addr = sp;
 $variables$addr = $variables;
 $vm$addr = $vm;
 $2 = $value$addr;
 $3 = $2;
 HEAP32[$3>>2] = $0;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = $1;
 $6 = $vm$addr;
 ;HEAP32[$name$byval_copy>>2]=HEAP32[$name>>2]|0;HEAP32[$name$byval_copy+4>>2]=HEAP32[$name+4>>2]|0;
 $call = (_bfVM_getSymbol($6,$name$byval_copy)|0);
 $idx = $call;
 $7 = $variables$addr;
 $call1 = (_Array_size($7)|0);
 $old_size = $call1;
 $8 = $idx;
 $9 = $old_size;
 $cmp = ($8>>>0)>=($9>>>0);
 L1: do {
  if ($cmp) {
   $10 = $idx;
   $add = (($10) + 1)|0;
   $new_size = $add;
   $11 = $variables$addr;
   $12 = $new_size;
   _Array_resize($11,$12);
   $13 = $old_size;
   $i = $13;
   while(1) {
    $14 = $i;
    $15 = $new_size;
    $cmp2 = ($14>>>0)<($15>>>0);
    if (!($cmp2)) {
     break L1;
    }
    $16 = $variables$addr;
    $17 = HEAP32[$16>>2]|0;
    $18 = $i;
    $arrayidx = (($17) + ($18<<4)|0);
    HEAP32[$arrayidx>>2] = 2618;
    $19 = (_bfVMValue_fromNull()|0);
    $20 = (getTempRet0() | 0);
    $21 = $variables$addr;
    $22 = HEAP32[$21>>2]|0;
    $23 = $i;
    $arrayidx5 = (($22) + ($23<<4)|0);
    $value6 = ((($arrayidx5)) + 8|0);
    $24 = $value6;
    $25 = $24;
    HEAP32[$25>>2] = $19;
    $26 = (($24) + 4)|0;
    $27 = $26;
    HEAP32[$27>>2] = $20;
    $28 = $i;
    $inc = (($28) + 1)|0;
    $i = $inc;
   }
  }
 } while(0);
 $29 = $vm$addr;
 $symbols = ((($29)) + 12|0);
 $30 = HEAP32[$symbols>>2]|0;
 $31 = $idx;
 $arrayidx7 = (($30) + ($31<<2)|0);
 $32 = HEAP32[$arrayidx7>>2]|0;
 $33 = $variables$addr;
 $34 = HEAP32[$33>>2]|0;
 $35 = $idx;
 $arrayidx8 = (($34) + ($35<<4)|0);
 HEAP32[$arrayidx8>>2] = $32;
 $36 = $value$addr;
 $37 = $36;
 $38 = HEAP32[$37>>2]|0;
 $39 = (($36) + 4)|0;
 $40 = $39;
 $41 = HEAP32[$40>>2]|0;
 $42 = $variables$addr;
 $43 = HEAP32[$42>>2]|0;
 $44 = $idx;
 $arrayidx10 = (($43) + ($44<<4)|0);
 $value11 = ((($arrayidx10)) + 8|0);
 $45 = $value11;
 $46 = $45;
 HEAP32[$46>>2] = $38;
 $47 = (($45) + 4)|0;
 $48 = $47;
 HEAP32[$48>>2] = $41;
 $49 = $idx;
 STACKTOP = sp;return ($49|0);
}
function _bfVM_getSymbol($self,$name) {
 $self = $self|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $call = 0, $call2 = 0, $call4 = 0, $call5 = 0, $call6 = 0, $cmp = 0, $idx = 0, $self$addr = 0, $sym = 0, $symbols = 0, $symbols1 = 0, $symbols3 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self$addr = $self;
 $0 = $self$addr;
 $symbols = ((($0)) + 12|0);
 $call = (_Array_find($symbols,$name,33)|0);
 $idx = $call;
 $1 = $idx;
 $cmp = ($1|0)==(-1);
 if (!($cmp)) {
  $6 = $idx;
  STACKTOP = sp;return ($6|0);
 }
 $2 = $self$addr;
 $symbols1 = ((($2)) + 12|0);
 $call2 = (_Array_size($symbols1)|0);
 $idx = $call2;
 $3 = $self$addr;
 $symbols3 = ((($3)) + 12|0);
 $call4 = (_Array_emplace($symbols3)|0);
 $sym = $call4;
 $4 = HEAP32[$name>>2]|0;
 $call5 = (_bfStringRange_length($name)|0);
 $call6 = (_String_newLen($4,$call5)|0);
 $5 = $sym;
 HEAP32[$5>>2] = $call6;
 $6 = $idx;
 STACKTOP = sp;return ($6|0);
}
function _Array_size($self) {
 $self = $self|0;
 var $0 = 0, $1 = 0, $2 = 0, $call = 0, $self$addr = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self$addr = $self;
 $0 = $self$addr;
 $1 = HEAP32[$0>>2]|0;
 $call = (_Array_getHeader($1)|0);
 $size = ((($call)) + 4|0);
 $2 = HEAP32[$size>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function _Array_resize($self,$size) {
 $self = $self|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $call = 0, $self$addr = 0, $size$addr = 0, $size1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self$addr = $self;
 $size$addr = $size;
 $0 = $self$addr;
 $1 = $size$addr;
 _Array_reserve($0,$1);
 $2 = $size$addr;
 $3 = $self$addr;
 $4 = HEAP32[$3>>2]|0;
 $call = (_Array_getHeader($4)|0);
 $size1 = ((($call)) + 4|0);
 HEAP32[$size1>>2] = $2;
 STACKTOP = sp;return;
}
function _bfVMValue_fromNull() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 setTempRet0((2147221504) | 0);
 return 1;
}
function _Array_reserve($self,$num_elements) {
 $self = $self|0;
 $num_elements = $num_elements|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0, $add5 = 0, $add8 = 0, $call = 0, $call9 = 0, $cmp = 0, $cmp3 = 0, $cmp6 = 0, $cond = 0, $header = 0, $mul = 0, $new_capacity = 0, $new_header = 0, $num_elements$addr = 0;
 var $self$addr = 0, $shr = 0, $stride = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $self$addr = $self;
 $num_elements$addr = $num_elements;
 $0 = $self$addr;
 $1 = HEAP32[$0>>2]|0;
 $call = (_Array_getHeader($1)|0);
 $header = $call;
 $2 = $header;
 $3 = HEAP32[$2>>2]|0;
 $4 = $num_elements$addr;
 $cmp = ($3>>>0)<($4>>>0);
 if (!($cmp)) {
  STACKTOP = sp;return;
 }
 $5 = $header;
 $6 = HEAP32[$5>>2]|0;
 $shr = $6 >>> 3;
 $7 = $header;
 $8 = HEAP32[$7>>2]|0;
 $cmp3 = ($8>>>0)<(9);
 $cond = $cmp3 ? 3 : 6;
 $add = (($shr) + ($cond))|0;
 $9 = $header;
 $10 = HEAP32[$9>>2]|0;
 $add5 = (($add) + ($10))|0;
 $new_capacity = $add5;
 $11 = $new_capacity;
 $12 = $num_elements$addr;
 $cmp6 = ($11>>>0)<($12>>>0);
 if ($cmp6) {
  $13 = $num_elements$addr;
  $new_capacity = $13;
 }
 $14 = $header;
 $15 = $new_capacity;
 $16 = $header;
 $stride = ((($16)) + 8|0);
 $17 = HEAP32[$stride>>2]|0;
 $mul = Math_imul($15, $17)|0;
 $add8 = (12 + ($mul))|0;
 $call9 = (_realloc($14,$add8)|0);
 $new_header = $call9;
 $18 = $new_header;
 $tobool = ($18|0)!=(0|0);
 if ($tobool) {
  $19 = $new_capacity;
  $20 = $new_header;
  HEAP32[$20>>2] = $19;
  $21 = $new_header;
  $add$ptr = ((($21)) + 12|0);
  $22 = $self$addr;
  HEAP32[$22>>2] = $add$ptr;
  STACKTOP = sp;return;
 } else {
  $23 = $self$addr;
  _Array_delete($23);
  $24 = $self$addr;
  HEAP32[$24>>2] = 0;
  STACKTOP = sp;return;
 }
}
function _Array_getHeader($self) {
 $self = $self|0;
 var $0 = 0, $add$ptr = 0, $self$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self$addr = $self;
 $0 = $self$addr;
 $add$ptr = ((($0)) + -12|0);
 STACKTOP = sp;return ($add$ptr|0);
}
function _Array_delete($self) {
 $self = $self|0;
 var $0 = 0, $1 = 0, $call = 0, $self$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self$addr = $self;
 $0 = $self$addr;
 $1 = HEAP32[$0>>2]|0;
 $call = (_Array_getHeader($1)|0);
 _free($call);
 STACKTOP = sp;return;
}
function _bfVM_getSymbolHelper($lhs,$rhs) {
 $lhs = $lhs|0;
 $rhs = $rhs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call1 = 0, $call2 = 0, $cmp = 0, $cmp3 = 0, $land$ext = 0, $lhs$addr = 0;
 var $lhs_len = 0, $name = 0, $rhs$addr = 0, $rhs_len = 0, $sym = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $lhs$addr = $lhs;
 $rhs$addr = $rhs;
 $0 = $lhs$addr;
 $name = $0;
 $1 = $rhs$addr;
 $sym = $1;
 $2 = $name;
 $call = (_bfStringRange_length($2)|0);
 $lhs_len = $call;
 $3 = $sym;
 $4 = HEAP32[$3>>2]|0;
 $call1 = (_String_length($4)|0);
 $rhs_len = $call1;
 $5 = $lhs_len;
 $6 = $rhs_len;
 $cmp = ($5|0)==($6|0);
 if (!($cmp)) {
  $12 = 0;
  $land$ext = $12&1;
  STACKTOP = sp;return ($land$ext|0);
 }
 $7 = $sym;
 $8 = HEAP32[$7>>2]|0;
 $9 = $name;
 $10 = HEAP32[$9>>2]|0;
 $11 = $lhs_len;
 $call2 = (_String_ccmpn($8,$10,$11)|0);
 $cmp3 = ($call2|0)==(0);
 $12 = $cmp3;
 $land$ext = $12&1;
 STACKTOP = sp;return ($land$ext|0);
}
function _Array_find($self,$key,$compare) {
 $self = $self|0;
 $key = $key|0;
 $compare = $compare|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $call = 0, $call1 = 0, $call13 = 0, $call14 = 0, $call2 = 0, $call5 = 0, $cmp = 0, $cmp11 = 0, $compare$addr = 0, $data = 0, $i = 0, $i9 = 0, $inc = 0, $inc19 = 0, $key$addr = 0, $key8 = 0, $len = 0, $retval = 0, $self$addr = 0, $stride = 0;
 var $stride6 = 0, $tobool = 0, $tobool15 = 0, $tobool3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $data = sp + 8|0;
 $self$addr = $self;
 $key$addr = $key;
 $compare$addr = $compare;
 $0 = $self$addr;
 $call = (_Array_size($0)|0);
 $len = $call;
 $1 = $compare$addr;
 $tobool = ($1|0)!=(0|0);
 L1: do {
  if ($tobool) {
   $i = 0;
   while(1) {
    $2 = $i;
    $3 = $len;
    $cmp = ($2>>>0)<($3>>>0);
    if (!($cmp)) {
     break L1;
    }
    $4 = $compare$addr;
    $5 = $key$addr;
    $6 = $self$addr;
    $7 = $i;
    $call1 = (_Array_at($6,$7)|0);
    $call2 = (FUNCTION_TABLE_iii[$4 & 63]($5,$call1)|0);
    $tobool3 = ($call2|0)!=(0);
    $8 = $i;
    if ($tobool3) {
     break;
    }
    $inc = (($8) + 1)|0;
    $i = $inc;
   }
   $retval = $8;
   $19 = $retval;
   STACKTOP = sp;return ($19|0);
  } else {
   $9 = $self$addr;
   $10 = HEAP32[$9>>2]|0;
   $call5 = (_Array_getHeader($10)|0);
   $stride6 = ((($call5)) + 8|0);
   $11 = HEAP32[$stride6>>2]|0;
   $stride = $11;
   $12 = $stride;
   HEAP32[$data>>2] = $12;
   $key8 = ((($data)) + 4|0);
   $13 = $key$addr;
   HEAP32[$key8>>2] = $13;
   $i9 = 0;
   while(1) {
    $14 = $i9;
    $15 = $len;
    $cmp11 = ($14>>>0)<($15>>>0);
    if (!($cmp11)) {
     break L1;
    }
    $16 = $self$addr;
    $17 = $i9;
    $call13 = (_Array_at($16,$17)|0);
    $call14 = (_Array_findDefaultCompare($data,$call13)|0);
    $tobool15 = ($call14|0)!=(0);
    $18 = $i9;
    if ($tobool15) {
     break;
    }
    $inc19 = (($18) + 1)|0;
    $i9 = $inc19;
   }
   $retval = $18;
   $19 = $retval;
   STACKTOP = sp;return ($19|0);
  }
 } while(0);
 $retval = -1;
 $19 = $retval;
 STACKTOP = sp;return ($19|0);
}
function _Array_emplace($self) {
 $self = $self|0;
 var $0 = 0, $call = 0, $self$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self$addr = $self;
 $0 = $self$addr;
 $call = (_Array_emplaceN($0,1)|0);
 STACKTOP = sp;return ($call|0);
}
function _bfStringRange_length($self) {
 $self = $self|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $end = 0, $self$addr = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self$addr = $self;
 $0 = $self$addr;
 $end = ((($0)) + 4|0);
 $1 = HEAP32[$end>>2]|0;
 $2 = $self$addr;
 $3 = HEAP32[$2>>2]|0;
 $sub$ptr$lhs$cast = $1;
 $sub$ptr$rhs$cast = $3;
 $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
 STACKTOP = sp;return ($sub$ptr$sub|0);
}
function _String_newLen($initial_data,$string_length) {
 $initial_data = $initial_data|0;
 $string_length = $string_length|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0;
 var $add1 = 0, $arrayidx = 0, $call = 0, $data = 0, $initial_data$addr = 0, $length = 0, $or$cond = 0, $retval = 0, $self = 0, $str_capacity = 0, $string_length$addr = 0, $tobool = 0, $tobool2 = 0, $tobool3 = 0, $total_size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $initial_data$addr = $initial_data;
 $string_length$addr = $string_length;
 $0 = $string_length$addr;
 $add = (($0) + 1)|0;
 $str_capacity = $add;
 $1 = $str_capacity;
 $add1 = (8 + ($1))|0;
 $total_size = $add1;
 $2 = $total_size;
 $call = (_malloc($2)|0);
 $self = $call;
 $3 = $self;
 $tobool = ($3|0)!=(0|0);
 if (!($tobool)) {
  $retval = 0;
  $17 = $retval;
  STACKTOP = sp;return ($17|0);
 }
 $4 = $str_capacity;
 $5 = $self;
 HEAP32[$5>>2] = $4;
 $6 = $string_length$addr;
 $7 = $self;
 $length = ((($7)) + 4|0);
 HEAP32[$length>>2] = $6;
 $8 = $self;
 $add$ptr = ((($8)) + 8|0);
 $data = $add$ptr;
 $9 = $initial_data$addr;
 $tobool2 = ($9|0)!=(0|0);
 $10 = $string_length$addr;
 $tobool3 = ($10|0)!=(0);
 $or$cond = $tobool2 & $tobool3;
 if ($or$cond) {
  $11 = $data;
  $12 = $initial_data$addr;
  $13 = $string_length$addr;
  _memcpy(($11|0),($12|0),($13|0))|0;
 }
 $14 = $data;
 $15 = $string_length$addr;
 $arrayidx = (($14) + ($15)|0);
 HEAP8[$arrayidx>>0] = 0;
 $16 = $data;
 $retval = $16;
 $17 = $retval;
 STACKTOP = sp;return ($17|0);
}
function _Array_emplaceN($self,$num_elements) {
 $self = $self|0;
 $num_elements = $num_elements|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add3 = 0, $call = 0, $call1 = 0, $call2 = 0;
 var $header = 0, $mul = 0, $new_element = 0, $num_elements$addr = 0, $old_size = 0, $self$addr = 0, $size = 0, $stride = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $self$addr = $self;
 $num_elements$addr = $num_elements;
 $0 = $self$addr;
 $call = (_Array_size($0)|0);
 $old_size = $call;
 $1 = $self$addr;
 $2 = $old_size;
 $3 = $num_elements$addr;
 $add = (($2) + ($3))|0;
 _Array_reserve($1,$add);
 $4 = $self$addr;
 $call1 = (_Array_end($4)|0);
 $new_element = $call1;
 $5 = $self$addr;
 $6 = HEAP32[$5>>2]|0;
 $call2 = (_Array_getHeader($6)|0);
 $header = $call2;
 $7 = $new_element;
 $8 = $header;
 $stride = ((($8)) + 8|0);
 $9 = HEAP32[$stride>>2]|0;
 $10 = $num_elements$addr;
 $mul = Math_imul($9, $10)|0;
 _memset(($7|0),0,($mul|0))|0;
 $11 = $num_elements$addr;
 $12 = $header;
 $size = ((($12)) + 4|0);
 $13 = HEAP32[$size>>2]|0;
 $add3 = (($13) + ($11))|0;
 HEAP32[$size>>2] = $add3;
 $14 = $new_element;
 STACKTOP = sp;return ($14|0);
}
function _Array_end($self) {
 $self = $self|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $add$ptr = 0, $call = 0, $header = 0, $mul = 0, $self$addr = 0, $size = 0, $stride = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self$addr = $self;
 $0 = $self$addr;
 $1 = HEAP32[$0>>2]|0;
 $call = (_Array_getHeader($1)|0);
 $header = $call;
 $2 = $self$addr;
 $3 = HEAP32[$2>>2]|0;
 $4 = $header;
 $size = ((($4)) + 4|0);
 $5 = HEAP32[$size>>2]|0;
 $6 = $header;
 $stride = ((($6)) + 8|0);
 $7 = HEAP32[$stride>>2]|0;
 $mul = Math_imul($5, $7)|0;
 $add$ptr = (($3) + ($mul)|0);
 STACKTOP = sp;return ($add$ptr|0);
}
function _Array_at($self,$index) {
 $self = $self|0;
 $index = $index|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$ptr = 0, $call = 0, $call1 = 0, $cmp = 0, $conv = 0, $index$addr = 0, $is_in_bounds = 0, $mul = 0, $self$addr = 0, $size = 0;
 var $stride = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self$addr = $self;
 $index$addr = $index;
 $0 = $self$addr;
 $call = (_Array_size($0)|0);
 $size = $call;
 $1 = $index$addr;
 $2 = $size;
 $cmp = ($1>>>0)<($2>>>0);
 $conv = $cmp&1;
 $is_in_bounds = $conv;
 $3 = $is_in_bounds;
 $tobool = ($3|0)!=(0);
 if ($tobool) {
  $4 = $self$addr;
  $5 = HEAP32[$4>>2]|0;
  $6 = $self$addr;
  $7 = HEAP32[$6>>2]|0;
  $call1 = (_Array_getHeader($7)|0);
  $stride = ((($call1)) + 8|0);
  $8 = HEAP32[$stride>>2]|0;
  $9 = $index$addr;
  $mul = Math_imul($8, $9)|0;
  $add$ptr = (($5) + ($mul)|0);
  STACKTOP = sp;return ($add$ptr|0);
 } else {
  ___assert_fail((2631|0),(2696|0),228,(2745|0));
  // unreachable;
 }
 return (0)|0;
}
function _Array_findDefaultCompare($lhs,$rhs) {
 $lhs = $lhs|0;
 $rhs = $rhs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $call = 0, $cmp = 0, $conv = 0, $data = 0, $key = 0, $lhs$addr = 0, $rhs$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $lhs$addr = $lhs;
 $rhs$addr = $rhs;
 $0 = $lhs$addr;
 $data = $0;
 $1 = $data;
 $key = ((($1)) + 4|0);
 $2 = HEAP32[$key>>2]|0;
 $3 = $rhs$addr;
 $4 = $data;
 $5 = HEAP32[$4>>2]|0;
 $call = (_memcmp($2,$3,$5)|0);
 $cmp = ($call|0)==(0);
 $conv = $cmp&1;
 STACKTOP = sp;return ($conv|0);
}
function _String_length($self) {
 $self = $self|0;
 var $0 = 0, $1 = 0, $call = 0, $length = 0, $self$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self$addr = $self;
 $0 = $self$addr;
 $call = (_String_getHeader($0)|0);
 $length = ((($call)) + 4|0);
 $1 = HEAP32[$length>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function _String_ccmpn($self,$other,$length) {
 $self = $self|0;
 $other = $other|0;
 $length = $length|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $call = 0, $call1 = 0, $call2 = 0, $cmp = 0, $length$addr = 0, $other$addr = 0, $retval = 0, $self$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self$addr = $self;
 $other$addr = $other;
 $length$addr = $length;
 $0 = $length$addr;
 $1 = $self$addr;
 $call = (_String_length($1)|0);
 $cmp = ($0>>>0)>($call>>>0);
 if ($cmp) {
  $retval = -1;
  $5 = $retval;
  STACKTOP = sp;return ($5|0);
 } else {
  $2 = $self$addr;
  $call1 = (_String_cstr($2)|0);
  $3 = $other$addr;
  $4 = $length$addr;
  $call2 = (_strncmp($call1,$3,$4)|0);
  $retval = $call2;
  $5 = $retval;
  STACKTOP = sp;return ($5|0);
 }
 return (0)|0;
}
function _String_cstr($self) {
 $self = $self|0;
 var $0 = 0, $self$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self$addr = $self;
 $0 = $self$addr;
 STACKTOP = sp;return ($0|0);
}
function _String_getHeader($self) {
 $self = $self|0;
 var $0 = 0, $add$ptr = 0, $self$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self$addr = $self;
 $0 = $self$addr;
 $add$ptr = ((($0)) + -8|0);
 STACKTOP = sp;return ($add$ptr|0);
}
function _loopPush($self,$loop) {
 $self = $self|0;
 $loop = $loop|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $loop$addr = 0, $loop_stack = 0, $loop_stack1 = 0, $parent = 0, $self$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self$addr = $self;
 $loop$addr = $loop;
 $0 = $self$addr;
 $loop_stack = ((($0)) + 48|0);
 $1 = HEAP32[$loop_stack>>2]|0;
 $2 = $loop$addr;
 $parent = ((($2)) + 4|0);
 HEAP32[$parent>>2] = $1;
 $3 = $loop$addr;
 $4 = $self$addr;
 $loop_stack1 = ((($4)) + 48|0);
 HEAP32[$loop_stack1>>2] = $3;
 STACKTOP = sp;return;
}
function _loopBodyStart($self) {
 $self = $self|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $call = 0, $fn_builder = 0, $instructions = 0, $loop_stack = 0, $loop_stack1 = 0, $self$addr = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self$addr = $self;
 $0 = $self$addr;
 $loop_stack = ((($0)) + 48|0);
 $1 = HEAP32[$loop_stack>>2]|0;
 $tobool = ($1|0)!=(0|0);
 if ($tobool) {
  $2 = $self$addr;
  $fn_builder = ((($2)) + 28|0);
  $3 = HEAP32[$fn_builder>>2]|0;
  $instructions = ((($3)) + 20|0);
  $call = (_Array_size($instructions)|0);
  $4 = $self$addr;
  $loop_stack1 = ((($4)) + 48|0);
  $5 = HEAP32[$loop_stack1>>2]|0;
  HEAP32[$5>>2] = $call;
  STACKTOP = sp;return;
 } else {
  ___assert_fail((2754|0),(2771|0),76,(2795|0));
  // unreachable;
 }
}
function _loopPop($self) {
 $self = $self|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $add = 0, $add$ptr = 0, $and = 0, $body_end = 0, $call = 0, $cmp = 0, $cmp4 = 0, $fn_builder = 0, $fn_builder2 = 0, $i = 0, $inc = 0, $inst = 0, $instructions = 0, $instructions3 = 0, $loop_stack = 0, $loop_stack1 = 0, $loop_stack5 = 0, $loop_stack6 = 0;
 var $or = 0, $parent = 0, $self$addr = 0, $shl = 0, $sub = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self$addr = $self;
 $0 = $self$addr;
 $loop_stack = ((($0)) + 48|0);
 $1 = HEAP32[$loop_stack>>2]|0;
 $tobool = ($1|0)!=(0|0);
 if (!($tobool)) {
  ___assert_fail((2754|0),(2771|0),83,(2809|0));
  // unreachable;
 }
 $2 = $self$addr;
 $fn_builder = ((($2)) + 28|0);
 $3 = HEAP32[$fn_builder>>2]|0;
 $instructions = ((($3)) + 20|0);
 $call = (_Array_size($instructions)|0);
 $body_end = $call;
 $4 = $self$addr;
 $loop_stack1 = ((($4)) + 48|0);
 $5 = HEAP32[$loop_stack1>>2]|0;
 $6 = HEAP32[$5>>2]|0;
 $i = $6;
 while(1) {
  $7 = $i;
  $8 = $body_end;
  $cmp = ($7>>>0)<($8>>>0);
  $9 = $self$addr;
  if (!($cmp)) {
   break;
  }
  $fn_builder2 = ((($9)) + 28|0);
  $10 = HEAP32[$fn_builder2>>2]|0;
  $instructions3 = ((($10)) + 20|0);
  $11 = HEAP32[$instructions3>>2]|0;
  $12 = $i;
  $add$ptr = (($11) + ($12<<2)|0);
  $inst = $add$ptr;
  $13 = $inst;
  $14 = HEAP32[$13>>2]|0;
  $cmp4 = ($14|0)==(-1);
  if ($cmp4) {
   $15 = $body_end;
   $16 = $i;
   $sub = (($15) - ($16))|0;
   $add = (($sub) + 131071)|0;
   $and = $add & 262143;
   $shl = $and << 14;
   $or = 22 | $shl;
   $17 = $inst;
   HEAP32[$17>>2] = $or;
  }
  $18 = $i;
  $inc = (($18) + 1)|0;
  $i = $inc;
 }
 $loop_stack5 = ((($9)) + 48|0);
 $19 = HEAP32[$loop_stack5>>2]|0;
 $parent = ((($19)) + 4|0);
 $20 = HEAP32[$parent>>2]|0;
 $21 = $self$addr;
 $loop_stack6 = ((($21)) + 48|0);
 HEAP32[$loop_stack6>>2] = $20;
 STACKTOP = sp;return;
}
function _bfParser_ctor($self,$vm,$lexer,$current_module) {
 $self = $self|0;
 $vm = $vm|0;
 $lexer = $lexer|0;
 $current_module = $current_module|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call8 = 0, $current_clz = 0, $current_module$addr = 0, $current_module4 = 0, $current_module5 = 0, $current_module6 = 0, $current_token = 0, $fn_builder_stack = 0, $has_error = 0, $lexer$addr = 0, $lexer2 = 0, $loop_stack = 0, $name = 0, $name7 = 0, $parser_stack = 0;
 var $parser_stack1 = 0, $self$addr = 0, $tmp = 0, $vm$addr = 0, $vm3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $tmp = sp;
 $self$addr = $self;
 $vm$addr = $vm;
 $lexer$addr = $lexer;
 $current_module$addr = $current_module;
 $0 = $vm$addr;
 $parser_stack = ((($0)) + 584|0);
 $1 = HEAP32[$parser_stack>>2]|0;
 $2 = $self$addr;
 HEAP32[$2>>2] = $1;
 $3 = $self$addr;
 $4 = $vm$addr;
 $parser_stack1 = ((($4)) + 584|0);
 HEAP32[$parser_stack1>>2] = $3;
 $5 = $lexer$addr;
 $6 = $self$addr;
 $lexer2 = ((($6)) + 4|0);
 HEAP32[$lexer2>>2] = $5;
 $7 = $self$addr;
 $current_token = ((($7)) + 8|0);
 $8 = $lexer$addr;
 _bfLexer_nextToken($tmp,$8);
 ;HEAP32[$current_token>>2]=HEAP32[$tmp>>2]|0;HEAP32[$current_token+4>>2]=HEAP32[$tmp+4>>2]|0;HEAP32[$current_token+8>>2]=HEAP32[$tmp+8>>2]|0;HEAP32[$current_token+12>>2]=HEAP32[$tmp+12>>2]|0;
 $call = (__ArrayT_new(36,2)|0);
 $9 = $self$addr;
 $fn_builder_stack = ((($9)) + 24|0);
 HEAP32[$fn_builder_stack>>2] = $call;
 $10 = $self$addr;
 $has_error = ((($10)) + 44|0);
 HEAP32[$has_error>>2] = 0;
 $11 = $self$addr;
 $current_clz = ((($11)) + 36|0);
 HEAP32[$current_clz>>2] = 0;
 $12 = $self$addr;
 $loop_stack = ((($12)) + 48|0);
 HEAP32[$loop_stack>>2] = 0;
 $13 = $vm$addr;
 $14 = $self$addr;
 $vm3 = ((($14)) + 40|0);
 HEAP32[$vm3>>2] = $13;
 $15 = $current_module$addr;
 $16 = $self$addr;
 $current_module4 = ((($16)) + 32|0);
 HEAP32[$current_module4>>2] = $15;
 $17 = $self$addr;
 $18 = $self$addr;
 $current_module5 = ((($18)) + 32|0);
 $19 = HEAP32[$current_module5>>2]|0;
 $name = ((($19)) + 12|0);
 $20 = HEAP32[$name>>2]|0;
 $21 = $self$addr;
 $current_module6 = ((($21)) + 32|0);
 $22 = HEAP32[$current_module6>>2]|0;
 $name7 = ((($22)) + 12|0);
 $23 = HEAP32[$name7>>2]|0;
 $call8 = (_String_length($23)|0);
 _bfParser_pushBuilder($17,$20,$call8);
 STACKTOP = sp;return;
}
function _bfLexer_nextToken($agg$result,$self) {
 $agg$result = $agg$result|0;
 $self = $self|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $as = 0, $as100 = 0, $as104 = 0, $as112 = 0, $as116 = 0, $as124 = 0, $as128 = 0, $as136 = 0, $as140 = 0, $as144 = 0, $as148 = 0, $as156 = 0, $as160 = 0, $as168 = 0, $as172 = 0, $as180 = 0, $as184 = 0, $as188 = 0, $as192 = 0, $as210 = 0;
 var $as44 = 0, $as48 = 0, $as52 = 0, $as56 = 0, $as60 = 0, $as64 = 0, $as68 = 0, $as72 = 0, $as76 = 0, $as80 = 0, $as88 = 0, $as92 = 0, $buffer = 0, $call = 0, $call2 = 0, $call200 = 0, $call201 = 0, $call25 = 0, $call27 = 0, $call3 = 0;
 var $call31 = 0, $call41 = 0, $call8 = 0, $cmp = 0, $cmp10 = 0, $cmp108 = 0, $cmp120 = 0, $cmp132 = 0, $cmp15 = 0, $cmp152 = 0, $cmp164 = 0, $cmp176 = 0, $cmp202 = 0, $cmp36 = 0, $cmp5 = 0, $cmp84 = 0, $cmp96 = 0, $cond = 0, $conv = 0, $conv107 = 0;
 var $conv119 = 0, $conv131 = 0, $conv14 = 0, $conv151 = 0, $conv163 = 0, $conv175 = 0, $conv199 = 0, $conv35 = 0, $conv4 = 0, $conv42 = 0, $conv83 = 0, $conv9 = 0, $conv95 = 0, $current_char = 0, $current_line_no = 0, $current_line_no206 = 0, $do_comments = 0, $do_comments18 = 0, $err_fn = 0, $line = 0;
 var $next_char = 0, $next_char40 = 0, $num_bytes = 0, $params = 0, $self$addr = 0, $tobool = 0, $tobool12 = 0, $tobool19 = 0, $tobool195 = 0, $tobool197 = 0, $tobool26 = 0, $tobool28 = 0, $tobool32 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vm = 0, $vm196 = 0, $vm205 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(560|0);
 $vararg_buffer = sp + 512|0;
 $line = sp + 536|0;
 $buffer = sp;
 $self$addr = $self;
 $0 = $self$addr;
 $call = (_bfLexer_peek($0,0)|0);
 $current_char = $call;
 L1: while(1) {
  $1 = $current_char;
  $conv = $1 << 24 >> 24;
  $cmp = ($conv|0)!=(0);
  if (!($cmp)) {
   label = 68;
   break;
  }
  $2 = $self$addr;
  $call2 = (_bfLexer_peek($2,0)|0);
  $current_char = $call2;
  $3 = $current_char;
  $call3 = (_bfLexer_isWhitespace($3)|0);
  $tobool = ($call3|0)!=(0);
  if ($tobool) {
   $4 = $self$addr;
   _bfLexer_skipWhitespace($4);
   continue;
  }
  $5 = $current_char;
  $conv4 = $5 << 24 >> 24;
  $cmp5 = ($conv4|0)==(47);
  if ($cmp5) {
   $6 = $self$addr;
   $call8 = (_bfLexer_peek($6,1)|0);
   $next_char = $call8;
   $7 = $next_char;
   $conv9 = $7 << 24 >> 24;
   $cmp10 = ($conv9|0)==(47);
   if ($cmp10) {
    $8 = $self$addr;
    $do_comments = ((($8)) + 36|0);
    $9 = HEAP32[$do_comments>>2]|0;
    $tobool12 = ($9|0)!=(0);
    if ($tobool12) {
     $10 = $self$addr;
     _bfLexer_skipLineComment($10);
    } else {
     label = 9;
    }
   } else {
    label = 9;
   }
   if ((label|0) == 9) {
    label = 0;
    $11 = $next_char;
    $conv14 = $11 << 24 >> 24;
    $cmp15 = ($conv14|0)==(42);
    if (!($cmp15)) {
     label = 12;
     break;
    }
    $12 = $self$addr;
    $do_comments18 = ((($12)) + 36|0);
    $13 = HEAP32[$do_comments18>>2]|0;
    $tobool19 = ($13|0)!=(0);
    if (!($tobool19)) {
     label = 12;
     break;
    }
    $14 = $self$addr;
    _bfLexer_skipBlockComment($14);
   }
   continue;
  }
  $16 = $current_char;
  $call25 = (_bfLexer_isDigit($16)|0);
  $tobool26 = ($call25|0)!=(0);
  if ($tobool26) {
   label = 16;
   break;
  }
  $17 = $self$addr;
  $18 = $current_char;
  $call27 = (_bfLexer_isFollowedByDigit($17,$18,46)|0);
  $tobool28 = ($call27|0)!=(0);
  if ($tobool28) {
   label = 16;
   break;
  }
  $20 = $current_char;
  $call31 = (_bfLexer_isID($20)|0);
  $tobool32 = ($call31|0)!=(0);
  if ($tobool32) {
   label = 18;
   break;
  }
  $22 = $current_char;
  $conv35 = $22 << 24 >> 24;
  $cmp36 = ($conv35|0)==(34);
  $23 = $self$addr;
  if ($cmp36) {
   label = 20;
   break;
  }
  _bfLexer_advance($23,1);
  $24 = $self$addr;
  $call41 = (_bfLexer_peek($24,0)|0);
  $next_char40 = $call41;
  $25 = $current_char;
  $conv42 = $25 << 24 >> 24;
  switch ($conv42|0) {
  case 91:  {
   label = 22;
   break L1;
   break;
  }
  case 93:  {
   label = 23;
   break L1;
   break;
  }
  case 40:  {
   label = 24;
   break L1;
   break;
  }
  case 41:  {
   label = 25;
   break L1;
   break;
  }
  case 58:  {
   label = 26;
   break L1;
   break;
  }
  case 59:  {
   label = 27;
   break L1;
   break;
  }
  case 123:  {
   label = 28;
   break L1;
   break;
  }
  case 125:  {
   label = 29;
   break L1;
   break;
  }
  case 44:  {
   label = 30;
   break L1;
   break;
  }
  case 46:  {
   label = 31;
   break L1;
   break;
  }
  case 60:  {
   label = 32;
   break L1;
   break;
  }
  case 62:  {
   label = 35;
   break L1;
   break;
  }
  case 61:  {
   label = 38;
   break L1;
   break;
  }
  case 43:  {
   label = 41;
   break L1;
   break;
  }
  case 45:  {
   label = 44;
   break L1;
   break;
  }
  case 42:  {
   label = 47;
   break L1;
   break;
  }
  case 47:  {
   label = 48;
   break L1;
   break;
  }
  case 33:  {
   label = 49;
   break L1;
   break;
  }
  case 124:  {
   label = 52;
   break L1;
   break;
  }
  case 38:  {
   label = 55;
   break L1;
   break;
  }
  case 35:  {
   label = 58;
   break L1;
   break;
  }
  case 64:  {
   label = 59;
   break L1;
   break;
  }
  case 0:  {
   break;
  }
  default: {
   $42 = $self$addr;
   $vm = ((($42)) + 32|0);
   $43 = HEAP32[$vm>>2]|0;
   $tobool195 = ($43|0)!=(0|0);
   if ($tobool195) {
    $44 = $self$addr;
    $vm196 = ((($44)) + 32|0);
    $45 = HEAP32[$vm196>>2]|0;
    $params = ((($45)) + 16|0);
    $46 = HEAP32[$params>>2]|0;
    $cond = $46;
   } else {
    $cond = 0;
   }
   $err_fn = $cond;
   $47 = $err_fn;
   $tobool197 = ($47|0)!=(0|0);
   if ($tobool197) {
    $48 = $self$addr;
    _bfLexer_currentLine($line,$48);
    $49 = $current_char;
    $conv199 = $49 << 24 >> 24;
    $50 = $self$addr;
    $current_line_no = ((($50)) + 20|0);
    $51 = HEAP32[$current_line_no>>2]|0;
    $call200 = (_bfStringRange_length($line)|0);
    $52 = HEAP32[$line>>2]|0;
    HEAP32[$vararg_buffer>>2] = $conv199;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $51;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = $call200;
    $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
    HEAP32[$vararg_ptr3>>2] = $52;
    $call201 = (_sprintf($buffer,3258,$vararg_buffer)|0);
    $num_bytes = $call201;
    $53 = $num_bytes;
    $cmp202 = ($53|0)<(512);
    if (!($cmp202)) {
     label = 64;
     break L1;
    }
    $54 = $err_fn;
    $55 = $self$addr;
    $vm205 = ((($55)) + 32|0);
    $56 = HEAP32[$vm205>>2]|0;
    $57 = $self$addr;
    $current_line_no206 = ((($57)) + 20|0);
    $58 = HEAP32[$current_line_no206>>2]|0;
    FUNCTION_TABLE_viiii[$54 & 31]($56,3,$58,$buffer);
   }
   $59 = $self$addr;
   _bfLexer_advance($59,1);
  }
  }
 }
 switch (label|0) {
  case 12: {
   $15 = $self$addr;
   _bfLexer_advance($15,1);
   HEAP32[$agg$result>>2] = 14;
   $as = ((($agg$result)) + 8|0);
   HEAP32[$as>>2] = 3192;
   STACKTOP = sp;return;
   break;
  }
  case 16: {
   $19 = $self$addr;
   _bfLexer_parseNumber($agg$result,$19);
   STACKTOP = sp;return;
   break;
  }
  case 18: {
   $21 = $self$addr;
   _bfLexer_parseID($agg$result,$21);
   STACKTOP = sp;return;
   break;
  }
  case 20: {
   _bfLexer_parseString($agg$result,$23);
   STACKTOP = sp;return;
   break;
  }
  case 22: {
   HEAP32[$agg$result>>2] = 2;
   $as44 = ((($agg$result)) + 8|0);
   HEAP32[$as44>>2] = 3194;
   STACKTOP = sp;return;
   break;
  }
  case 23: {
   HEAP32[$agg$result>>2] = 3;
   $as48 = ((($agg$result)) + 8|0);
   HEAP32[$as48>>2] = 3196;
   STACKTOP = sp;return;
   break;
  }
  case 24: {
   HEAP32[$agg$result>>2] = 0;
   $as52 = ((($agg$result)) + 8|0);
   HEAP32[$as52>>2] = 3198;
   STACKTOP = sp;return;
   break;
  }
  case 25: {
   HEAP32[$agg$result>>2] = 1;
   $as56 = ((($agg$result)) + 8|0);
   HEAP32[$as56>>2] = 3200;
   STACKTOP = sp;return;
   break;
  }
  case 26: {
   HEAP32[$agg$result>>2] = 7;
   $as60 = ((($agg$result)) + 8|0);
   HEAP32[$as60>>2] = 3202;
   STACKTOP = sp;return;
   break;
  }
  case 27: {
   HEAP32[$agg$result>>2] = 8;
   $as64 = ((($agg$result)) + 8|0);
   HEAP32[$as64>>2] = 3204;
   STACKTOP = sp;return;
   break;
  }
  case 28: {
   HEAP32[$agg$result>>2] = 4;
   $as68 = ((($agg$result)) + 8|0);
   HEAP32[$as68>>2] = 3206;
   STACKTOP = sp;return;
   break;
  }
  case 29: {
   HEAP32[$agg$result>>2] = 5;
   $as72 = ((($agg$result)) + 8|0);
   HEAP32[$as72>>2] = 3208;
   STACKTOP = sp;return;
   break;
  }
  case 30: {
   HEAP32[$agg$result>>2] = 9;
   $as76 = ((($agg$result)) + 8|0);
   HEAP32[$as76>>2] = 3210;
   STACKTOP = sp;return;
   break;
  }
  case 31: {
   HEAP32[$agg$result>>2] = 19;
   $as80 = ((($agg$result)) + 8|0);
   HEAP32[$as80>>2] = 8853;
   STACKTOP = sp;return;
   break;
  }
  case 32: {
   $26 = $next_char40;
   $conv83 = $26 << 24 >> 24;
   $cmp84 = ($conv83|0)==(61);
   if ($cmp84) {
    $27 = $self$addr;
    _bfLexer_advance($27,1);
    HEAP32[$agg$result>>2] = 30;
    $as88 = ((($agg$result)) + 8|0);
    HEAP32[$as88>>2] = 3212;
    STACKTOP = sp;return;
   } else {
    HEAP32[$agg$result>>2] = 28;
    $as92 = ((($agg$result)) + 8|0);
    HEAP32[$as92>>2] = 3215;
    STACKTOP = sp;return;
   }
   break;
  }
  case 35: {
   $28 = $next_char40;
   $conv95 = $28 << 24 >> 24;
   $cmp96 = ($conv95|0)==(61);
   if ($cmp96) {
    $29 = $self$addr;
    _bfLexer_advance($29,1);
    HEAP32[$agg$result>>2] = 31;
    $as100 = ((($agg$result)) + 8|0);
    HEAP32[$as100>>2] = 3217;
    STACKTOP = sp;return;
   } else {
    HEAP32[$agg$result>>2] = 29;
    $as104 = ((($agg$result)) + 8|0);
    HEAP32[$as104>>2] = 3220;
    STACKTOP = sp;return;
   }
   break;
  }
  case 38: {
   $30 = $next_char40;
   $conv107 = $30 << 24 >> 24;
   $cmp108 = ($conv107|0)==(61);
   if ($cmp108) {
    $31 = $self$addr;
    _bfLexer_advance($31,1);
    HEAP32[$agg$result>>2] = 27;
    $as112 = ((($agg$result)) + 8|0);
    HEAP32[$as112>>2] = 3222;
    STACKTOP = sp;return;
   } else {
    HEAP32[$agg$result>>2] = 10;
    $as116 = ((($agg$result)) + 8|0);
    HEAP32[$as116>>2] = 3225;
    STACKTOP = sp;return;
   }
   break;
  }
  case 41: {
   $32 = $next_char40;
   $conv119 = $32 << 24 >> 24;
   $cmp120 = ($conv119|0)==(61);
   if ($cmp120) {
    $33 = $self$addr;
    _bfLexer_advance($33,1);
    HEAP32[$agg$result>>2] = 15;
    $as124 = ((($agg$result)) + 8|0);
    HEAP32[$as124>>2] = 3227;
    STACKTOP = sp;return;
   } else {
    HEAP32[$agg$result>>2] = 11;
    $as128 = ((($agg$result)) + 8|0);
    HEAP32[$as128>>2] = 3230;
    STACKTOP = sp;return;
   }
   break;
  }
  case 44: {
   $34 = $next_char40;
   $conv131 = $34 << 24 >> 24;
   $cmp132 = ($conv131|0)==(61);
   if ($cmp132) {
    $35 = $self$addr;
    _bfLexer_advance($35,1);
    HEAP32[$agg$result>>2] = 16;
    $as136 = ((($agg$result)) + 8|0);
    HEAP32[$as136>>2] = 3232;
    STACKTOP = sp;return;
   } else {
    HEAP32[$agg$result>>2] = 12;
    $as140 = ((($agg$result)) + 8|0);
    HEAP32[$as140>>2] = 3235;
    STACKTOP = sp;return;
   }
   break;
  }
  case 47: {
   HEAP32[$agg$result>>2] = 13;
   $as144 = ((($agg$result)) + 8|0);
   HEAP32[$as144>>2] = 3237;
   STACKTOP = sp;return;
   break;
  }
  case 48: {
   HEAP32[$agg$result>>2] = 14;
   $as148 = ((($agg$result)) + 8|0);
   HEAP32[$as148>>2] = 3192;
   STACKTOP = sp;return;
   break;
  }
  case 49: {
   $36 = $next_char40;
   $conv151 = $36 << 24 >> 24;
   $cmp152 = ($conv151|0)==(61);
   if ($cmp152) {
    $37 = $self$addr;
    _bfLexer_advance($37,1);
    HEAP32[$agg$result>>2] = 34;
    $as156 = ((($agg$result)) + 8|0);
    HEAP32[$as156>>2] = 3239;
    STACKTOP = sp;return;
   } else {
    HEAP32[$agg$result>>2] = 39;
    $as160 = ((($agg$result)) + 8|0);
    HEAP32[$as160>>2] = 3242;
    STACKTOP = sp;return;
   }
   break;
  }
  case 52: {
   $38 = $next_char40;
   $conv163 = $38 << 24 >> 24;
   $cmp164 = ($conv163|0)==(124);
   if ($cmp164) {
    $39 = $self$addr;
    _bfLexer_advance($39,1);
    HEAP32[$agg$result>>2] = 32;
    $as168 = ((($agg$result)) + 8|0);
    HEAP32[$as168>>2] = 3244;
    STACKTOP = sp;return;
   } else {
    HEAP32[$agg$result>>2] = 32;
    $as172 = ((($agg$result)) + 8|0);
    HEAP32[$as172>>2] = 3247;
    STACKTOP = sp;return;
   }
   break;
  }
  case 55: {
   $40 = $next_char40;
   $conv175 = $40 << 24 >> 24;
   $cmp176 = ($conv175|0)==(38);
   if ($cmp176) {
    $41 = $self$addr;
    _bfLexer_advance($41,1);
    HEAP32[$agg$result>>2] = 33;
    $as180 = ((($agg$result)) + 8|0);
    HEAP32[$as180>>2] = 3249;
    STACKTOP = sp;return;
   } else {
    HEAP32[$agg$result>>2] = 33;
    $as184 = ((($agg$result)) + 8|0);
    HEAP32[$as184>>2] = 3252;
    STACKTOP = sp;return;
   }
   break;
  }
  case 58: {
   HEAP32[$agg$result>>2] = 6;
   $as188 = ((($agg$result)) + 8|0);
   HEAP32[$as188>>2] = 3254;
   STACKTOP = sp;return;
   break;
  }
  case 59: {
   HEAP32[$agg$result>>2] = 50;
   $as192 = ((($agg$result)) + 8|0);
   HEAP32[$as192>>2] = 3256;
   STACKTOP = sp;return;
   break;
  }
  case 64: {
   ___assert_fail((3301|0),(3359|0),235,(3382|0));
   // unreachable;
   break;
  }
  case 68: {
   HEAP32[$agg$result>>2] = 44;
   $as210 = ((($agg$result)) + 8|0);
   HEAP32[$as210>>2] = 3400;
   STACKTOP = sp;return;
   break;
  }
 }
}
function __ArrayT_new($stride,$initial_size) {
 $stride = $stride|0;
 $initial_size = $initial_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0, $call = 0, $initial_size$addr = 0, $mul = 0, $mul6 = 0;
 var $retval = 0, $self = 0, $size = 0, $stride$addr = 0, $stride13 = 0, $tobool = 0, $tobool1 = 0, $tobool12 = 0, $tobool7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $stride$addr = $stride;
 $initial_size$addr = $initial_size;
 $0 = $stride$addr;
 $tobool = ($0|0)!=(0);
 if (!($tobool)) {
  ___assert_fail((2948|0),(2696|0),54,(3013|0));
  // unreachable;
 }
 $1 = $initial_size$addr;
 $2 = $stride$addr;
 $mul = Math_imul($1, $2)|0;
 $tobool1 = ($mul|0)!=(0);
 if (!($tobool1)) {
  ___assert_fail((3025|0),(2696|0),55,(3013|0));
  // unreachable;
 }
 $3 = $stride$addr;
 $4 = $initial_size$addr;
 $mul6 = Math_imul($3, $4)|0;
 $add = (12 + ($mul6))|0;
 $call = (_malloc($add)|0);
 $self = $call;
 $5 = $self;
 $tobool7 = ($5|0)!=(0|0);
 if (!($tobool7)) {
  ___assert_fail((3125|0),(2696|0),62,(3013|0));
  // unreachable;
 }
 $6 = $self;
 $tobool12 = ($6|0)!=(0|0);
 if ($tobool12) {
  $7 = $initial_size$addr;
  $8 = $self;
  HEAP32[$8>>2] = $7;
  $9 = $self;
  $size = ((($9)) + 4|0);
  HEAP32[$size>>2] = 0;
  $10 = $stride$addr;
  $11 = $self;
  $stride13 = ((($11)) + 8|0);
  HEAP32[$stride13>>2] = $10;
  $12 = $self;
  $add$ptr = ((($12)) + 12|0);
  $retval = $add$ptr;
  $13 = $retval;
  STACKTOP = sp;return ($13|0);
 } else {
  $retval = 0;
  $13 = $retval;
  STACKTOP = sp;return ($13|0);
 }
 return (0)|0;
}
function _bfParser_pushBuilder($self,$fn_name,$fn_name_len) {
 $self = $self|0;
 $fn_name = $fn_name|0;
 $fn_name_len = $fn_name_len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $fn_builder = 0, $fn_builder1 = 0, $fn_builder2 = 0, $fn_builder3 = 0, $fn_builder_stack = 0, $fn_name$addr = 0, $fn_name_len$addr = 0;
 var $lexer = 0, $lexer4 = 0, $self$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self$addr = $self;
 $fn_name$addr = $fn_name;
 $fn_name_len$addr = $fn_name_len;
 $0 = $self$addr;
 $fn_builder_stack = ((($0)) + 24|0);
 $call = (_Array_emplace($fn_builder_stack)|0);
 $1 = $self$addr;
 $fn_builder = ((($1)) + 28|0);
 HEAP32[$fn_builder>>2] = $call;
 $2 = $self$addr;
 $fn_builder1 = ((($2)) + 28|0);
 $3 = HEAP32[$fn_builder1>>2]|0;
 _bfVMFunctionBuilder_ctor($3);
 $4 = $self$addr;
 $fn_builder2 = ((($4)) + 28|0);
 $5 = HEAP32[$fn_builder2>>2]|0;
 $6 = $fn_name$addr;
 $7 = $fn_name_len$addr;
 _bfVMFunctionBuilder_begin($5,$6,$7);
 $8 = $self$addr;
 $lexer = ((($8)) + 4|0);
 $9 = HEAP32[$lexer>>2]|0;
 $10 = $self$addr;
 $fn_builder3 = ((($10)) + 28|0);
 $11 = HEAP32[$fn_builder3>>2]|0;
 $lexer4 = ((($11)) + 32|0);
 HEAP32[$lexer4>>2] = $9;
 STACKTOP = sp;return;
}
function _bfVMFunctionBuilder_ctor($self) {
 $self = $self|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $call = 0, $call1 = 0, $constants = 0, $instructions = 0, $lexer = 0, $line_to_code = 0, $local_var_scope_size = 0, $local_vars = 0, $max_local_idx = 0, $name_len = 0, $self$addr = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self$addr = $self;
 $0 = $self$addr;
 HEAP32[$0>>2] = 0;
 $1 = $self$addr;
 $name_len = ((($1)) + 4|0);
 HEAP32[$name_len>>2] = 0;
 $2 = $self$addr;
 $constants = ((($2)) + 8|0);
 HEAP32[$constants>>2] = 0;
 $call = (__ArrayT_new(8,5)|0);
 $3 = $self$addr;
 $local_vars = ((($3)) + 12|0);
 HEAP32[$local_vars>>2] = $call;
 $call1 = (__ArrayT_new(4,5)|0);
 $4 = $self$addr;
 $local_var_scope_size = ((($4)) + 16|0);
 HEAP32[$local_var_scope_size>>2] = $call1;
 $5 = $self$addr;
 $instructions = ((($5)) + 20|0);
 HEAP32[$instructions>>2] = 0;
 $6 = $self$addr;
 $line_to_code = ((($6)) + 24|0);
 HEAP32[$line_to_code>>2] = 0;
 $7 = $self$addr;
 $max_local_idx = ((($7)) + 28|0);
 HEAP32[$max_local_idx>>2] = 0;
 $8 = $self$addr;
 $lexer = ((($8)) + 32|0);
 HEAP32[$lexer>>2] = 0;
 STACKTOP = sp;return;
}
function _bfVMFunctionBuilder_begin($self,$name,$length) {
 $self = $self|0;
 $name = $name|0;
 $length = $length|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call3 = 0, $call4 = 0, $cmp = 0, $constants = 0, $constants2 = 0, $instructions = 0, $length$addr = 0;
 var $line_to_code = 0, $local_var_scope_size = 0, $local_vars = 0, $name$addr = 0, $name_len = 0, $self$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self$addr = $self;
 $name$addr = $name;
 $length$addr = $length;
 $0 = $self$addr;
 $constants = ((($0)) + 8|0);
 $1 = HEAP32[$constants>>2]|0;
 $cmp = ($1|0)==(0|0);
 if ($cmp) {
  $2 = $name$addr;
  $3 = $self$addr;
  HEAP32[$3>>2] = $2;
  $4 = $length$addr;
  $5 = $self$addr;
  $name_len = ((($5)) + 4|0);
  HEAP32[$name_len>>2] = $4;
  $call = (__ArrayT_new(8,5)|0);
  $6 = $self$addr;
  $constants2 = ((($6)) + 8|0);
  HEAP32[$constants2>>2] = $call;
  $7 = $self$addr;
  $local_vars = ((($7)) + 12|0);
  _Array_clear($local_vars);
  $8 = $self$addr;
  $local_var_scope_size = ((($8)) + 16|0);
  _Array_clear($local_var_scope_size);
  $call3 = (__ArrayT_new(4,5)|0);
  $9 = $self$addr;
  $instructions = ((($9)) + 20|0);
  HEAP32[$instructions>>2] = $call3;
  $call4 = (__ArrayT_new(2,5)|0);
  $10 = $self$addr;
  $line_to_code = ((($10)) + 24|0);
  HEAP32[$line_to_code>>2] = $call4;
  $11 = $self$addr;
  _bfVMFunctionBuilder_pushScope($11);
  STACKTOP = sp;return;
 } else {
  ___assert_fail((2817|0),(2888|0),41,(2922|0));
  // unreachable;
 }
}
function _Array_clear($self) {
 $self = $self|0;
 var $0 = 0, $1 = 0, $call = 0, $self$addr = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self$addr = $self;
 $0 = $self$addr;
 $1 = HEAP32[$0>>2]|0;
 $call = (_Array_getHeader($1)|0);
 $size = ((($call)) + 4|0);
 HEAP32[$size>>2] = 0;
 STACKTOP = sp;return;
}
function _bfVMFunctionBuilder_pushScope($self) {
 $self = $self|0;
 var $0 = 0, $1 = 0, $call = 0, $count = 0, $local_var_scope_size = 0, $self$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self$addr = $self;
 $0 = $self$addr;
 $local_var_scope_size = ((($0)) + 16|0);
 $call = (_Array_emplace($local_var_scope_size)|0);
 $count = $call;
 $1 = $count;
 HEAP32[$1>>2] = 0;
 STACKTOP = sp;return;
}
function _bfLexer_peek($self,$amt) {
 $self = $self|0;
 $amt = $amt|0;
 var $0 = 0, $1 = 0, $2 = 0, $amt$addr = 0, $call = 0, $self$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self$addr = $self;
 $amt$addr = $amt;
 $0 = $self$addr;
 $1 = $amt$addr;
 $call = (_bfLexer_peekStr($0,$1)|0);
 $2 = HEAP8[$call>>0]|0;
 STACKTOP = sp;return ($2|0);
}
function _bfLexer_isWhitespace($c) {
 $c = $c|0;
 var $0 = 0, $c$addr = 0, $call = 0, $conv = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $c$addr = $c;
 $0 = $c$addr;
 $conv = $0 << 24 >> 24;
 $call = (_isspace($conv)|0);
 STACKTOP = sp;return ($call|0);
}
function _bfLexer_skipWhitespace($self) {
 $self = $self|0;
 var $0 = 0, $self$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self$addr = $self;
 $0 = $self$addr;
 _bfLexer_skipWhile($0,34);
 STACKTOP = sp;return;
}
function _bfLexer_skipLineComment($self) {
 $self = $self|0;
 var $0 = 0, $1 = 0, $self$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self$addr = $self;
 $0 = $self$addr;
 _bfLexer_advance($0,2);
 $1 = $self$addr;
 _bfLexer_skipWhile($1,35);
 STACKTOP = sp;return;
}
function _bfLexer_skipBlockComment($self) {
 $self = $self|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buffer = 0, $call = 0;
 var $call11 = 0, $call2 = 0, $call6 = 0, $cmp = 0, $cmp12 = 0, $cmp4 = 0, $cmp8 = 0, $conv = 0, $conv3 = 0, $conv7 = 0, $current_line_no = 0, $current_line_no17 = 0, $err_fn = 0, $line_no = 0, $num_bytes = 0, $params = 0, $self$addr = 0, $tobool = 0, $vararg_buffer = 0, $vm = 0;
 var $vm16 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $vararg_buffer = sp + 64|0;
 $buffer = sp;
 $self$addr = $self;
 $0 = $self$addr;
 $current_line_no = ((($0)) + 20|0);
 $1 = HEAP32[$current_line_no>>2]|0;
 $line_no = $1;
 $2 = $self$addr;
 _bfLexer_advance($2,2);
 while(1) {
  $3 = $self$addr;
  $call = (_bfLexer_peek($3,0)|0);
  $conv = $call << 24 >> 24;
  $cmp = ($conv|0)!=(42);
  if (!($cmp)) {
   $4 = $self$addr;
   $call2 = (_bfLexer_peek($4,1)|0);
   $conv3 = $call2 << 24 >> 24;
   $cmp4 = ($conv3|0)!=(47);
   if (!($cmp4)) {
    label = 10;
    break;
   }
  }
  $5 = $self$addr;
  $call6 = (_bfLexer_peek($5,0)|0);
  $conv7 = $call6 << 24 >> 24;
  $cmp8 = ($conv7|0)==(0);
  $6 = $self$addr;
  if ($cmp8) {
   break;
  }
  _bfLexer_advance($6,1);
 }
 if ((label|0) == 10) {
  $17 = $self$addr;
  _bfLexer_advance($17,2);
  STACKTOP = sp;return;
 }
 $vm = ((($6)) + 32|0);
 $7 = HEAP32[$vm>>2]|0;
 $params = ((($7)) + 16|0);
 $8 = HEAP32[$params>>2]|0;
 $err_fn = $8;
 $9 = $err_fn;
 $tobool = ($9|0)!=(0|0);
 if (!($tobool)) {
  $17 = $self$addr;
  _bfLexer_advance($17,2);
  STACKTOP = sp;return;
 }
 $10 = $line_no;
 HEAP32[$vararg_buffer>>2] = $10;
 $call11 = (_sprintf($buffer,3404,$vararg_buffer)|0);
 $num_bytes = $call11;
 $11 = $num_bytes;
 $cmp12 = ($11|0)<(64);
 if (!($cmp12)) {
  ___assert_fail((3301|0),(3359|0),329,(3451|0));
  // unreachable;
 }
 $12 = $err_fn;
 $13 = $self$addr;
 $vm16 = ((($13)) + 32|0);
 $14 = HEAP32[$vm16>>2]|0;
 $15 = $self$addr;
 $current_line_no17 = ((($15)) + 20|0);
 $16 = HEAP32[$current_line_no17>>2]|0;
 FUNCTION_TABLE_viiii[$12 & 31]($14,3,$16,$buffer);
 $17 = $self$addr;
 _bfLexer_advance($17,2);
 STACKTOP = sp;return;
}
function _bfLexer_advance($self,$amt) {
 $self = $self|0;
 $amt = $amt|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add10 = 0, $add24 = 0, $add5 = 0;
 var $amt$addr = 0, $arrayidx = 0, $call = 0, $call1 = 0, $call13 = 0, $cmp = 0, $cmp16 = 0, $cmp21 = 0, $cmp3 = 0, $cmp8 = 0, $cond = 0, $conv = 0, $conv4 = 0, $conv7 = 0, $conv9 = 0, $curr = 0, $current_line_no = 0, $cursor = 0, $cursor2 = 0, $inc = 0;
 var $inc19 = 0, $line_pos_bgn = 0, $line_pos_bgn6 = 0, $line_pos_end = 0, $line_pos_end12 = 0, $line_pos_end15 = 0, $line_pos_end18 = 0, $line_pos_end23 = 0, $line_pos_end25 = 0, $or$cond = 0, $self$addr = 0, $source_end = 0, $source_length = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $tobool = 0, $tobool14 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self$addr = $self;
 $amt$addr = $amt;
 $0 = $amt$addr;
 $1 = $self$addr;
 $cursor = ((($1)) + 16|0);
 $2 = HEAP32[$cursor>>2]|0;
 $add = (($2) + ($0))|0;
 HEAP32[$cursor>>2] = $add;
 $3 = $self$addr;
 $call = (_bfLexer_peek($3,0)|0);
 $curr = $call;
 $4 = $curr;
 $call1 = (_bfLexer_isNewline($4)|0);
 $tobool = ($call1|0)!=(0);
 $5 = $amt$addr;
 $cmp = ($5|0)==(0);
 $or$cond = $tobool | $cmp;
 if (!($or$cond)) {
  STACKTOP = sp;return;
 }
 $6 = $self$addr;
 $source_end = ((($6)) + 4|0);
 $7 = HEAP32[$source_end>>2]|0;
 $8 = $self$addr;
 $9 = HEAP32[$8>>2]|0;
 $sub$ptr$lhs$cast = $7;
 $sub$ptr$rhs$cast = $9;
 $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
 $source_length = $sub$ptr$sub;
 $10 = $self$addr;
 $current_line_no = ((($10)) + 20|0);
 $11 = HEAP32[$current_line_no>>2]|0;
 $inc = (($11) + 1)|0;
 HEAP32[$current_line_no>>2] = $inc;
 $12 = $self$addr;
 $cursor2 = ((($12)) + 16|0);
 $13 = HEAP32[$cursor2>>2]|0;
 $14 = $curr;
 $conv = $14 << 24 >> 24;
 $cmp3 = ($conv|0)==(10);
 $conv4 = $cmp3&1;
 $add5 = (($13) + ($conv4))|0;
 $15 = $self$addr;
 $line_pos_bgn = ((($15)) + 24|0);
 HEAP32[$line_pos_bgn>>2] = $add5;
 $16 = $self$addr;
 $line_pos_bgn6 = ((($16)) + 24|0);
 $17 = HEAP32[$line_pos_bgn6>>2]|0;
 $18 = $curr;
 $conv7 = $18 << 24 >> 24;
 $cmp8 = ($conv7|0)==(10);
 $conv9 = $cmp8&1;
 $add10 = (($17) + ($conv9))|0;
 $19 = $self$addr;
 $line_pos_end = ((($19)) + 28|0);
 HEAP32[$line_pos_end>>2] = $add10;
 while(1) {
  $20 = $self$addr;
  $21 = HEAP32[$20>>2]|0;
  $22 = $self$addr;
  $line_pos_end12 = ((($22)) + 28|0);
  $23 = HEAP32[$line_pos_end12>>2]|0;
  $arrayidx = (($21) + ($23)|0);
  $24 = HEAP8[$arrayidx>>0]|0;
  $call13 = (_bfLexer_isNewline($24)|0);
  $tobool14 = ($call13|0)!=(0);
  if ($tobool14) {
   $35 = 0;
  } else {
   $25 = $self$addr;
   $line_pos_end15 = ((($25)) + 28|0);
   $26 = HEAP32[$line_pos_end15>>2]|0;
   $27 = $source_length;
   $cmp16 = ($26>>>0)<($27>>>0);
   $35 = $cmp16;
  }
  $28 = $self$addr;
  $line_pos_end18 = ((($28)) + 28|0);
  $29 = HEAP32[$line_pos_end18>>2]|0;
  if (!($35)) {
   break;
  }
  $inc19 = (($29) + 1)|0;
  HEAP32[$line_pos_end18>>2] = $inc19;
 }
 $30 = $source_length;
 $cmp21 = ($29>>>0)<($30>>>0);
 if ($cmp21) {
  $31 = $self$addr;
  $line_pos_end23 = ((($31)) + 28|0);
  $32 = HEAP32[$line_pos_end23>>2]|0;
  $add24 = (($32) + 1)|0;
  $cond = $add24;
 } else {
  $33 = $source_length;
  $cond = $33;
 }
 $34 = $self$addr;
 $line_pos_end25 = ((($34)) + 28|0);
 HEAP32[$line_pos_end25>>2] = $cond;
 STACKTOP = sp;return;
}
function _bfLexer_isDigit($c) {
 $c = $c|0;
 var $0 = 0, $c$addr = 0, $call = 0, $conv = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $c$addr = $c;
 $0 = $c$addr;
 $conv = $0 << 24 >> 24;
 $call = (_isdigit($conv)|0);
 STACKTOP = sp;return ($call|0);
}
function _bfLexer_isFollowedByDigit($self,$c,$m) {
 $self = $self|0;
 $c = $c|0;
 $m = $m|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $c$addr = 0, $call = 0, $call3 = 0, $cmp = 0, $conv = 0, $conv1 = 0, $land$ext = 0, $m$addr = 0, $self$addr = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self$addr = $self;
 $c$addr = $c;
 $m$addr = $m;
 $0 = $c$addr;
 $conv = $0 << 24 >> 24;
 $1 = $m$addr;
 $conv1 = $1 << 24 >> 24;
 $cmp = ($conv|0)==($conv1|0);
 if (!($cmp)) {
  $3 = 0;
  $land$ext = $3&1;
  STACKTOP = sp;return ($land$ext|0);
 }
 $2 = $self$addr;
 $call = (_bfLexer_peek($2,1)|0);
 $call3 = (_bfLexer_isDigit($call)|0);
 $tobool = ($call3|0)!=(0);
 $3 = $tobool;
 $land$ext = $3&1;
 STACKTOP = sp;return ($land$ext|0);
}
function _bfLexer_parseNumber($agg$result,$self) {
 $agg$result = $agg$result|0;
 $self = $self|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, $as = 0, $bgn = 0, $call = 0, $call1 = 0.0, $call2 = 0, $cmp = 0, $cmp6 = 0, $conv = 0.0, $conv3 = 0, $conv5 = 0;
 var $current = 0, $end = 0, $self$addr = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $value = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $end = sp + 8|0;
 $self$addr = $self;
 $0 = $self$addr;
 $call = (_bfLexer_peekStr($0,0)|0);
 $bgn = $call;
 HEAP32[$end>>2] = 0;
 $1 = $bgn;
 $call1 = (+_strtof($1,$end));
 $conv = $call1;
 $value = $conv;
 $2 = $self$addr;
 $3 = HEAP32[$end>>2]|0;
 $4 = $bgn;
 $sub$ptr$lhs$cast = $3;
 $sub$ptr$rhs$cast = $4;
 $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
 _bfLexer_advance($2,$sub$ptr$sub);
 $5 = $self$addr;
 $call2 = (_bfLexer_peek($5,0)|0);
 $current = $call2;
 $6 = $current;
 $conv3 = $6 << 24 >> 24;
 $cmp = ($conv3|0)==(102);
 if (!($cmp)) {
  $7 = $current;
  $conv5 = $7 << 24 >> 24;
  $cmp6 = ($conv5|0)==(70);
  if (!($cmp6)) {
   HEAP32[$agg$result>>2] = 41;
   $as = ((($agg$result)) + 8|0);
   $9 = $value;
   HEAPF64[$as>>3] = $9;
   STACKTOP = sp;return;
  }
 }
 $8 = $self$addr;
 _bfLexer_advance($8,1);
 HEAP32[$agg$result>>2] = 41;
 $as = ((($agg$result)) + 8|0);
 $9 = $value;
 HEAPF64[$as>>3] = $9;
 STACKTOP = sp;return;
}
function _bfLexer_isID($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $c$addr = 0, $call = 0, $call3 = 0, $cmp = 0, $conv = 0, $conv1 = 0, $lor$ext = 0, $tobool = 0, $tobool4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $c$addr = $c;
 $0 = $c$addr;
 $conv = $0 << 24 >> 24;
 $call = (_isalpha($conv)|0);
 $tobool = ($call|0)!=(0);
 if ($tobool) {
  $3 = 1;
 } else {
  $1 = $c$addr;
  $conv1 = $1 << 24 >> 24;
  $cmp = ($conv1|0)==(95);
  if ($cmp) {
   $3 = 1;
  } else {
   $2 = $c$addr;
   $call3 = (_bfLexer_isDigit($2)|0);
   $tobool4 = ($call3|0)!=(0);
   $3 = $tobool4;
  }
 }
 $lor$ext = $3&1;
 STACKTOP = sp;return ($lor$ext|0);
}
function _bfLexer_parseID($agg$result,$self) {
 $agg$result = $agg$result|0;
 $self = $self|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$ptr = 0, $add$ptr10 = 0, $as = 0, $bgn = 0, $call = 0, $call1 = 0, $call6 = 0, $cmp = 0, $cmp4 = 0, $cmp7 = 0, $end = 0, $end9 = 0, $i = 0, $inc = 0, $keyword = 0, $keywords = 0;
 var $length = 0, $length3 = 0, $num_keywords = 0, $num_keywords2 = 0, $self$addr = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $value = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $self$addr = $self;
 $0 = $self$addr;
 $call = (_bfLexer_peekStr($0,0)|0);
 $bgn = $call;
 $1 = $self$addr;
 _bfLexer_skipWhile($1,36);
 $2 = $self$addr;
 $call1 = (_bfLexer_peekStr($2,0)|0);
 $end = $call1;
 $3 = $end;
 $4 = $bgn;
 $sub$ptr$lhs$cast = $3;
 $sub$ptr$rhs$cast = $4;
 $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
 $length = $sub$ptr$sub;
 $5 = $self$addr;
 $num_keywords2 = ((($5)) + 12|0);
 $6 = HEAP32[$num_keywords2>>2]|0;
 $num_keywords = $6;
 $i = 0;
 while(1) {
  $7 = $i;
  $8 = $num_keywords;
  $cmp = ($7>>>0)<($8>>>0);
  if (!($cmp)) {
   label = 7;
   break;
  }
  $9 = $self$addr;
  $keywords = ((($9)) + 8|0);
  $10 = HEAP32[$keywords>>2]|0;
  $11 = $i;
  $add$ptr = (($10) + (($11*24)|0)|0);
  $keyword = $add$ptr;
  $12 = $keyword;
  $length3 = ((($12)) + 4|0);
  $13 = HEAP32[$length3>>2]|0;
  $14 = $length;
  $cmp4 = ($13|0)==($14|0);
  if ($cmp4) {
   $15 = $keyword;
   $16 = HEAP32[$15>>2]|0;
   $17 = $bgn;
   $18 = $length;
   $call6 = (_strncmp($16,$17,$18)|0);
   $cmp7 = ($call6|0)==(0);
   if ($cmp7) {
    label = 5;
    break;
   }
  }
  $20 = $i;
  $inc = (($20) + 1)|0;
  $i = $inc;
 }
 if ((label|0) == 5) {
  $19 = $keyword;
  $value = ((($19)) + 8|0);
  ;HEAP32[$agg$result>>2]=HEAP32[$value>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$value+4>>2]|0;HEAP32[$agg$result+8>>2]=HEAP32[$value+8>>2]|0;HEAP32[$agg$result+12>>2]=HEAP32[$value+12>>2]|0;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 7) {
  HEAP32[$agg$result>>2] = 20;
  $as = ((($agg$result)) + 8|0);
  $21 = $bgn;
  HEAP32[$as>>2] = $21;
  $end9 = ((($as)) + 4|0);
  $22 = $bgn;
  $23 = $length;
  $add$ptr10 = (($22) + ($23)|0);
  HEAP32[$end9>>2] = $add$ptr10;
  STACKTOP = sp;return;
 }
}
function _bfLexer_parseString($agg$result,$self) {
 $agg$result = $agg$result|0;
 $self = $self|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $as = 0, $bgn = 0, $call = 0, $call1 = 0, $end = 0, $end3 = 0, $self$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self$addr = $self;
 $0 = $self$addr;
 _bfLexer_advance($0,1);
 $1 = $self$addr;
 $call = (_bfLexer_peekStr($1,0)|0);
 $bgn = $call;
 $2 = $self$addr;
 _bfLexer_skipWhile($2,37);
 $3 = $self$addr;
 $call1 = (_bfLexer_peekStr($3,0)|0);
 $end = $call1;
 $4 = $self$addr;
 _bfLexer_advance($4,1);
 HEAP32[$agg$result>>2] = 40;
 $as = ((($agg$result)) + 8|0);
 $5 = $bgn;
 HEAP32[$as>>2] = $5;
 $end3 = ((($as)) + 4|0);
 $6 = $end;
 HEAP32[$end3>>2] = $6;
 STACKTOP = sp;return;
}
function _bfLexer_currentLine($agg$result,$self) {
 $agg$result = $agg$result|0;
 $self = $self|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $add$ptr = 0, $add$ptr2 = 0, $end = 0, $line_pos_bgn = 0, $line_pos_end = 0, $self$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self$addr = $self;
 $0 = $self$addr;
 $1 = HEAP32[$0>>2]|0;
 $2 = $self$addr;
 $line_pos_bgn = ((($2)) + 24|0);
 $3 = HEAP32[$line_pos_bgn>>2]|0;
 $add$ptr = (($1) + ($3)|0);
 HEAP32[$agg$result>>2] = $add$ptr;
 $end = ((($agg$result)) + 4|0);
 $4 = $self$addr;
 $5 = HEAP32[$4>>2]|0;
 $6 = $self$addr;
 $line_pos_end = ((($6)) + 28|0);
 $7 = HEAP32[$line_pos_end>>2]|0;
 $add$ptr2 = (($5) + ($7)|0);
 HEAP32[$end>>2] = $add$ptr2;
 STACKTOP = sp;return;
}
function _bfLexer_peekStr($self,$amt) {
 $self = $self|0;
 $amt = $amt|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$ptr = 0, $add$ptr1 = 0, $amt$addr = 0, $cmp = 0, $cursor = 0, $retval = 0, $self$addr = 0, $source_end = 0;
 var $source_end2 = 0, $target_str = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self$addr = $self;
 $amt$addr = $amt;
 $0 = $self$addr;
 $1 = HEAP32[$0>>2]|0;
 $2 = $self$addr;
 $cursor = ((($2)) + 16|0);
 $3 = HEAP32[$cursor>>2]|0;
 $add$ptr = (($1) + ($3)|0);
 $4 = $amt$addr;
 $add$ptr1 = (($add$ptr) + ($4)|0);
 $target_str = $add$ptr1;
 $5 = $target_str;
 $6 = $self$addr;
 $source_end = ((($6)) + 4|0);
 $7 = HEAP32[$source_end>>2]|0;
 $cmp = ($5>>>0)<($7>>>0);
 if ($cmp) {
  $8 = $target_str;
  $retval = $8;
  $11 = $retval;
  STACKTOP = sp;return ($11|0);
 } else {
  $9 = $self$addr;
  $source_end2 = ((($9)) + 4|0);
  $10 = HEAP32[$source_end2>>2]|0;
  $retval = $10;
  $11 = $retval;
  STACKTOP = sp;return ($11|0);
 }
 return (0)|0;
}
function _bfLexer_isNotQuote($c) {
 $c = $c|0;
 var $0 = 0, $c$addr = 0, $cmp = 0, $conv = 0, $conv1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $c$addr = $c;
 $0 = $c$addr;
 $conv = $0 << 24 >> 24;
 $cmp = ($conv|0)!=(34);
 $conv1 = $cmp&1;
 STACKTOP = sp;return ($conv1|0);
}
function _bfLexer_skipWhile($self,$condition) {
 $self = $self|0;
 $condition = $condition|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $add$ptr = 0, $call = 0, $call1 = 0, $cmp = 0, $condition$addr = 0, $cursor = 0, $self$addr = 0, $source_end = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self$addr = $self;
 $condition$addr = $condition;
 while(1) {
  $0 = $condition$addr;
  $1 = $self$addr;
  $call = (_bfLexer_peek($1,0)|0);
  $call1 = (FUNCTION_TABLE_ii[$0 & 63]($call)|0);
  $tobool = ($call1|0)!=(0);
  if (!($tobool)) {
   label = 5;
   break;
  }
  $2 = $self$addr;
  $3 = HEAP32[$2>>2]|0;
  $4 = $self$addr;
  $cursor = ((($4)) + 16|0);
  $5 = HEAP32[$cursor>>2]|0;
  $add$ptr = (($3) + ($5)|0);
  $6 = $self$addr;
  $source_end = ((($6)) + 4|0);
  $7 = HEAP32[$source_end>>2]|0;
  $cmp = ($add$ptr>>>0)<($7>>>0);
  if (!($cmp)) {
   label = 5;
   break;
  }
  $8 = $self$addr;
  _bfLexer_advance($8,1);
 }
 if ((label|0) == 5) {
  STACKTOP = sp;return;
 }
}
function _bfLexer_isNewline($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $c$addr = 0, $cmp = 0, $cmp3 = 0, $cmp6 = 0, $conv = 0, $conv2 = 0, $conv5 = 0, $lor$ext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $c$addr = $c;
 $0 = $c$addr;
 $conv = $0 << 24 >> 24;
 $cmp = ($conv|0)==(10);
 if ($cmp) {
  $3 = 1;
 } else {
  $1 = $c$addr;
  $conv2 = $1 << 24 >> 24;
  $cmp3 = ($conv2|0)==(13);
  if ($cmp3) {
   $3 = 1;
  } else {
   $2 = $c$addr;
   $conv5 = $2 << 24 >> 24;
   $cmp6 = ($conv5|0)==(0);
   $3 = $cmp6;
  }
 }
 $lor$ext = $3&1;
 STACKTOP = sp;return ($lor$ext|0);
}
function _bfLexer_isNotNewline($c) {
 $c = $c|0;
 var $0 = 0, $c$addr = 0, $call = 0, $lnot = 0, $lnot$ext = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $c$addr = $c;
 $0 = $c$addr;
 $call = (_bfLexer_isNewline($0)|0);
 $tobool = ($call|0)!=(0);
 $lnot = $tobool ^ 1;
 $lnot$ext = $lnot&1;
 STACKTOP = sp;return ($lnot$ext|0);
}
function _bfParser_compile($self) {
 $self = $self|0;
 var $0 = 0, $1 = 0, $2 = 0, $call = 0, $has_error = 0, $self$addr = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self$addr = $self;
 while(1) {
  $0 = $self$addr;
  $call = (_bfParser_parse($0)|0);
  $tobool = ($call|0)!=(0);
  if (!($tobool)) {
   break;
  }
 }
 $1 = $self$addr;
 $has_error = ((($1)) + 44|0);
 $2 = HEAP32[$has_error>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function _bfParser_parse($self) {
 $self = $self|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp35 = 0, $agg$tmp35$byval_copy = 0, $agg$tmp56 = 0, $agg$tmp56$byval_copy = 0, $agg$tmp75 = 0, $agg$tmp75$byval_copy = 0, $agg$tmp84 = 0, $agg$tmp84$byval_copy = 0, $call = 0, $call14 = 0, $call15 = 0, $call22 = 0, $call34 = 0;
 var $call37 = 0, $call39 = 0, $call42 = 0, $call52 = 0, $call53 = 0, $call58 = 0, $call63 = 0, $call73 = 0, $call82 = 0, $conv = 0, $conv43 = 0, $conv46 = 0, $conv60 = 0, $current_token = 0, $current_token1 = 0, $current_token24 = 0, $current_token3 = 0, $else_jump = 0, $expr = 0, $expr55 = 0;
 var $expr74 = 0, $expr83 = 0, $expr_loc = 0, $expr_loc32 = 0, $expr_loc50 = 0, $expr_loc80 = 0, $fn_builder = 0, $fn_builder13 = 0, $fn_builder19 = 0, $fn_builder20 = 0, $fn_builder33 = 0, $fn_builder38 = 0, $fn_builder51 = 0, $fn_builder61 = 0, $fn_builder72 = 0, $fn_builder77 = 0, $fn_builder81 = 0, $fn_builder85 = 0, $if_jump = 0, $is_static = 0;
 var $jmp_back = 0, $jmp_skip = 0, $lnot = 0, $loop = 0, $loop_stack = 0, $ret_expr = 0, $retval = 0, $self$addr = 0, $tobool = 0, $tobool16 = 0, $tobool23 = 0, $tobool40 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $working_loc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(320|0);
 $agg$tmp84$byval_copy = sp + 288|0;
 $agg$tmp75$byval_copy = sp + 280|0;
 $agg$tmp56$byval_copy = sp + 272|0;
 $agg$tmp35$byval_copy = sp + 264|0;
 $agg$tmp$byval_copy = sp + 256|0;
 $vararg_buffer1 = sp + 168|0;
 $vararg_buffer = sp + 160|0;
 $ret_expr = sp + 128|0;
 $agg$tmp = sp + 240|0;
 $expr = sp + 96|0;
 $agg$tmp35 = sp + 232|0;
 $loop = sp + 216|0;
 $expr55 = sp + 64|0;
 $agg$tmp56 = sp + 200|0;
 $expr74 = sp + 32|0;
 $agg$tmp75 = sp + 184|0;
 $expr83 = sp;
 $agg$tmp84 = sp + 176|0;
 $self$addr = $self;
 $0 = $self$addr;
 $current_token = ((($0)) + 8|0);
 $1 = HEAP32[$current_token>>2]|0;
 L1: do {
  switch ($1|0) {
  case 44:  {
   label = 3;
   break;
  }
  case 8:  {
   $8 = $self$addr;
   (_bfParser_match($8,8)|0);
   label = 27;
   break;
  }
  case 45:  {
   $9 = $self$addr;
   (_bfParser_match($9,45)|0);
   $10 = $self$addr;
   (_bfParser_eat($10,8,0,3498)|0);
   $11 = $self$addr;
   $loop_stack = ((($11)) + 48|0);
   $12 = HEAP32[$loop_stack>>2]|0;
   $tobool = ($12|0)!=(0|0);
   $13 = $self$addr;
   if ($tobool) {
    $fn_builder = ((($13)) + 28|0);
    $14 = HEAP32[$fn_builder>>2]|0;
    _bfVMFunctionBuilder_addInstBreak($14);
   } else {
    _bfEmitError($13,3539,$vararg_buffer1);
   }
   $retval = 0;
   $104 = $retval;
   STACKTOP = sp;return ($104|0);
   break;
  }
  case 38:  {
   $15 = $self$addr;
   (_bfParser_match($15,38)|0);
   $16 = $self$addr;
   $fn_builder13 = ((($16)) + 28|0);
   $17 = HEAP32[$fn_builder13>>2]|0;
   $call14 = (_bfVMFunctionBuilder_pushTemp($17,1)|0);
   $expr_loc = $call14;
   $18 = $self$addr;
   $call15 = (_bfParser_is($18,8)|0);
   $tobool16 = ($call15|0)!=(0);
   if (!($tobool16)) {
    $19 = $expr_loc;
    _parserVariableMakeTemp($agg$tmp,-1);
    ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
    _exprMake($ret_expr,$19,$agg$tmp$byval_copy);
    $20 = $self$addr;
    _parseExpr($20,$ret_expr,0);
   }
   $21 = $self$addr;
   $fn_builder19 = ((($21)) + 28|0);
   $22 = HEAP32[$fn_builder19>>2]|0;
   $23 = $expr_loc;
   $conv = $23&65535;
   _bfVMFunctionBuilder_addInstABx($22,25,0,$conv);
   $24 = $self$addr;
   $fn_builder20 = ((($24)) + 28|0);
   $25 = HEAP32[$fn_builder20>>2]|0;
   $26 = $expr_loc;
   _bfVMFunctionBuilder_popTemp($25,$26);
   $27 = $self$addr;
   (_bfParser_match($27,8)|0);
   while(1) {
    $28 = $self$addr;
    $call22 = (_bfParser_is($28,5)|0);
    $tobool23 = ($call22|0)!=(0);
    $lnot = $tobool23 ^ 1;
    if (!($lnot)) {
     break;
    }
    $29 = $self$addr;
    $30 = $self$addr;
    $current_token24 = ((($30)) + 8|0);
    $31 = HEAP32[$current_token24>>2]|0;
    (_bfParser_match($29,$31)|0);
   }
   $retval = 0;
   $104 = $retval;
   STACKTOP = sp;return ($104|0);
   break;
  }
  case 24:  {
   $32 = $self$addr;
   (_bfParser_match($32,24)|0);
   $33 = $self$addr;
   _parseClassDecl($33);
   label = 27;
   break;
  }
  case 25:  {
   $34 = $self$addr;
   (_bfParser_match($34,25)|0);
   $35 = $self$addr;
   (_bfParser_eat($35,0,0,3577)|0);
   $36 = $self$addr;
   $fn_builder33 = ((($36)) + 28|0);
   $37 = HEAP32[$fn_builder33>>2]|0;
   $call34 = (_bfVMFunctionBuilder_pushTemp($37,1)|0);
   $expr_loc32 = $call34;
   $38 = $expr_loc32;
   _parserVariableMakeTemp($agg$tmp35,-1);
   ;HEAP32[$agg$tmp35$byval_copy>>2]=HEAP32[$agg$tmp35>>2]|0;HEAP32[$agg$tmp35$byval_copy+4>>2]=HEAP32[$agg$tmp35+4>>2]|0;
   _exprMake($expr,$38,$agg$tmp35$byval_copy);
   $39 = $self$addr;
   _parseExpr($39,$expr,0);
   $40 = $self$addr;
   (_bfParser_eat($40,1,0,3627)|0);
   $41 = $self$addr;
   $call37 = (_parserMakeJump($41)|0);
   $if_jump = $call37;
   $42 = $self$addr;
   $fn_builder38 = ((($42)) + 28|0);
   $43 = HEAP32[$fn_builder38>>2]|0;
   $44 = $expr_loc32;
   _bfVMFunctionBuilder_popTemp($43,$44);
   $45 = $self$addr;
   _parseBlock($45);
   $46 = $self$addr;
   $call39 = (_bfParser_match($46,26)|0);
   $tobool40 = ($call39|0)!=(0);
   $47 = $self$addr;
   if ($tobool40) {
    $call42 = (_parserMakeJump($47)|0);
    $else_jump = $call42;
    $48 = $self$addr;
    $49 = $if_jump;
    $50 = $expr_loc32;
    $conv43 = $50&65535;
    _parserPatchJump($48,$49,$conv43,1);
    $51 = $self$addr;
    (_bfParser_parse($51)|0);
    $52 = $self$addr;
    $53 = $else_jump;
    _parserPatchJump($52,$53,65535,0);
    label = 27;
    break L1;
   } else {
    $54 = $if_jump;
    $55 = $expr_loc32;
    $conv46 = $55&65535;
    _parserPatchJump($47,$54,$conv46,1);
    label = 27;
    break L1;
   }
   break;
  }
  case 36:  {
   $56 = $self$addr;
   (_bfParser_match($56,36)|0);
   $57 = $self$addr;
   _loopPush($57,$loop);
   $58 = $self$addr;
   $fn_builder51 = ((($58)) + 28|0);
   $59 = HEAP32[$fn_builder51>>2]|0;
   $call52 = (_bfVMFunctionBuilder_pushTemp($59,1)|0);
   $expr_loc50 = $call52;
   $60 = $self$addr;
   $call53 = (_parserMakeJumpRev($60)|0);
   $jmp_back = $call53;
   $61 = $self$addr;
   (_bfParser_eat($61,0,0,3676)|0);
   $62 = $expr_loc50;
   _parserVariableMakeTemp($agg$tmp56,-1);
   ;HEAP32[$agg$tmp56$byval_copy>>2]=HEAP32[$agg$tmp56>>2]|0;HEAP32[$agg$tmp56$byval_copy+4>>2]=HEAP32[$agg$tmp56+4>>2]|0;
   _exprMake($expr55,$62,$agg$tmp56$byval_copy);
   $63 = $self$addr;
   _parseExpr($63,$expr55,0);
   $64 = $self$addr;
   (_bfParser_eat($64,1,0,3733)|0);
   $65 = $self$addr;
   $call58 = (_parserMakeJump($65)|0);
   $jmp_skip = $call58;
   $66 = $self$addr;
   _loopBodyStart($66);
   $67 = $self$addr;
   (_bfParser_parse($67)|0);
   $68 = $self$addr;
   $69 = $jmp_back;
   _parserPatchJumpRev($68,$69,65535,0);
   $70 = $self$addr;
   $71 = $jmp_skip;
   $72 = $expr_loc50;
   $conv60 = $72&65535;
   _parserPatchJump($70,$71,$conv60,1);
   $73 = $self$addr;
   $fn_builder61 = ((($73)) + 28|0);
   $74 = HEAP32[$fn_builder61>>2]|0;
   $75 = $expr_loc50;
   _bfVMFunctionBuilder_popTemp($74,$75);
   $76 = $self$addr;
   _loopPop($76);
   label = 27;
   break;
  }
  case 21: case 47:  {
   $77 = $self$addr;
   $call63 = (_bfParser_match($77,47)|0);
   $is_static = $call63;
   $78 = $self$addr;
   (_bfParser_match($78,21)|0);
   $79 = $self$addr;
   $80 = $is_static;
   _parseVarDecl($79,$80);
   label = 27;
   break;
  }
  case 23:  {
   $81 = $self$addr;
   (_bfParser_match($81,23)|0);
   $82 = $self$addr;
   _parseFunctionDecl($82);
   label = 27;
   break;
  }
  case 22:  {
   $83 = $self$addr;
   (_bfParser_match($83,22)|0);
   $84 = $self$addr;
   _parseImport($84);
   label = 27;
   break;
  }
  case 37:  {
   $85 = $self$addr;
   (_bfParser_match($85,37)|0);
   $86 = $self$addr;
   _parseForStatement($86);
   label = 27;
   break;
  }
  case 20:  {
   $87 = $self$addr;
   $fn_builder72 = ((($87)) + 28|0);
   $88 = HEAP32[$fn_builder72>>2]|0;
   $call73 = (_bfVMFunctionBuilder_pushTemp($88,1)|0);
   $working_loc = $call73;
   $89 = $working_loc;
   _parserVariableMakeTemp($agg$tmp75,-1);
   ;HEAP32[$agg$tmp75$byval_copy>>2]=HEAP32[$agg$tmp75>>2]|0;HEAP32[$agg$tmp75$byval_copy+4>>2]=HEAP32[$agg$tmp75+4>>2]|0;
   _exprMake($expr74,$89,$agg$tmp75$byval_copy);
   $90 = $self$addr;
   _parseExpr($90,$expr74,0);
   $91 = $self$addr;
   (_bfParser_match($91,8)|0);
   $92 = $self$addr;
   $fn_builder77 = ((($92)) + 28|0);
   $93 = HEAP32[$fn_builder77>>2]|0;
   $94 = $working_loc;
   _bfVMFunctionBuilder_popTemp($93,$94);
   label = 27;
   break;
  }
  case 4:  {
   $95 = $self$addr;
   _parseBlock($95);
   label = 27;
   break;
  }
  case 49: case 46:  {
   $96 = $self$addr;
   $fn_builder81 = ((($96)) + 28|0);
   $97 = HEAP32[$fn_builder81>>2]|0;
   $call82 = (_bfVMFunctionBuilder_pushTemp($97,1)|0);
   $expr_loc80 = $call82;
   $98 = $expr_loc80;
   $99 = $expr_loc80;
   _parserVariableMakeTemp($agg$tmp84,$99);
   ;HEAP32[$agg$tmp84$byval_copy>>2]=HEAP32[$agg$tmp84>>2]|0;HEAP32[$agg$tmp84$byval_copy+4>>2]=HEAP32[$agg$tmp84+4>>2]|0;
   _exprMake($expr83,$98,$agg$tmp84$byval_copy);
   $100 = $self$addr;
   _parseExpr($100,$expr83,0);
   $101 = $self$addr;
   $fn_builder85 = ((($101)) + 28|0);
   $102 = HEAP32[$fn_builder85>>2]|0;
   $103 = $expr_loc80;
   _bfVMFunctionBuilder_popTemp($102,$103);
   label = 27;
   break;
  }
  default: {
   $2 = $self$addr;
   $3 = $self$addr;
   $current_token1 = ((($3)) + 8|0);
   $4 = HEAP32[$current_token1>>2]|0;
   $call = (_tokentypeToString($4)|0);
   HEAP32[$vararg_buffer>>2] = $call;
   _bfEmitError($2,3476,$vararg_buffer);
   $5 = $self$addr;
   $6 = $self$addr;
   $current_token3 = ((($6)) + 8|0);
   $7 = HEAP32[$current_token3>>2]|0;
   (_bfParser_match($5,$7)|0);
   label = 3;
  }
  }
 } while(0);
 if ((label|0) == 3) {
  $retval = 0;
  $104 = $retval;
  STACKTOP = sp;return ($104|0);
 }
 else if ((label|0) == 27) {
  $retval = 1;
  $104 = $retval;
  STACKTOP = sp;return ($104|0);
 }
 return (0)|0;
}
function _tokentypeToString($t) {
 $t = $t|0;
 var $0 = 0, $1 = 0, $retval = 0, $t$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $t$addr = $t;
 $0 = $t$addr;
 do {
  switch ($0|0) {
  case 49:  {
   $retval = 8070;
   break;
  }
  case 48:  {
   $retval = 8090;
   break;
  }
  case 47:  {
   $retval = 8107;
   break;
  }
  case 46:  {
   $retval = 8128;
   break;
  }
  case 45:  {
   $retval = 8146;
   break;
  }
  case 0:  {
   $retval = 8171;
   break;
  }
  case 1:  {
   $retval = 8193;
   break;
  }
  case 2:  {
   $retval = 8215;
   break;
  }
  case 3:  {
   $retval = 8239;
   break;
  }
  case 4:  {
   $retval = 8263;
   break;
  }
  case 5:  {
   $retval = 8285;
   break;
  }
  case 6:  {
   $retval = 8307;
   break;
  }
  case 7:  {
   $retval = 8315;
   break;
  }
  case 8:  {
   $retval = 8321;
   break;
  }
  case 9:  {
   $retval = 8346;
   break;
  }
  case 10:  {
   $retval = 8366;
   break;
  }
  case 11:  {
   $retval = 8387;
   break;
  }
  case 12:  {
   $retval = 8392;
   break;
  }
  case 13:  {
   $retval = 8398;
   break;
  }
  case 14:  {
   $retval = 8403;
   break;
  }
  case 15:  {
   $retval = 8407;
   break;
  }
  case 16:  {
   $retval = 8419;
   break;
  }
  case 17:  {
   $retval = 8432;
   break;
  }
  case 18:  {
   $retval = 8442;
   break;
  }
  case 19:  {
   $retval = 8452;
   break;
  }
  case 20:  {
   $retval = 8456;
   break;
  }
  case 21:  {
   $retval = 8467;
   break;
  }
  case 22:  {
   $retval = 8476;
   break;
  }
  case 23:  {
   $retval = 8483;
   break;
  }
  case 24:  {
   $retval = 8488;
   break;
  }
  case 25:  {
   $retval = 8508;
   break;
  }
  case 26:  {
   $retval = 8516;
   break;
  }
  case 27:  {
   $retval = 8526;
   break;
  }
  case 28:  {
   $retval = 8534;
   break;
  }
  case 29:  {
   $retval = 8542;
   break;
  }
  case 30:  {
   $retval = 8550;
   break;
  }
  case 31:  {
   $retval = 8558;
   break;
  }
  case 32:  {
   $retval = 8566;
   break;
  }
  case 33:  {
   $retval = 8574;
   break;
  }
  case 34:  {
   $retval = 8583;
   break;
  }
  case 36:  {
   $retval = 8591;
   break;
  }
  case 37:  {
   $retval = 8616;
   break;
  }
  case 38:  {
   $retval = 8625;
   break;
  }
  case 39:  {
   $retval = 8637;
   break;
  }
  case 40:  {
   $retval = 8649;
   break;
  }
  case 41:  {
   $retval = 8659;
   break;
  }
  case 42:  {
   $retval = 8670;
   break;
  }
  case 43:  {
   $retval = 8681;
   break;
  }
  case 44:  {
   $retval = 3400;
   break;
  }
  default: {
   $retval = 8691;
  }
  }
 } while(0);
 $1 = $retval;
 STACKTOP = sp;return ($1|0);
}
function _bfEmitError($self,$format,$varargs) {
 $self = $self|0;
 $format = $format|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$ptr = 0, $args = 0, $call = 0, $cmp = 0, $current_line_no = 0;
 var $error_msg = 0, $format$addr = 0, $has_error = 0, $has_error22 = 0, $last_error = 0, $last_error19 = 0, $lexer = 0, $lexer10 = 0, $lexer7 = 0, $lexer8 = 0, $line_bgn = 0, $line_end = 0, $line_no = 0, $line_pos_bgn = 0, $line_pos_end = 0, $num_chars = 0, $params = 0, $params15 = 0, $self$addr = 0, $sub = 0;
 var $tobool = 0, $tobool12 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vm = 0, $vm11 = 0, $vm14 = 0, $vm17 = 0, $vm18 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(320|0);
 $vararg_buffer = sp + 272|0;
 $error_msg = sp + 16|0;
 $args = sp;
 $self$addr = $self;
 $format$addr = $format;
 $0 = $self$addr;
 $has_error = ((($0)) + 44|0);
 $1 = HEAP32[$has_error>>2]|0;
 $tobool = ($1|0)!=(0);
 if ($tobool) {
  STACKTOP = sp;return;
 }
 HEAP32[$args>>2] = $varargs;
 $2 = $format$addr;
 $call = (_vsnprintf($error_msg,256,$2,$args)|0);
 $num_chars = $call;
 $3 = $num_chars;
 $cmp = ($3|0)<(256);
 if ($cmp) {
  $4 = $self$addr;
  $lexer = ((($4)) + 4|0);
  $5 = HEAP32[$lexer>>2]|0;
  $current_line_no = ((($5)) + 20|0);
  $6 = HEAP32[$current_line_no>>2]|0;
  $line_no = $6;
  $7 = $self$addr;
  $lexer7 = ((($7)) + 4|0);
  $8 = HEAP32[$lexer7>>2]|0;
  $line_pos_bgn = ((($8)) + 24|0);
  $9 = HEAP32[$line_pos_bgn>>2]|0;
  $line_bgn = $9;
  $10 = $self$addr;
  $lexer8 = ((($10)) + 4|0);
  $11 = HEAP32[$lexer8>>2]|0;
  $line_pos_end = ((($11)) + 28|0);
  $12 = HEAP32[$line_pos_end>>2]|0;
  $line_end = $12;
  $13 = $self$addr;
  $vm = ((($13)) + 40|0);
  $14 = HEAP32[$vm>>2]|0;
  $last_error = ((($14)) + 596|0);
  $15 = $line_no;
  $16 = $line_end;
  $17 = $line_bgn;
  $sub = (($16) - ($17))|0;
  $18 = $self$addr;
  $lexer10 = ((($18)) + 4|0);
  $19 = HEAP32[$lexer10>>2]|0;
  $20 = HEAP32[$19>>2]|0;
  $21 = $line_bgn;
  $add$ptr = (($20) + ($21)|0);
  HEAP32[$vararg_buffer>>2] = $error_msg;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $15;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $sub;
  $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
  HEAP32[$vararg_ptr3>>2] = $add$ptr;
  _String_sprintf($last_error,8049,$vararg_buffer);
  $22 = $self$addr;
  $vm11 = ((($22)) + 40|0);
  $23 = HEAP32[$vm11>>2]|0;
  $params = ((($23)) + 16|0);
  $24 = HEAP32[$params>>2]|0;
  $tobool12 = ($24|0)!=(0|0);
  if ($tobool12) {
   $25 = $self$addr;
   $vm14 = ((($25)) + 40|0);
   $26 = HEAP32[$vm14>>2]|0;
   $params15 = ((($26)) + 16|0);
   $27 = HEAP32[$params15>>2]|0;
   $28 = $self$addr;
   $vm17 = ((($28)) + 40|0);
   $29 = HEAP32[$vm17>>2]|0;
   $30 = $line_no;
   $31 = $self$addr;
   $vm18 = ((($31)) + 40|0);
   $32 = HEAP32[$vm18>>2]|0;
   $last_error19 = ((($32)) + 596|0);
   $33 = HEAP32[$last_error19>>2]|0;
   FUNCTION_TABLE_viiii[$27 & 31]($29,4,$30,$33);
  }
 }
 $34 = $self$addr;
 $has_error22 = ((($34)) + 44|0);
 HEAP32[$has_error22>>2] = 1;
 STACKTOP = sp;return;
}
function _bfParser_match($self,$type) {
 $self = $self|0;
 $type = $type|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $call = 0, $cmp = 0, $current_token = 0, $lor$ext = 0, $self$addr = 0, $tobool = 0, $type$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self$addr = $self;
 $type$addr = $type;
 $0 = $self$addr;
 $1 = $type$addr;
 $call = (_bfParser_eat($0,$1,1,0)|0);
 $tobool = ($call|0)!=(0);
 if ($tobool) {
  $4 = 1;
  $lor$ext = $4&1;
  STACKTOP = sp;return ($lor$ext|0);
 }
 $2 = $self$addr;
 $current_token = ((($2)) + 8|0);
 $3 = HEAP32[$current_token>>2]|0;
 $cmp = ($3|0)==(44);
 $4 = $cmp;
 $lor$ext = $4&1;
 STACKTOP = sp;return ($lor$ext|0);
}
function _bfParser_eat($self,$type,$is_optional,$error_msg) {
 $self = $self|0;
 $type = $type|0;
 $is_optional = $is_optional|0;
 $error_msg = $error_msg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cmp = 0, $cmp6 = 0;
 var $cmp9 = 0, $current_token = 0, $current_token10 = 0, $current_token2 = 0, $current_token4 = 0, $current_token7 = 0, $error_msg$addr = 0, $has_error = 0, $is_optional$addr = 0, $lexer = 0, $lexer11 = 0, $retval = 0, $self$addr = 0, $tmp = 0, $tmp12 = 0, $tobool = 0, $type$addr = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer = sp + 32|0;
 $tmp = sp + 16|0;
 $tmp12 = sp;
 $self$addr = $self;
 $type$addr = $type;
 $is_optional$addr = $is_optional;
 $error_msg$addr = $error_msg;
 $0 = $self$addr;
 $current_token = ((($0)) + 8|0);
 $1 = HEAP32[$current_token>>2]|0;
 $2 = $type$addr;
 $cmp = ($1|0)==($2|0);
 if ($cmp) {
  $3 = $self$addr;
  $current_token2 = ((($3)) + 8|0);
  $4 = $self$addr;
  $lexer = ((($4)) + 4|0);
  $5 = HEAP32[$lexer>>2]|0;
  _bfLexer_nextToken($tmp,$5);
  ;HEAP32[$current_token2>>2]=HEAP32[$tmp>>2]|0;HEAP32[$current_token2+4>>2]=HEAP32[$tmp+4>>2]|0;HEAP32[$current_token2+8>>2]=HEAP32[$tmp+8>>2]|0;HEAP32[$current_token2+12>>2]=HEAP32[$tmp+12>>2]|0;
  $retval = 1;
  $16 = $retval;
  STACKTOP = sp;return ($16|0);
 }
 $6 = $is_optional$addr;
 $tobool = ($6|0)!=(0);
 if (!($tobool)) {
  $7 = $self$addr;
  $8 = $error_msg$addr;
  HEAP32[$vararg_buffer>>2] = $8;
  _bfEmitError($7,5303,$vararg_buffer);
  while(1) {
   $9 = $self$addr;
   $current_token4 = ((($9)) + 8|0);
   $10 = HEAP32[$current_token4>>2]|0;
   $cmp6 = ($10|0)!=(8);
   if ($cmp6) {
    $11 = $self$addr;
    $current_token7 = ((($11)) + 8|0);
    $12 = HEAP32[$current_token7>>2]|0;
    $cmp9 = ($12|0)!=(44);
    $17 = $cmp9;
   } else {
    $17 = 0;
   }
   $13 = $self$addr;
   if (!($17)) {
    break;
   }
   $current_token10 = ((($13)) + 8|0);
   $14 = $self$addr;
   $lexer11 = ((($14)) + 4|0);
   $15 = HEAP32[$lexer11>>2]|0;
   _bfLexer_nextToken($tmp12,$15);
   ;HEAP32[$current_token10>>2]=HEAP32[$tmp12>>2]|0;HEAP32[$current_token10+4>>2]=HEAP32[$tmp12+4>>2]|0;HEAP32[$current_token10+8>>2]=HEAP32[$tmp12+8>>2]|0;HEAP32[$current_token10+12>>2]=HEAP32[$tmp12+12>>2]|0;
  }
  $has_error = ((($13)) + 44|0);
  HEAP32[$has_error>>2] = 1;
 }
 $retval = 0;
 $16 = $retval;
 STACKTOP = sp;return ($16|0);
}
function _bfVMFunctionBuilder_addInstBreak($self) {
 $self = $self|0;
 var $0 = 0, $call = 0, $self$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self$addr = $self;
 $0 = $self$addr;
 $call = (_bfVMFunctionBuilder_addInst($0)|0);
 HEAP32[$call>>2] = -1;
 STACKTOP = sp;return;
}
function _bfVMFunctionBuilder_pushTemp($self,$num_temps) {
 $self = $self|0;
 $num_temps = $num_temps|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0;
 var $call = 0, $call3 = 0, $cmp = 0, $cmp6 = 0, $conv = 0, $conv2 = 0, $conv4 = 0, $conv9 = 0, $i = 0, $inc = 0, $local_vars = 0, $local_vars1 = 0, $max_local_idx = 0, $max_local_idx8 = 0, $name_len = 0, $num_temps$addr = 0, $self$addr = 0, $var = 0, $var_loc = 0, $var_loc_end = 0;
 var $vars = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $self$addr = $self;
 $num_temps$addr = $num_temps;
 $0 = $self$addr;
 $local_vars = ((($0)) + 12|0);
 $call = (_Array_size($local_vars)|0);
 $var_loc = $call;
 $1 = $var_loc;
 $2 = $num_temps$addr;
 $conv = $2&65535;
 $add = (($1) + ($conv))|0;
 $var_loc_end = $add;
 $3 = $self$addr;
 $local_vars1 = ((($3)) + 12|0);
 $4 = $num_temps$addr;
 $conv2 = $4&65535;
 $call3 = (_Array_emplaceN($local_vars1,$conv2)|0);
 $vars = $call3;
 $i = 0;
 while(1) {
  $5 = $i;
  $6 = $num_temps$addr;
  $conv4 = $6&65535;
  $cmp = ($5>>>0)<($conv4>>>0);
  if (!($cmp)) {
   break;
  }
  $7 = $vars;
  $8 = $i;
  $add$ptr = (($7) + ($8<<3)|0);
  $var = $add$ptr;
  $9 = $var;
  HEAP32[$9>>2] = 8040;
  $10 = $var;
  $name_len = ((($10)) + 4|0);
  HEAP32[$name_len>>2] = 0;
  $11 = $i;
  $inc = (($11) + 1)|0;
  $i = $inc;
 }
 $12 = $self$addr;
 $max_local_idx = ((($12)) + 28|0);
 $13 = HEAP32[$max_local_idx>>2]|0;
 $14 = $var_loc_end;
 $cmp6 = ($13>>>0)<($14>>>0);
 if (!($cmp6)) {
  $17 = $var_loc;
  $conv9 = $17&65535;
  STACKTOP = sp;return ($conv9|0);
 }
 $15 = $var_loc_end;
 $16 = $self$addr;
 $max_local_idx8 = ((($16)) + 28|0);
 HEAP32[$max_local_idx8>>2] = $15;
 $17 = $var_loc;
 $conv9 = $17&65535;
 STACKTOP = sp;return ($conv9|0);
}
function _bfParser_is($self,$type) {
 $self = $self|0;
 $type = $type|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $cmp = 0, $cmp4 = 0, $current_token = 0, $current_token2 = 0, $lor$ext = 0, $self$addr = 0, $type$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self$addr = $self;
 $type$addr = $type;
 $0 = $self$addr;
 $current_token = ((($0)) + 8|0);
 $1 = HEAP32[$current_token>>2]|0;
 $2 = $type$addr;
 $cmp = ($1|0)==($2|0);
 if ($cmp) {
  $5 = 1;
  $lor$ext = $5&1;
  STACKTOP = sp;return ($lor$ext|0);
 }
 $3 = $self$addr;
 $current_token2 = ((($3)) + 8|0);
 $4 = HEAP32[$current_token2>>2]|0;
 $cmp4 = ($4|0)==(44);
 $5 = $cmp4;
 $lor$ext = $5&1;
 STACKTOP = sp;return ($lor$ext|0);
}
function _parserVariableMakeTemp($agg$result,$temp_loc) {
 $agg$result = $agg$result|0;
 $temp_loc = $temp_loc|0;
 var $0 = 0, $location = 0, $ret = 0, $temp_loc$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ret = sp;
 $temp_loc$addr = $temp_loc;
 $0 = $temp_loc$addr;
 $location = ((($ret)) + 4|0);
 HEAP16[$location>>1] = $0;
 HEAP32[$ret>>2] = 0;
 ;HEAP32[$agg$result>>2]=HEAP32[$ret>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$ret+4>>2]|0;
 STACKTOP = sp;return;
}
function _exprMake($agg$result,$write_loc,$variable) {
 $agg$result = $agg$result|0;
 $write_loc = $write_loc|0;
 $variable = $variable|0;
 var $$compoundliteral = 0, $0 = 0, $as = 0, $ret = 0, $token = 0, $var = 0, $write_loc$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $ret = sp + 16|0;
 $$compoundliteral = sp;
 $write_loc$addr = $write_loc;
 $0 = $write_loc$addr;
 HEAP16[$ret>>1] = $0;
 $token = ((($ret)) + 8|0);
 HEAP32[$$compoundliteral>>2] = 44;
 $as = ((($$compoundliteral)) + 8|0);
 HEAP32[$as>>2] = 3400;
 ;HEAP32[$token>>2]=HEAP32[$$compoundliteral>>2]|0;HEAP32[$token+4>>2]=HEAP32[$$compoundliteral+4>>2]|0;HEAP32[$token+8>>2]=HEAP32[$$compoundliteral+8>>2]|0;HEAP32[$token+12>>2]=HEAP32[$$compoundliteral+12>>2]|0;
 $var = ((($ret)) + 24|0);
 ;HEAP32[$var>>2]=HEAP32[$variable>>2]|0;HEAP32[$var+4>>2]=HEAP32[$variable+4>>2]|0;
 ;HEAP32[$agg$result>>2]=HEAP32[$ret>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$ret+4>>2]|0;HEAP32[$agg$result+8>>2]=HEAP32[$ret+8>>2]|0;HEAP32[$agg$result+12>>2]=HEAP32[$ret+12>>2]|0;HEAP32[$agg$result+16>>2]=HEAP32[$ret+16>>2]|0;HEAP32[$agg$result+20>>2]=HEAP32[$ret+20>>2]|0;HEAP32[$agg$result+24>>2]=HEAP32[$ret+24>>2]|0;HEAP32[$agg$result+28>>2]=HEAP32[$ret+28>>2]|0;
 STACKTOP = sp;return;
}
function _parseExpr($self,$expr_loc,$prec) {
 $self = $self|0;
 $expr_loc = $expr_loc|0;
 $prec = $prec|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx19 = 0, $call = 0, $call14 = 0, $cmp = 0, $current_token = 0, $current_token5 = 0, $current_token8 = 0, $expr_loc$addr = 0, $infix = 0, $infix10 = 0, $prec$addr = 0, $precedence = 0, $precedence20 = 0, $rule = 0;
 var $self$addr = 0, $tmp = 0, $tobool = 0, $tobool11 = 0, $token = 0, $token7 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $vararg_buffer1 = sp + 24|0;
 $vararg_buffer = sp + 16|0;
 $token = sp;
 $rule = sp + 44|0;
 $tmp = sp + 28|0;
 $self$addr = $self;
 $expr_loc$addr = $expr_loc;
 $prec$addr = $prec;
 $0 = $self$addr;
 $current_token = ((($0)) + 8|0);
 ;HEAP32[$token>>2]=HEAP32[$current_token>>2]|0;HEAP32[$token+4>>2]=HEAP32[$current_token+4>>2]|0;HEAP32[$token+8>>2]=HEAP32[$current_token+8>>2]|0;HEAP32[$token+12>>2]=HEAP32[$current_token+12>>2]|0;
 $1 = HEAP32[$token>>2]|0;
 _typeToRule($rule,$1);
 $2 = HEAP32[$rule>>2]|0;
 $tobool = ($2|0)!=(0|0);
 $3 = $self$addr;
 $4 = HEAP32[$token>>2]|0;
 if (!($tobool)) {
  $call = (_tokentypeToString($4)|0);
  HEAP32[$vararg_buffer>>2] = $call;
  _bfEmitError($3,7279,$vararg_buffer);
  STACKTOP = sp;return;
 }
 (_bfParser_match($3,$4)|0);
 $5 = HEAP32[$rule>>2]|0;
 $6 = $self$addr;
 $7 = $expr_loc$addr;
 FUNCTION_TABLE_viii[$5 & 15]($6,$7,$token);
 while(1) {
  $8 = $prec$addr;
  $9 = $self$addr;
  $current_token5 = ((($9)) + 8|0);
  $10 = HEAP32[$current_token5>>2]|0;
  $arrayidx = (464 + (($10*12)|0)|0);
  $precedence = ((($arrayidx)) + 8|0);
  $11 = HEAP32[$precedence>>2]|0;
  $cmp = ($8|0)<($11|0);
  if (!($cmp)) {
   label = 8;
   break;
  }
  $12 = $expr_loc$addr;
  $token7 = ((($12)) + 8|0);
  ;HEAP32[$token7>>2]=HEAP32[$token>>2]|0;HEAP32[$token7+4>>2]=HEAP32[$token+4>>2]|0;HEAP32[$token7+8>>2]=HEAP32[$token+8>>2]|0;HEAP32[$token7+12>>2]=HEAP32[$token+12>>2]|0;
  $13 = $self$addr;
  $current_token8 = ((($13)) + 8|0);
  ;HEAP32[$token>>2]=HEAP32[$current_token8>>2]|0;HEAP32[$token+4>>2]=HEAP32[$current_token8+4>>2]|0;HEAP32[$token+8>>2]=HEAP32[$current_token8+8>>2]|0;HEAP32[$token+12>>2]=HEAP32[$current_token8+12>>2]|0;
  $14 = HEAP32[$token>>2]|0;
  _typeToRule($tmp,$14);
  $infix10 = ((($tmp)) + 4|0);
  $15 = HEAP32[$infix10>>2]|0;
  $infix = $15;
  $16 = $infix;
  $tobool11 = ($16|0)!=(0|0);
  $17 = $self$addr;
  $18 = HEAP32[$token>>2]|0;
  if (!($tobool11)) {
   break;
  }
  (_bfParser_match($17,$18)|0);
  $19 = $infix;
  $20 = $self$addr;
  $21 = $expr_loc$addr;
  $22 = $expr_loc$addr;
  $23 = HEAP32[$token>>2]|0;
  $arrayidx19 = (464 + (($23*12)|0)|0);
  $precedence20 = ((($arrayidx19)) + 8|0);
  $24 = HEAP32[$precedence20>>2]|0;
  FUNCTION_TABLE_viiiii[$19 & 31]($20,$21,$22,$token,$24);
 }
 if ((label|0) == 8) {
  STACKTOP = sp;return;
 }
 $call14 = (_tokentypeToString($18)|0);
 HEAP32[$vararg_buffer1>>2] = $call14;
 _bfEmitError($17,7312,$vararg_buffer1);
 STACKTOP = sp;return;
}
function _bfVMFunctionBuilder_addInstABx($self,$op,$a,$bx) {
 $self = $self|0;
 $op = $op|0;
 $a = $a|0;
 $bx = $bx|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $a$addr = 0, $and = 0, $and1 = 0, $and2 = 0, $bx$addr = 0, $call = 0, $conv = 0, $op$addr = 0, $or = 0, $or4 = 0, $self$addr = 0, $shl = 0, $shl3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self$addr = $self;
 $op$addr = $op;
 $a$addr = $a;
 $bx$addr = $bx;
 $0 = $op$addr;
 $and = $0 & 31;
 $1 = $a$addr;
 $conv = $1&65535;
 $and1 = $conv & 511;
 $shl = $and1 << 5;
 $or = $and | $shl;
 $2 = $bx$addr;
 $and2 = $2 & 262143;
 $shl3 = $and2 << 14;
 $or4 = $or | $shl3;
 $3 = $self$addr;
 $call = (_bfVMFunctionBuilder_addInst($3)|0);
 HEAP32[$call>>2] = $or4;
 STACKTOP = sp;return;
}
function _bfVMFunctionBuilder_popTemp($self,$start) {
 $self = $self|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $conv = 0, $local_vars = 0, $self$addr = 0, $start$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self$addr = $self;
 $start$addr = $start;
 $0 = $self$addr;
 $local_vars = ((($0)) + 12|0);
 $1 = $start$addr;
 $conv = $1&65535;
 _Array_resize($local_vars,$conv);
 STACKTOP = sp;return;
}
function _parseClassDecl($self) {
 $self = $self|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $as = 0, $as3 = 0, $base_class_obj = 0, $base_class_val = 0, $base_clz = 0, $base_name_str = 0, $base_name_token = 0, $call1 = 0, $call15 = 0;
 var $call17 = 0, $call21 = 0, $call23 = 0, $call29 = 0, $call35 = 0, $call37 = 0, $call41 = 0, $call45 = 0, $call48 = 0, $call5 = 0, $call52 = 0, $call8 = 0, $clz = 0, $cmp = 0, $current_clz = 0, $current_clz64 = 0, $current_module = 0, $current_module28 = 0, $current_module31 = 0, $current_token = 0;
 var $current_token2 = 0, $lnot = 0, $name_str = 0, $name_str$byval_copy = 0, $name_str$byval_copy14 = 0, $name_token = 0, $self$addr = 0, $tobool = 0, $tobool11 = 0, $tobool36 = 0, $tobool38 = 0, $tobool42 = 0, $tobool46 = 0, $tobool49 = 0, $tobool53 = 0, $tobool6 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer12 = 0, $vararg_buffer4 = 0;
 var $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, $variables = 0, $vm = 0, $vm30 = 0, $vm32 = 0, $vm63 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $name_str$byval_copy14 = sp + 136|0;
 $name_str$byval_copy = sp + 128|0;
 $vararg_buffer12 = sp + 80|0;
 $vararg_buffer10 = sp + 72|0;
 $vararg_buffer4 = sp + 56|0;
 $vararg_buffer = sp + 40|0;
 $name_token = sp + 24|0;
 $name_str = sp + 112|0;
 $base_name_token = sp + 8|0;
 $base_name_str = sp + 96|0;
 $base_class_val = sp;
 $self$addr = $self;
 $0 = $self$addr;
 $current_token = ((($0)) + 8|0);
 ;HEAP32[$name_token>>2]=HEAP32[$current_token>>2]|0;HEAP32[$name_token+4>>2]=HEAP32[$current_token+4>>2]|0;HEAP32[$name_token+8>>2]=HEAP32[$current_token+8>>2]|0;HEAP32[$name_token+12>>2]=HEAP32[$current_token+12>>2]|0;
 $as = ((($name_token)) + 8|0);
 ;HEAP32[$name_str>>2]=HEAP32[$as>>2]|0;HEAP32[$name_str+4>>2]=HEAP32[$as+4>>2]|0;
 $base_clz = 0;
 $1 = $self$addr;
 (_bfParser_eat($1,20,0,6591)|0);
 $2 = $self$addr;
 $call1 = (_bfParser_match($2,7)|0);
 $tobool = ($call1|0)!=(0);
 do {
  if ($tobool) {
   $3 = $self$addr;
   $current_token2 = ((($3)) + 8|0);
   ;HEAP32[$base_name_token>>2]=HEAP32[$current_token2>>2]|0;HEAP32[$base_name_token+4>>2]=HEAP32[$current_token2+4>>2]|0;HEAP32[$base_name_token+8>>2]=HEAP32[$current_token2+8>>2]|0;HEAP32[$base_name_token+12>>2]=HEAP32[$current_token2+12>>2]|0;
   $as3 = ((($base_name_token)) + 8|0);
   ;HEAP32[$base_name_str>>2]=HEAP32[$as3>>2]|0;HEAP32[$base_name_str+4>>2]=HEAP32[$as3+4>>2]|0;
   $4 = $self$addr;
   $call5 = (_bfParser_eat($4,20,0,6633)|0);
   $tobool6 = ($call5|0)!=(0);
   if ($tobool6) {
    $5 = $self$addr;
    $current_module = ((($5)) + 32|0);
    $6 = HEAP32[$current_module>>2]|0;
    $7 = HEAP32[$base_name_str>>2]|0;
    $call8 = (_bfStringRange_length($base_name_str)|0);
    $8 = (_bfVM_stackFindVariable($6,$7,$call8)|0);
    $9 = (getTempRet0() | 0);
    $10 = $base_class_val;
    $11 = $10;
    HEAP32[$11>>2] = $8;
    $12 = (($10) + 4)|0;
    $13 = $12;
    HEAP32[$13>>2] = $9;
    $14 = $base_class_val;
    $15 = $14;
    $16 = HEAP32[$15>>2]|0;
    $17 = (($14) + 4)|0;
    $18 = $17;
    $19 = HEAP32[$18>>2]|0;
    $20 = (_bfVMValue_isPointer($16,$19)|0);
    $tobool11 = ($20|0)!=(0);
    if (!($tobool11)) {
     $34 = $self$addr;
     $35 = HEAP32[$name_str>>2]|0;
     $call21 = (_bfStringRange_length($name_str)|0);
     $36 = HEAP32[$base_name_str>>2]|0;
     $call23 = (_bfStringRange_length($base_name_str)|0);
     HEAP32[$vararg_buffer4>>2] = $35;
     $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
     HEAP32[$vararg_ptr7>>2] = $call21;
     $vararg_ptr8 = ((($vararg_buffer4)) + 8|0);
     HEAP32[$vararg_ptr8>>2] = $36;
     $vararg_ptr9 = ((($vararg_buffer4)) + 12|0);
     HEAP32[$vararg_ptr9>>2] = $call23;
     _bfEmitError($34,6690,$vararg_buffer4);
     break;
    }
    $21 = $base_class_val;
    $22 = $21;
    $23 = HEAP32[$22>>2]|0;
    $24 = (($21) + 4)|0;
    $25 = $24;
    $26 = HEAP32[$25>>2]|0;
    $27 = (_bfVmValue_asPointer($23,$26)|0);
    $base_class_obj = $27;
    $28 = $base_class_obj;
    $29 = HEAP32[$28>>2]|0;
    $cmp = ($29|0)==(2);
    if ($cmp) {
     $30 = $base_class_obj;
     $base_clz = $30;
     break;
    } else {
     $31 = $self$addr;
     $call15 = (_bfStringRange_length($base_name_str)|0);
     $32 = HEAP32[$base_name_str>>2]|0;
     $call17 = (_bfStringRange_length($name_str)|0);
     $33 = HEAP32[$name_str>>2]|0;
     HEAP32[$vararg_buffer>>2] = $call15;
     $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
     HEAP32[$vararg_ptr1>>2] = $32;
     $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
     HEAP32[$vararg_ptr2>>2] = $call17;
     $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
     HEAP32[$vararg_ptr3>>2] = $33;
     _bfEmitError($31,6690,$vararg_buffer);
     break;
    }
   }
  }
 } while(0);
 $37 = $self$addr;
 (_bfParser_eat($37,4,0,6757)|0);
 $38 = $self$addr;
 $vm = ((($38)) + 40|0);
 $39 = HEAP32[$vm>>2]|0;
 $40 = $self$addr;
 $current_module28 = ((($40)) + 32|0);
 $41 = HEAP32[$current_module28>>2]|0;
 $42 = $base_clz;
 ;HEAP32[$name_str$byval_copy>>2]=HEAP32[$name_str>>2]|0;HEAP32[$name_str$byval_copy+4>>2]=HEAP32[$name_str+4>>2]|0;
 $call29 = (_bfVM_createClass($39,$41,$name_str$byval_copy,$42,0)|0);
 $clz = $call29;
 $43 = $self$addr;
 $vm30 = ((($43)) + 40|0);
 $44 = HEAP32[$vm30>>2]|0;
 $45 = $clz;
 _bfGCPushRoot($44,$45);
 $46 = $self$addr;
 $current_module31 = ((($46)) + 32|0);
 $47 = HEAP32[$current_module31>>2]|0;
 $variables = ((($47)) + 16|0);
 $48 = $self$addr;
 $vm32 = ((($48)) + 40|0);
 $49 = HEAP32[$vm32>>2]|0;
 $50 = $clz;
 $51 = (_bfVMValue_fromPointer($50)|0);
 $52 = (getTempRet0() | 0);
 ;HEAP32[$name_str$byval_copy14>>2]=HEAP32[$name_str>>2]|0;HEAP32[$name_str$byval_copy14+4>>2]=HEAP32[$name_str+4>>2]|0;
 (_bfVM_xSetVariable($variables,$49,$name_str$byval_copy14,$51,$52)|0);
 $53 = $clz;
 $54 = $self$addr;
 $current_clz = ((($54)) + 36|0);
 HEAP32[$current_clz>>2] = $53;
 while(1) {
  $55 = $self$addr;
  $call35 = (_bfParser_is($55,5)|0);
  $tobool36 = ($call35|0)!=(0);
  $lnot = $tobool36 ^ 1;
  $56 = $self$addr;
  if (!($lnot)) {
   break;
  }
  $call37 = (_bfParser_match($56,21)|0);
  $tobool38 = ($call37|0)!=(0);
  $57 = $self$addr;
  do {
   if ($tobool38) {
    $58 = $clz;
    _parseClassVarDecl($57,$58,0);
   } else {
    $call41 = (_bfParser_match($57,23)|0);
    $tobool42 = ($call41|0)!=(0);
    $59 = $self$addr;
    if ($tobool42) {
     $60 = $clz;
     _parseClassFunc($59,$60,0);
     break;
    }
    $call45 = (_bfParser_match($59,47)|0);
    $tobool46 = ($call45|0)!=(0);
    $61 = $self$addr;
    if (!($tobool46)) {
     _bfEmitError($61,6885,$vararg_buffer12);
     $66 = $self$addr;
     (_bfParser_parse($66)|0);
     break;
    }
    $call48 = (_bfParser_match($61,23)|0);
    $tobool49 = ($call48|0)!=(0);
    $62 = $self$addr;
    if ($tobool49) {
     $63 = $clz;
     _parseClassFunc($62,$63,1);
     break;
    }
    $call52 = (_bfParser_match($62,21)|0);
    $tobool53 = ($call52|0)!=(0);
    $64 = $self$addr;
    if ($tobool53) {
     $65 = $clz;
     _parseClassVarDecl($64,$65,1);
     break;
    } else {
     _bfEmitError($64,6805,$vararg_buffer10);
     break;
    }
   }
  } while(0);
 }
 $vm63 = ((($56)) + 40|0);
 $67 = HEAP32[$vm63>>2]|0;
 _bfGCPopRoot($67);
 $68 = $self$addr;
 $current_clz64 = ((($68)) + 36|0);
 HEAP32[$current_clz64>>2] = 0;
 $69 = $self$addr;
 (_bfParser_eat($69,5,0,6962)|0);
 $70 = $self$addr;
 (_bfParser_eat($70,8,0,7008)|0);
 STACKTOP = sp;return;
}
function _parserMakeJump($self) {
 $self = $self|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $call = 0, $fn_builder = 0, $fn_builder1 = 0, $instructions = 0, $jump_idx = 0, $self$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self$addr = $self;
 $0 = $self$addr;
 $fn_builder = ((($0)) + 28|0);
 $1 = HEAP32[$fn_builder>>2]|0;
 $instructions = ((($1)) + 20|0);
 $call = (_Array_size($instructions)|0);
 $jump_idx = $call;
 $2 = $self$addr;
 $fn_builder1 = ((($2)) + 28|0);
 $3 = HEAP32[$fn_builder1>>2]|0;
 _bfVMFunctionBuilder_addInstAsBx($3,22,0,0);
 $4 = $jump_idx;
 STACKTOP = sp;return ($4|0);
}
function _parseBlock($self) {
 $self = $self|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $call1 = 0, $call2 = 0, $fn_builder = 0, $fn_builder4 = 0, $lnot = 0, $self$addr = 0, $tobool = 0, $tobool3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self$addr = $self;
 $0 = $self$addr;
 (_bfParser_eat($0,4,0,6505)|0);
 $1 = $self$addr;
 $fn_builder = ((($1)) + 28|0);
 $2 = HEAP32[$fn_builder>>2]|0;
 _bfVMFunctionBuilder_pushScope($2);
 while(1) {
  $3 = $self$addr;
  $call1 = (_bfParser_is($3,5)|0);
  $tobool = ($call1|0)!=(0);
  $lnot = $tobool ^ 1;
  if (!($lnot)) {
   break;
  }
  $4 = $self$addr;
  $call2 = (_bfParser_parse($4)|0);
  $tobool3 = ($call2|0)!=(0);
  if (!($tobool3)) {
   break;
  }
 }
 $5 = $self$addr;
 $fn_builder4 = ((($5)) + 28|0);
 $6 = HEAP32[$fn_builder4>>2]|0;
 _bfVMFunctionBuilder_popScope($6);
 $7 = $self$addr;
 (_bfParser_eat($7,5,0,6549)|0);
 STACKTOP = sp;return;
}
function _parserPatchJump($self,$jump_idx,$cond_var,$if_not) {
 $self = $self|0;
 $jump_idx = $jump_idx|0;
 $cond_var = $cond_var|0;
 $if_not = $if_not|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $call = 0, $cond_var$addr = 0, $current_loc = 0, $fn_builder = 0, $if_not$addr = 0, $instructions = 0, $jump_idx$addr = 0, $self$addr = 0, $sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $self$addr = $self;
 $jump_idx$addr = $jump_idx;
 $cond_var$addr = $cond_var;
 $if_not$addr = $if_not;
 $0 = $self$addr;
 $fn_builder = ((($0)) + 28|0);
 $1 = HEAP32[$fn_builder>>2]|0;
 $instructions = ((($1)) + 20|0);
 $call = (_Array_size($instructions)|0);
 $current_loc = $call;
 $2 = $self$addr;
 $3 = $jump_idx$addr;
 $4 = $cond_var$addr;
 $5 = $current_loc;
 $6 = $jump_idx$addr;
 $sub = (($5) - ($6))|0;
 $7 = $if_not$addr;
 _parserPatchJumpHelper($2,$3,$4,$sub,$7);
 STACKTOP = sp;return;
}
function _parserMakeJumpRev($self) {
 $self = $self|0;
 var $0 = 0, $1 = 0, $call = 0, $fn_builder = 0, $instructions = 0, $self$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self$addr = $self;
 $0 = $self$addr;
 $fn_builder = ((($0)) + 28|0);
 $1 = HEAP32[$fn_builder>>2]|0;
 $instructions = ((($1)) + 20|0);
 $call = (_Array_size($instructions)|0);
 STACKTOP = sp;return ($call|0);
}
function _parserPatchJumpRev($self,$jump_idx,$cond_var,$if_not) {
 $self = $self|0;
 $jump_idx = $jump_idx|0;
 $cond_var = $cond_var|0;
 $if_not = $if_not|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $cond_var$addr = 0, $current_loc = 0, $fn_builder = 0, $fn_builder1 = 0, $if_not$addr = 0, $instructions = 0, $jump_idx$addr = 0, $self$addr = 0, $sub = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $self$addr = $self;
 $jump_idx$addr = $jump_idx;
 $cond_var$addr = $cond_var;
 $if_not$addr = $if_not;
 $0 = $self$addr;
 $fn_builder = ((($0)) + 28|0);
 $1 = HEAP32[$fn_builder>>2]|0;
 $instructions = ((($1)) + 20|0);
 $call = (_Array_size($instructions)|0);
 $current_loc = $call;
 $2 = $self$addr;
 $fn_builder1 = ((($2)) + 28|0);
 $3 = HEAP32[$fn_builder1>>2]|0;
 _bfVMFunctionBuilder_addInstAsBx($3,22,0,0);
 $4 = $self$addr;
 $5 = $current_loc;
 $6 = $cond_var$addr;
 $7 = $jump_idx$addr;
 $8 = $current_loc;
 $sub = (($7) - ($8))|0;
 $9 = $if_not$addr;
 _parserPatchJumpHelper($4,$5,$6,$sub,$9);
 STACKTOP = sp;return;
}
function _parseVarDecl($self,$is_static) {
 $self = $self|0;
 $is_static = $is_static|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp18 = 0, $agg$tmp18$byval_copy = 0, $as = 0, $call = 0, $call13 = 0, $call5 = 0, $call9 = 0, $conv = 0, $conv10 = 0, $current_module = 0, $current_token = 0, $expr = 0, $expr16 = 0;
 var $expr_loc = 0, $fn_builder = 0, $fn_builder11 = 0, $is_static$addr = 0, $location = 0, $location17 = 0, $location8 = 0, $name = 0, $name$byval_copy = 0, $name$byval_copy1 = 0, $self$addr = 0, $tobool = 0, $tobool1 = 0, $tobool14 = 0, $tobool6 = 0, $var = 0, $var$byval_copy = 0, $var12 = 0, $variables = 0, $vm = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $agg$tmp18$byval_copy = sp + 152|0;
 $name$byval_copy1 = sp + 144|0;
 $var$byval_copy = sp + 136|0;
 $agg$tmp$byval_copy = sp + 128|0;
 $name$byval_copy = sp + 120|0;
 $name = sp + 104|0;
 $var = sp + 88|0;
 $expr = sp + 32|0;
 $agg$tmp = sp + 80|0;
 $var12 = sp + 72|0;
 $expr16 = sp;
 $agg$tmp18 = sp + 64|0;
 $self$addr = $self;
 $is_static$addr = $is_static;
 $0 = $self$addr;
 $current_token = ((($0)) + 8|0);
 $as = ((($current_token)) + 8|0);
 ;HEAP32[$name>>2]=HEAP32[$as>>2]|0;HEAP32[$name+4>>2]=HEAP32[$as+4>>2]|0;
 $1 = $self$addr;
 $call = (_bfParser_eat($1,20,0,6272)|0);
 $tobool = ($call|0)!=(0);
 if (!($tobool)) {
  STACKTOP = sp;return;
 }
 $2 = $is_static$addr;
 $tobool1 = ($2|0)!=(0);
 $3 = $self$addr;
 if ($tobool1) {
  $current_module = ((($3)) + 32|0);
  $4 = HEAP32[$current_module>>2]|0;
  $variables = ((($4)) + 16|0);
  $5 = $self$addr;
  $vm = ((($5)) + 40|0);
  $6 = HEAP32[$vm>>2]|0;
  $7 = (_bfVMValue_fromNull()|0);
  $8 = (getTempRet0() | 0);
  ;HEAP32[$name$byval_copy>>2]=HEAP32[$name>>2]|0;HEAP32[$name$byval_copy+4>>2]=HEAP32[$name+4>>2]|0;
  $9 = (_bfVM_xSetVariable($variables,$6,$name$byval_copy,$7,$8)|0);
  $location = $9;
  $10 = $self$addr;
  $call5 = (_bfParser_match($10,10)|0);
  $tobool6 = ($call5|0)!=(0);
  if ($tobool6) {
   HEAP32[$var>>2] = 1;
   $11 = $location;
   $conv = $11&65535;
   $location8 = ((($var)) + 4|0);
   HEAP16[$location8>>1] = $conv;
   $12 = $self$addr;
   $fn_builder = ((($12)) + 28|0);
   $13 = HEAP32[$fn_builder>>2]|0;
   $call9 = (_bfVMFunctionBuilder_pushTemp($13,1)|0);
   $expr_loc = $call9;
   $14 = $expr_loc;
   _parserVariableMakeTemp($agg$tmp,-1);
   ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
   _exprMake($expr,$14,$agg$tmp$byval_copy);
   $15 = $self$addr;
   _parseExpr($15,$expr,0);
   $16 = $self$addr;
   $17 = $expr_loc;
   $conv10 = $17&65535;
   ;HEAP32[$var$byval_copy>>2]=HEAP32[$var>>2]|0;HEAP32[$var$byval_copy+4>>2]=HEAP32[$var+4>>2]|0;
   _parserVariableStore($16,$var$byval_copy,$conv10);
   $18 = $self$addr;
   $fn_builder11 = ((($18)) + 28|0);
   $19 = HEAP32[$fn_builder11>>2]|0;
   $20 = $expr_loc;
   _bfVMFunctionBuilder_popTemp($19,$20);
  }
 } else {
  ;HEAP32[$name$byval_copy1>>2]=HEAP32[$name>>2]|0;HEAP32[$name$byval_copy1+4>>2]=HEAP32[$name+4>>2]|0;
  _parserVariableMakeLocal($var12,$3,$name$byval_copy1);
  $21 = $self$addr;
  $call13 = (_bfParser_match($21,10)|0);
  $tobool14 = ($call13|0)!=(0);
  if ($tobool14) {
   $location17 = ((($var12)) + 4|0);
   $22 = HEAP16[$location17>>1]|0;
   _parserVariableMakeTemp($agg$tmp18,-1);
   ;HEAP32[$agg$tmp18$byval_copy>>2]=HEAP32[$agg$tmp18>>2]|0;HEAP32[$agg$tmp18$byval_copy+4>>2]=HEAP32[$agg$tmp18+4>>2]|0;
   _exprMake($expr16,$22,$agg$tmp18$byval_copy);
   $23 = $self$addr;
   _parseExpr($23,$expr16,0);
  }
 }
 $24 = $self$addr;
 (_bfParser_eat($24,8,0,6311)|0);
 STACKTOP = sp;return;
}
function _parseFunctionDecl($self) {
 $self = $self|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $add = 0, $arity = 0, $call = 0, $call1 = 0, $call2 = 0, $cmp = 0, $conv = 0, $current_module = 0, $current_module6 = 0, $fn = 0, $fn_builder = 0, $fn_builder5 = 0, $fn_builder_stack = 0, $fn_value = 0, $fn_var = 0, $is_local = 0, $k_loc = 0, $location = 0, $name_str = 0;
 var $name_str$byval_copy = 0, $name_str$byval_copy1 = 0, $self$addr = 0, $tobool = 0, $variables = 0, $vm = 0, $vm7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $name_str$byval_copy1 = sp + 56|0;
 $name_str$byval_copy = sp + 48|0;
 $name_str = sp + 32|0;
 $fn_value = sp;
 $fn_var = sp + 16|0;
 $self$addr = $self;
 $0 = $self$addr;
 $fn_builder_stack = ((($0)) + 24|0);
 $call = (_Array_size($fn_builder_stack)|0);
 $cmp = ($call|0)!=(1);
 $conv = $cmp&1;
 $is_local = $conv;
 $1 = $self$addr;
 _parserBeginFunction($name_str,$1,1);
 $2 = $self$addr;
 $call1 = (_parserParseFunction($2)|0);
 $arity = $call1;
 $3 = $self$addr;
 $vm = ((($3)) + 40|0);
 $4 = HEAP32[$vm>>2]|0;
 $5 = $self$addr;
 $current_module = ((($5)) + 32|0);
 $6 = HEAP32[$current_module>>2]|0;
 $call2 = (_bfVM_createFunction($4,$6)|0);
 $fn = $call2;
 $7 = $fn;
 $8 = (_bfVMValue_fromPointer($7)|0);
 $9 = (getTempRet0() | 0);
 $10 = $fn_value;
 $11 = $10;
 HEAP32[$11>>2] = $8;
 $12 = (($10) + 4)|0;
 $13 = $12;
 HEAP32[$13>>2] = $9;
 $14 = $self$addr;
 $15 = $fn;
 $16 = $arity;
 _parserEndFunction($14,$15,$16);
 $17 = $is_local;
 $tobool = ($17|0)!=(0);
 $18 = $self$addr;
 if ($tobool) {
  ;HEAP32[$name_str$byval_copy>>2]=HEAP32[$name_str>>2]|0;HEAP32[$name_str$byval_copy+4>>2]=HEAP32[$name_str+4>>2]|0;
  _parserVariableMakeLocal($fn_var,$18,$name_str$byval_copy);
  $19 = $self$addr;
  $fn_builder = ((($19)) + 28|0);
  $20 = HEAP32[$fn_builder>>2]|0;
  $21 = $fn_value;
  $22 = $21;
  $23 = HEAP32[$22>>2]|0;
  $24 = (($21) + 4)|0;
  $25 = $24;
  $26 = HEAP32[$25>>2]|0;
  $27 = (_bfVMFunctionBuilder_addConstant($20,$23,$26)|0);
  $k_loc = $27;
  $28 = $self$addr;
  $fn_builder5 = ((($28)) + 28|0);
  $29 = HEAP32[$fn_builder5>>2]|0;
  $location = ((($fn_var)) + 4|0);
  $30 = HEAP16[$location>>1]|0;
  $31 = $k_loc;
  $add = (4 + ($31))|0;
  _bfVMFunctionBuilder_addInstABx($29,1,$30,$add);
  STACKTOP = sp;return;
 } else {
  $current_module6 = ((($18)) + 32|0);
  $32 = HEAP32[$current_module6>>2]|0;
  $variables = ((($32)) + 16|0);
  $33 = $self$addr;
  $vm7 = ((($33)) + 40|0);
  $34 = HEAP32[$vm7>>2]|0;
  $35 = $fn_value;
  $36 = $35;
  $37 = HEAP32[$36>>2]|0;
  $38 = (($35) + 4)|0;
  $39 = $38;
  $40 = HEAP32[$39>>2]|0;
  ;HEAP32[$name_str$byval_copy1>>2]=HEAP32[$name_str>>2]|0;HEAP32[$name_str$byval_copy1+4>>2]=HEAP32[$name_str+4>>2]|0;
  (_bfVM_xSetVariable($variables,$34,$name_str$byval_copy1,$37,$40)|0);
  STACKTOP = sp;return;
 }
}
function _parseImport($self) {
 $self = $self|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $as = 0, $as16 = 0, $as25 = 0, $call1 = 0, $call12 = 0, $call19 = 0, $call2 = 0;
 var $call21 = 0, $call34 = 0, $call38 = 0, $call5 = 0, $call6 = 0, $call9 = 0, $current_module = 0, $current_module31 = 0, $current_token = 0, $current_token15 = 0, $current_token24 = 0, $dst_name = 0, $dst_name$byval_copy = 0, $imported_module = 0, $name = 0, $name_str = 0, $name_token = 0, $self$addr = 0, $src_name = 0, $tobool = 0;
 var $tobool13 = 0, $tobool20 = 0, $tobool22 = 0, $tobool29 = 0, $tobool39 = 0, $tobool7 = 0, $var_str = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $variables = 0, $vm = 0, $vm3 = 0, $vm32 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $dst_name$byval_copy = sp + 72|0;
 $vararg_buffer = sp + 16|0;
 $name_token = sp;
 $name_str = sp + 56|0;
 $var_str = sp + 40|0;
 $src_name = sp + 32|0;
 $dst_name = sp + 24|0;
 $self$addr = $self;
 $0 = $self$addr;
 $current_token = ((($0)) + 8|0);
 ;HEAP32[$name_token>>2]=HEAP32[$current_token>>2]|0;HEAP32[$name_token+4>>2]=HEAP32[$current_token+4>>2]|0;HEAP32[$name_token+8>>2]=HEAP32[$current_token+8>>2]|0;HEAP32[$name_token+12>>2]=HEAP32[$current_token+12>>2]|0;
 $as = ((($name_token)) + 8|0);
 ;HEAP32[$name_str>>2]=HEAP32[$as>>2]|0;HEAP32[$name_str+4>>2]=HEAP32[$as+4>>2]|0;
 $1 = $self$addr;
 (_bfParser_eat($1,40,0,3941)|0);
 $2 = $self$addr;
 $vm = ((($2)) + 40|0);
 $3 = HEAP32[$vm>>2]|0;
 $4 = HEAP32[$name_str>>2]|0;
 $call1 = (_bfStringRange_length($name_str)|0);
 $call2 = (_bfVM_findModule($3,$4,$call1)|0);
 $imported_module = $call2;
 $5 = $imported_module;
 $tobool = ($5|0)!=(0|0);
 if (!($tobool)) {
  $6 = $self$addr;
  $vm3 = ((($6)) + 40|0);
  $7 = HEAP32[$vm3>>2]|0;
  $8 = $self$addr;
  $current_module = ((($8)) + 32|0);
  $9 = HEAP32[$current_module>>2]|0;
  $name = ((($9)) + 12|0);
  $10 = HEAP32[$name>>2]|0;
  $11 = HEAP32[$name_str>>2]|0;
  $call5 = (_bfStringRange_length($name_str)|0);
  $call6 = (_bfVM_importModule($7,$10,$11,$call5)|0);
  $imported_module = $call6;
  $12 = $imported_module;
  $tobool7 = ($12|0)!=(0|0);
  if (!($tobool7)) {
   $13 = $self$addr;
   $call9 = (_bfStringRange_length($name_str)|0);
   $14 = HEAP32[$name_str>>2]|0;
   HEAP32[$vararg_buffer>>2] = $call9;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $14;
   _bfEmitError($13,3997,$vararg_buffer);
  }
 }
 $15 = $self$addr;
 $call12 = (_bfParser_match($15,37)|0);
 $tobool13 = ($call12|0)!=(0);
 if (!($tobool13)) {
  $32 = $self$addr;
  (_bfParser_eat($32,8,0,4111)|0);
  STACKTOP = sp;return;
 }
 while(1) {
  $16 = $self$addr;
  $current_token15 = ((($16)) + 8|0);
  $as16 = ((($current_token15)) + 8|0);
  ;HEAP32[$var_str>>2]=HEAP32[$as16>>2]|0;HEAP32[$var_str+4>>2]=HEAP32[$as16+4>>2]|0;
  $17 = $self$addr;
  (_bfParser_eat($17,20,0,4029)|0);
  ;HEAP32[$src_name>>2]=HEAP32[$var_str>>2]|0;HEAP32[$src_name+4>>2]=HEAP32[$var_str+4>>2]|0;
  ;HEAP32[$dst_name>>2]=HEAP32[$var_str>>2]|0;HEAP32[$dst_name+4>>2]=HEAP32[$var_str+4>>2]|0;
  $18 = $self$addr;
  $call19 = (_bfParser_match($18,10)|0);
  $tobool20 = ($call19|0)!=(0);
  if ($tobool20) {
   label = 8;
  } else {
   $19 = $self$addr;
   $call21 = (_bfParser_match($19,48)|0);
   $tobool22 = ($call21|0)!=(0);
   if ($tobool22) {
    label = 8;
   }
  }
  if ((label|0) == 8) {
   label = 0;
   $20 = $self$addr;
   $current_token24 = ((($20)) + 8|0);
   $as25 = ((($current_token24)) + 8|0);
   ;HEAP32[$dst_name>>2]=HEAP32[$as25>>2]|0;HEAP32[$dst_name+4>>2]=HEAP32[$as25+4>>2]|0;
   $21 = $self$addr;
   (_bfParser_eat($21,20,0,4075)|0);
  }
  $22 = $imported_module;
  $tobool29 = ($22|0)!=(0|0);
  if ($tobool29) {
   $23 = $self$addr;
   $current_module31 = ((($23)) + 32|0);
   $24 = HEAP32[$current_module31>>2]|0;
   $variables = ((($24)) + 16|0);
   $25 = $self$addr;
   $vm32 = ((($25)) + 40|0);
   $26 = HEAP32[$vm32>>2]|0;
   $27 = $imported_module;
   $28 = HEAP32[$src_name>>2]|0;
   $call34 = (_bfStringRange_length($src_name)|0);
   $29 = (_bfVM_stackFindVariable($27,$28,$call34)|0);
   $30 = (getTempRet0() | 0);
   ;HEAP32[$dst_name$byval_copy>>2]=HEAP32[$dst_name>>2]|0;HEAP32[$dst_name$byval_copy+4>>2]=HEAP32[$dst_name+4>>2]|0;
   (_bfVM_xSetVariable($variables,$26,$dst_name$byval_copy,$29,$30)|0);
  }
  $31 = $self$addr;
  $call38 = (_bfParser_match($31,9)|0);
  $tobool39 = ($call38|0)!=(0);
  if (!($tobool39)) {
   break;
  }
 }
 $32 = $self$addr;
 (_bfParser_eat($32,8,0,4111)|0);
 STACKTOP = sp;return;
}
function _parseForStatement($self) {
 $self = $self|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call1 = 0, $call11 = 0, $call12 = 0, $call15 = 0, $call16 = 0, $call3 = 0, $call5 = 0, $call6 = 0, $cond_expr = 0, $cond_loc = 0, $cond_to_end = 0, $cond_to_loop = 0, $conv = 0, $conv22 = 0, $fn_builder = 0, $fn_builder13 = 0, $fn_builder23 = 0;
 var $fn_builder4 = 0, $fn_builder9 = 0, $inc_to_cond = 0, $loop = 0, $loop_to_inc = 0, $self$addr = 0, $tobool = 0, $tobool17 = 0, $tobool7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $agg$tmp$byval_copy = sp + 80|0;
 $loop = sp + 64|0;
 $cond_expr = sp;
 $agg$tmp = sp + 48|0;
 $self$addr = $self;
 $0 = $self$addr;
 (_bfParser_eat($0,0,0,3795)|0);
 $1 = $self$addr;
 $fn_builder = ((($1)) + 28|0);
 $2 = HEAP32[$fn_builder>>2]|0;
 _bfVMFunctionBuilder_pushScope($2);
 $3 = $self$addr;
 $call1 = (_bfParser_match($3,8)|0);
 $tobool = ($call1|0)!=(0);
 if (!($tobool)) {
  $4 = $self$addr;
  (_bfParser_parse($4)|0);
 }
 $5 = $self$addr;
 $call3 = (_parserMakeJumpRev($5)|0);
 $inc_to_cond = $call3;
 $6 = $self$addr;
 $fn_builder4 = ((($6)) + 28|0);
 $7 = HEAP32[$fn_builder4>>2]|0;
 $call5 = (_bfVMFunctionBuilder_pushTemp($7,1)|0);
 $cond_loc = $call5;
 $8 = $self$addr;
 $call6 = (_bfParser_is($8,8)|0);
 $tobool7 = ($call6|0)!=(0);
 if ($tobool7) {
  $11 = $self$addr;
  $fn_builder9 = ((($11)) + 28|0);
  $12 = HEAP32[$fn_builder9>>2]|0;
  $13 = $cond_loc;
  _bfVMFunctionBuilder_addInstABx($12,1,$13,0);
 } else {
  $9 = $cond_loc;
  _parserVariableMakeTemp($agg$tmp,-1);
  ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
  _exprMake($cond_expr,$9,$agg$tmp$byval_copy);
  $10 = $self$addr;
  _parseExpr($10,$cond_expr,0);
 }
 $14 = $self$addr;
 $call11 = (_parserMakeJump($14)|0);
 $cond_to_loop = $call11;
 $15 = $self$addr;
 $call12 = (_parserMakeJump($15)|0);
 $cond_to_end = $call12;
 $16 = $self$addr;
 $fn_builder13 = ((($16)) + 28|0);
 $17 = HEAP32[$fn_builder13>>2]|0;
 $18 = $cond_loc;
 _bfVMFunctionBuilder_popTemp($17,$18);
 $19 = $self$addr;
 (_bfParser_match($19,8)|0);
 $20 = $self$addr;
 $call15 = (_parserMakeJumpRev($20)|0);
 $loop_to_inc = $call15;
 $21 = $self$addr;
 $call16 = (_bfParser_match($21,1)|0);
 $tobool17 = ($call16|0)!=(0);
 if (!($tobool17)) {
  $22 = $self$addr;
  (_bfParser_parse($22)|0);
  $23 = $self$addr;
  (_bfParser_eat($23,1,0,3829)|0);
 }
 $24 = $self$addr;
 $25 = $inc_to_cond;
 _parserPatchJumpRev($24,$25,65535,0);
 $26 = $self$addr;
 $27 = $cond_to_loop;
 $28 = $cond_loc;
 $conv = $28&65535;
 _parserPatchJump($26,$27,$conv,0);
 $29 = $self$addr;
 _loopPush($29,$loop);
 $30 = $self$addr;
 _loopBodyStart($30);
 $31 = $self$addr;
 _parseBlock($31);
 $32 = $self$addr;
 $33 = $loop_to_inc;
 _parserPatchJumpRev($32,$33,65535,0);
 $34 = $self$addr;
 $35 = $cond_to_end;
 $36 = $cond_loc;
 $conv22 = $36&65535;
 _parserPatchJump($34,$35,$conv22,1);
 $37 = $self$addr;
 _loopPop($37);
 $38 = $self$addr;
 $fn_builder23 = ((($38)) + 28|0);
 $39 = HEAP32[$fn_builder23>>2]|0;
 _bfVMFunctionBuilder_popScope($39);
 $40 = $self$addr;
 (_bfParser_match($40,8)|0);
 STACKTOP = sp;return;
}
function _bfVMFunctionBuilder_popScope($self) {
 $self = $self|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $call = 0, $call1 = 0, $count = 0, $local_var_scope_size = 0, $local_var_scope_size3 = 0, $local_vars = 0, $local_vars2 = 0, $new_size = 0, $num_vars = 0, $self$addr = 0, $sub = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self$addr = $self;
 $0 = $self$addr;
 $local_var_scope_size = ((($0)) + 16|0);
 $call = (_Array_back($local_var_scope_size)|0);
 $count = $call;
 $1 = $self$addr;
 $local_vars = ((($1)) + 12|0);
 $call1 = (_Array_size($local_vars)|0);
 $num_vars = $call1;
 $2 = $num_vars;
 $3 = $count;
 $4 = HEAP32[$3>>2]|0;
 $sub = (($2) - ($4))|0;
 $new_size = $sub;
 $5 = $self$addr;
 $local_vars2 = ((($5)) + 12|0);
 $6 = $new_size;
 _Array_resize($local_vars2,$6);
 $7 = $self$addr;
 $local_var_scope_size3 = ((($7)) + 16|0);
 (_Array_pop($local_var_scope_size3)|0);
 STACKTOP = sp;return;
}
function _Array_back($self) {
 $self = $self|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $add$ptr = 0, $call = 0, $call1 = 0, $header = 0, $idx$neg = 0, $self$addr = 0, $stride = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self$addr = $self;
 $0 = $self$addr;
 $1 = HEAP32[$0>>2]|0;
 $call = (_Array_getHeader($1)|0);
 $header = $call;
 $2 = $self$addr;
 $call1 = (_Array_end($2)|0);
 $3 = $header;
 $stride = ((($3)) + 8|0);
 $4 = HEAP32[$stride>>2]|0;
 $idx$neg = (0 - ($4))|0;
 $add$ptr = (($call1) + ($idx$neg)|0);
 STACKTOP = sp;return ($add$ptr|0);
}
function _Array_pop($self) {
 $self = $self|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $call = 0, $call1 = 0, $call2 = 0, $cmp = 0, $dec = 0, $header = 0, $old_element = 0, $self$addr = 0, $size = 0, $size3 = 0, $sub = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self$addr = $self;
 $0 = $self$addr;
 $call = (_Array_size($0)|0);
 $cmp = ($call|0)!=(0);
 if ($cmp) {
  $1 = $self$addr;
  $2 = HEAP32[$1>>2]|0;
  $call1 = (_Array_getHeader($2)|0);
  $header = $call1;
  $3 = $self$addr;
  $4 = $header;
  $size = ((($4)) + 4|0);
  $5 = HEAP32[$size>>2]|0;
  $sub = (($5) - 1)|0;
  $call2 = (_Array_at($3,$sub)|0);
  $old_element = $call2;
  $6 = $header;
  $size3 = ((($6)) + 4|0);
  $7 = HEAP32[$size3>>2]|0;
  $dec = (($7) + -1)|0;
  HEAP32[$size3>>2] = $dec;
  $8 = $old_element;
  STACKTOP = sp;return ($8|0);
 } else {
  ___assert_fail((3861|0),(2696|0),237,(3931|0));
  // unreachable;
 }
 return (0)|0;
}
function _bfVM_findModule($self,$name,$name_len) {
 $self = $self|0;
 $name = $name|0;
 $name_len = $name_len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $call = 0, $call2 = 0, $call4 = 0, $call9 = 0, $cmp = 0, $cmp10 = 0, $cmp6 = 0, $hash = 0, $hash5 = 0, $it = 0, $key = 0, $key_len = 0, $modules = 0, $modules1 = 0, $name$addr = 0, $name_len$addr = 0, $retval = 0, $self$addr = 0, $tobool = 0, $value = 0;
 var $value11 = 0, $value8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $it = sp + 8|0;
 $self$addr = $self;
 $name$addr = $name;
 $name_len$addr = $name_len;
 $0 = $name$addr;
 $1 = $name_len$addr;
 $call = (_bfString_hashN($0,$1)|0);
 $hash = $call;
 $2 = $self$addr;
 $modules1 = ((($2)) + 52|0);
 $modules = $modules1;
 $3 = $modules;
 _bfHashMap_itBegin($it,$3);
 while(1) {
  $call2 = (_bfHashMap_itHasNext($it)|0);
  $tobool = ($call2|0)!=(0);
  if (!($tobool)) {
   label = 8;
   break;
  }
  $4 = HEAP32[$it>>2]|0;
  $key = $4;
  $5 = $key;
  $value = ((($5)) + 12|0);
  $6 = HEAP32[$value>>2]|0;
  $call4 = (_String_length($6)|0);
  $key_len = $call4;
  $7 = $key;
  $hash5 = ((($7)) + 16|0);
  $8 = HEAP32[$hash5>>2]|0;
  $9 = $hash;
  $cmp = ($8|0)==($9|0);
  if ($cmp) {
   $10 = $key_len;
   $11 = $name_len$addr;
   $cmp6 = ($10|0)==($11|0);
   if ($cmp6) {
    $12 = $key;
    $value8 = ((($12)) + 12|0);
    $13 = HEAP32[$value8>>2]|0;
    $14 = $name$addr;
    $15 = $name_len$addr;
    $call9 = (_String_ccmpn($13,$14,$15)|0);
    $cmp10 = ($call9|0)==(0);
    if ($cmp10) {
     label = 6;
     break;
    }
   }
  }
  $18 = $modules;
  _bfHashMap_itGetNext($18,$it);
 }
 if ((label|0) == 6) {
  $value11 = ((($it)) + 4|0);
  $16 = HEAP32[$value11>>2]|0;
  $17 = HEAP32[$16>>2]|0;
  $retval = $17;
  $19 = $retval;
  STACKTOP = sp;return ($19|0);
 }
 else if ((label|0) == 8) {
  $retval = 0;
  $19 = $retval;
  STACKTOP = sp;return ($19|0);
 }
 return (0)|0;
}
function _bfVM_importModule($self,$from,$name,$name_len) {
 $self = $self|0;
 $from = $from|0;
 $name = $name|0;
 $name_len = $name_len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$ptr = 0, $call = 0, $call12 = 0, $call14 = 0, $call4 = 0, $call8 = 0, $end = 0, $from$addr = 0, $has_error = 0, $last_error = 0, $last_error23 = 0, $look_up = 0, $lor$ext = 0, $m = 0, $module_fn = 0;
 var $module_fn1 = 0, $module_name = 0, $modules = 0, $name$addr = 0, $name_len$addr = 0, $name_range = 0, $name_range$byval_copy = 0, $name_range$byval_copy6 = 0, $params = 0, $self$addr = 0, $source_len = 0, $source_len11 = 0, $source_len19 = 0, $tobool = 0, $tobool13 = 0, $tobool15 = 0, $tobool16 = 0, $tobool2 = 0, $tobool5 = 0, $tobool6 = 0;
 var $value = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $name_range$byval_copy6 = sp + 80|0;
 $name_range$byval_copy = sp + 72|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $m = sp + 52|0;
 $name_range = sp + 40|0;
 $look_up = sp + 24|0;
 $self$addr = $self;
 $from$addr = $from;
 $name$addr = $name;
 $name_len$addr = $name_len;
 $0 = $self$addr;
 $1 = $name$addr;
 $2 = $name_len$addr;
 $call = (_bfVM_findModule($0,$1,$2)|0);
 HEAP32[$m>>2] = $call;
 $3 = HEAP32[$m>>2]|0;
 $tobool = ($3|0)!=(0|0);
 if ($tobool) {
  $44 = HEAP32[$m>>2]|0;
  STACKTOP = sp;return ($44|0);
 }
 $4 = $self$addr;
 $params = ((($4)) + 16|0);
 $module_fn1 = ((($params)) + 8|0);
 $5 = HEAP32[$module_fn1>>2]|0;
 $module_fn = $5;
 $6 = $module_fn;
 $tobool2 = ($6|0)!=(0|0);
 if (!($tobool2)) {
  $41 = $self$addr;
  $last_error23 = ((($41)) + 596|0);
  $42 = $name_len$addr;
  $43 = $name$addr;
  HEAP32[$vararg_buffer2>>2] = $42;
  $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
  HEAP32[$vararg_ptr5>>2] = $43;
  _String_sprintf($last_error23,4284,$vararg_buffer2);
  $44 = HEAP32[$m>>2]|0;
  STACKTOP = sp;return ($44|0);
 }
 $7 = $name$addr;
 HEAP32[$name_range>>2] = $7;
 $end = ((($name_range)) + 4|0);
 $8 = $name$addr;
 $9 = $name_len$addr;
 $add$ptr = (($8) + ($9)|0);
 HEAP32[$end>>2] = $add$ptr;
 $10 = $self$addr;
 ;HEAP32[$name_range$byval_copy>>2]=HEAP32[$name_range>>2]|0;HEAP32[$name_range$byval_copy+4>>2]=HEAP32[$name_range+4>>2]|0;
 $call4 = (_bfVM_createString($10,$name_range$byval_copy)|0);
 $module_name = $call4;
 $11 = $self$addr;
 $12 = $module_name;
 _bfGCPushRoot($11,$12);
 ;HEAP32[$look_up>>2]=0|0;HEAP32[$look_up+4>>2]=0|0;
 $13 = $module_fn;
 $14 = $self$addr;
 $15 = $from$addr;
 $16 = $module_name;
 $value = ((($16)) + 12|0);
 $17 = HEAP32[$value>>2]|0;
 FUNCTION_TABLE_viiii[$13 & 31]($14,$15,$17,$look_up);
 $18 = HEAP32[$look_up>>2]|0;
 $tobool5 = ($18|0)!=(0|0);
 if ($tobool5) {
  $source_len = ((($look_up)) + 4|0);
  $19 = HEAP32[$source_len>>2]|0;
  $tobool6 = ($19|0)!=(0);
  if ($tobool6) {
   $20 = $self$addr;
   ;HEAP32[$name_range$byval_copy6>>2]=HEAP32[$name_range>>2]|0;HEAP32[$name_range$byval_copy6+4>>2]=HEAP32[$name_range+4>>2]|0;
   $call8 = (_bfVM_createModule($20,$name_range$byval_copy6)|0);
   HEAP32[$m>>2] = $call8;
   $21 = $self$addr;
   $22 = HEAP32[$m>>2]|0;
   _bfGCPushRoot($21,$22);
   $23 = $self$addr;
   $24 = HEAP32[$m>>2]|0;
   $25 = HEAP32[$look_up>>2]|0;
   $source_len11 = ((($look_up)) + 4|0);
   $26 = HEAP32[$source_len11>>2]|0;
   $call12 = (_bfVM_compileIntoModule($23,$24,$25,$26)|0);
   $tobool13 = ($call12|0)!=(0);
   if ($tobool13) {
    $29 = 1;
   } else {
    $27 = $self$addr;
    $28 = HEAP32[$m>>2]|0;
    $call14 = (_bfVM_runModule($27,$28)|0);
    $tobool15 = ($call14|0)!=(0);
    $29 = $tobool15;
   }
   $lor$ext = $29&1;
   $has_error = $lor$ext;
   $30 = $has_error;
   $tobool16 = ($30|0)!=(0);
   if (!($tobool16)) {
    $31 = $self$addr;
    $modules = ((($31)) + 52|0);
    $32 = $module_name;
    _bfHashMap_set($modules,$32,$m);
   }
   $33 = $self$addr;
   _bfGCPopRoot($33);
   $34 = $self$addr;
   $35 = HEAP32[$look_up>>2]|0;
   $source_len19 = ((($look_up)) + 4|0);
   $36 = HEAP32[$source_len19>>2]|0;
   (_bfGCAllocMemory($34,$35,$36,0)|0);
  } else {
   label = 10;
  }
 } else {
  label = 10;
 }
 if ((label|0) == 10) {
  $37 = $self$addr;
  $last_error = ((($37)) + 596|0);
  $38 = $name_len$addr;
  $39 = $name$addr;
  HEAP32[$vararg_buffer>>2] = $38;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $39;
  _String_sprintf($last_error,4255,$vararg_buffer);
 }
 $40 = $self$addr;
 _bfGCPopRoot($40);
 $44 = HEAP32[$m>>2]|0;
 STACKTOP = sp;return ($44|0);
}
function _bfVM_stackFindVariable($module_obj,$variable,$variable_len) {
 $module_obj = $module_obj|0;
 $variable = $variable|0;
 $variable_len = $variable_len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$ptr = 0, $call = 0;
 var $call2 = 0, $call6 = 0, $cmp = 0, $cmp3 = 0, $cmp7 = 0, $i = 0, $inc = 0, $module_obj$addr = 0, $num_vars = 0, $retval = 0, $tobool = 0, $value = 0, $var = 0, $variable$addr = 0, $variable_len$addr = 0, $variables = 0, $variables1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $retval = sp;
 $module_obj$addr = $module_obj;
 $variable$addr = $variable;
 $variable_len$addr = $variable_len;
 $0 = $module_obj$addr;
 $tobool = ($0|0)!=(0|0);
 if (!($tobool)) {
  ___assert_fail((4146|0),(4211|0),316,(4232|0));
  // unreachable;
 }
 $1 = $module_obj$addr;
 $variables = ((($1)) + 16|0);
 $call = (_Array_size($variables)|0);
 $num_vars = $call;
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = $num_vars;
  $cmp = ($2>>>0)<($3>>>0);
  if (!($cmp)) {
   label = 9;
   break;
  }
  $4 = $module_obj$addr;
  $variables1 = ((($4)) + 16|0);
  $5 = HEAP32[$variables1>>2]|0;
  $6 = $i;
  $add$ptr = (($5) + ($6<<4)|0);
  $var = $add$ptr;
  $7 = $var;
  $8 = HEAP32[$7>>2]|0;
  $call2 = (_String_length($8)|0);
  $9 = $variable_len$addr;
  $cmp3 = ($call2|0)==($9|0);
  if ($cmp3) {
   $10 = $variable$addr;
   $11 = $var;
   $12 = HEAP32[$11>>2]|0;
   $13 = $variable_len$addr;
   $call6 = (_strncmp($10,$12,$13)|0);
   $cmp7 = ($call6|0)==(0);
   if ($cmp7) {
    label = 7;
    break;
   }
  }
  $25 = $i;
  $inc = (($25) + 1)|0;
  $i = $inc;
 }
 if ((label|0) == 7) {
  $14 = $var;
  $value = ((($14)) + 8|0);
  $15 = $value;
  $16 = $15;
  $17 = HEAP32[$16>>2]|0;
  $18 = (($15) + 4)|0;
  $19 = $18;
  $20 = HEAP32[$19>>2]|0;
  $21 = $retval;
  $22 = $21;
  HEAP32[$22>>2] = $17;
  $23 = (($21) + 4)|0;
  $24 = $23;
  HEAP32[$24>>2] = $20;
  $32 = $retval;
  $33 = $32;
  $34 = HEAP32[$33>>2]|0;
  $35 = (($32) + 4)|0;
  $36 = $35;
  $37 = HEAP32[$36>>2]|0;
  setTempRet0(($37) | 0);
  STACKTOP = sp;return ($34|0);
 }
 else if ((label|0) == 9) {
  $26 = (_bfVMValue_fromNull()|0);
  $27 = (getTempRet0() | 0);
  $28 = $retval;
  $29 = $28;
  HEAP32[$29>>2] = $26;
  $30 = (($28) + 4)|0;
  $31 = $30;
  HEAP32[$31>>2] = $27;
  $32 = $retval;
  $33 = $32;
  $34 = HEAP32[$33>>2]|0;
  $35 = (($32) + 4)|0;
  $36 = $35;
  $37 = HEAP32[$36>>2]|0;
  setTempRet0(($37) | 0);
  STACKTOP = sp;return ($34|0);
 }
 return (0)|0;
}
function _bfVM_createString($self,$value) {
 $self = $self|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call1 = 0, $call2 = 0, $call7 = 0, $call8 = 0, $hash = 0, $obj = 0, $self$addr = 0, $value3 = 0;
 var $value4 = 0, $value5 = 0, $value6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self$addr = $self;
 $0 = $self$addr;
 $call = (_allocObj($0,20,4)|0);
 $obj = $call;
 $1 = HEAP32[$value>>2]|0;
 $call1 = (_bfStringRange_length($value)|0);
 $call2 = (_String_newLen($1,$call1)|0);
 $2 = $obj;
 $value3 = ((($2)) + 12|0);
 HEAP32[$value3>>2] = $call2;
 $3 = $obj;
 $value4 = ((($3)) + 12|0);
 $4 = HEAP32[$value4>>2]|0;
 _String_unescape($4);
 $5 = $obj;
 $value5 = ((($5)) + 12|0);
 $6 = HEAP32[$value5>>2]|0;
 $7 = $obj;
 $value6 = ((($7)) + 12|0);
 $8 = HEAP32[$value6>>2]|0;
 $call7 = (_String_length($8)|0);
 $call8 = (_bfString_hashN($6,$call7)|0);
 $9 = $obj;
 $hash = ((($9)) + 16|0);
 HEAP32[$hash>>2] = $call8;
 $10 = $obj;
 STACKTOP = sp;return ($10|0);
}
function _bfGCPushRoot($self,$obj) {
 $self = $self|0;
 $obj = $obj|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $arrayidx = 0, $cmp = 0, $conv = 0, $idxprom = 0, $inc = 0, $obj$addr = 0, $self$addr = 0, $temp_roots = 0, $temp_roots_top = 0, $temp_roots_top2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self$addr = $self;
 $obj$addr = $obj;
 $0 = $self$addr;
 $temp_roots_top = ((($0)) + 640|0);
 $1 = HEAP8[$temp_roots_top>>0]|0;
 $conv = $1&255;
 $cmp = ($conv>>>0)<(8);
 if ($cmp) {
  $2 = $obj$addr;
  $3 = $self$addr;
  $temp_roots = ((($3)) + 608|0);
  $4 = $self$addr;
  $temp_roots_top2 = ((($4)) + 640|0);
  $5 = HEAP8[$temp_roots_top2>>0]|0;
  $inc = (($5) + 1)<<24>>24;
  HEAP8[$temp_roots_top2>>0] = $inc;
  $idxprom = $5&255;
  $arrayidx = (($temp_roots) + ($idxprom<<2)|0);
  HEAP32[$arrayidx>>2] = $2;
  STACKTOP = sp;return;
 } else {
  ___assert_fail((5684|0),(5738|0),340,(5758|0));
  // unreachable;
 }
}
function _bfVM_createModule($self,$name) {
 $self = $self|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $call = 0, $call1 = 0, $call2 = 0, $call4 = 0, $init_fn = 0, $init_fn5 = 0, $init_fn6 = 0, $module = 0, $module7 = 0, $name3 = 0, $self$addr = 0;
 var $variables = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self$addr = $self;
 $0 = $self$addr;
 $call = (_allocObj($0,60,1)|0);
 $module = $call;
 $1 = HEAP32[$name>>2]|0;
 $call1 = (_bfStringRange_length($name)|0);
 $call2 = (_String_newLen($1,$call1)|0);
 $2 = $module;
 $name3 = ((($2)) + 12|0);
 HEAP32[$name3>>2] = $call2;
 $call4 = (__ArrayT_new(16,32)|0);
 $3 = $module;
 $variables = ((($3)) + 16|0);
 HEAP32[$variables>>2] = $call4;
 $4 = $module;
 $init_fn = ((($4)) + 20|0);
 dest=$init_fn; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $5 = $module;
 $init_fn5 = ((($5)) + 20|0);
 _objSetup($init_fn5,0,0);
 $6 = $module;
 $7 = $module;
 $init_fn6 = ((($7)) + 20|0);
 $module7 = ((($init_fn6)) + 36|0);
 HEAP32[$module7>>2] = $6;
 $8 = $module;
 STACKTOP = sp;return ($8|0);
}
function _bfVM_compileIntoModule($self,$module,$source,$source_len) {
 $self = $self|0;
 $module = $module|0;
 $source = $source|0;
 $source_len = $source_len|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $call = 0, $cond = 0, $do_comments = 0, $has_error = 0, $keywords = 0, $length = 0, $lex_params = 0, $lexer = 0, $module$addr = 0, $num_keywords = 0, $parser = 0, $self$addr = 0, $source$addr = 0, $source_len$addr = 0;
 var $tobool = 0, $vm = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $lex_params = sp + 104|0;
 $lexer = sp + 64|0;
 $parser = sp;
 $self$addr = $self;
 $module$addr = $module;
 $source$addr = $source;
 $source_len$addr = $source_len;
 $0 = $source$addr;
 HEAP32[$lex_params>>2] = $0;
 $length = ((($lex_params)) + 4|0);
 $1 = $source_len$addr;
 HEAP32[$length>>2] = $1;
 $keywords = ((($lex_params)) + 8|0);
 HEAP32[$keywords>>2] = 48;
 $num_keywords = ((($lex_params)) + 12|0);
 HEAP32[$num_keywords>>2] = 17;
 $vm = ((($lex_params)) + 16|0);
 $2 = $self$addr;
 HEAP32[$vm>>2] = $2;
 $do_comments = ((($lex_params)) + 20|0);
 HEAP32[$do_comments>>2] = 1;
 _bfLexer_make($lexer,$lex_params);
 $3 = $self$addr;
 $4 = $module$addr;
 _bfParser_ctor($parser,$3,$lexer,$4);
 $call = (_bfParser_compile($parser)|0);
 $has_error = $call;
 _bfParser_dtor($parser);
 $5 = $has_error;
 $tobool = ($5|0)!=(0);
 $cond = $tobool ? 4 : 0;
 STACKTOP = sp;return ($cond|0);
}
function _bfVM_runModule($self,$module) {
 $self = $self|0;
 $module = $module|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $call1 = 0, $err = 0, $init_fn = 0, $module$addr = 0, $old_top = 0, $self$addr = 0, $stack = 0, $stack_top = 0, $sub$ptr$div = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0;
 var $sub$ptr$sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self$addr = $self;
 $module$addr = $module;
 $0 = $self$addr;
 $stack_top = ((($0)) + 8|0);
 $1 = HEAP32[$stack_top>>2]|0;
 $2 = $self$addr;
 $stack = ((($2)) + 4|0);
 $3 = HEAP32[$stack>>2]|0;
 $sub$ptr$lhs$cast = $1;
 $sub$ptr$rhs$cast = $3;
 $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
 $sub$ptr$div = (($sub$ptr$sub|0) / 8)&-1;
 $old_top = $sub$ptr$div;
 $4 = $self$addr;
 $5 = $module$addr;
 $init_fn = ((($5)) + 20|0);
 $6 = $old_top;
 (_bfVM_pushCallFrame($4,$init_fn,$6)|0);
 $7 = $self$addr;
 $call1 = (_bfVM_execTopFrame($7)|0);
 $err = $call1;
 $8 = $err;
 STACKTOP = sp;return ($8|0);
}
function _bfHashMap_set($self,$key,$value) {
 $self = $self|0;
 $key = $key|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx14 = 0, $buckets = 0, $buckets13 = 0, $call = 0, $call12 = 0, $call2 = 0, $hash = 0, $hash1 = 0, $key$addr = 0, $node = 0;
 var $num_buckets = 0, $rem = 0, $self$addr = 0, $tobool = 0, $value$addr = 0, $value5 = 0, $value7 = 0, $value_size = 0, $value_size11 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $self$addr = $self;
 $key$addr = $key;
 $value$addr = $value;
 $0 = $self$addr;
 $hash1 = ((($0)) + 4|0);
 $1 = HEAP32[$hash1>>2]|0;
 $2 = $key$addr;
 $call = (FUNCTION_TABLE_ii[$1 & 63]($2)|0);
 $3 = $self$addr;
 $num_buckets = ((($3)) + 528|0);
 $4 = HEAP32[$num_buckets>>2]|0;
 $rem = (($call>>>0) % ($4>>>0))&-1;
 $hash = $rem;
 $5 = $self$addr;
 $6 = $key$addr;
 $7 = $hash;
 $call2 = (_bfHashMap_getNode($5,$6,$7)|0);
 $node = $call2;
 $8 = $node;
 $tobool = ($8|0)!=(0|0);
 if ($tobool) {
  $9 = $self$addr;
  $10 = HEAP32[$9>>2]|0;
  $11 = $node;
  $12 = HEAP32[$11>>2]|0;
  $13 = $node;
  $value5 = ((($13)) + 8|0);
  FUNCTION_TABLE_vii[$10 & 63]($12,$value5);
  $14 = $key$addr;
  $15 = $node;
  HEAP32[$15>>2] = $14;
  $16 = $node;
  $value7 = ((($16)) + 8|0);
  $17 = $value$addr;
  $18 = $self$addr;
  $value_size = ((($18)) + 12|0);
  $19 = HEAP32[$value_size>>2]|0;
  _memcpy(($value7|0),($17|0),($19|0))|0;
  STACKTOP = sp;return;
 } else {
  $20 = $key$addr;
  $21 = $self$addr;
  $value_size11 = ((($21)) + 12|0);
  $22 = HEAP32[$value_size11>>2]|0;
  $23 = $value$addr;
  $24 = $self$addr;
  $buckets = ((($24)) + 16|0);
  $25 = $hash;
  $arrayidx = (($buckets) + ($25<<2)|0);
  $26 = HEAP32[$arrayidx>>2]|0;
  $call12 = (_bfHashMap_newNode($20,$22,$23,$26)|0);
  $27 = $self$addr;
  $buckets13 = ((($27)) + 16|0);
  $28 = $hash;
  $arrayidx14 = (($buckets13) + ($28<<2)|0);
  HEAP32[$arrayidx14>>2] = $call12;
  STACKTOP = sp;return;
 }
}
function _bfGCPopRoot($self) {
 $self = $self|0;
 var $0 = 0, $1 = 0, $dec = 0, $self$addr = 0, $temp_roots_top = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self$addr = $self;
 $0 = $self$addr;
 $temp_roots_top = ((($0)) + 640|0);
 $1 = HEAP8[$temp_roots_top>>0]|0;
 $dec = (($1) + -1)<<24>>24;
 HEAP8[$temp_roots_top>>0] = $dec;
 STACKTOP = sp;return;
}
function _bfGCAllocMemory($self,$ptr,$old_size,$new_size) {
 $self = $self|0;
 $ptr = $ptr|0;
 $old_size = $old_size|0;
 $new_size = $new_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0;
 var $bytes_allocated = 0, $bytes_allocated1 = 0, $bytes_allocated2 = 0, $call = 0, $cmp = 0, $cmp3 = 0, $heap_size = 0, $memory_fn = 0, $new_size$addr = 0, $old_size$addr = 0, $params = 0, $params6 = 0, $params7 = 0, $ptr$addr = 0, $self$addr = 0, $sub = 0, $user_data = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self$addr = $self;
 $ptr$addr = $ptr;
 $old_size$addr = $old_size;
 $new_size$addr = $new_size;
 $0 = $new_size$addr;
 $cmp = ($0|0)==(0);
 if ($cmp) {
  $1 = $old_size$addr;
  $2 = $self$addr;
  $bytes_allocated = ((($2)) + 600|0);
  $3 = HEAP32[$bytes_allocated>>2]|0;
  $sub = (($3) - ($1))|0;
  HEAP32[$bytes_allocated>>2] = $sub;
 } else {
  $4 = $new_size$addr;
  $5 = $self$addr;
  $bytes_allocated1 = ((($5)) + 600|0);
  $6 = HEAP32[$bytes_allocated1>>2]|0;
  $add = (($6) + ($4))|0;
  HEAP32[$bytes_allocated1>>2] = $add;
  $7 = $self$addr;
  $bytes_allocated2 = ((($7)) + 600|0);
  $8 = HEAP32[$bytes_allocated2>>2]|0;
  $9 = $self$addr;
  $params = ((($9)) + 16|0);
  $heap_size = ((($params)) + 20|0);
  $10 = HEAP32[$heap_size>>2]|0;
  $cmp3 = ($8>>>0)>=($10>>>0);
  if ($cmp3) {
   $11 = $self$addr;
   _bfVM_gc($11);
  }
 }
 $12 = $self$addr;
 $params6 = ((($12)) + 16|0);
 $memory_fn = ((($params6)) + 12|0);
 $13 = HEAP32[$memory_fn>>2]|0;
 $14 = $self$addr;
 $params7 = ((($14)) + 16|0);
 $user_data = ((($params7)) + 28|0);
 $15 = HEAP32[$user_data>>2]|0;
 $16 = $ptr$addr;
 $17 = $old_size$addr;
 $18 = $new_size$addr;
 $call = (FUNCTION_TABLE_iiiii[$13 & 63]($15,$16,$17,$18)|0);
 STACKTOP = sp;return ($call|0);
}
function _String_sprintf($self,$format,$varargs) {
 $self = $self|0;
 $format = $format|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add7 = 0, $args = 0, $args_cpy = 0, $call = 0, $call10 = 0, $format$addr = 0, $length = 0, $num_chars = 0, $self$addr = 0;
 var $vacopy_currentptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $args = sp + 16|0;
 $args_cpy = sp;
 $self$addr = $self;
 $format$addr = $format;
 HEAP32[$args>>2] = $varargs;
 $vacopy_currentptr = HEAP32[$args>>2]|0;
 HEAP32[$args_cpy>>2] = $vacopy_currentptr;
 $0 = $format$addr;
 $call = (_vsnprintf(0,0,$0,$args_cpy)|0);
 $num_chars = $call;
 $1 = $self$addr;
 $2 = $num_chars;
 $add = (($2) + 2)|0;
 _String_reserve($1,$add);
 $3 = $self$addr;
 $4 = HEAP32[$3>>2]|0;
 $5 = $num_chars;
 $add7 = (($5) + 1)|0;
 $6 = $format$addr;
 (_vsnprintf($4,$add7,$6,$args)|0);
 $7 = $num_chars;
 $8 = $self$addr;
 $9 = HEAP32[$8>>2]|0;
 $call10 = (_String_getHeader($9)|0);
 $length = ((($call10)) + 4|0);
 HEAP32[$length>>2] = $7;
 STACKTOP = sp;return;
}
function _String_reserve($self,$new_capacity) {
 $self = $self|0;
 $new_capacity = $new_capacity|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0;
 var $add$ptr = 0, $call = 0, $call5 = 0, $cmp = 0, $cmp2 = 0, $header = 0, $mul = 0, $new_capacity$addr = 0, $old_header = 0, $self$addr = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self$addr = $self;
 $new_capacity$addr = $new_capacity;
 $0 = $self$addr;
 $1 = HEAP32[$0>>2]|0;
 $call = (_String_getHeader($1)|0);
 $header = $call;
 $2 = $new_capacity$addr;
 $3 = $header;
 $4 = HEAP32[$3>>2]|0;
 $cmp = ($2>>>0)>($4>>>0);
 if (!($cmp)) {
  STACKTOP = sp;return;
 }
 while(1) {
  $5 = $header;
  $6 = HEAP32[$5>>2]|0;
  $7 = $new_capacity$addr;
  $cmp2 = ($6>>>0)<($7>>>0);
  $8 = $header;
  if (!($cmp2)) {
   break;
  }
  $9 = HEAP32[$8>>2]|0;
  $mul = $9<<1;
  HEAP32[$8>>2] = $mul;
 }
 $old_header = $8;
 $10 = $old_header;
 $11 = $header;
 $12 = HEAP32[$11>>2]|0;
 $add = (8 + ($12))|0;
 $call5 = (_realloc($10,$add)|0);
 $header = $call5;
 $13 = $header;
 $tobool = ($13|0)!=(0|0);
 if ($tobool) {
  $14 = $header;
  $add$ptr = ((($14)) + 8|0);
  $15 = $self$addr;
  HEAP32[$15>>2] = $add$ptr;
  STACKTOP = sp;return;
 } else {
  $16 = $self$addr;
  $17 = HEAP32[$16>>2]|0;
  _String_delete($17);
  $18 = $self$addr;
  HEAP32[$18>>2] = 0;
  STACKTOP = sp;return;
 }
}
function _String_delete($self) {
 $self = $self|0;
 var $0 = 0, $call = 0, $self$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self$addr = $self;
 $0 = $self$addr;
 $call = (_String_getHeader($0)|0);
 _free($call);
 STACKTOP = sp;return;
}
function _bfVM_gc($self) {
 $self = $self|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $gc_is_running = 0, $gc_is_running1 = 0, $gc_is_running2 = 0, $self$addr = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self$addr = $self;
 $0 = $self$addr;
 $gc_is_running = ((($0)) + 644|0);
 $1 = HEAP32[$gc_is_running>>2]|0;
 $tobool = ($1|0)!=(0);
 if ($tobool) {
  STACKTOP = sp;return;
 }
 $2 = $self$addr;
 $gc_is_running1 = ((($2)) + 644|0);
 HEAP32[$gc_is_running1>>2] = 1;
 $3 = $self$addr;
 _bfGCCollect($3);
 $4 = $self$addr;
 $gc_is_running2 = ((($4)) + 644|0);
 HEAP32[$gc_is_running2>>2] = 0;
 STACKTOP = sp;return;
}
function _bfGCCollect($self) {
 $self = $self|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $add = 0, $add5 = 0, $bytes_allocated = 0, $bytes_allocated2 = 0, $bytes_allocated3 = 0, $call = 0, $call1 = 0, $cmp = 0, $collected_bytes = 0, $cond = 0, $conv = 0.0, $conv4 = 0, $heap_growth_factor = 0, $heap_size = 0, $min_heap_size = 0, $min_heap_size7 = 0, $mul = 0.0, $new_heap_size = 0, $params = 0;
 var $params6 = 0, $params9 = 0, $self$addr = 0, $sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self$addr = $self;
 $0 = $self$addr;
 _bfGCMarkObjects($0);
 $1 = $self$addr;
 $call = (_bfGCFinalizePostMark($1)|0);
 $collected_bytes = $call;
 $2 = $self$addr;
 $call1 = (_bfGCSweep($2)|0);
 $3 = $collected_bytes;
 $add = (($3) + ($call1))|0;
 $collected_bytes = $add;
 $4 = $collected_bytes;
 $5 = $self$addr;
 $bytes_allocated = ((($5)) + 600|0);
 $6 = HEAP32[$bytes_allocated>>2]|0;
 $sub = (($6) - ($4))|0;
 HEAP32[$bytes_allocated>>2] = $sub;
 $7 = $self$addr;
 $bytes_allocated2 = ((($7)) + 600|0);
 $8 = HEAP32[$bytes_allocated2>>2]|0;
 $9 = $self$addr;
 $bytes_allocated3 = ((($9)) + 600|0);
 $10 = HEAP32[$bytes_allocated3>>2]|0;
 $conv = (+($10>>>0));
 $11 = $self$addr;
 $params = ((($11)) + 16|0);
 $heap_growth_factor = ((($params)) + 24|0);
 $12 = +HEAPF32[$heap_growth_factor>>2];
 $mul = $conv * $12;
 $conv4 = (~~(($mul))>>>0);
 $add5 = (($8) + ($conv4))|0;
 $new_heap_size = $add5;
 $13 = $self$addr;
 $params6 = ((($13)) + 16|0);
 $min_heap_size7 = ((($params6)) + 16|0);
 $14 = HEAP32[$min_heap_size7>>2]|0;
 $min_heap_size = $14;
 $15 = $new_heap_size;
 $16 = $min_heap_size;
 $cmp = ($15>>>0)>($16>>>0);
 $17 = $new_heap_size;
 $18 = $min_heap_size;
 $cond = $cmp ? $17 : $18;
 $19 = $self$addr;
 $params9 = ((($19)) + 16|0);
 $heap_size = ((($params9)) + 20|0);
 HEAP32[$heap_size>>2] = $cond;
 $20 = $self$addr;
 _bfGCFinalize($20);
 STACKTOP = sp;return;
}
function _bfGCMarkObjects($self) {
 $self = $self|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $7 = 0, $8 = 0, $9 = 0, $add$ptr = 0, $arrayidx = 0, $arrayidx58 = 0, $arrayidx8 = 0, $builder = 0, $call = 0, $call14 = 0, $call2 = 0, $call24 = 0, $call38 = 0, $cmp = 0, $cmp41 = 0, $cmp5 = 0, $cmp55 = 0, $constants = 0, $constants46 = 0;
 var $conv = 0, $conv54 = 0, $current_clz = 0, $current_clz35 = 0, $current_module = 0, $current_module30 = 0, $cursor = 0, $fn = 0, $fn_builder_stack = 0, $fn_builder_stack43 = 0, $frames_size = 0, $handles = 0, $i = 0, $i3 = 0, $i39 = 0, $i52 = 0, $idxprom = 0, $inc = 0, $inc11 = 0, $inc49 = 0;
 var $inc60 = 0, $it = 0, $key = 0, $modules = 0, $modules20 = 0, $num_builders = 0, $parser_stack = 0, $parsers = 0, $self$addr = 0, $stack = 0, $stack1 = 0, $stack_size = 0, $temp_roots = 0, $temp_roots_top = 0, $tobool = 0, $tobool15 = 0, $tobool22 = 0, $tobool26 = 0, $tobool28 = 0, $tobool33 = 0;
 var $tobool44 = 0, $value = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $it = sp + 24|0;
 $self$addr = $self;
 $0 = $self$addr;
 $stack = ((($0)) + 4|0);
 $call = (_Array_size($stack)|0);
 $stack_size = $call;
 $i = 0;
 while(1) {
  $1 = $i;
  $2 = $stack_size;
  $cmp = ($1>>>0)<($2>>>0);
  $3 = $self$addr;
  if (!($cmp)) {
   break;
  }
  $stack1 = ((($3)) + 4|0);
  $4 = HEAP32[$stack1>>2]|0;
  $5 = $i;
  $arrayidx = (($4) + ($5<<3)|0);
  $6 = $arrayidx;
  $7 = $6;
  $8 = HEAP32[$7>>2]|0;
  $9 = (($6) + 4)|0;
  $10 = $9;
  $11 = HEAP32[$10>>2]|0;
  _bfGCMarkValue($8,$11,1);
  $12 = $i;
  $inc = (($12) + 1)|0;
  $i = $inc;
 }
 $call2 = (_Array_size($3)|0);
 $frames_size = $call2;
 $i3 = 0;
 while(1) {
  $13 = $i3;
  $14 = $frames_size;
  $cmp5 = ($13>>>0)<($14>>>0);
  $15 = $self$addr;
  if (!($cmp5)) {
   break;
  }
  $16 = HEAP32[$15>>2]|0;
  $17 = $i3;
  $arrayidx8 = (($16) + ($17<<4)|0);
  $18 = HEAP32[$arrayidx8>>2]|0;
  $fn = $18;
  $19 = $fn;
  $tobool = ($19|0)!=(0|0);
  if ($tobool) {
   $20 = $fn;
   _bfGCMarkObj($20,1);
  }
  $21 = $i3;
  $inc11 = (($21) + 1)|0;
  $i3 = $inc11;
 }
 $modules = ((($15)) + 52|0);
 _bfHashMap_itBegin($it,$modules);
 while(1) {
  $call14 = (_bfHashMap_itHasNext($it)|0);
  $tobool15 = ($call14|0)!=(0);
  if (!($tobool15)) {
   break;
  }
  $22 = HEAP32[$it>>2]|0;
  $key = $22;
  $23 = $key;
  _bfGCMarkObj($23,1);
  $value = ((($it)) + 4|0);
  $24 = HEAP32[$value>>2]|0;
  $25 = HEAP32[$24>>2]|0;
  _bfGCMarkObj($25,1);
  $26 = $self$addr;
  $modules20 = ((($26)) + 52|0);
  _bfHashMap_itGetNext($modules20,$it);
 }
 $27 = $self$addr;
 $handles = ((($27)) + 588|0);
 $28 = HEAP32[$handles>>2]|0;
 $cursor = $28;
 while(1) {
  $29 = $cursor;
  $tobool22 = ($29|0)!=(0|0);
  if (!($tobool22)) {
   break;
  }
  $30 = $cursor;
  $31 = (_bfVM_getHandleValue($30)|0);
  $32 = (getTempRet0() | 0);
  _bfGCMarkValue($31,$32,1);
  $33 = $cursor;
  $call24 = (_bfVM_getHandleNext($33)|0);
  $cursor = $call24;
 }
 $34 = $self$addr;
 $parser_stack = ((($34)) + 584|0);
 $35 = HEAP32[$parser_stack>>2]|0;
 $parsers = $35;
 while(1) {
  $36 = $parsers;
  $tobool26 = ($36|0)!=(0|0);
  if (!($tobool26)) {
   break;
  }
  $37 = $parsers;
  $current_module = ((($37)) + 32|0);
  $38 = HEAP32[$current_module>>2]|0;
  $tobool28 = ($38|0)!=(0|0);
  if ($tobool28) {
   $39 = $parsers;
   $current_module30 = ((($39)) + 32|0);
   $40 = HEAP32[$current_module30>>2]|0;
   _bfGCMarkObj($40,1);
  }
  $41 = $parsers;
  $current_clz = ((($41)) + 36|0);
  $42 = HEAP32[$current_clz>>2]|0;
  $tobool33 = ($42|0)!=(0|0);
  if ($tobool33) {
   $43 = $parsers;
   $current_clz35 = ((($43)) + 36|0);
   $44 = HEAP32[$current_clz35>>2]|0;
   _bfGCMarkObj($44,1);
  }
  $45 = $parsers;
  $fn_builder_stack = ((($45)) + 24|0);
  $call38 = (_Array_size($fn_builder_stack)|0);
  $num_builders = $call38;
  $i39 = 0;
  while(1) {
   $46 = $i39;
   $47 = $num_builders;
   $cmp41 = ($46>>>0)<($47>>>0);
   $48 = $parsers;
   if (!($cmp41)) {
    break;
   }
   $fn_builder_stack43 = ((($48)) + 24|0);
   $49 = HEAP32[$fn_builder_stack43>>2]|0;
   $50 = $i39;
   $add$ptr = (($49) + (($50*36)|0)|0);
   $builder = $add$ptr;
   $51 = $builder;
   $constants = ((($51)) + 8|0);
   $52 = HEAP32[$constants>>2]|0;
   $tobool44 = ($52|0)!=(0|0);
   if ($tobool44) {
    $53 = $builder;
    $constants46 = ((($53)) + 8|0);
    $54 = HEAP32[$constants46>>2]|0;
    _bfGCMarkValues($54,1);
   }
   $55 = $i39;
   $inc49 = (($55) + 1)|0;
   $i39 = $inc49;
  }
  $56 = HEAP32[$48>>2]|0;
  $parsers = $56;
 }
 $i52 = 0;
 while(1) {
  $57 = $i52;
  $conv = $57&255;
  $58 = $self$addr;
  $temp_roots_top = ((($58)) + 640|0);
  $59 = HEAP8[$temp_roots_top>>0]|0;
  $conv54 = $59&255;
  $cmp55 = ($conv|0)<($conv54|0);
  if (!($cmp55)) {
   break;
  }
  $60 = $self$addr;
  $temp_roots = ((($60)) + 608|0);
  $61 = $i52;
  $idxprom = $61&255;
  $arrayidx58 = (($temp_roots) + ($idxprom<<2)|0);
  $62 = HEAP32[$arrayidx58>>2]|0;
  _bfGCMarkObj($62,1);
  $63 = $i52;
  $inc60 = (($63) + 1)<<24>>24;
  $i52 = $inc60;
 }
 STACKTOP = sp;return;
}
function _bfGCFinalizePostMark($self) {
 $self = $self|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $call = 0;
 var $collected_bytes = 0, $cursor = 0, $finalized = 0, $garbage = 0, $gc_mark = 0, $gc_mark2 = 0, $next = 0, $next3 = 0, $self$addr = 0, $tobool = 0, $tobool1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self$addr = $self;
 $0 = $self$addr;
 $finalized = ((($0)) + 604|0);
 $cursor = $finalized;
 $collected_bytes = 0;
 while(1) {
  $1 = $cursor;
  $2 = HEAP32[$1>>2]|0;
  $tobool = ($2|0)!=(0|0);
  if (!($tobool)) {
   break;
  }
  $3 = $cursor;
  $4 = HEAP32[$3>>2]|0;
  $gc_mark = ((($4)) + 8|0);
  $5 = HEAP8[$gc_mark>>0]|0;
  $tobool1 = ($5<<24>>24)!=(0);
  $6 = $cursor;
  $7 = HEAP32[$6>>2]|0;
  if ($tobool1) {
   $gc_mark2 = ((($7)) + 8|0);
   HEAP8[$gc_mark2>>0] = 6;
   $15 = $cursor;
   $16 = HEAP32[$15>>2]|0;
   $next3 = ((($16)) + 4|0);
   $cursor = $next3;
  } else {
   $garbage = $7;
   $8 = $garbage;
   $next = ((($8)) + 4|0);
   $9 = HEAP32[$next>>2]|0;
   $10 = $cursor;
   HEAP32[$10>>2] = $9;
   $11 = $garbage;
   $call = (_bfGCObjectSize($11)|0);
   $12 = $collected_bytes;
   $add = (($12) + ($call))|0;
   $collected_bytes = $add;
   $13 = $self$addr;
   $14 = $garbage;
   _bfVMObject_delete($13,$14);
  }
 }
 $17 = $collected_bytes;
 STACKTOP = sp;return ($17|0);
}
function _bfGCSweep($self) {
 $self = $self|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $add = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $arrayidx = 0, $call = 0;
 var $call17 = 0, $call19 = 0, $call29 = 0, $call32 = 0, $clz = 0, $clz16 = 0, $cmp = 0, $cmp10 = 0, $cmp13 = 0, $cmp20 = 0, $cmp37 = 0, $cmp44 = 0, $cmp58 = 0, $cmp64 = 0, $collected_bytes = 0, $conv = 0, $conv36 = 0, $conv57 = 0, $conv63 = 0, $cursor = 0;
 var $finalized = 0, $finalized68 = 0, $g_cursor = 0, $g_cursor_prev = 0, $garbage = 0, $garbage_list = 0, $gc_mark = 0, $gc_mark3 = 0, $gc_mark35 = 0, $gc_mark56 = 0, $gc_mark62 = 0, $gc_object_list = 0, $inst = 0, $next = 0, $next2 = 0, $next4 = 0, $next42 = 0, $next54 = 0, $next55 = 0, $next67 = 0;
 var $next8 = 0, $next9 = 0, $self$addr = 0, $sub = 0, $symbol = 0, $symbols = 0, $symbols23 = 0, $tobool = 0, $tobool18 = 0, $tobool26 = 0, $tobool30 = 0, $tobool40 = 0, $tobool52 = 0, $tobool6 = 0, $value = 0, $value24 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $agg$tmp$byval_copy = sp + 72|0;
 $agg$tmp = sp + 16|0;
 $value = sp;
 $self$addr = $self;
 $0 = $self$addr;
 $gc_object_list = ((($0)) + 48|0);
 $cursor = $gc_object_list;
 $garbage_list = 0;
 $collected_bytes = 0;
 while(1) {
  $1 = $cursor;
  $2 = HEAP32[$1>>2]|0;
  $tobool = ($2|0)!=(0|0);
  if (!($tobool)) {
   break;
  }
  $3 = $cursor;
  $4 = HEAP32[$3>>2]|0;
  $gc_mark = ((($4)) + 8|0);
  $5 = HEAP8[$gc_mark>>0]|0;
  $conv = $5&255;
  $cmp = ($conv|0)==(0);
  $6 = $cursor;
  $7 = HEAP32[$6>>2]|0;
  if ($cmp) {
   $garbage = $7;
   $8 = $garbage;
   $next = ((($8)) + 4|0);
   $9 = HEAP32[$next>>2]|0;
   $10 = $cursor;
   HEAP32[$10>>2] = $9;
   $11 = $garbage_list;
   $12 = $garbage;
   $next2 = ((($12)) + 4|0);
   HEAP32[$next2>>2] = $11;
   $13 = $garbage;
   $garbage_list = $13;
   $14 = $garbage;
   $call = (_bfGCObjectSize($14)|0);
   $15 = $collected_bytes;
   $add = (($15) + ($call))|0;
   $collected_bytes = $add;
  } else {
   $gc_mark3 = ((($7)) + 8|0);
   HEAP8[$gc_mark3>>0] = 0;
   $16 = $cursor;
   $17 = HEAP32[$16>>2]|0;
   $next4 = ((($17)) + 4|0);
   $cursor = $next4;
  }
 }
 $18 = $garbage_list;
 $g_cursor = $18;
 $g_cursor_prev = 0;
 while(1) {
  $19 = $g_cursor;
  $tobool6 = ($19|0)!=(0|0);
  if (!($tobool6)) {
   break;
  }
  $20 = $g_cursor;
  $next9 = ((($20)) + 4|0);
  $21 = HEAP32[$next9>>2]|0;
  $next8 = $21;
  $22 = $g_cursor;
  $23 = HEAP32[$22>>2]|0;
  $cmp10 = ($23|0)==(3);
  if ($cmp10) {
   label = 11;
  } else {
   $24 = $g_cursor;
   $25 = HEAP32[$24>>2]|0;
   $cmp13 = ($25|0)==(6);
   if ($cmp13) {
    label = 11;
   }
  }
  if ((label|0) == 11) {
   label = 0;
   $26 = $g_cursor;
   $inst = $26;
   $27 = $inst;
   $clz16 = ((($27)) + 12|0);
   $28 = HEAP32[$clz16>>2]|0;
   $clz = $28;
   $29 = $self$addr;
   _bfMakeStringRangeC($agg$tmp,5490);
   ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
   $call17 = (_bfVM_getSymbol($29,$agg$tmp$byval_copy)|0);
   $symbol = $call17;
   $30 = $clz;
   $tobool18 = ($30|0)!=(0|0);
   if ($tobool18) {
    $31 = $symbol;
    $32 = $clz;
    $symbols = ((($32)) + 24|0);
    $call19 = (_Array_size($symbols)|0);
    $cmp20 = ($31>>>0)<($call19>>>0);
    if ($cmp20) {
     $33 = $clz;
     $symbols23 = ((($33)) + 24|0);
     $34 = HEAP32[$symbols23>>2]|0;
     $35 = $symbol;
     $arrayidx = (($34) + ($35<<4)|0);
     $value24 = ((($arrayidx)) + 8|0);
     $36 = $value24;
     $37 = $36;
     $38 = HEAP32[$37>>2]|0;
     $39 = (($36) + 4)|0;
     $40 = $39;
     $41 = HEAP32[$40>>2]|0;
     $42 = $value;
     $43 = $42;
     HEAP32[$43>>2] = $38;
     $44 = (($42) + 4)|0;
     $45 = $44;
     HEAP32[$45>>2] = $41;
     $46 = $value;
     $47 = $46;
     $48 = HEAP32[$47>>2]|0;
     $49 = (($46) + 4)|0;
     $50 = $49;
     $51 = HEAP32[$50>>2]|0;
     $52 = (_bfVMValue_isPointer($48,$51)|0);
     $tobool26 = ($52|0)!=(0);
     if ($tobool26) {
      $53 = $value;
      $54 = $53;
      $55 = HEAP32[$54>>2]|0;
      $56 = (($53) + 4)|0;
      $57 = $56;
      $58 = HEAP32[$57>>2]|0;
      $59 = (_bfVmValue_asPointer($55,$58)|0);
      $call29 = (_bfObjIsFunction($59)|0);
      $tobool30 = ($call29|0)!=(0);
      if ($tobool30) {
       $60 = $g_cursor;
       _bfGCMarkObj($60,3);
       $61 = $g_cursor;
       $call32 = (_bfGCObjectSize($61)|0);
       $62 = $collected_bytes;
       $sub = (($62) - ($call32))|0;
       $collected_bytes = $sub;
      }
     }
    }
   }
   $63 = $self$addr;
   $64 = $g_cursor;
   _bfObjFinalize($63,$64);
   $65 = $g_cursor;
   $gc_mark35 = ((($65)) + 8|0);
   $66 = HEAP8[$gc_mark35>>0]|0;
   $conv36 = $66&255;
   $cmp37 = ($conv36|0)!=(3);
   if ($cmp37) {
    $67 = $g_cursor_prev;
    $tobool40 = ($67|0)!=(0|0);
    if ($tobool40) {
     $68 = $next8;
     $69 = $g_cursor_prev;
     $next42 = ((($69)) + 4|0);
     HEAP32[$next42>>2] = $68;
    }
    $70 = $garbage_list;
    $71 = $g_cursor;
    $cmp44 = ($70|0)==($71|0);
    if ($cmp44) {
     $72 = $next8;
     $garbage_list = $72;
    }
    $73 = $self$addr;
    $74 = $g_cursor;
    _bfVMObject_delete($73,$74);
    $75 = $next8;
    $g_cursor = $75;
    continue;
   }
  }
  $76 = $g_cursor;
  $g_cursor_prev = $76;
  $77 = $next8;
  $g_cursor = $77;
 }
 $78 = $garbage_list;
 $g_cursor = $78;
 while(1) {
  $79 = $g_cursor;
  $tobool52 = ($79|0)!=(0|0);
  if (!($tobool52)) {
   break;
  }
  $80 = $g_cursor;
  $next55 = ((($80)) + 4|0);
  $81 = HEAP32[$next55>>2]|0;
  $next54 = $81;
  $82 = $g_cursor;
  $gc_mark56 = ((($82)) + 8|0);
  $83 = HEAP8[$gc_mark56>>0]|0;
  $conv57 = $83&255;
  $cmp58 = ($conv57|0)==(0);
  if ($cmp58) {
   $84 = $self$addr;
   $85 = $g_cursor;
   _bfVMObject_delete($84,$85);
  } else {
   $86 = $g_cursor;
   $gc_mark62 = ((($86)) + 8|0);
   $87 = HEAP8[$gc_mark62>>0]|0;
   $conv63 = $87&255;
   $cmp64 = ($conv63|0)==(3);
   if ($cmp64) {
    $88 = $self$addr;
    $finalized = ((($88)) + 604|0);
    $89 = HEAP32[$finalized>>2]|0;
    $90 = $g_cursor;
    $next67 = ((($90)) + 4|0);
    HEAP32[$next67>>2] = $89;
    $91 = $g_cursor;
    $92 = $self$addr;
    $finalized68 = ((($92)) + 604|0);
    HEAP32[$finalized68>>2] = $91;
   }
  }
  $93 = $next54;
  $g_cursor = $93;
 }
 $94 = $collected_bytes;
 STACKTOP = sp;return ($94|0);
}
function _bfGCFinalize($self) {
 $self = $self|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $arrayidx = 0, $arrayidx13 = 0, $arrayidx19 = 0, $arrayidx2 = 0, $arrayidx21 = 0, $arrayidx7 = 0;
 var $arrayidx8 = 0, $build_in_symbols = 0, $call14 = 0, $clz = 0, $clz1 = 0, $cmp = 0, $cursor = 0, $dtor_symbol = 0, $finalized = 0, $next = 0, $self$addr = 0, $stack_restore = 0, $stack_top = 0, $stack_top12 = 0, $stack_top17 = 0, $stack_top20 = 0, $stack_top6 = 0, $stack_top9 = 0, $symbols = 0, $tobool = 0;
 var $value = 0, $value3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $value = sp + 16|0;
 $stack_restore = sp;
 $self$addr = $self;
 $0 = $self$addr;
 $build_in_symbols = ((($0)) + 648|0);
 $arrayidx = ((($build_in_symbols)) + 4|0);
 $1 = HEAP32[$arrayidx>>2]|0;
 $dtor_symbol = $1;
 $2 = $self$addr;
 $finalized = ((($2)) + 604|0);
 $3 = HEAP32[$finalized>>2]|0;
 $cursor = $3;
 while(1) {
  $4 = $cursor;
  $tobool = ($4|0)!=(0|0);
  if (!($tobool)) {
   break;
  }
  $5 = $cursor;
  $clz1 = ((($5)) + 12|0);
  $6 = HEAP32[$clz1>>2]|0;
  $clz = $6;
  $7 = $clz;
  $symbols = ((($7)) + 24|0);
  $8 = HEAP32[$symbols>>2]|0;
  $9 = $dtor_symbol;
  $arrayidx2 = (($8) + ($9<<4)|0);
  $value3 = ((($arrayidx2)) + 8|0);
  $10 = $value3;
  $11 = $10;
  $12 = HEAP32[$11>>2]|0;
  $13 = (($10) + 4)|0;
  $14 = $13;
  $15 = HEAP32[$14>>2]|0;
  $16 = $value;
  $17 = $16;
  HEAP32[$17>>2] = $12;
  $18 = (($16) + 4)|0;
  $19 = $18;
  HEAP32[$19>>2] = $15;
  $20 = $self$addr;
  (_bfVM_stackResize($20,2)|0);
  $21 = $self$addr;
  $stack_top = ((($21)) + 8|0);
  $22 = HEAP32[$stack_top>>2]|0;
  $23 = $22;
  $24 = $23;
  $25 = HEAP32[$24>>2]|0;
  $26 = (($23) + 4)|0;
  $27 = $26;
  $28 = HEAP32[$27>>2]|0;
  $29 = $stack_restore;
  $30 = $29;
  HEAP32[$30>>2] = $25;
  $31 = (($29) + 4)|0;
  $32 = $31;
  HEAP32[$32>>2] = $28;
  $33 = $self$addr;
  $stack_top6 = ((($33)) + 8|0);
  $34 = HEAP32[$stack_top6>>2]|0;
  $arrayidx7 = ((($34)) + 8|0);
  $35 = $arrayidx7;
  $36 = $35;
  $37 = HEAP32[$36>>2]|0;
  $38 = (($35) + 4)|0;
  $39 = $38;
  $40 = HEAP32[$39>>2]|0;
  $arrayidx8 = ((($stack_restore)) + 8|0);
  $41 = $arrayidx8;
  $42 = $41;
  HEAP32[$42>>2] = $37;
  $43 = (($41) + 4)|0;
  $44 = $43;
  HEAP32[$44>>2] = $40;
  $45 = $value;
  $46 = $45;
  $47 = HEAP32[$46>>2]|0;
  $48 = (($45) + 4)|0;
  $49 = $48;
  $50 = HEAP32[$49>>2]|0;
  $51 = $self$addr;
  $stack_top9 = ((($51)) + 8|0);
  $52 = HEAP32[$stack_top9>>2]|0;
  $53 = $52;
  $54 = $53;
  HEAP32[$54>>2] = $47;
  $55 = (($53) + 4)|0;
  $56 = $55;
  HEAP32[$56>>2] = $50;
  $57 = $cursor;
  $58 = (_bfVMValue_fromPointer($57)|0);
  $59 = (getTempRet0() | 0);
  $60 = $self$addr;
  $stack_top12 = ((($60)) + 8|0);
  $61 = HEAP32[$stack_top12>>2]|0;
  $arrayidx13 = ((($61)) + 8|0);
  $62 = $arrayidx13;
  $63 = $62;
  HEAP32[$63>>2] = $58;
  $64 = (($62) + 4)|0;
  $65 = $64;
  HEAP32[$65>>2] = $59;
  $66 = $self$addr;
  $call14 = (_bfVM_stackGetType($66,0)|0);
  $cmp = ($call14|0)==(5);
  if ($cmp) {
   $67 = $self$addr;
   (_bfVM_call($67,0,1,1)|0);
  }
  $68 = $stack_restore;
  $69 = $68;
  $70 = HEAP32[$69>>2]|0;
  $71 = (($68) + 4)|0;
  $72 = $71;
  $73 = HEAP32[$72>>2]|0;
  $74 = $self$addr;
  $stack_top17 = ((($74)) + 8|0);
  $75 = HEAP32[$stack_top17>>2]|0;
  $76 = $75;
  $77 = $76;
  HEAP32[$77>>2] = $70;
  $78 = (($76) + 4)|0;
  $79 = $78;
  HEAP32[$79>>2] = $73;
  $arrayidx19 = ((($stack_restore)) + 8|0);
  $80 = $arrayidx19;
  $81 = $80;
  $82 = HEAP32[$81>>2]|0;
  $83 = (($80) + 4)|0;
  $84 = $83;
  $85 = HEAP32[$84>>2]|0;
  $86 = $self$addr;
  $stack_top20 = ((($86)) + 8|0);
  $87 = HEAP32[$stack_top20>>2]|0;
  $arrayidx21 = ((($87)) + 8|0);
  $88 = $arrayidx21;
  $89 = $88;
  HEAP32[$89>>2] = $82;
  $90 = (($88) + 4)|0;
  $91 = $90;
  HEAP32[$91>>2] = $85;
  $92 = $cursor;
  $next = ((($92)) + 4|0);
  $93 = HEAP32[$next>>2]|0;
  $cursor = $93;
 }
 STACKTOP = sp;return;
}
function _bfVM_stackResize($self,$size) {
 $self = $self|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0, $call = 0, $cmp = 0, $requested_size = 0;
 var $self$addr = 0, $size$addr = 0, $stack = 0, $stack1 = 0, $stack2 = 0, $stack3 = 0, $stack_size = 0, $stack_top = 0, $stack_top4 = 0, $stack_used = 0, $sub$ptr$div = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $self$addr = $self;
 $size$addr = $size;
 $0 = $self$addr;
 $stack = ((($0)) + 4|0);
 $call = (_Array_size($stack)|0);
 $stack_size = $call;
 $1 = $self$addr;
 $stack_top = ((($1)) + 8|0);
 $2 = HEAP32[$stack_top>>2]|0;
 $3 = $self$addr;
 $stack1 = ((($3)) + 4|0);
 $4 = HEAP32[$stack1>>2]|0;
 $sub$ptr$lhs$cast = $2;
 $sub$ptr$rhs$cast = $4;
 $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
 $sub$ptr$div = (($sub$ptr$sub|0) / 8)&-1;
 $stack_used = $sub$ptr$div;
 $5 = $stack_used;
 $6 = $size$addr;
 $add = (($5) + ($6))|0;
 $requested_size = $add;
 $7 = $stack_size;
 $8 = $requested_size;
 $cmp = ($7>>>0)<($8>>>0);
 if (!($cmp)) {
  STACKTOP = sp;return 0;
 }
 $9 = $self$addr;
 $stack2 = ((($9)) + 4|0);
 $10 = $requested_size;
 _Array_resize($stack2,$10);
 $11 = $self$addr;
 $stack3 = ((($11)) + 4|0);
 $12 = HEAP32[$stack3>>2]|0;
 $13 = $stack_used;
 $add$ptr = (($12) + ($13<<3)|0);
 $14 = $self$addr;
 $stack_top4 = ((($14)) + 8|0);
 HEAP32[$stack_top4>>2] = $add$ptr;
 STACKTOP = sp;return 0;
}
function _bfVMValue_fromPointer($value) {
 $value = $value|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $tobool = 0, $value$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $value$addr = $value;
 $0 = $value$addr;
 $tobool = ($0|0)!=(0|0);
 if ($tobool) {
  $1 = $value$addr;
  $2 = $1;
  $5 = -262144;$6 = $2;
 } else {
  $3 = (_bfVMValue_fromNull()|0);
  $4 = (getTempRet0() | 0);
  $5 = $4;$6 = $3;
 }
 setTempRet0(($5) | 0);
 STACKTOP = sp;return ($6|0);
}
function _bfVM_stackGetType($self,$idx) {
 $self = $self|0;
 $idx = $idx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $idx$addr = 0, $self$addr = 0, $stack_top = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self$addr = $self;
 $idx$addr = $idx;
 $0 = $self$addr;
 $1 = $idx$addr;
 _bfVM_assertStackIndex($0,$1);
 $2 = $self$addr;
 $stack_top = ((($2)) + 8|0);
 $3 = HEAP32[$stack_top>>2]|0;
 $4 = $idx$addr;
 $arrayidx = (($3) + ($4<<3)|0);
 $5 = $arrayidx;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = (_bfVMGetType($7,$10)|0);
 STACKTOP = sp;return ($11|0);
}
function _bfVM_call($self,$idx,$args_start,$num_args) {
 $self = $self|0;
 $idx = $idx|0;
 $args_start = $args_start|0;
 $num_args = $num_args|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $add = 0, $add19 = 0, $args_start$addr = 0, $arity = 0, $arity13 = 0, $arity16 = 0, $arity4 = 0, $arrayidx = 0, $base_stack = 0, $call20 = 0, $call8 = 0, $cmp = 0, $cmp11 = 0, $cmp14 = 0, $cmp17 = 0, $cmp3 = 0, $cmp5 = 0;
 var $err = 0, $fn = 0, $frame = 0, $idx$addr = 0, $native_fn = 0, $num_args$addr = 0, $obj = 0, $self$addr = 0, $stack = 0, $stack_top = 0, $stack_top2 = 0, $sub$ptr$div = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $tobool = 0, $value = 0, $value21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $value = sp;
 $self$addr = $self;
 $idx$addr = $idx;
 $args_start$addr = $args_start;
 $num_args$addr = $num_args;
 $0 = $self$addr;
 $1 = $idx$addr;
 _bfVM_assertStackIndex($0,$1);
 $2 = $self$addr;
 $stack_top = ((($2)) + 8|0);
 $3 = HEAP32[$stack_top>>2]|0;
 $4 = $idx$addr;
 $arrayidx = (($3) + ($4<<3)|0);
 $5 = $arrayidx;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = $value;
 $12 = $11;
 HEAP32[$12>>2] = $7;
 $13 = (($11) + 4)|0;
 $14 = $13;
 HEAP32[$14>>2] = $10;
 $err = 0;
 $15 = $value;
 $16 = $15;
 $17 = HEAP32[$16>>2]|0;
 $18 = (($15) + 4)|0;
 $19 = $18;
 $20 = HEAP32[$19>>2]|0;
 $21 = (_bfVMValue_isPointer($17,$20)|0);
 $tobool = ($21|0)!=(0);
 if (!($tobool)) {
  ___assert_fail((4341|0),(4211|0),1556,(4368|0));
  // unreachable;
 }
 $22 = $value;
 $23 = $22;
 $24 = HEAP32[$23>>2]|0;
 $25 = (($22) + 4)|0;
 $26 = $25;
 $27 = HEAP32[$26>>2]|0;
 $28 = (_bfVmValue_asPointer($24,$27)|0);
 $obj = $28;
 $29 = $self$addr;
 $stack_top2 = ((($29)) + 8|0);
 $30 = HEAP32[$stack_top2>>2]|0;
 $31 = $self$addr;
 $stack = ((($31)) + 4|0);
 $32 = HEAP32[$stack>>2]|0;
 $sub$ptr$lhs$cast = $30;
 $sub$ptr$rhs$cast = $32;
 $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
 $sub$ptr$div = (($sub$ptr$sub|0) / 8)&-1;
 $base_stack = $sub$ptr$div;
 $33 = $obj;
 $34 = HEAP32[$33>>2]|0;
 $cmp = ($34|0)==(0);
 $35 = $obj;
 if ($cmp) {
  $fn = $35;
  $36 = $fn;
  $arity = ((($36)) + 16|0);
  $37 = HEAP32[$arity>>2]|0;
  $cmp3 = ($37|0)<(0);
  if (!($cmp3)) {
   $38 = $fn;
   $arity4 = ((($38)) + 16|0);
   $39 = HEAP32[$arity4>>2]|0;
   $40 = $num_args$addr;
   $cmp5 = ($39|0)==($40|0);
   if (!($cmp5)) {
    $err = 5;
    $62 = $err;
    STACKTOP = sp;return ($62|0);
   }
  }
  $41 = $self$addr;
  $42 = $fn;
  $43 = $base_stack;
  $44 = $args_start$addr;
  $add = (($43) + ($44))|0;
  (_bfVM_pushCallFrame($41,$42,$add)|0);
  $45 = $self$addr;
  $call8 = (_bfVM_execTopFrame($45)|0);
  $err = $call8;
  $62 = $err;
  STACKTOP = sp;return ($62|0);
 }
 $46 = HEAP32[$35>>2]|0;
 $cmp11 = ($46|0)==(5);
 if (!($cmp11)) {
  ___assert_fail((4378|0),(4211|0),1601,(4368|0));
  // unreachable;
 }
 $47 = $obj;
 $native_fn = $47;
 $48 = $native_fn;
 $arity13 = ((($48)) + 16|0);
 $49 = HEAP32[$arity13>>2]|0;
 $cmp14 = ($49|0)<(0);
 if (!($cmp14)) {
  $50 = $native_fn;
  $arity16 = ((($50)) + 16|0);
  $51 = HEAP32[$arity16>>2]|0;
  $52 = $num_args$addr;
  $cmp17 = ($51|0)==($52|0);
  if (!($cmp17)) {
   $err = 5;
   $62 = $err;
   STACKTOP = sp;return ($62|0);
  }
 }
 $53 = $self$addr;
 $54 = $base_stack;
 $55 = $args_start$addr;
 $add19 = (($54) + ($55))|0;
 $call20 = (_bfVM_pushCallFrame($53,0,$add19)|0);
 $frame = $call20;
 $56 = $native_fn;
 $value21 = ((($56)) + 12|0);
 $57 = HEAP32[$value21>>2]|0;
 $58 = $self$addr;
 $59 = $num_args$addr;
 FUNCTION_TABLE_vii[$57 & 63]($58,$59);
 $60 = $self$addr;
 $61 = $frame;
 _bfVM_popCallFrame($60,$61);
 $62 = $err;
 STACKTOP = sp;return ($62|0);
}
function _bfVM_assertStackIndex($self,$idx) {
 $self = $self|0;
 $idx = $idx|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $call = 0, $cmp = 0, $cmp1 = 0, $idx$addr = 0, $self$addr = 0, $size = 0, $stack = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self$addr = $self;
 $idx$addr = $idx;
 $0 = $self$addr;
 $stack = ((($0)) + 4|0);
 $call = (_Array_size($stack)|0);
 $size = $call;
 $1 = $idx$addr;
 $2 = $size;
 $cmp = ($1>>>0)<($2>>>0);
 if ($cmp) {
  STACKTOP = sp;return;
 }
 $3 = $idx$addr;
 $4 = $size;
 $cmp1 = ($3>>>0)<($4>>>0);
 if (!($cmp1)) {
  ___assert_fail((5404|0),(4211|0),88,(5468|0));
  // unreachable;
 }
 STACKTOP = sp;return;
}
function _bfVMValue_isPointer($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $conv = 0, $value$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $value$addr = sp;
 $2 = $value$addr;
 $3 = $2;
 HEAP32[$3>>2] = $0;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = $1;
 $6 = $value$addr;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($6) + 4)|0;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = $11 & -262144;
 $13 = (0)==(0);
 $14 = ($12|0)==(-262144);
 $15 = $13 & $14;
 $conv = $15&1;
 STACKTOP = sp;return ($conv|0);
}
function _bfVmValue_asPointer($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $self$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self$addr = sp;
 $2 = $self$addr;
 $3 = $2;
 HEAP32[$3>>2] = $0;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = $1;
 $6 = $self$addr;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($6) + 4)|0;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $11 & 262143;
 $12 = $8;
 STACKTOP = sp;return ($12|0);
}
function _bfVM_pushCallFrame($self,$fn,$new_start) {
 $self = $self|0;
 $fn = $fn|0;
 $new_start = $new_start|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0, $add$ptr7 = 0, $call = 0, $call10 = 0, $cond = 0, $fn$addr = 0, $instructions = 0;
 var $ip = 0, $needed_stack_space = 0, $new_frame = 0, $new_start$addr = 0, $old_stack = 0, $old_top = 0, $self$addr = 0, $stack = 0, $stack13 = 0, $stack4 = 0, $stack6 = 0, $stack_space = 0, $stack_top = 0, $stack_top1 = 0, $stack_top5 = 0, $stack_top8 = 0, $sub$ptr$div = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0;
 var $tobool = 0, $tobool11 = 0, $tobool2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $self$addr = $self;
 $fn$addr = $fn;
 $new_start$addr = $new_start;
 $0 = $self$addr;
 $stack_top = ((($0)) + 8|0);
 $1 = HEAP32[$stack_top>>2]|0;
 $2 = $self$addr;
 $stack = ((($2)) + 4|0);
 $3 = HEAP32[$stack>>2]|0;
 $sub$ptr$lhs$cast = $1;
 $sub$ptr$rhs$cast = $3;
 $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
 $sub$ptr$div = (($sub$ptr$sub|0) / 8)&-1;
 $old_top = $sub$ptr$div;
 $4 = $fn$addr;
 $tobool = ($4|0)!=(0|0);
 if ($tobool) {
  $5 = $new_start$addr;
  $6 = $fn$addr;
  $needed_stack_space = ((($6)) + 32|0);
  $7 = HEAP32[$needed_stack_space>>2]|0;
  $add = (($5) + ($7))|0;
  $stack_space = $add;
  $8 = $self$addr;
  $9 = $stack_space;
  $10 = $self$addr;
  $stack_top1 = ((($10)) + 8|0);
  $11 = HEAP32[$stack_top1>>2]|0;
  $call = (_bfVM_ensureStackspace($8,$9,$11)|0);
  $tobool2 = ($call|0)!=(0);
  if ($tobool2) {
   $12 = $self$addr;
   $stack4 = ((($12)) + 4|0);
   $13 = HEAP32[$stack4>>2]|0;
   $14 = $stack_space;
   $add$ptr = (($13) + ($14<<3)|0);
   $15 = $self$addr;
   $stack_top5 = ((($15)) + 8|0);
   HEAP32[$stack_top5>>2] = $add$ptr;
  }
 } else {
  $16 = $self$addr;
  $stack6 = ((($16)) + 4|0);
  $17 = HEAP32[$stack6>>2]|0;
  $18 = $new_start$addr;
  $add$ptr7 = (($17) + ($18<<3)|0);
  $19 = $self$addr;
  $stack_top8 = ((($19)) + 8|0);
  HEAP32[$stack_top8>>2] = $add$ptr7;
 }
 $20 = $self$addr;
 $call10 = (_Array_emplace($20)|0);
 $new_frame = $call10;
 $21 = $fn$addr;
 $tobool11 = ($21|0)!=(0|0);
 if ($tobool11) {
  $22 = $fn$addr;
  $instructions = ((($22)) + 28|0);
  $23 = HEAP32[$instructions>>2]|0;
  $cond = $23;
 } else {
  $cond = 0;
 }
 $24 = $new_frame;
 $ip = ((($24)) + 4|0);
 HEAP32[$ip>>2] = $cond;
 $25 = $fn$addr;
 $26 = $new_frame;
 HEAP32[$26>>2] = $25;
 $27 = $new_start$addr;
 $28 = $new_frame;
 $stack13 = ((($28)) + 12|0);
 HEAP32[$stack13>>2] = $27;
 $29 = $old_top;
 $30 = $new_frame;
 $old_stack = ((($30)) + 8|0);
 HEAP32[$old_stack>>2] = $29;
 $31 = $new_frame;
 STACKTOP = sp;return ($31|0);
}
function _bfVM_execTopFrame($self) {
 $self = $self|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0.0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0.0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
 var $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0;
 var $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0;
 var $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0;
 var $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0;
 var $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0;
 var $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0;
 var $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0;
 var $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0;
 var $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0;
 var $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0;
 var $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0;
 var $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $action = 0, $add = 0, $add$ptr = 0, $add$ptr10 = 0, $add$ptr12 = 0, $add$ptr167 = 0, $add$ptr255 = 0;
 var $add$ptr261 = 0, $add$ptr263 = 0, $add$ptr264 = 0, $add$ptr316 = 0, $add$ptr361 = 0, $add$ptr369 = 0, $add$ptr379 = 0, $add$ptr380 = 0, $add$ptr387 = 0, $add$ptr388 = 0, $add$ptr497 = 0, $add$ptr505 = 0, $add$ptr514 = 0, $add$ptr8 = 0, $add254 = 0, $add336 = 0.0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp364 = 0, $agg$tmp364$byval_copy = 0;
 var $and = 0, $arity = 0, $arity284 = 0, $arity290 = 0, $arity300 = 0, $arity304 = 0, $arity309 = 0, $arrayidx = 0, $arrayidx101 = 0, $arrayidx106 = 0, $arrayidx107 = 0, $arrayidx109 = 0, $arrayidx111 = 0, $arrayidx112 = 0, $arrayidx128 = 0, $arrayidx13 = 0, $arrayidx132 = 0, $arrayidx134 = 0, $arrayidx141 = 0, $arrayidx143 = 0;
 var $arrayidx144 = 0, $arrayidx146 = 0, $arrayidx151 = 0, $arrayidx152 = 0, $arrayidx16 = 0, $arrayidx17 = 0, $arrayidx170 = 0, $arrayidx18 = 0, $arrayidx185 = 0, $arrayidx186 = 0, $arrayidx19 = 0, $arrayidx190 = 0, $arrayidx192 = 0, $arrayidx193 = 0, $arrayidx195 = 0, $arrayidx198 = 0, $arrayidx199 = 0, $arrayidx202 = 0, $arrayidx230 = 0, $arrayidx237 = 0;
 var $arrayidx28 = 0, $arrayidx324 = 0, $arrayidx325 = 0, $arrayidx326 = 0, $arrayidx327 = 0, $arrayidx33 = 0, $arrayidx339 = 0, $arrayidx372 = 0, $arrayidx393 = 0, $arrayidx394 = 0, $arrayidx396 = 0, $arrayidx397 = 0, $arrayidx408 = 0, $arrayidx410 = 0, $arrayidx411 = 0, $arrayidx412 = 0, $arrayidx413 = 0, $arrayidx416 = 0, $arrayidx418 = 0, $arrayidx419 = 0;
 var $arrayidx420 = 0, $arrayidx421 = 0, $arrayidx424 = 0, $arrayidx426 = 0, $arrayidx427 = 0, $arrayidx428 = 0, $arrayidx429 = 0, $arrayidx433 = 0, $arrayidx435 = 0, $arrayidx436 = 0, $arrayidx437 = 0, $arrayidx438 = 0, $arrayidx443 = 0, $arrayidx445 = 0, $arrayidx446 = 0, $arrayidx447 = 0, $arrayidx448 = 0, $arrayidx452 = 0, $arrayidx454 = 0, $arrayidx455 = 0;
 var $arrayidx456 = 0, $arrayidx457 = 0, $arrayidx461 = 0, $arrayidx463 = 0, $arrayidx464 = 0, $arrayidx465 = 0, $arrayidx466 = 0, $arrayidx470 = 0, $arrayidx472 = 0, $arrayidx473 = 0, $arrayidx476 = 0, $arrayidx477 = 0, $arrayidx482 = 0, $arrayidx484 = 0, $arrayidx485 = 0, $arrayidx488 = 0, $arrayidx489 = 0, $arrayidx494 = 0, $arrayidx500 = 0, $arrayidx509 = 0;
 var $arrayidx69 = 0, $arrayidx76 = 0, $arrayidx79 = 0, $arrayidx85 = 0, $arrayidx96 = 0, $base_clz = 0, $build_in_symbols = 0, $call = 0, $call110 = 0, $call164 = 0, $call2 = 0, $call232 = 0, $call256 = 0, $call29 = 0, $call311 = 0, $call366 = 0, $call65 = 0, $call93 = 0, $call_obj = 0, $call_sym = 0;
 var $call_value = 0, $clz = 0, $clz162 = 0, $clz220 = 0, $clz222 = 0, $clz229 = 0, $clz36 = 0, $clz48 = 0, $clz51 = 0, $clz60 = 0, $cmp = 0, $cmp116 = 0, $cmp121 = 0, $cmp129 = 0, $cmp136 = 0, $cmp159 = 0, $cmp209 = 0, $cmp213 = 0, $cmp217 = 0, $cmp226 = 0;
 var $cmp233 = 0, $cmp244 = 0, $cmp248 = 0, $cmp277 = 0, $cmp281 = 0, $cmp285 = 0, $cmp296 = 0, $cmp301 = 0, $cmp305 = 0, $cmp346 = 0, $cmp354 = 0, $cmp41 = 0, $cmp44 = 0, $cmp520 = 0, $cmp57 = 0, $cmp66 = 0, $cmp89 = 0, $cond = 0, $constants = 0, $constants4 = 0;
 var $conv = 0, $conv517 = 0, $current_module = 0, $current_native_fn = 0, $current_native_fn313 = 0, $err = 0, $err_store = 0, $error_buffer = 0, $fields = 0, $fn280 = 0, $fn299 = 0, $found_field = 0, $frame = 0, $inc = 0, $incdec$ptr = 0, $incdec$ptr519 = 0, $inst = 0, $inst163 = 0, $inst47 = 0, $instance = 0;
 var $ip = 0, $ip292 = 0, $ip496 = 0, $ip504 = 0, $ip513 = 0, $ip518 = 0, $land$ext = 0, $last_error = 0, $last_error119 = 0, $last_error124 = 0, $last_error174 = 0, $last_error181 = 0, $last_error251 = 0, $last_error268 = 0, $last_error272 = 0, $last_error288 = 0, $last_error308 = 0, $last_error318 = 0, $last_error321 = 0, $last_error384 = 0;
 var $last_error404 = 0, $last_error516 = 0, $last_error83 = 0, $last_error98 = 0, $lhs = 0, $lhs392 = 0, $lnot = 0, $lnot$ext = 0, $locals = 0, $lor$ext = 0, $module = 0, $module92 = 0, $mul = 0, $name = 0, $name252 = 0, $name269 = 0, $name273 = 0, $name289 = 0, $native_frame = 0, $new_stack = 0;
 var $new_top = 0, $num_args = 0, $obj = 0, $obj156 = 0, $obj206 = 0, $obj_value = 0, $offset = 0, $offset375 = 0, $op = 0, $original_clz = 0, $ra = 0, $reference_frame = 0, $regs = 0, $rhs = 0, $rhs395 = 0, $rsbx = 0, $self$addr = 0, $stack = 0, $stack165 = 0, $stack166 = 0;
 var $stack201 = 0, $stack259 = 0, $stack260 = 0, $stack314 = 0, $stack315 = 0, $stack367 = 0, $stack368 = 0, $stack5 = 0, $str_obj = 0, $string_buffer = 0, $string_buffer178 = 0, $string_buffer357 = 0, $string_buffer374 = 0, $sub = 0, $sub362 = 0, $sub381 = 0, $sub382 = 0, $sym_str = 0, $symbol = 0, $symbol_str = 0;
 var $symbols = 0, $symbols100 = 0, $symbols105 = 0, $symbols231 = 0, $symbols236 = 0, $symbols27 = 0, $symbols64 = 0, $symbols68 = 0, $symbols75 = 0, $symbols84 = 0, $tobool = 0, $tobool114 = 0, $tobool154 = 0, $tobool204 = 0, $tobool221 = 0, $tobool240 = 0, $tobool257 = 0, $tobool30 = 0, $tobool329 = 0, $tobool332 = 0;
 var $tobool34 = 0, $tobool342 = 0, $tobool350 = 0, $tobool399 = 0, $tobool402 = 0, $tobool440 = 0, $tobool475 = 0, $tobool479 = 0, $tobool487 = 0, $tobool49 = 0, $tobool491 = 0, $tobool502 = 0, $tobool511 = 0, $tobool62 = 0, $tobool81 = 0, $value = 0, $value150 = 0, $value197 = 0, $value238 = 0, $value312 = 0;
 var $value70 = 0, $value77 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer12 = 0, $vararg_buffer14 = 0, $vararg_buffer17 = 0, $vararg_buffer2 = 0, $vararg_buffer20 = 0, $vararg_buffer23 = 0, $vararg_buffer26 = 0, $vararg_buffer29 = 0, $vararg_buffer34 = 0, $vararg_buffer38 = 0, $vararg_buffer40 = 0, $vararg_buffer42 = 0, $vararg_buffer46 = 0, $vararg_buffer48 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0;
 var $vararg_ptr32 = 0, $vararg_ptr33 = 0, $vararg_ptr37 = 0, $vararg_ptr45 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2976|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(2976|0);
 $agg$tmp364$byval_copy = sp + 2960|0;
 $agg$tmp$byval_copy = sp + 2952|0;
 $vararg_buffer48 = sp + 2776|0;
 $vararg_buffer46 = sp + 2768|0;
 $vararg_buffer42 = sp + 2760|0;
 $vararg_buffer40 = sp + 2752|0;
 $vararg_buffer38 = sp + 2744|0;
 $vararg_buffer34 = sp + 2736|0;
 $vararg_buffer29 = sp + 2720|0;
 $vararg_buffer26 = sp + 2712|0;
 $vararg_buffer23 = sp + 2704|0;
 $vararg_buffer20 = sp + 2696|0;
 $vararg_buffer17 = sp + 2688|0;
 $vararg_buffer14 = sp + 2680|0;
 $vararg_buffer12 = sp + 2672|0;
 $vararg_buffer10 = sp + 2664|0;
 $vararg_buffer6 = sp + 2656|0;
 $vararg_buffer2 = sp + 2648|0;
 $vararg_buffer = sp + 2640|0;
 $op = sp + 2968|0;
 $regs = sp + 2560|0;
 $rsbx = sp + 2920|0;
 $obj_value = sp + 2632|0;
 $error_buffer = sp + 2048|0;
 $agg$tmp = sp + 2864|0;
 $value150 = sp + 2624|0;
 $string_buffer = sp + 1536|0;
 $string_buffer178 = sp + 1024|0;
 $value197 = sp + 2616|0;
 $call_value = sp + 2608|0;
 $lhs = sp + 2600|0;
 $rhs = sp + 2592|0;
 $string_buffer357 = sp + 512|0;
 $agg$tmp364 = sp + 2784|0;
 $string_buffer374 = sp;
 $lhs392 = sp + 2584|0;
 $rhs395 = sp + 2576|0;
 $self$addr = $self;
 $0 = $self$addr;
 $call = (_Array_back($0)|0);
 $reference_frame = $call;
 $err = 0;
 L1: while(1) {
  $1 = $self$addr;
  $call2 = (_Array_back($1)|0);
  $frame = $call2;
  $2 = $frame;
  $3 = HEAP32[$2>>2]|0;
  $module = ((($3)) + 36|0);
  $4 = HEAP32[$module>>2]|0;
  $current_module = $4;
  $5 = $frame;
  $6 = HEAP32[$5>>2]|0;
  $constants4 = ((($6)) + 24|0);
  $7 = HEAP32[$constants4>>2]|0;
  $constants = $7;
  $8 = $self$addr;
  $stack = ((($8)) + 4|0);
  $9 = HEAP32[$stack>>2]|0;
  $10 = $frame;
  $stack5 = ((($10)) + 12|0);
  $11 = HEAP32[$stack5>>2]|0;
  $add$ptr = (($9) + ($11<<3)|0);
  $locals = $add$ptr;
  L3: while(1) {
   $12 = $frame;
   $ip = ((($12)) + 4|0);
   $13 = HEAP32[$ip>>2]|0;
   $14 = HEAP32[$13>>2]|0;
   $add$ptr8 = ((($regs)) + 4|0);
   $add$ptr10 = ((($regs)) + 8|0);
   $add$ptr12 = ((($regs)) + 12|0);
   _bfVM_decode($14,$op,$regs,$add$ptr8,$add$ptr10,$add$ptr12,$rsbx);
   $15 = HEAP8[$op>>0]|0;
   $conv = $15&255;
   $and = $conv & 31;
   L5: do {
    switch ($and|0) {
    case 25:  {
     label = 4;
     break L3;
     break;
    }
    case 0:  {
     $33 = $locals;
     $arrayidx16 = ((($regs)) + 4|0);
     $34 = HEAP32[$arrayidx16>>2]|0;
     $arrayidx17 = (($33) + ($34<<3)|0);
     $35 = $arrayidx17;
     $36 = $35;
     $37 = HEAP32[$36>>2]|0;
     $38 = (($35) + 4)|0;
     $39 = $38;
     $40 = HEAP32[$39>>2]|0;
     $41 = $obj_value;
     $42 = $41;
     HEAP32[$42>>2] = $37;
     $43 = (($41) + 4)|0;
     $44 = $43;
     HEAP32[$44>>2] = $40;
     $arrayidx18 = ((($regs)) + 8|0);
     $45 = HEAP32[$arrayidx18>>2]|0;
     $symbol = $45;
     $46 = $self$addr;
     $symbols = ((($46)) + 12|0);
     $47 = HEAP32[$symbols>>2]|0;
     $48 = $symbol;
     $arrayidx19 = (($47) + ($48<<2)|0);
     $49 = HEAP32[$arrayidx19>>2]|0;
     $symbol_str = $49;
     $50 = $obj_value;
     $51 = $50;
     $52 = HEAP32[$51>>2]|0;
     $53 = (($50) + 4)|0;
     $54 = $53;
     $55 = HEAP32[$54>>2]|0;
     $56 = (_bfVMValue_isPointer($52,$55)|0);
     $tobool = ($56|0)!=(0);
     $57 = $obj_value;
     $58 = $57;
     $59 = HEAP32[$58>>2]|0;
     $60 = (($57) + 4)|0;
     $61 = $60;
     $62 = HEAP32[$61>>2]|0;
     if (!($tobool)) {
      label = 6;
      break L1;
     }
     $65 = (_bfVmValue_asPointer($59,$62)|0);
     $obj = $65;
     $66 = $obj;
     $67 = HEAP32[$66>>2]|0;
     $cmp = ($67|0)==(3);
     $68 = $obj;
     do {
      if ($cmp) {
       $inst = $68;
       $69 = $inst;
       $fields = ((($69)) + 16|0);
       $70 = $self$addr;
       $symbols27 = ((($70)) + 12|0);
       $71 = HEAP32[$symbols27>>2]|0;
       $72 = $symbol;
       $arrayidx28 = (($71) + ($72<<2)|0);
       $73 = HEAP32[$arrayidx28>>2]|0;
       $call29 = (_bfHashMap_get($fields,$73)|0);
       $value = $call29;
       $74 = $value;
       $tobool30 = ($74|0)!=(0|0);
       if ($tobool30) {
        $75 = $value;
        $76 = $75;
        $77 = $76;
        $78 = HEAP32[$77>>2]|0;
        $79 = (($76) + 4)|0;
        $80 = $79;
        $81 = HEAP32[$80>>2]|0;
        $82 = $locals;
        $83 = HEAP32[$regs>>2]|0;
        $arrayidx33 = (($82) + ($83<<3)|0);
        $84 = $arrayidx33;
        $85 = $84;
        HEAP32[$85>>2] = $78;
        $86 = (($84) + 4)|0;
        $87 = $86;
        HEAP32[$87>>2] = $81;
        break;
       }
       $88 = $inst;
       $clz = ((($88)) + 12|0);
       $89 = HEAP32[$clz>>2]|0;
       $tobool34 = ($89|0)!=(0|0);
       if ($tobool34) {
        $90 = $inst;
        $clz36 = ((($90)) + 12|0);
        $91 = HEAP32[$clz36>>2]|0;
        $obj = $91;
       }
      } else {
       $92 = HEAP32[$68>>2]|0;
       $cmp41 = ($92|0)==(6);
       if (!($cmp41)) {
        $93 = $obj;
        $94 = HEAP32[$93>>2]|0;
        $cmp44 = ($94|0)==(7);
        if (!($cmp44)) {
         break;
        }
       }
       $95 = $obj;
       $inst47 = $95;
       $96 = $inst47;
       $clz48 = ((($96)) + 12|0);
       $97 = HEAP32[$clz48>>2]|0;
       $tobool49 = ($97|0)!=(0|0);
       if ($tobool49) {
        $98 = $inst47;
        $clz51 = ((($98)) + 12|0);
        $99 = HEAP32[$clz51>>2]|0;
        $obj = $99;
       }
      }
     } while(0);
     $100 = $obj;
     $101 = HEAP32[$100>>2]|0;
     $cmp57 = ($101|0)==(2);
     $102 = $obj;
     if (!($cmp57)) {
      $146 = HEAP32[$102>>2]|0;
      $cmp89 = ($146|0)==(1);
      if (!($cmp89)) {
       label = 27;
       break L1;
      }
      $147 = $obj;
      $module92 = $147;
      $148 = $module92;
      $149 = $symbol_str;
      $150 = $symbol_str;
      $call93 = (_String_length($150)|0);
      $151 = (_bfVM_stackFindVariable($148,$149,$call93)|0);
      $152 = (getTempRet0() | 0);
      $153 = $locals;
      $154 = HEAP32[$regs>>2]|0;
      $arrayidx96 = (($153) + ($154<<3)|0);
      $155 = $arrayidx96;
      $156 = $155;
      HEAP32[$156>>2] = $151;
      $157 = (($155) + 4)|0;
      $158 = $157;
      HEAP32[$158>>2] = $152;
      break L5;
     }
     $original_clz = $102;
     $103 = $original_clz;
     $clz60 = $103;
     $found_field = 0;
     while(1) {
      $104 = $clz60;
      $tobool62 = ($104|0)!=(0|0);
      if (!($tobool62)) {
       break;
      }
      $105 = $symbol;
      $106 = $clz60;
      $symbols64 = ((($106)) + 24|0);
      $call65 = (_Array_size($symbols64)|0);
      $cmp66 = ($105>>>0)<($call65>>>0);
      if ($cmp66) {
       $107 = $clz60;
       $symbols68 = ((($107)) + 24|0);
       $108 = HEAP32[$symbols68>>2]|0;
       $109 = $symbol;
       $arrayidx69 = (($108) + ($109<<4)|0);
       $value70 = ((($arrayidx69)) + 8|0);
       $110 = $value70;
       $111 = $110;
       $112 = HEAP32[$111>>2]|0;
       $113 = (($110) + 4)|0;
       $114 = $113;
       $115 = HEAP32[$114>>2]|0;
       $116 = (_bfVMValue_fromNull()|0);
       $117 = (getTempRet0() | 0);
       $118 = ($112|0)!=($116|0);
       $119 = ($115|0)!=($117|0);
       $120 = $118 | $119;
       if ($120) {
        label = 21;
        break;
       }
      }
      $136 = $clz60;
      $base_clz = ((($136)) + 16|0);
      $137 = HEAP32[$base_clz>>2]|0;
      $clz60 = $137;
     }
     if ((label|0) == 21) {
      label = 0;
      $121 = $clz60;
      $symbols75 = ((($121)) + 24|0);
      $122 = HEAP32[$symbols75>>2]|0;
      $123 = $symbol;
      $arrayidx76 = (($122) + ($123<<4)|0);
      $value77 = ((($arrayidx76)) + 8|0);
      $124 = $value77;
      $125 = $124;
      $126 = HEAP32[$125>>2]|0;
      $127 = (($124) + 4)|0;
      $128 = $127;
      $129 = HEAP32[$128>>2]|0;
      $130 = $locals;
      $131 = HEAP32[$regs>>2]|0;
      $arrayidx79 = (($130) + ($131<<3)|0);
      $132 = $arrayidx79;
      $133 = $132;
      HEAP32[$133>>2] = $126;
      $134 = (($132) + 4)|0;
      $135 = $134;
      HEAP32[$135>>2] = $129;
      $found_field = 1;
     }
     $138 = $found_field;
     $tobool81 = ($138|0)!=(0);
     if (!($tobool81)) {
      label = 24;
      break L1;
     }
     break;
    }
    case 3:  {
     $166 = $self$addr;
     $symbols105 = ((($166)) + 12|0);
     $167 = HEAP32[$symbols105>>2]|0;
     $arrayidx106 = ((($regs)) + 4|0);
     $168 = HEAP32[$arrayidx106>>2]|0;
     $arrayidx107 = (($167) + ($168<<2)|0);
     $169 = HEAP32[$arrayidx107>>2]|0;
     $sym_str = $169;
     $170 = $self$addr;
     $171 = $locals;
     $172 = HEAP32[$regs>>2]|0;
     $arrayidx109 = (($171) + ($172<<3)|0);
     $173 = $arrayidx109;
     $174 = $173;
     $175 = HEAP32[$174>>2]|0;
     $176 = (($173) + 4)|0;
     $177 = $176;
     $178 = HEAP32[$177>>2]|0;
     $179 = $sym_str;
     $180 = $sym_str;
     $call110 = (_String_length($180)|0);
     _bfMakeStringRangeLen($agg$tmp,$179,$call110);
     $181 = $locals;
     $arrayidx111 = ((($regs)) + 8|0);
     $182 = HEAP32[$arrayidx111>>2]|0;
     $arrayidx112 = (($181) + ($182<<3)|0);
     $183 = $arrayidx112;
     $184 = $183;
     $185 = HEAP32[$184>>2]|0;
     $186 = (($183) + 4)|0;
     $187 = $186;
     $188 = HEAP32[$187>>2]|0;
     ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
     $189 = (_bfVM__stackStoreVariable($170,$175,$178,$agg$tmp$byval_copy,$185,$188)|0);
     $err_store = $189;
     $190 = $err_store;
     $tobool114 = ($190|0)!=(0);
     if ($tobool114) {
      $191 = $err_store;
      $cmp116 = ($191|0)==(1);
      if ($cmp116) {
       label = 30;
       break L1;
      }
      $193 = $err_store;
      $cmp121 = ($193|0)==(2);
      if ($cmp121) {
       label = 32;
       break L1;
      }
     }
     break;
    }
    case 1:  {
     $arrayidx128 = ((($regs)) + 12|0);
     $195 = HEAP32[$arrayidx128>>2]|0;
     $action = $195;
     $196 = $action;
     $cmp129 = ($196>>>0)<(3);
     $197 = $action;
     if ($cmp129) {
      $arrayidx132 = (16 + ($197<<3)|0);
      $198 = $arrayidx132;
      $199 = $198;
      $200 = HEAP32[$199>>2]|0;
      $201 = (($198) + 4)|0;
      $202 = $201;
      $203 = HEAP32[$202>>2]|0;
      $204 = $locals;
      $205 = HEAP32[$regs>>2]|0;
      $arrayidx134 = (($204) + ($205<<3)|0);
      $206 = $arrayidx134;
      $207 = $206;
      HEAP32[$207>>2] = $200;
      $208 = (($206) + 4)|0;
      $209 = $208;
      HEAP32[$209>>2] = $203;
      break L5;
     }
     $cmp136 = ($197|0)==(3);
     if ($cmp136) {
      $210 = $current_module;
      $211 = (_bfVMValue_fromPointer($210)|0);
      $212 = (getTempRet0() | 0);
      $213 = $locals;
      $214 = HEAP32[$regs>>2]|0;
      $arrayidx141 = (($213) + ($214<<3)|0);
      $215 = $arrayidx141;
      $216 = $215;
      HEAP32[$216>>2] = $211;
      $217 = (($215) + 4)|0;
      $218 = $217;
      HEAP32[$218>>2] = $212;
      break L5;
     } else {
      $219 = $constants;
      $arrayidx143 = ((($regs)) + 12|0);
      $220 = HEAP32[$arrayidx143>>2]|0;
      $sub = (($220) - 4)|0;
      $arrayidx144 = (($219) + ($sub<<3)|0);
      $221 = $arrayidx144;
      $222 = $221;
      $223 = HEAP32[$222>>2]|0;
      $224 = (($221) + 4)|0;
      $225 = $224;
      $226 = HEAP32[$225>>2]|0;
      $227 = $locals;
      $228 = HEAP32[$regs>>2]|0;
      $arrayidx146 = (($227) + ($228<<3)|0);
      $229 = $arrayidx146;
      $230 = $229;
      HEAP32[$230>>2] = $223;
      $231 = (($229) + 4)|0;
      $232 = $231;
      HEAP32[$232>>2] = $226;
      break L5;
     }
     break;
    }
    case 4:  {
     $233 = $locals;
     $arrayidx151 = ((($regs)) + 12|0);
     $234 = HEAP32[$arrayidx151>>2]|0;
     $arrayidx152 = (($233) + ($234<<3)|0);
     $235 = $arrayidx152;
     $236 = $235;
     $237 = HEAP32[$236>>2]|0;
     $238 = (($235) + 4)|0;
     $239 = $238;
     $240 = HEAP32[$239>>2]|0;
     $241 = $value150;
     $242 = $241;
     HEAP32[$242>>2] = $237;
     $243 = (($241) + 4)|0;
     $244 = $243;
     HEAP32[$244>>2] = $240;
     $245 = $value150;
     $246 = $245;
     $247 = HEAP32[$246>>2]|0;
     $248 = (($245) + 4)|0;
     $249 = $248;
     $250 = HEAP32[$249>>2]|0;
     $251 = (_bfVMValue_isPointer($247,$250)|0);
     $tobool154 = ($251|0)!=(0);
     $252 = $value150;
     $253 = $252;
     $254 = HEAP32[$253>>2]|0;
     $255 = (($252) + 4)|0;
     $256 = $255;
     $257 = HEAP32[$256>>2]|0;
     if (!($tobool154)) {
      label = 42;
      break L1;
     }
     $258 = (_bfVmValue_asPointer($254,$257)|0);
     $obj156 = $258;
     $259 = $obj156;
     $260 = HEAP32[$259>>2]|0;
     $cmp159 = ($260|0)==(2);
     if (!($cmp159)) {
      label = 41;
      break L1;
     }
     $261 = $obj156;
     $clz162 = $261;
     $262 = $self$addr;
     $263 = $clz162;
     $call164 = (_bfVM_createInstance($262,$263)|0);
     $inst163 = $call164;
     $264 = $self$addr;
     $stack165 = ((($264)) + 4|0);
     $265 = HEAP32[$stack165>>2]|0;
     $266 = $frame;
     $stack166 = ((($266)) + 12|0);
     $267 = HEAP32[$stack166>>2]|0;
     $add$ptr167 = (($265) + ($267<<3)|0);
     $locals = $add$ptr167;
     $268 = $inst163;
     $269 = (_bfVMValue_fromPointer($268)|0);
     $270 = (getTempRet0() | 0);
     $271 = $locals;
     $272 = HEAP32[$regs>>2]|0;
     $arrayidx170 = (($271) + ($272<<3)|0);
     $273 = $arrayidx170;
     $274 = $273;
     HEAP32[$274>>2] = $269;
     $275 = (($273) + 4)|0;
     $276 = $275;
     HEAP32[$276>>2] = $270;
     break;
    }
    case 20:  {
     $285 = $locals;
     $arrayidx185 = ((($regs)) + 12|0);
     $286 = HEAP32[$arrayidx185>>2]|0;
     $arrayidx186 = (($285) + ($286<<3)|0);
     $287 = $arrayidx186;
     $288 = $287;
     $289 = HEAP32[$288>>2]|0;
     $290 = (($287) + 4)|0;
     $291 = $290;
     $292 = HEAP32[$291>>2]|0;
     $293 = (_bfVMValue_isThuthy($289,$292)|0);
     $294 = (_bfVMValue_fromBool($293)|0);
     $295 = (getTempRet0() | 0);
     $296 = $locals;
     $297 = HEAP32[$regs>>2]|0;
     $arrayidx190 = (($296) + ($297<<3)|0);
     $298 = $arrayidx190;
     $299 = $298;
     HEAP32[$299>>2] = $294;
     $300 = (($298) + 4)|0;
     $301 = $300;
     HEAP32[$301>>2] = $295;
     break;
    }
    case 2:  {
     $302 = $locals;
     $arrayidx192 = ((($regs)) + 12|0);
     $303 = HEAP32[$arrayidx192>>2]|0;
     $arrayidx193 = (($302) + ($303<<3)|0);
     $304 = $arrayidx193;
     $305 = $304;
     $306 = HEAP32[$305>>2]|0;
     $307 = (($304) + 4)|0;
     $308 = $307;
     $309 = HEAP32[$308>>2]|0;
     $310 = $locals;
     $311 = HEAP32[$regs>>2]|0;
     $arrayidx195 = (($310) + ($311<<3)|0);
     $312 = $arrayidx195;
     $313 = $312;
     HEAP32[$313>>2] = $306;
     $314 = (($312) + 4)|0;
     $315 = $314;
     HEAP32[$315>>2] = $309;
     break;
    }
    case 21:  {
     $316 = $locals;
     $arrayidx198 = ((($regs)) + 4|0);
     $317 = HEAP32[$arrayidx198>>2]|0;
     $arrayidx199 = (($316) + ($317<<3)|0);
     $318 = $arrayidx199;
     $319 = $318;
     $320 = HEAP32[$319>>2]|0;
     $321 = (($318) + 4)|0;
     $322 = $321;
     $323 = HEAP32[$322>>2]|0;
     $324 = $value197;
     $325 = $324;
     HEAP32[$325>>2] = $320;
     $326 = (($324) + 4)|0;
     $327 = $326;
     HEAP32[$327>>2] = $323;
     $328 = HEAP32[$regs>>2]|0;
     $ra = $328;
     $329 = $frame;
     $stack201 = ((($329)) + 12|0);
     $330 = HEAP32[$stack201>>2]|0;
     $331 = $ra;
     $add = (($330) + ($331))|0;
     $new_stack = $add;
     $arrayidx202 = ((($regs)) + 8|0);
     $332 = HEAP32[$arrayidx202>>2]|0;
     $num_args = $332;
     $333 = $value197;
     $334 = $333;
     $335 = HEAP32[$334>>2]|0;
     $336 = (($333) + 4)|0;
     $337 = $336;
     $338 = HEAP32[$337>>2]|0;
     $339 = (_bfVMValue_isPointer($335,$338)|0);
     $tobool204 = ($339|0)!=(0);
     if (!($tobool204)) {
      label = 75;
      break L1;
     }
     $340 = $value197;
     $341 = $340;
     $342 = HEAP32[$341>>2]|0;
     $343 = (($340) + 4)|0;
     $344 = $343;
     $345 = HEAP32[$344>>2]|0;
     $346 = (_bfVmValue_asPointer($342,$345)|0);
     $obj206 = $346;
     $347 = $obj206;
     $instance = $347;
     $348 = $obj206;
     $349 = HEAP32[$348>>2]|0;
     $cmp209 = ($349|0)==(3);
     if ($cmp209) {
      label = 49;
     } else {
      $350 = $obj206;
      $351 = HEAP32[$350>>2]|0;
      $cmp213 = ($351|0)==(6);
      if ($cmp213) {
       label = 49;
      } else {
       $352 = $obj206;
       $353 = HEAP32[$352>>2]|0;
       $cmp217 = ($353|0)==(7);
       if ($cmp217) {
        label = 49;
       }
      }
     }
     if ((label|0) == 49) {
      label = 0;
      $354 = $obj206;
      $instance = $354;
      $355 = $instance;
      $clz220 = ((($355)) + 12|0);
      $356 = HEAP32[$clz220>>2]|0;
      $tobool221 = ($356|0)!=(0|0);
      if ($tobool221) {
       $357 = $instance;
       $clz222 = ((($357)) + 12|0);
       $358 = HEAP32[$clz222>>2]|0;
       $cond = $358;
      } else {
       $359 = $obj206;
       $cond = $359;
      }
      $obj206 = $cond;
     }
     $360 = $obj206;
     $361 = HEAP32[$360>>2]|0;
     $cmp226 = ($361|0)==(2);
     if ($cmp226) {
      $362 = $obj206;
      $clz229 = $362;
      $363 = $self$addr;
      $build_in_symbols = ((($363)) + 648|0);
      $arrayidx230 = ((($build_in_symbols)) + 8|0);
      $364 = HEAP32[$arrayidx230>>2]|0;
      $call_sym = $364;
      $365 = $call_sym;
      $366 = $clz229;
      $symbols231 = ((($366)) + 24|0);
      $call232 = (_Array_size($symbols231)|0);
      $cmp233 = ($365>>>0)<($call232>>>0);
      if (!($cmp233)) {
       label = 63;
       break L1;
      }
      $367 = $clz229;
      $symbols236 = ((($367)) + 24|0);
      $368 = HEAP32[$symbols236>>2]|0;
      $369 = $call_sym;
      $arrayidx237 = (($368) + ($369<<4)|0);
      $value238 = ((($arrayidx237)) + 8|0);
      $370 = $value238;
      $371 = $370;
      $372 = HEAP32[$371>>2]|0;
      $373 = (($370) + 4)|0;
      $374 = $373;
      $375 = HEAP32[$374>>2]|0;
      $376 = $call_value;
      $377 = $376;
      HEAP32[$377>>2] = $372;
      $378 = (($376) + 4)|0;
      $379 = $378;
      HEAP32[$379>>2] = $375;
      $380 = $call_value;
      $381 = $380;
      $382 = HEAP32[$381>>2]|0;
      $383 = (($380) + 4)|0;
      $384 = $383;
      $385 = HEAP32[$384>>2]|0;
      $386 = (_bfVMValue_isPointer($382,$385)|0);
      $tobool240 = ($386|0)!=(0);
      if (!($tobool240)) {
       label = 62;
       break L1;
      }
      $387 = $call_value;
      $388 = $387;
      $389 = HEAP32[$388>>2]|0;
      $390 = (($387) + 4)|0;
      $391 = $390;
      $392 = HEAP32[$391>>2]|0;
      $393 = (_bfVmValue_asPointer($389,$392)|0);
      $call_obj = $393;
      $394 = $call_obj;
      $395 = HEAP32[$394>>2]|0;
      $cmp244 = ($395|0)!=(0);
      if ($cmp244) {
       $396 = $call_obj;
       $397 = HEAP32[$396>>2]|0;
       $cmp248 = ($397|0)!=(5);
       if ($cmp248) {
        label = 58;
        break L1;
       }
      }
      $401 = $self$addr;
      $402 = $num_args;
      $add254 = (($402) + 1)|0;
      $403 = $locals;
      $404 = $ra;
      $add$ptr255 = (($403) + ($404<<3)|0);
      $call256 = (_bfVM_ensureStackspace($401,$add254,$add$ptr255)|0);
      $tobool257 = ($call256|0)!=(0);
      if ($tobool257) {
       $405 = $self$addr;
       $stack259 = ((($405)) + 4|0);
       $406 = HEAP32[$stack259>>2]|0;
       $407 = $frame;
       $stack260 = ((($407)) + 12|0);
       $408 = HEAP32[$stack260>>2]|0;
       $add$ptr261 = (($406) + ($408<<3)|0);
       $locals = $add$ptr261;
      }
      $409 = $locals;
      $410 = $ra;
      $add$ptr263 = (($409) + ($410<<3)|0);
      $new_top = $add$ptr263;
      $411 = $new_top;
      $add$ptr264 = ((($411)) + 8|0);
      $412 = $new_top;
      $413 = $num_args;
      $mul = $413<<3;
      _memmove(($add$ptr264|0),($412|0),($mul|0))|0;
      $414 = $instance;
      $415 = (_bfVMValue_fromPointer($414)|0);
      $416 = (getTempRet0() | 0);
      $417 = $new_top;
      $418 = $417;
      $419 = $418;
      HEAP32[$419>>2] = $415;
      $420 = (($418) + 4)|0;
      $421 = $420;
      HEAP32[$421>>2] = $416;
      $422 = $call_obj;
      $obj206 = $422;
      $423 = $num_args;
      $inc = (($423) + 1)|0;
      $num_args = $inc;
     }
     $430 = $obj206;
     $431 = HEAP32[$430>>2]|0;
     $cmp277 = ($431|0)==(0);
     $432 = $obj206;
     if ($cmp277) {
      break L3;
     }
     $449 = HEAP32[$432>>2]|0;
     $cmp296 = ($449|0)==(5);
     if (!($cmp296)) {
      label = 74;
      break L1;
     }
     $450 = $obj206;
     $fn299 = $450;
     $451 = $fn299;
     $arity300 = ((($451)) + 16|0);
     $452 = HEAP32[$arity300>>2]|0;
     $cmp301 = ($452|0)>=(0);
     if ($cmp301) {
      $453 = $num_args;
      $454 = $fn299;
      $arity304 = ((($454)) + 16|0);
      $455 = HEAP32[$arity304>>2]|0;
      $cmp305 = ($453|0)!=($455|0);
      if ($cmp305) {
       label = 72;
       break L1;
      }
     }
     $460 = $self$addr;
     $461 = $new_stack;
     $call311 = (_bfVM_pushCallFrame($460,0,$461)|0);
     $native_frame = $call311;
     $462 = $fn299;
     $463 = $self$addr;
     $current_native_fn = ((($463)) + 660|0);
     HEAP32[$current_native_fn>>2] = $462;
     $464 = $fn299;
     $value312 = ((($464)) + 12|0);
     $465 = HEAP32[$value312>>2]|0;
     $466 = $self$addr;
     $467 = $num_args;
     FUNCTION_TABLE_vii[$465 & 63]($466,$467);
     $468 = $self$addr;
     $current_native_fn313 = ((($468)) + 660|0);
     HEAP32[$current_native_fn313>>2] = 0;
     $469 = $self$addr;
     $470 = $native_frame;
     _bfVM_popCallFrame($469,$470);
     $471 = $self$addr;
     $stack314 = ((($471)) + 4|0);
     $472 = HEAP32[$stack314>>2]|0;
     $473 = $frame;
     $stack315 = ((($473)) + 12|0);
     $474 = HEAP32[$stack315>>2]|0;
     $add$ptr316 = (($472) + ($474<<3)|0);
     $locals = $add$ptr316;
     break;
    }
    case 5:  {
     $477 = $locals;
     $arrayidx324 = ((($regs)) + 4|0);
     $478 = HEAP32[$arrayidx324>>2]|0;
     $arrayidx325 = (($477) + ($478<<3)|0);
     $479 = $arrayidx325;
     $480 = $479;
     $481 = HEAP32[$480>>2]|0;
     $482 = (($479) + 4)|0;
     $483 = $482;
     $484 = HEAP32[$483>>2]|0;
     $485 = $lhs;
     $486 = $485;
     HEAP32[$486>>2] = $481;
     $487 = (($485) + 4)|0;
     $488 = $487;
     HEAP32[$488>>2] = $484;
     $489 = $locals;
     $arrayidx326 = ((($regs)) + 8|0);
     $490 = HEAP32[$arrayidx326>>2]|0;
     $arrayidx327 = (($489) + ($490<<3)|0);
     $491 = $arrayidx327;
     $492 = $491;
     $493 = HEAP32[$492>>2]|0;
     $494 = (($491) + 4)|0;
     $495 = $494;
     $496 = HEAP32[$495>>2]|0;
     $497 = $rhs;
     $498 = $497;
     HEAP32[$498>>2] = $493;
     $499 = (($497) + 4)|0;
     $500 = $499;
     HEAP32[$500>>2] = $496;
     $501 = $lhs;
     $502 = $501;
     $503 = HEAP32[$502>>2]|0;
     $504 = (($501) + 4)|0;
     $505 = $504;
     $506 = HEAP32[$505>>2]|0;
     $507 = (_bfVMValue_isNumber($503,$506)|0);
     $tobool329 = ($507|0)!=(0);
     if ($tobool329) {
      $508 = $rhs;
      $509 = $508;
      $510 = HEAP32[$509>>2]|0;
      $511 = (($508) + 4)|0;
      $512 = $511;
      $513 = HEAP32[$512>>2]|0;
      $514 = (_bfVMValue_isNumber($510,$513)|0);
      $tobool332 = ($514|0)!=(0);
      if ($tobool332) {
       $515 = $lhs;
       $516 = $515;
       $517 = HEAP32[$516>>2]|0;
       $518 = (($515) + 4)|0;
       $519 = $518;
       $520 = HEAP32[$519>>2]|0;
       $521 = (+_bfVmValue_asNumber($517,$520));
       $522 = $rhs;
       $523 = $522;
       $524 = HEAP32[$523>>2]|0;
       $525 = (($522) + 4)|0;
       $526 = $525;
       $527 = HEAP32[$526>>2]|0;
       $528 = (+_bfVmValue_asNumber($524,$527));
       $add336 = $521 + $528;
       $529 = (_bfVMValue_fromNumber($add336)|0);
       $530 = (getTempRet0() | 0);
       $531 = $locals;
       $532 = HEAP32[$regs>>2]|0;
       $arrayidx339 = (($531) + ($532<<3)|0);
       $533 = $arrayidx339;
       $534 = $533;
       HEAP32[$534>>2] = $529;
       $535 = (($533) + 4)|0;
       $536 = $535;
       HEAP32[$536>>2] = $530;
       break L5;
      }
     }
     $537 = $lhs;
     $538 = $537;
     $539 = HEAP32[$538>>2]|0;
     $540 = (($537) + 4)|0;
     $541 = $540;
     $542 = HEAP32[$541>>2]|0;
     $543 = (_bfVMValue_isPointer($539,$542)|0);
     $tobool342 = ($543|0)!=(0);
     if ($tobool342) {
      $544 = $lhs;
      $545 = $544;
      $546 = HEAP32[$545>>2]|0;
      $547 = (($544) + 4)|0;
      $548 = $547;
      $549 = HEAP32[$548>>2]|0;
      $550 = (_bfVmValue_asPointer($546,$549)|0);
      $551 = HEAP32[$550>>2]|0;
      $cmp346 = ($551|0)==(4);
      if (!($cmp346)) {
       label = 81;
      }
     } else {
      label = 81;
     }
     if ((label|0) == 81) {
      label = 0;
      $552 = $rhs;
      $553 = $552;
      $554 = HEAP32[$553>>2]|0;
      $555 = (($552) + 4)|0;
      $556 = $555;
      $557 = HEAP32[$556>>2]|0;
      $558 = (_bfVMValue_isPointer($554,$557)|0);
      $tobool350 = ($558|0)!=(0);
      if (!($tobool350)) {
       label = 84;
       break L1;
      }
      $559 = $rhs;
      $560 = $559;
      $561 = HEAP32[$560>>2]|0;
      $562 = (($559) + 4)|0;
      $563 = $562;
      $564 = HEAP32[$563>>2]|0;
      $565 = (_bfVmValue_asPointer($561,$564)|0);
      $566 = HEAP32[$565>>2]|0;
      $cmp354 = ($566|0)==(4);
      if (!($cmp354)) {
       label = 84;
       break L1;
      }
     }
     $567 = $lhs;
     $568 = $567;
     $569 = HEAP32[$568>>2]|0;
     $570 = (($567) + 4)|0;
     $571 = $570;
     $572 = HEAP32[$571>>2]|0;
     $573 = (_bfDbgValueToString($569,$572,$string_buffer357,512)|0);
     $offset = $573;
     $574 = $rhs;
     $575 = $574;
     $576 = HEAP32[$575>>2]|0;
     $577 = (($574) + 4)|0;
     $578 = $577;
     $579 = HEAP32[$578>>2]|0;
     $580 = $offset;
     $add$ptr361 = (($string_buffer357) + ($580)|0);
     $581 = $offset;
     $sub362 = (512 - ($581))|0;
     (_bfDbgValueToString($576,$579,$add$ptr361,$sub362)|0);
     $582 = $self$addr;
     _bfMakeStringRangeC($agg$tmp364,$string_buffer357);
     ;HEAP32[$agg$tmp364$byval_copy>>2]=HEAP32[$agg$tmp364>>2]|0;HEAP32[$agg$tmp364$byval_copy+4>>2]=HEAP32[$agg$tmp364+4>>2]|0;
     $call366 = (_bfVM_createString($582,$agg$tmp364$byval_copy)|0);
     $str_obj = $call366;
     $583 = $self$addr;
     $stack367 = ((($583)) + 4|0);
     $584 = HEAP32[$stack367>>2]|0;
     $585 = $frame;
     $stack368 = ((($585)) + 12|0);
     $586 = HEAP32[$stack368>>2]|0;
     $add$ptr369 = (($584) + ($586<<3)|0);
     $locals = $add$ptr369;
     $587 = $str_obj;
     $588 = (_bfVMValue_fromPointer($587)|0);
     $589 = (getTempRet0() | 0);
     $590 = $locals;
     $591 = HEAP32[$regs>>2]|0;
     $arrayidx372 = (($590) + ($591<<3)|0);
     $592 = $arrayidx372;
     $593 = $592;
     HEAP32[$593>>2] = $588;
     $594 = (($592) + 4)|0;
     $595 = $594;
     HEAP32[$595>>2] = $589;
     break;
    }
    case 6:  {
     $613 = $locals;
     $arrayidx393 = ((($regs)) + 4|0);
     $614 = HEAP32[$arrayidx393>>2]|0;
     $arrayidx394 = (($613) + ($614<<3)|0);
     $615 = $arrayidx394;
     $616 = $615;
     $617 = HEAP32[$616>>2]|0;
     $618 = (($615) + 4)|0;
     $619 = $618;
     $620 = HEAP32[$619>>2]|0;
     $621 = $lhs392;
     $622 = $621;
     HEAP32[$622>>2] = $617;
     $623 = (($621) + 4)|0;
     $624 = $623;
     HEAP32[$624>>2] = $620;
     $625 = $locals;
     $arrayidx396 = ((($regs)) + 8|0);
     $626 = HEAP32[$arrayidx396>>2]|0;
     $arrayidx397 = (($625) + ($626<<3)|0);
     $627 = $arrayidx397;
     $628 = $627;
     $629 = HEAP32[$628>>2]|0;
     $630 = (($627) + 4)|0;
     $631 = $630;
     $632 = HEAP32[$631>>2]|0;
     $633 = $rhs395;
     $634 = $633;
     HEAP32[$634>>2] = $629;
     $635 = (($633) + 4)|0;
     $636 = $635;
     HEAP32[$636>>2] = $632;
     $637 = $lhs392;
     $638 = $637;
     $639 = HEAP32[$638>>2]|0;
     $640 = (($637) + 4)|0;
     $641 = $640;
     $642 = HEAP32[$641>>2]|0;
     $643 = (_bfVMValue_isNumber($639,$642)|0);
     $tobool399 = ($643|0)!=(0);
     if (!($tobool399)) {
      label = 87;
      break L1;
     }
     $644 = $rhs395;
     $645 = $644;
     $646 = HEAP32[$645>>2]|0;
     $647 = (($644) + 4)|0;
     $648 = $647;
     $649 = HEAP32[$648>>2]|0;
     $650 = (_bfVMValue_isNumber($646,$649)|0);
     $tobool402 = ($650|0)!=(0);
     if (!($tobool402)) {
      label = 87;
      break L1;
     }
     $652 = $lhs392;
     $653 = $652;
     $654 = HEAP32[$653>>2]|0;
     $655 = (($652) + 4)|0;
     $656 = $655;
     $657 = HEAP32[$656>>2]|0;
     $658 = $rhs395;
     $659 = $658;
     $660 = HEAP32[$659>>2]|0;
     $661 = (($658) + 4)|0;
     $662 = $661;
     $663 = HEAP32[$662>>2]|0;
     $664 = (_bfVMValue_sub($654,$657,$660,$663)|0);
     $665 = (getTempRet0() | 0);
     $666 = $locals;
     $667 = HEAP32[$regs>>2]|0;
     $arrayidx408 = (($666) + ($667<<3)|0);
     $668 = $arrayidx408;
     $669 = $668;
     HEAP32[$669>>2] = $664;
     $670 = (($668) + 4)|0;
     $671 = $670;
     HEAP32[$671>>2] = $665;
     break;
    }
    case 7:  {
     $672 = $locals;
     $arrayidx410 = ((($regs)) + 4|0);
     $673 = HEAP32[$arrayidx410>>2]|0;
     $arrayidx411 = (($672) + ($673<<3)|0);
     $674 = $arrayidx411;
     $675 = $674;
     $676 = HEAP32[$675>>2]|0;
     $677 = (($674) + 4)|0;
     $678 = $677;
     $679 = HEAP32[$678>>2]|0;
     $680 = $locals;
     $arrayidx412 = ((($regs)) + 8|0);
     $681 = HEAP32[$arrayidx412>>2]|0;
     $arrayidx413 = (($680) + ($681<<3)|0);
     $682 = $arrayidx413;
     $683 = $682;
     $684 = HEAP32[$683>>2]|0;
     $685 = (($682) + 4)|0;
     $686 = $685;
     $687 = HEAP32[$686>>2]|0;
     $688 = (_bfVMValue_mul($676,$679,$684,$687)|0);
     $689 = (getTempRet0() | 0);
     $690 = $locals;
     $691 = HEAP32[$regs>>2]|0;
     $arrayidx416 = (($690) + ($691<<3)|0);
     $692 = $arrayidx416;
     $693 = $692;
     HEAP32[$693>>2] = $688;
     $694 = (($692) + 4)|0;
     $695 = $694;
     HEAP32[$695>>2] = $689;
     break;
    }
    case 8:  {
     $696 = $locals;
     $arrayidx418 = ((($regs)) + 4|0);
     $697 = HEAP32[$arrayidx418>>2]|0;
     $arrayidx419 = (($696) + ($697<<3)|0);
     $698 = $arrayidx419;
     $699 = $698;
     $700 = HEAP32[$699>>2]|0;
     $701 = (($698) + 4)|0;
     $702 = $701;
     $703 = HEAP32[$702>>2]|0;
     $704 = $locals;
     $arrayidx420 = ((($regs)) + 8|0);
     $705 = HEAP32[$arrayidx420>>2]|0;
     $arrayidx421 = (($704) + ($705<<3)|0);
     $706 = $arrayidx421;
     $707 = $706;
     $708 = HEAP32[$707>>2]|0;
     $709 = (($706) + 4)|0;
     $710 = $709;
     $711 = HEAP32[$710>>2]|0;
     $712 = (_bfVMValue_div($700,$703,$708,$711)|0);
     $713 = (getTempRet0() | 0);
     $714 = $locals;
     $715 = HEAP32[$regs>>2]|0;
     $arrayidx424 = (($714) + ($715<<3)|0);
     $716 = $arrayidx424;
     $717 = $716;
     HEAP32[$717>>2] = $712;
     $718 = (($716) + 4)|0;
     $719 = $718;
     HEAP32[$719>>2] = $713;
     break;
    }
    case 12:  {
     $720 = $locals;
     $arrayidx426 = ((($regs)) + 4|0);
     $721 = HEAP32[$arrayidx426>>2]|0;
     $arrayidx427 = (($720) + ($721<<3)|0);
     $722 = $arrayidx427;
     $723 = $722;
     $724 = HEAP32[$723>>2]|0;
     $725 = (($722) + 4)|0;
     $726 = $725;
     $727 = HEAP32[$726>>2]|0;
     $728 = $locals;
     $arrayidx428 = ((($regs)) + 8|0);
     $729 = HEAP32[$arrayidx428>>2]|0;
     $arrayidx429 = (($728) + ($729<<3)|0);
     $730 = $arrayidx429;
     $731 = $730;
     $732 = HEAP32[$731>>2]|0;
     $733 = (($730) + 4)|0;
     $734 = $733;
     $735 = HEAP32[$734>>2]|0;
     $736 = (_bfVMValue_ee($724,$727,$732,$735)|0);
     $737 = (_bfVMValue_fromBool($736)|0);
     $738 = (getTempRet0() | 0);
     $739 = $locals;
     $740 = HEAP32[$regs>>2]|0;
     $arrayidx433 = (($739) + ($740<<3)|0);
     $741 = $arrayidx433;
     $742 = $741;
     HEAP32[$742>>2] = $737;
     $743 = (($741) + 4)|0;
     $744 = $743;
     HEAP32[$744>>2] = $738;
     break;
    }
    case 13:  {
     $745 = $locals;
     $arrayidx435 = ((($regs)) + 4|0);
     $746 = HEAP32[$arrayidx435>>2]|0;
     $arrayidx436 = (($745) + ($746<<3)|0);
     $747 = $arrayidx436;
     $748 = $747;
     $749 = HEAP32[$748>>2]|0;
     $750 = (($747) + 4)|0;
     $751 = $750;
     $752 = HEAP32[$751>>2]|0;
     $753 = $locals;
     $arrayidx437 = ((($regs)) + 8|0);
     $754 = HEAP32[$arrayidx437>>2]|0;
     $arrayidx438 = (($753) + ($754<<3)|0);
     $755 = $arrayidx438;
     $756 = $755;
     $757 = HEAP32[$756>>2]|0;
     $758 = (($755) + 4)|0;
     $759 = $758;
     $760 = HEAP32[$759>>2]|0;
     $761 = (_bfVMValue_ee($749,$752,$757,$760)|0);
     $tobool440 = ($761|0)!=(0);
     $lnot = $tobool440 ^ 1;
     $lnot$ext = $lnot&1;
     $762 = (_bfVMValue_fromBool($lnot$ext)|0);
     $763 = (getTempRet0() | 0);
     $764 = $locals;
     $765 = HEAP32[$regs>>2]|0;
     $arrayidx443 = (($764) + ($765<<3)|0);
     $766 = $arrayidx443;
     $767 = $766;
     HEAP32[$767>>2] = $762;
     $768 = (($766) + 4)|0;
     $769 = $768;
     HEAP32[$769>>2] = $763;
     break;
    }
    case 14:  {
     $770 = $locals;
     $arrayidx445 = ((($regs)) + 4|0);
     $771 = HEAP32[$arrayidx445>>2]|0;
     $arrayidx446 = (($770) + ($771<<3)|0);
     $772 = $arrayidx446;
     $773 = $772;
     $774 = HEAP32[$773>>2]|0;
     $775 = (($772) + 4)|0;
     $776 = $775;
     $777 = HEAP32[$776>>2]|0;
     $778 = $locals;
     $arrayidx447 = ((($regs)) + 8|0);
     $779 = HEAP32[$arrayidx447>>2]|0;
     $arrayidx448 = (($778) + ($779<<3)|0);
     $780 = $arrayidx448;
     $781 = $780;
     $782 = HEAP32[$781>>2]|0;
     $783 = (($780) + 4)|0;
     $784 = $783;
     $785 = HEAP32[$784>>2]|0;
     $786 = (_bfVMValue_lt($774,$777,$782,$785)|0);
     $787 = (_bfVMValue_fromBool($786)|0);
     $788 = (getTempRet0() | 0);
     $789 = $locals;
     $790 = HEAP32[$regs>>2]|0;
     $arrayidx452 = (($789) + ($790<<3)|0);
     $791 = $arrayidx452;
     $792 = $791;
     HEAP32[$792>>2] = $787;
     $793 = (($791) + 4)|0;
     $794 = $793;
     HEAP32[$794>>2] = $788;
     break;
    }
    case 16:  {
     $795 = $locals;
     $arrayidx454 = ((($regs)) + 4|0);
     $796 = HEAP32[$arrayidx454>>2]|0;
     $arrayidx455 = (($795) + ($796<<3)|0);
     $797 = $arrayidx455;
     $798 = $797;
     $799 = HEAP32[$798>>2]|0;
     $800 = (($797) + 4)|0;
     $801 = $800;
     $802 = HEAP32[$801>>2]|0;
     $803 = $locals;
     $arrayidx456 = ((($regs)) + 8|0);
     $804 = HEAP32[$arrayidx456>>2]|0;
     $arrayidx457 = (($803) + ($804<<3)|0);
     $805 = $arrayidx457;
     $806 = $805;
     $807 = HEAP32[$806>>2]|0;
     $808 = (($805) + 4)|0;
     $809 = $808;
     $810 = HEAP32[$809>>2]|0;
     $811 = (_bfVMValue_gt($799,$802,$807,$810)|0);
     $812 = (_bfVMValue_fromBool($811)|0);
     $813 = (getTempRet0() | 0);
     $814 = $locals;
     $815 = HEAP32[$regs>>2]|0;
     $arrayidx461 = (($814) + ($815<<3)|0);
     $816 = $arrayidx461;
     $817 = $816;
     HEAP32[$817>>2] = $812;
     $818 = (($816) + 4)|0;
     $819 = $818;
     HEAP32[$819>>2] = $813;
     break;
    }
    case 17:  {
     $820 = $locals;
     $arrayidx463 = ((($regs)) + 4|0);
     $821 = HEAP32[$arrayidx463>>2]|0;
     $arrayidx464 = (($820) + ($821<<3)|0);
     $822 = $arrayidx464;
     $823 = $822;
     $824 = HEAP32[$823>>2]|0;
     $825 = (($822) + 4)|0;
     $826 = $825;
     $827 = HEAP32[$826>>2]|0;
     $828 = $locals;
     $arrayidx465 = ((($regs)) + 8|0);
     $829 = HEAP32[$arrayidx465>>2]|0;
     $arrayidx466 = (($828) + ($829<<3)|0);
     $830 = $arrayidx466;
     $831 = $830;
     $832 = HEAP32[$831>>2]|0;
     $833 = (($830) + 4)|0;
     $834 = $833;
     $835 = HEAP32[$834>>2]|0;
     $836 = (_bfVMValue_ge($824,$827,$832,$835)|0);
     $837 = (_bfVMValue_fromBool($836)|0);
     $838 = (getTempRet0() | 0);
     $839 = $locals;
     $840 = HEAP32[$regs>>2]|0;
     $arrayidx470 = (($839) + ($840<<3)|0);
     $841 = $arrayidx470;
     $842 = $841;
     HEAP32[$842>>2] = $837;
     $843 = (($841) + 4)|0;
     $844 = $843;
     HEAP32[$844>>2] = $838;
     break;
    }
    case 18:  {
     $845 = $locals;
     $arrayidx472 = ((($regs)) + 4|0);
     $846 = HEAP32[$arrayidx472>>2]|0;
     $arrayidx473 = (($845) + ($846<<3)|0);
     $847 = $arrayidx473;
     $848 = $847;
     $849 = HEAP32[$848>>2]|0;
     $850 = (($847) + 4)|0;
     $851 = $850;
     $852 = HEAP32[$851>>2]|0;
     $853 = (_bfVMValue_isThuthy($849,$852)|0);
     $tobool475 = ($853|0)!=(0);
     if ($tobool475) {
      $854 = $locals;
      $arrayidx476 = ((($regs)) + 8|0);
      $855 = HEAP32[$arrayidx476>>2]|0;
      $arrayidx477 = (($854) + ($855<<3)|0);
      $856 = $arrayidx477;
      $857 = $856;
      $858 = HEAP32[$857>>2]|0;
      $859 = (($856) + 4)|0;
      $860 = $859;
      $861 = HEAP32[$860>>2]|0;
      $862 = (_bfVMValue_isThuthy($858,$861)|0);
      $tobool479 = ($862|0)!=(0);
      $863 = $tobool479;
     } else {
      $863 = 0;
     }
     $land$ext = $863&1;
     $864 = (_bfVMValue_fromBool($land$ext)|0);
     $865 = (getTempRet0() | 0);
     $866 = $locals;
     $867 = HEAP32[$regs>>2]|0;
     $arrayidx482 = (($866) + ($867<<3)|0);
     $868 = $arrayidx482;
     $869 = $868;
     HEAP32[$869>>2] = $864;
     $870 = (($868) + 4)|0;
     $871 = $870;
     HEAP32[$871>>2] = $865;
     break;
    }
    case 19:  {
     $872 = $locals;
     $arrayidx484 = ((($regs)) + 4|0);
     $873 = HEAP32[$arrayidx484>>2]|0;
     $arrayidx485 = (($872) + ($873<<3)|0);
     $874 = $arrayidx485;
     $875 = $874;
     $876 = HEAP32[$875>>2]|0;
     $877 = (($874) + 4)|0;
     $878 = $877;
     $879 = HEAP32[$878>>2]|0;
     $880 = (_bfVMValue_isThuthy($876,$879)|0);
     $tobool487 = ($880|0)!=(0);
     if ($tobool487) {
      $890 = 1;
     } else {
      $881 = $locals;
      $arrayidx488 = ((($regs)) + 8|0);
      $882 = HEAP32[$arrayidx488>>2]|0;
      $arrayidx489 = (($881) + ($882<<3)|0);
      $883 = $arrayidx489;
      $884 = $883;
      $885 = HEAP32[$884>>2]|0;
      $886 = (($883) + 4)|0;
      $887 = $886;
      $888 = HEAP32[$887>>2]|0;
      $889 = (_bfVMValue_isThuthy($885,$888)|0);
      $tobool491 = ($889|0)!=(0);
      $890 = $tobool491;
     }
     $lor$ext = $890&1;
     $891 = (_bfVMValue_fromBool($lor$ext)|0);
     $892 = (getTempRet0() | 0);
     $893 = $locals;
     $894 = HEAP32[$regs>>2]|0;
     $arrayidx494 = (($893) + ($894<<3)|0);
     $895 = $arrayidx494;
     $896 = $895;
     HEAP32[$896>>2] = $891;
     $897 = (($895) + 4)|0;
     $898 = $897;
     HEAP32[$898>>2] = $892;
     break;
    }
    case 22:  {
     $899 = HEAP32[$rsbx>>2]|0;
     $900 = $frame;
     $ip496 = ((($900)) + 4|0);
     $901 = HEAP32[$ip496>>2]|0;
     $add$ptr497 = (($901) + ($899<<2)|0);
     HEAP32[$ip496>>2] = $add$ptr497;
     continue L3;
     break;
    }
    case 23:  {
     $902 = $locals;
     $903 = HEAP32[$regs>>2]|0;
     $arrayidx500 = (($902) + ($903<<3)|0);
     $904 = $arrayidx500;
     $905 = $904;
     $906 = HEAP32[$905>>2]|0;
     $907 = (($904) + 4)|0;
     $908 = $907;
     $909 = HEAP32[$908>>2]|0;
     $910 = (_bfVMValue_isThuthy($906,$909)|0);
     $tobool502 = ($910|0)!=(0);
     if ($tobool502) {
      $911 = HEAP32[$rsbx>>2]|0;
      $912 = $frame;
      $ip504 = ((($912)) + 4|0);
      $913 = HEAP32[$ip504>>2]|0;
      $add$ptr505 = (($913) + ($911<<2)|0);
      HEAP32[$ip504>>2] = $add$ptr505;
      continue L3;
     }
     break;
    }
    case 24:  {
     $914 = $locals;
     $915 = HEAP32[$regs>>2]|0;
     $arrayidx509 = (($914) + ($915<<3)|0);
     $916 = $arrayidx509;
     $917 = $916;
     $918 = HEAP32[$917>>2]|0;
     $919 = (($916) + 4)|0;
     $920 = $919;
     $921 = HEAP32[$920>>2]|0;
     $922 = (_bfVMValue_isThuthy($918,$921)|0);
     $tobool511 = ($922|0)!=(0);
     if (!($tobool511)) {
      $923 = HEAP32[$rsbx>>2]|0;
      $924 = $frame;
      $ip513 = ((($924)) + 4|0);
      $925 = HEAP32[$ip513>>2]|0;
      $add$ptr514 = (($925) + ($923<<2)|0);
      HEAP32[$ip513>>2] = $add$ptr514;
      continue L3;
     }
     break;
    }
    default: {
     label = 107;
     break L1;
    }
    }
   } while(0);
   $928 = $frame;
   $ip518 = ((($928)) + 4|0);
   $929 = HEAP32[$ip518>>2]|0;
   $incdec$ptr519 = ((($929)) + 4|0);
   HEAP32[$ip518>>2] = $incdec$ptr519;
  }
  if ((label|0) == 4) {
   label = 0;
   $16 = $locals;
   $arrayidx = ((($regs)) + 12|0);
   $17 = HEAP32[$arrayidx>>2]|0;
   $arrayidx13 = (($16) + ($17<<3)|0);
   $18 = $arrayidx13;
   $19 = $18;
   $20 = HEAP32[$19>>2]|0;
   $21 = (($18) + 4)|0;
   $22 = $21;
   $23 = HEAP32[$22>>2]|0;
   $24 = $locals;
   $25 = $24;
   $26 = $25;
   HEAP32[$26>>2] = $20;
   $27 = (($25) + 4)|0;
   $28 = $27;
   HEAP32[$28>>2] = $23;
   $29 = $self$addr;
   $30 = $frame;
   _bfVM_popCallFrame($29,$30);
   $31 = $reference_frame;
   $32 = $frame;
   $cmp520 = ($31>>>0)<($32>>>0);
   if (!($cmp520)) {
    label = 111;
    break;
   }
   continue;
  }
  $fn280 = $432;
  $433 = $fn280;
  $arity = ((($433)) + 16|0);
  $434 = HEAP32[$arity>>2]|0;
  $cmp281 = ($434|0)>=(0);
  if ($cmp281) {
   $435 = $num_args;
   $436 = $fn280;
   $arity284 = ((($436)) + 16|0);
   $437 = HEAP32[$arity284>>2]|0;
   $cmp285 = ($435|0)!=($437|0);
   if ($cmp285) {
    label = 67;
    break;
   }
  }
  $444 = $frame;
  $ip292 = ((($444)) + 4|0);
  $445 = HEAP32[$ip292>>2]|0;
  $incdec$ptr = ((($445)) + 4|0);
  HEAP32[$ip292>>2] = $incdec$ptr;
  $446 = $self$addr;
  $447 = $fn280;
  $448 = $new_stack;
  (_bfVM_pushCallFrame($446,$447,$448)|0);
 }
 switch (label|0) {
  case 6: {
   (_bfDbgValueToString($59,$62,$error_buffer,512)|0);
   $63 = $self$addr;
   $last_error = ((($63)) + 596|0);
   $64 = $symbol_str;
   HEAP32[$vararg_buffer>>2] = $64;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $error_buffer;
   _String_sprintf($last_error,4426,$vararg_buffer);
   break;
  }
  case 24: {
   $139 = $self$addr;
   $last_error83 = ((($139)) + 596|0);
   $140 = $original_clz;
   $name = ((($140)) + 12|0);
   $141 = HEAP32[$name>>2]|0;
   $142 = $self$addr;
   $symbols84 = ((($142)) + 12|0);
   $143 = HEAP32[$symbols84>>2]|0;
   $144 = $symbol;
   $arrayidx85 = (($143) + ($144<<2)|0);
   $145 = HEAP32[$arrayidx85>>2]|0;
   HEAP32[$vararg_buffer2>>2] = $141;
   $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
   HEAP32[$vararg_ptr5>>2] = $145;
   _String_sprintf($last_error83,4470,$vararg_buffer2);
   break;
  }
  case 27: {
   $159 = $self$addr;
   $last_error98 = ((($159)) + 596|0);
   $160 = $obj;
   $161 = HEAP32[$160>>2]|0;
   $162 = $self$addr;
   $symbols100 = ((($162)) + 12|0);
   $163 = HEAP32[$symbols100>>2]|0;
   $164 = $symbol;
   $arrayidx101 = (($163) + ($164<<2)|0);
   $165 = HEAP32[$arrayidx101>>2]|0;
   HEAP32[$vararg_buffer6>>2] = $161;
   $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
   HEAP32[$vararg_ptr9>>2] = $165;
   _String_sprintf($last_error98,4531,$vararg_buffer6);
   break;
  }
  case 30: {
   $192 = $self$addr;
   $last_error119 = ((($192)) + 596|0);
   _String_sprintf($last_error119,4589,$vararg_buffer10);
   break;
  }
  case 32: {
   $194 = $self$addr;
   $last_error124 = ((($194)) + 596|0);
   _String_sprintf($last_error124,4626,$vararg_buffer12);
   break;
  }
  case 41: {
   $277 = $value150;
   $278 = $277;
   $279 = HEAP32[$278>>2]|0;
   $280 = (($277) + 4)|0;
   $281 = $280;
   $282 = HEAP32[$281>>2]|0;
   (_bfDbgValueTypeToString($279,$282,$string_buffer,512)|0);
   $283 = $self$addr;
   $last_error174 = ((($283)) + 596|0);
   HEAP32[$vararg_buffer14>>2] = $string_buffer;
   _String_sprintf($last_error174,4683,$vararg_buffer14);
   break;
  }
  case 42: {
   (_bfDbgValueTypeToString($254,$257,$string_buffer178,512)|0);
   $284 = $self$addr;
   $last_error181 = ((($284)) + 596|0);
   HEAP32[$vararg_buffer17>>2] = $string_buffer178;
   _String_sprintf($last_error181,4683,$vararg_buffer17);
   break;
  }
  case 58: {
   $398 = $self$addr;
   $last_error251 = ((($398)) + 596|0);
   $399 = $clz229;
   $name252 = ((($399)) + 12|0);
   $400 = HEAP32[$name252>>2]|0;
   HEAP32[$vararg_buffer20>>2] = $400;
   _String_sprintf($last_error251,4721,$vararg_buffer20);
   break;
  }
  case 62: {
   $424 = $self$addr;
   $last_error268 = ((($424)) + 596|0);
   $425 = $clz229;
   $name269 = ((($425)) + 12|0);
   $426 = HEAP32[$name269>>2]|0;
   HEAP32[$vararg_buffer23>>2] = $426;
   _String_sprintf($last_error268,4721,$vararg_buffer23);
   break;
  }
  case 63: {
   $427 = $self$addr;
   $last_error272 = ((($427)) + 596|0);
   $428 = $clz229;
   $name273 = ((($428)) + 12|0);
   $429 = HEAP32[$name273>>2]|0;
   HEAP32[$vararg_buffer26>>2] = $429;
   _String_sprintf($last_error272,4792,$vararg_buffer26);
   break;
  }
  case 67: {
   $438 = $self$addr;
   $last_error288 = ((($438)) + 596|0);
   $439 = $fn280;
   $name289 = ((($439)) + 12|0);
   $440 = HEAP32[$name289>>2]|0;
   $441 = $num_args;
   $442 = $fn280;
   $arity290 = ((($442)) + 16|0);
   $443 = HEAP32[$arity290>>2]|0;
   HEAP32[$vararg_buffer29>>2] = $440;
   $vararg_ptr32 = ((($vararg_buffer29)) + 4|0);
   HEAP32[$vararg_ptr32>>2] = $441;
   $vararg_ptr33 = ((($vararg_buffer29)) + 8|0);
   HEAP32[$vararg_ptr33>>2] = $443;
   _String_sprintf($last_error288,4831,$vararg_buffer29);
   break;
  }
  case 72: {
   $456 = $self$addr;
   $last_error308 = ((($456)) + 596|0);
   $457 = $num_args;
   $458 = $fn299;
   $arity309 = ((($458)) + 16|0);
   $459 = HEAP32[$arity309>>2]|0;
   HEAP32[$vararg_buffer34>>2] = $457;
   $vararg_ptr37 = ((($vararg_buffer34)) + 4|0);
   HEAP32[$vararg_ptr37>>2] = $459;
   _String_sprintf($last_error308,4890,$vararg_buffer34);
   break;
  }
  case 74: {
   $475 = $self$addr;
   $last_error318 = ((($475)) + 596|0);
   _String_sprintf($last_error318,4950,$vararg_buffer38);
   break;
  }
  case 75: {
   $476 = $self$addr;
   $last_error321 = ((($476)) + 596|0);
   _String_sprintf($last_error321,4973,$vararg_buffer40);
   break;
  }
  case 84: {
   $596 = $lhs;
   $597 = $596;
   $598 = HEAP32[$597>>2]|0;
   $599 = (($596) + 4)|0;
   $600 = $599;
   $601 = HEAP32[$600>>2]|0;
   $602 = (_bfDbgValueTypeToString($598,$601,$string_buffer374,512)|0);
   $offset375 = $602;
   $603 = $rhs;
   $604 = $603;
   $605 = HEAP32[$604>>2]|0;
   $606 = (($603) + 4)|0;
   $607 = $606;
   $608 = HEAP32[$607>>2]|0;
   $609 = $offset375;
   $add$ptr379 = (($string_buffer374) + ($609)|0);
   $add$ptr380 = ((($add$ptr379)) + 1|0);
   $610 = $offset375;
   $sub381 = (512 - ($610))|0;
   $sub382 = (($sub381) - 1)|0;
   (_bfDbgValueTypeToString($605,$608,$add$ptr380,$sub382)|0);
   $611 = $self$addr;
   $last_error384 = ((($611)) + 596|0);
   $612 = $offset375;
   $add$ptr387 = (($string_buffer374) + ($612)|0);
   $add$ptr388 = ((($add$ptr387)) + 1|0);
   HEAP32[$vararg_buffer42>>2] = $string_buffer374;
   $vararg_ptr45 = ((($vararg_buffer42)) + 4|0);
   HEAP32[$vararg_ptr45>>2] = $add$ptr388;
   _String_sprintf($last_error384,5003,$vararg_buffer42);
   break;
  }
  case 87: {
   $651 = $self$addr;
   $last_error404 = ((($651)) + 596|0);
   _String_sprintf($last_error404,5053,$vararg_buffer46);
   break;
  }
  case 107: {
   $926 = $self$addr;
   $last_error516 = ((($926)) + 596|0);
   $927 = HEAP8[$op>>0]|0;
   $conv517 = $927&255;
   HEAP32[$vararg_buffer48>>2] = $conv517;
   _String_sprintf($last_error516,5103,$vararg_buffer48);
   break;
  }
  case 111: {
   $932 = $err;
   STACKTOP = sp;return ($932|0);
   break;
  }
 }
 $930 = $self$addr;
 $931 = $reference_frame;
 _bfVM_popAllCallFrames($930,$931);
 $err = 2;
 $932 = $err;
 STACKTOP = sp;return ($932|0);
}
function _bfVM_popCallFrame($self,$frame) {
 $self = $self|0;
 $frame = $frame|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $add$ptr = 0, $frame$addr = 0, $old_stack = 0, $self$addr = 0, $stack = 0, $stack_top = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self$addr = $self;
 $frame$addr = $frame;
 $0 = $self$addr;
 $stack = ((($0)) + 4|0);
 $1 = HEAP32[$stack>>2]|0;
 $2 = $frame$addr;
 $old_stack = ((($2)) + 8|0);
 $3 = HEAP32[$old_stack>>2]|0;
 $add$ptr = (($1) + ($3<<3)|0);
 $4 = $self$addr;
 $stack_top = ((($4)) + 8|0);
 HEAP32[$stack_top>>2] = $add$ptr;
 $5 = $self$addr;
 (_Array_pop($5)|0);
 STACKTOP = sp;return;
}
function _bfVM_decode($inst,$op_out,$ra_out,$rb_out,$rc_out,$rbx_out,$rsbx_out) {
 $inst = $inst|0;
 $op_out = $op_out|0;
 $ra_out = $ra_out|0;
 $rb_out = $rb_out|0;
 $rc_out = $rc_out|0;
 $rbx_out = $rbx_out|0;
 $rsbx_out = $rsbx_out|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $and = 0, $and1 = 0, $and3 = 0, $and5 = 0, $and7 = 0, $and9 = 0, $conv = 0, $inst$addr = 0;
 var $op_out$addr = 0, $ra_out$addr = 0, $rb_out$addr = 0, $rbx_out$addr = 0, $rc_out$addr = 0, $rsbx_out$addr = 0, $shr = 0, $shr2 = 0, $shr4 = 0, $shr6 = 0, $shr8 = 0, $sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $inst$addr = $inst;
 $op_out$addr = $op_out;
 $ra_out$addr = $ra_out;
 $rb_out$addr = $rb_out;
 $rc_out$addr = $rc_out;
 $rbx_out$addr = $rbx_out;
 $rsbx_out$addr = $rsbx_out;
 $0 = $inst$addr;
 $and = $0 & 31;
 $conv = $and&255;
 $1 = $op_out$addr;
 HEAP8[$1>>0] = $conv;
 $2 = $inst$addr;
 $shr = $2 >>> 5;
 $and1 = $shr & 511;
 $3 = $ra_out$addr;
 HEAP32[$3>>2] = $and1;
 $4 = $inst$addr;
 $shr2 = $4 >>> 14;
 $and3 = $shr2 & 511;
 $5 = $rb_out$addr;
 HEAP32[$5>>2] = $and3;
 $6 = $inst$addr;
 $shr4 = $6 >>> 23;
 $and5 = $shr4 & 511;
 $7 = $rc_out$addr;
 HEAP32[$7>>2] = $and5;
 $8 = $inst$addr;
 $shr6 = $8 >>> 14;
 $and7 = $shr6 & 262143;
 $9 = $rbx_out$addr;
 HEAP32[$9>>2] = $and7;
 $10 = $inst$addr;
 $shr8 = $10 >>> 14;
 $and9 = $shr8 & 262143;
 $sub = (($and9) - 131071)|0;
 $11 = $rsbx_out$addr;
 HEAP32[$11>>2] = $sub;
 STACKTOP = sp;return;
}
function _bfDbgValueToString($0,$1,$buffer,$buffer_size) {
 $0 = $0|0;
 $1 = $1|0;
 $buffer = $buffer|0;
 $buffer_size = $buffer_size|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $buffer$addr = 0, $buffer_size$addr = 0, $call13 = 0, $call19 = 0;
 var $call2 = 0, $call21 = 0, $call24 = 0, $call26 = 0, $call29 = 0, $call31 = 0, $call37 = 0, $call39 = 0, $call8 = 0, $clz = 0, $clz34 = 0, $cond = 0, $cond36 = 0, $data = 0, $name = 0, $name23 = 0, $name35 = 0, $obj = 0, $obj_clz = 0, $obj_fn = 0;
 var $obj_ref = 0, $obj_string = 0, $obj_weak_ref = 0, $retval = 0, $tobool = 0, $tobool11 = 0, $tobool16 = 0, $tobool33 = 0, $tobool4 = 0, $tobool7 = 0, $value$addr = 0, $value28 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer14 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0, $vararg_buffer21 = 0, $vararg_buffer24 = 0;
 var $vararg_buffer4 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $vararg_buffer24 = sp + 88|0;
 $vararg_buffer21 = sp + 80|0;
 $vararg_buffer19 = sp + 72|0;
 $vararg_buffer16 = sp + 64|0;
 $vararg_buffer14 = sp + 56|0;
 $vararg_buffer11 = sp + 48|0;
 $vararg_buffer9 = sp + 40|0;
 $vararg_buffer6 = sp + 32|0;
 $vararg_buffer4 = sp + 24|0;
 $vararg_buffer1 = sp + 16|0;
 $vararg_buffer = sp + 8|0;
 $value$addr = sp;
 $2 = $value$addr;
 $3 = $2;
 HEAP32[$3>>2] = $0;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = $1;
 $buffer$addr = $buffer;
 $buffer_size$addr = $buffer_size;
 $6 = $value$addr;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($6) + 4)|0;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = (_bfVMValue_isNumber($8,$11)|0);
 $tobool = ($12|0)!=(0);
 if ($tobool) {
  $13 = $buffer$addr;
  $14 = $buffer_size$addr;
  $15 = $value$addr;
  $16 = $15;
  $17 = HEAP32[$16>>2]|0;
  $18 = (($15) + 4)|0;
  $19 = $18;
  $20 = HEAP32[$19>>2]|0;
  $21 = (+_bfVmValue_asNumber($17,$20));
  HEAPF64[$vararg_buffer>>3] = $21;
  $call2 = (_snprintf($13,$14,5289,$vararg_buffer)|0);
  $retval = $call2;
  $97 = $retval;
  STACKTOP = sp;return ($97|0);
 }
 $22 = $value$addr;
 $23 = $22;
 $24 = HEAP32[$23>>2]|0;
 $25 = (($22) + 4)|0;
 $26 = $25;
 $27 = HEAP32[$26>>2]|0;
 $28 = (_bfVMValue_isBool($24,$27)|0);
 $tobool4 = ($28|0)!=(0);
 if ($tobool4) {
  $29 = $buffer$addr;
  $30 = $buffer_size$addr;
  $31 = $value$addr;
  $32 = $31;
  $33 = HEAP32[$32>>2]|0;
  $34 = (($31) + 4)|0;
  $35 = $34;
  $36 = HEAP32[$35>>2]|0;
  $37 = (_bfVMValue_isTrue($33,$36)|0);
  $tobool7 = ($37|0)!=(0);
  $cond = $tobool7 ? 5292 : 5297;
  HEAP32[$vararg_buffer1>>2] = $cond;
  $call8 = (_snprintf($29,$30,5303,$vararg_buffer1)|0);
  $retval = $call8;
  $97 = $retval;
  STACKTOP = sp;return ($97|0);
 }
 $38 = $value$addr;
 $39 = $38;
 $40 = HEAP32[$39>>2]|0;
 $41 = (($38) + 4)|0;
 $42 = $41;
 $43 = HEAP32[$42>>2]|0;
 $44 = (_bfVMValue_isNull($40,$43)|0);
 $tobool11 = ($44|0)!=(0);
 if ($tobool11) {
  $45 = $buffer$addr;
  $46 = $buffer_size$addr;
  $call13 = (_snprintf($45,$46,5306,$vararg_buffer4)|0);
  $retval = $call13;
  $97 = $retval;
  STACKTOP = sp;return ($97|0);
 }
 $47 = $value$addr;
 $48 = $47;
 $49 = HEAP32[$48>>2]|0;
 $50 = (($47) + 4)|0;
 $51 = $50;
 $52 = HEAP32[$51>>2]|0;
 $53 = (_bfVMValue_isPointer($49,$52)|0);
 $tobool16 = ($53|0)!=(0);
 L13: do {
  if ($tobool16) {
   $54 = $value$addr;
   $55 = $54;
   $56 = HEAP32[$55>>2]|0;
   $57 = (($54) + 4)|0;
   $58 = $57;
   $59 = HEAP32[$58>>2]|0;
   $60 = (_bfVmValue_asPointer($56,$59)|0);
   $obj = $60;
   $61 = $obj;
   $62 = HEAP32[$61>>2]|0;
   switch ($62|0) {
   case 0:  {
    $63 = $obj;
    $obj_fn = $63;
    $64 = $buffer$addr;
    $65 = $buffer_size$addr;
    $66 = $obj_fn;
    $name = ((($66)) + 12|0);
    $67 = HEAP32[$name>>2]|0;
    HEAP32[$vararg_buffer6>>2] = $67;
    $call19 = (_snprintf($64,$65,5189,$vararg_buffer6)|0);
    $retval = $call19;
    $97 = $retval;
    STACKTOP = sp;return ($97|0);
    break;
   }
   case 1:  {
    $68 = $buffer$addr;
    $69 = $buffer_size$addr;
    $call21 = (_snprintf($68,$69,5311,$vararg_buffer9)|0);
    $retval = $call21;
    $97 = $retval;
    STACKTOP = sp;return ($97|0);
    break;
   }
   case 2:  {
    $70 = $obj;
    $obj_clz = $70;
    $71 = $buffer$addr;
    $72 = $buffer_size$addr;
    $73 = $obj_clz;
    $name23 = ((($73)) + 12|0);
    $74 = HEAP32[$name23>>2]|0;
    HEAP32[$vararg_buffer11>>2] = $74;
    $call24 = (_snprintf($71,$72,5320,$vararg_buffer11)|0);
    $retval = $call24;
    $97 = $retval;
    STACKTOP = sp;return ($97|0);
    break;
   }
   case 3:  {
    $75 = $buffer$addr;
    $76 = $buffer_size$addr;
    $call26 = (_snprintf($75,$76,5331,$vararg_buffer14)|0);
    $retval = $call26;
    $97 = $retval;
    STACKTOP = sp;return ($97|0);
    break;
   }
   case 4:  {
    $77 = $obj;
    $obj_string = $77;
    $78 = $buffer$addr;
    $79 = $buffer_size$addr;
    $80 = $obj_string;
    $value28 = ((($80)) + 12|0);
    $81 = HEAP32[$value28>>2]|0;
    HEAP32[$vararg_buffer16>>2] = $81;
    $call29 = (_snprintf($78,$79,5303,$vararg_buffer16)|0);
    $retval = $call29;
    $97 = $retval;
    STACKTOP = sp;return ($97|0);
    break;
   }
   case 5:  {
    $82 = $buffer$addr;
    $83 = $buffer_size$addr;
    $call31 = (_snprintf($82,$83,5342,$vararg_buffer19)|0);
    $retval = $call31;
    $97 = $retval;
    STACKTOP = sp;return ($97|0);
    break;
   }
   case 6:  {
    $84 = $obj;
    $obj_ref = $84;
    $85 = $buffer$addr;
    $86 = $buffer_size$addr;
    $87 = $obj_ref;
    $clz = ((($87)) + 12|0);
    $88 = HEAP32[$clz>>2]|0;
    $tobool33 = ($88|0)!=(0|0);
    if ($tobool33) {
     $89 = $obj_ref;
     $clz34 = ((($89)) + 12|0);
     $90 = HEAP32[$clz34>>2]|0;
     $name35 = ((($90)) + 12|0);
     $91 = HEAP32[$name35>>2]|0;
     $cond36 = $91;
    } else {
     $cond36 = 5306;
    }
    HEAP32[$vararg_buffer21>>2] = $cond36;
    $call37 = (_snprintf($85,$86,5360,$vararg_buffer21)|0);
    $retval = $call37;
    $97 = $retval;
    STACKTOP = sp;return ($97|0);
    break;
   }
   case 7:  {
    $92 = $obj;
    $obj_weak_ref = $92;
    $93 = $buffer$addr;
    $94 = $buffer_size$addr;
    $95 = $obj_weak_ref;
    $data = ((($95)) + 16|0);
    $96 = HEAP32[$data>>2]|0;
    HEAP32[$vararg_buffer24>>2] = $96;
    $call39 = (_snprintf($93,$94,5386,$vararg_buffer24)|0);
    $retval = $call39;
    $97 = $retval;
    STACKTOP = sp;return ($97|0);
    break;
   }
   default: {
    break L13;
   }
   }
  }
 } while(0);
 $retval = 0;
 $97 = $retval;
 STACKTOP = sp;return ($97|0);
}
function _bfHashMap_get($self,$key) {
 $self = $self|0;
 $key = $key|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call2 = 0, $cond = 0, $hash = 0, $hash1 = 0, $key$addr = 0, $node = 0, $num_buckets = 0, $rem = 0, $self$addr = 0;
 var $tobool = 0, $value = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self$addr = $self;
 $key$addr = $key;
 $0 = $self$addr;
 $hash1 = ((($0)) + 4|0);
 $1 = HEAP32[$hash1>>2]|0;
 $2 = $key$addr;
 $call = (FUNCTION_TABLE_ii[$1 & 63]($2)|0);
 $3 = $self$addr;
 $num_buckets = ((($3)) + 528|0);
 $4 = HEAP32[$num_buckets>>2]|0;
 $rem = (($call>>>0) % ($4>>>0))&-1;
 $hash = $rem;
 $5 = $self$addr;
 $6 = $key$addr;
 $7 = $hash;
 $call2 = (_bfHashMap_getNode($5,$6,$7)|0);
 $node = $call2;
 $8 = $node;
 $tobool = ($8|0)!=(0|0);
 $9 = $node;
 $value = ((($9)) + 8|0);
 $cond = $tobool ? $value : 0;
 STACKTOP = sp;return ($cond|0);
}
function _bfMakeStringRangeLen($agg$result,$bgn,$length) {
 $agg$result = $agg$result|0;
 $bgn = $bgn|0;
 $length = $length|0;
 var $0 = 0, $1 = 0, $2 = 0, $add$ptr = 0, $bgn$addr = 0, $end = 0, $length$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $bgn$addr = $bgn;
 $length$addr = $length;
 $0 = $bgn$addr;
 HEAP32[$agg$result>>2] = $0;
 $end = ((($agg$result)) + 4|0);
 $1 = $bgn$addr;
 $2 = $length$addr;
 $add$ptr = (($1) + ($2)|0);
 HEAP32[$end>>2] = $add$ptr;
 STACKTOP = sp;return;
}
function _bfVM__stackStoreVariable($self,$0,$1,$field_symbol,$2,$3) {
 $self = $self|0;
 $0 = $0|0;
 $1 = $1|0;
 $field_symbol = $field_symbol|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $call2 = 0, $clz = 0, $cmp = 0, $cmp11 = 0, $cmp5 = 0, $field_symbol$byval_copy = 0;
 var $field_symbol$byval_copy1 = 0, $field_symbol$byval_copy2 = 0, $fields = 0, $inst = 0, $module_obj = 0, $obj$addr = 0, $obj_ptr = 0, $retval = 0, $self$addr = 0, $sym_str = 0, $symbol = 0, $symbols = 0, $symbols7 = 0, $tobool = 0, $value$addr = 0, $variables = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $field_symbol$byval_copy2 = sp + 64|0;
 $field_symbol$byval_copy1 = sp + 56|0;
 $field_symbol$byval_copy = sp + 48|0;
 $obj$addr = sp + 8|0;
 $value$addr = sp;
 $self$addr = $self;
 $4 = $obj$addr;
 $5 = $4;
 HEAP32[$5>>2] = $0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = $1;
 $8 = $value$addr;
 $9 = $8;
 HEAP32[$9>>2] = $2;
 $10 = (($8) + 4)|0;
 $11 = $10;
 HEAP32[$11>>2] = $3;
 $12 = $obj$addr;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 $15 = (($12) + 4)|0;
 $16 = $15;
 $17 = HEAP32[$16>>2]|0;
 $18 = (_bfVMValue_isPointer($14,$17)|0);
 $tobool = ($18|0)!=(0);
 if (!($tobool)) {
  $retval = 1;
  $56 = $retval;
  STACKTOP = sp;return ($56|0);
 }
 $19 = $obj$addr;
 $20 = $19;
 $21 = HEAP32[$20>>2]|0;
 $22 = (($19) + 4)|0;
 $23 = $22;
 $24 = HEAP32[$23>>2]|0;
 $25 = (_bfVmValue_asPointer($21,$24)|0);
 $obj_ptr = $25;
 $26 = $self$addr;
 ;HEAP32[$field_symbol$byval_copy>>2]=HEAP32[$field_symbol>>2]|0;HEAP32[$field_symbol$byval_copy+4>>2]=HEAP32[$field_symbol+4>>2]|0;
 $call2 = (_bfVM_getSymbol($26,$field_symbol$byval_copy)|0);
 $symbol = $call2;
 $27 = $self$addr;
 $symbols = ((($27)) + 12|0);
 $28 = HEAP32[$symbols>>2]|0;
 $29 = $symbol;
 $arrayidx = (($28) + ($29<<2)|0);
 $30 = HEAP32[$arrayidx>>2]|0;
 $sym_str = $30;
 $31 = $obj_ptr;
 $32 = HEAP32[$31>>2]|0;
 $cmp = ($32|0)==(3);
 $33 = $obj_ptr;
 do {
  if ($cmp) {
   $inst = $33;
   $34 = $inst;
   $fields = ((($34)) + 16|0);
   $35 = $sym_str;
   _bfHashMap_set($fields,$35,$value$addr);
  } else {
   $36 = HEAP32[$33>>2]|0;
   $cmp5 = ($36|0)==(2);
   $37 = $obj_ptr;
   if ($cmp5) {
    $clz = $37;
    $38 = $clz;
    $symbols7 = ((($38)) + 24|0);
    $39 = $self$addr;
    $40 = $value$addr;
    $41 = $40;
    $42 = HEAP32[$41>>2]|0;
    $43 = (($40) + 4)|0;
    $44 = $43;
    $45 = HEAP32[$44>>2]|0;
    ;HEAP32[$field_symbol$byval_copy1>>2]=HEAP32[$field_symbol>>2]|0;HEAP32[$field_symbol$byval_copy1+4>>2]=HEAP32[$field_symbol+4>>2]|0;
    (_bfVM_xSetVariable($symbols7,$39,$field_symbol$byval_copy1,$42,$45)|0);
    break;
   }
   $46 = HEAP32[$37>>2]|0;
   $cmp11 = ($46|0)==(1);
   if ($cmp11) {
    $47 = $obj_ptr;
    $module_obj = $47;
    $48 = $module_obj;
    $variables = ((($48)) + 16|0);
    $49 = $self$addr;
    $50 = $value$addr;
    $51 = $50;
    $52 = HEAP32[$51>>2]|0;
    $53 = (($50) + 4)|0;
    $54 = $53;
    $55 = HEAP32[$54>>2]|0;
    ;HEAP32[$field_symbol$byval_copy2>>2]=HEAP32[$field_symbol>>2]|0;HEAP32[$field_symbol$byval_copy2+4>>2]=HEAP32[$field_symbol+4>>2]|0;
    (_bfVM_xSetVariable($variables,$49,$field_symbol$byval_copy2,$52,$55)|0);
    break;
   }
   $retval = 2;
   $56 = $retval;
   STACKTOP = sp;return ($56|0);
  }
 } while(0);
 $retval = 0;
 $56 = $retval;
 STACKTOP = sp;return ($56|0);
}
function _bfVM_createInstance($self,$clz) {
 $self = $self|0;
 $clz = $clz|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0;
 var $call = 0, $call2 = 0, $clz$addr = 0, $clz1 = 0, $cmp = 0, $extra_data = 0, $field_initializers = 0, $field_initializers3 = 0, $fields = 0, $fields4 = 0, $hash_params = 0, $i = 0, $inc = 0, $inst = 0, $num_fields = 0, $self$addr = 0, $sym = 0, $value = 0, $value_size = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $hash_params = sp + 16|0;
 $self$addr = $self;
 $clz$addr = $clz;
 $0 = $self$addr;
 $1 = $clz$addr;
 $extra_data = ((($1)) + 32|0);
 $2 = HEAP32[$extra_data>>2]|0;
 $add = (548 + ($2))|0;
 $call = (_allocObj($0,$add,3)|0);
 $inst = $call;
 _bfHashMapParams_init($hash_params);
 $value_size = ((($hash_params)) + 12|0);
 HEAP32[$value_size>>2] = 8;
 $3 = $inst;
 $fields = ((($3)) + 16|0);
 _bfHashMap_ctor($fields,$hash_params);
 $4 = $clz$addr;
 $5 = $inst;
 $clz1 = ((($5)) + 12|0);
 HEAP32[$clz1>>2] = $4;
 $6 = $clz$addr;
 $field_initializers = ((($6)) + 28|0);
 $call2 = (_Array_size($field_initializers)|0);
 $num_fields = $call2;
 $i = 0;
 while(1) {
  $7 = $i;
  $8 = $num_fields;
  $cmp = ($7>>>0)<($8>>>0);
  if (!($cmp)) {
   break;
  }
  $9 = $clz$addr;
  $field_initializers3 = ((($9)) + 28|0);
  $10 = HEAP32[$field_initializers3>>2]|0;
  $11 = $i;
  $add$ptr = (($10) + ($11<<4)|0);
  $sym = $add$ptr;
  $12 = $inst;
  $fields4 = ((($12)) + 16|0);
  $13 = $sym;
  $14 = HEAP32[$13>>2]|0;
  $15 = $sym;
  $value = ((($15)) + 8|0);
  _bfHashMap_set($fields4,$14,$value);
  $16 = $i;
  $inc = (($16) + 1)|0;
  $i = $inc;
 }
 $17 = $inst;
 STACKTOP = sp;return ($17|0);
}
function _bfDbgValueTypeToString($0,$1,$buffer,$buffer_size) {
 $0 = $0|0;
 $1 = $1|0;
 $buffer = $buffer|0;
 $buffer_size = $buffer_size|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $buffer$addr = 0, $buffer_size$addr = 0, $call1 = 0, $call10 = 0, $call16 = 0, $call18 = 0, $call21 = 0, $call23 = 0;
 var $call25 = 0, $call27 = 0, $call29 = 0, $call31 = 0, $call33 = 0, $call5 = 0, $name = 0, $name20 = 0, $obj = 0, $obj_clz = 0, $obj_fn = 0, $retval = 0, $tobool = 0, $tobool13 = 0, $tobool3 = 0, $tobool8 = 0, $value$addr = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0;
 var $vararg_buffer14 = 0, $vararg_buffer16 = 0, $vararg_buffer18 = 0, $vararg_buffer20 = 0, $vararg_buffer22 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $vararg_buffer22 = sp + 96|0;
 $vararg_buffer20 = sp + 88|0;
 $vararg_buffer18 = sp + 80|0;
 $vararg_buffer16 = sp + 72|0;
 $vararg_buffer14 = sp + 64|0;
 $vararg_buffer12 = sp + 56|0;
 $vararg_buffer9 = sp + 48|0;
 $vararg_buffer7 = sp + 40|0;
 $vararg_buffer5 = sp + 32|0;
 $vararg_buffer3 = sp + 24|0;
 $vararg_buffer1 = sp + 16|0;
 $vararg_buffer = sp + 8|0;
 $value$addr = sp;
 $2 = $value$addr;
 $3 = $2;
 HEAP32[$3>>2] = $0;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = $1;
 $buffer$addr = $buffer;
 $buffer_size$addr = $buffer_size;
 $6 = $value$addr;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($6) + 4)|0;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = (_bfVMValue_isNumber($8,$11)|0);
 $tobool = ($12|0)!=(0);
 if ($tobool) {
  $13 = $buffer$addr;
  $14 = $buffer_size$addr;
  $call1 = (_snprintf($13,$14,5164,$vararg_buffer)|0);
  $retval = $call1;
  $73 = $retval;
  STACKTOP = sp;return ($73|0);
 }
 $15 = $value$addr;
 $16 = $15;
 $17 = HEAP32[$16>>2]|0;
 $18 = (($15) + 4)|0;
 $19 = $18;
 $20 = HEAP32[$19>>2]|0;
 $21 = (_bfVMValue_isBool($17,$20)|0);
 $tobool3 = ($21|0)!=(0);
 if ($tobool3) {
  $22 = $buffer$addr;
  $23 = $buffer_size$addr;
  $call5 = (_snprintf($22,$23,5173,$vararg_buffer1)|0);
  $retval = $call5;
  $73 = $retval;
  STACKTOP = sp;return ($73|0);
 }
 $24 = $value$addr;
 $25 = $24;
 $26 = HEAP32[$25>>2]|0;
 $27 = (($24) + 4)|0;
 $28 = $27;
 $29 = HEAP32[$28>>2]|0;
 $30 = (_bfVMValue_isNull($26,$29)|0);
 $tobool8 = ($30|0)!=(0);
 if ($tobool8) {
  $31 = $buffer$addr;
  $32 = $buffer_size$addr;
  $call10 = (_snprintf($31,$32,5183,$vararg_buffer3)|0);
  $retval = $call10;
  $73 = $retval;
  STACKTOP = sp;return ($73|0);
 }
 $33 = $value$addr;
 $34 = $33;
 $35 = HEAP32[$34>>2]|0;
 $36 = (($33) + 4)|0;
 $37 = $36;
 $38 = HEAP32[$37>>2]|0;
 $39 = (_bfVMValue_isPointer($35,$38)|0);
 $tobool13 = ($39|0)!=(0);
 L13: do {
  if ($tobool13) {
   $40 = $value$addr;
   $41 = $40;
   $42 = HEAP32[$41>>2]|0;
   $43 = (($40) + 4)|0;
   $44 = $43;
   $45 = HEAP32[$44>>2]|0;
   $46 = (_bfVmValue_asPointer($42,$45)|0);
   $obj = $46;
   $47 = $obj;
   $48 = HEAP32[$47>>2]|0;
   switch ($48|0) {
   case 0:  {
    $49 = $obj;
    $obj_fn = $49;
    $50 = $buffer$addr;
    $51 = $buffer_size$addr;
    $52 = $obj_fn;
    $name = ((($52)) + 12|0);
    $53 = HEAP32[$name>>2]|0;
    HEAP32[$vararg_buffer5>>2] = $53;
    $call16 = (_snprintf($50,$51,5189,$vararg_buffer5)|0);
    $retval = $call16;
    $73 = $retval;
    STACKTOP = sp;return ($73|0);
    break;
   }
   case 1:  {
    $54 = $buffer$addr;
    $55 = $buffer_size$addr;
    $call18 = (_snprintf($54,$55,5197,$vararg_buffer7)|0);
    $retval = $call18;
    $73 = $retval;
    STACKTOP = sp;return ($73|0);
    break;
   }
   case 2:  {
    $56 = $obj;
    $obj_clz = $56;
    $57 = $buffer$addr;
    $58 = $buffer_size$addr;
    $59 = $obj_clz;
    $name20 = ((($59)) + 12|0);
    $60 = HEAP32[$name20>>2]|0;
    HEAP32[$vararg_buffer9>>2] = $60;
    $call21 = (_snprintf($57,$58,5206,$vararg_buffer9)|0);
    $retval = $call21;
    $73 = $retval;
    STACKTOP = sp;return ($73|0);
    break;
   }
   case 3:  {
    $61 = $buffer$addr;
    $62 = $buffer_size$addr;
    $call23 = (_snprintf($61,$62,5217,$vararg_buffer12)|0);
    $retval = $call23;
    $73 = $retval;
    STACKTOP = sp;return ($73|0);
    break;
   }
   case 4:  {
    $63 = $buffer$addr;
    $64 = $buffer_size$addr;
    $call25 = (_snprintf($63,$64,5228,$vararg_buffer14)|0);
    $retval = $call25;
    $73 = $retval;
    STACKTOP = sp;return ($73|0);
    break;
   }
   case 5:  {
    $65 = $buffer$addr;
    $66 = $buffer_size$addr;
    $call27 = (_snprintf($65,$66,5237,$vararg_buffer16)|0);
    $retval = $call27;
    $73 = $retval;
    STACKTOP = sp;return ($73|0);
    break;
   }
   case 6:  {
    $67 = $buffer$addr;
    $68 = $buffer_size$addr;
    $call29 = (_snprintf($67,$68,5254,$vararg_buffer18)|0);
    $retval = $call29;
    $73 = $retval;
    STACKTOP = sp;return ($73|0);
    break;
   }
   case 7:  {
    $69 = $buffer$addr;
    $70 = $buffer_size$addr;
    $call31 = (_snprintf($69,$70,5266,$vararg_buffer20)|0);
    $retval = $call31;
    $73 = $retval;
    STACKTOP = sp;return ($73|0);
    break;
   }
   default: {
    break L13;
   }
   }
  }
 } while(0);
 $71 = $buffer$addr;
 $72 = $buffer_size$addr;
 $call33 = (_snprintf($71,$72,5277,$vararg_buffer22)|0);
 $retval = $call33;
 $73 = $retval;
 STACKTOP = sp;return ($73|0);
}
function _bfVMValue_isThuthy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $retval = 0, $self$addr = 0, $tobool = 0, $tobool2 = 0, $tobool5 = 0, $tobool7 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self$addr = sp;
 $2 = $self$addr;
 $3 = $2;
 HEAP32[$3>>2] = $0;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = $1;
 $6 = $self$addr;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($6) + 4)|0;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = (_bfVMValue_isNull($8,$11)|0);
 $tobool = ($12|0)!=(0);
 do {
  if (!($tobool)) {
   $13 = $self$addr;
   $14 = $13;
   $15 = HEAP32[$14>>2]|0;
   $16 = (($13) + 4)|0;
   $17 = $16;
   $18 = HEAP32[$17>>2]|0;
   $19 = (_bfVMValue_isFalse($15,$18)|0);
   $tobool2 = ($19|0)!=(0);
   if (!($tobool2)) {
    $20 = $self$addr;
    $21 = $20;
    $22 = HEAP32[$21>>2]|0;
    $23 = (($20) + 4)|0;
    $24 = $23;
    $25 = HEAP32[$24>>2]|0;
    $26 = (_bfVMValue_isPointer($22,$25)|0);
    $tobool5 = ($26|0)!=(0);
    if ($tobool5) {
     $27 = $self$addr;
     $28 = $27;
     $29 = HEAP32[$28>>2]|0;
     $30 = (($27) + 4)|0;
     $31 = $30;
     $32 = HEAP32[$31>>2]|0;
     $33 = (_bfVmValue_asPointer($29,$32)|0);
     $tobool7 = ($33|0)!=(0|0);
     if (!($tobool7)) {
      break;
     }
    }
    $retval = 1;
    $34 = $retval;
    STACKTOP = sp;return ($34|0);
   }
  }
 } while(0);
 $retval = 0;
 $34 = $retval;
 STACKTOP = sp;return ($34|0);
}
function _bfVMValue_fromBool($value) {
 $value = $value|0;
 var $0 = 0, $1 = 0, $2 = 0, $tobool = 0, $value$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $value$addr = $value;
 $0 = $value$addr;
 $tobool = ($0|0)!=(0);
 $1 = $tobool ? 2 : 3;
 $2 = $tobool ? 2147221504 : 2147221504;
 setTempRet0(($2) | 0);
 STACKTOP = sp;return ($1|0);
}
function _bfVM_ensureStackspace($self,$stack_space,$top) {
 $self = $self|0;
 $stack_space = $stack_space|0;
 $top = $top|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $call = 0, $cmp = 0, $requested_size = 0, $retval = 0, $self$addr = 0, $stack = 0, $stack1 = 0, $stack2 = 0;
 var $stack_size = 0, $stack_space$addr = 0, $stack_used = 0, $sub$ptr$div = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $top$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $self$addr = $self;
 $stack_space$addr = $stack_space;
 $top$addr = $top;
 $0 = $self$addr;
 $stack = ((($0)) + 4|0);
 $call = (_Array_size($stack)|0);
 $stack_size = $call;
 $1 = $top$addr;
 $2 = $self$addr;
 $stack1 = ((($2)) + 4|0);
 $3 = HEAP32[$stack1>>2]|0;
 $sub$ptr$lhs$cast = $1;
 $sub$ptr$rhs$cast = $3;
 $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
 $sub$ptr$div = (($sub$ptr$sub|0) / 8)&-1;
 $stack_used = $sub$ptr$div;
 $4 = $stack_used;
 $5 = $stack_space$addr;
 $add = (($4) + ($5))|0;
 $requested_size = $add;
 $6 = $stack_size;
 $7 = $requested_size;
 $cmp = ($6>>>0)<($7>>>0);
 if ($cmp) {
  $8 = $self$addr;
  $stack2 = ((($8)) + 4|0);
  $9 = $requested_size;
  _Array_resize($stack2,$9);
  $retval = 1;
  $10 = $retval;
  STACKTOP = sp;return ($10|0);
 } else {
  $retval = 0;
  $10 = $retval;
  STACKTOP = sp;return ($10|0);
 }
 return (0)|0;
}
function _bfVMValue_isNumber($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $conv = 0, $value$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $value$addr = sp;
 $2 = $value$addr;
 $3 = $2;
 HEAP32[$3>>2] = $0;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = $1;
 $6 = $value$addr;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($6) + 4)|0;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = $11 & 2147221504;
 $13 = (0)!=(0);
 $14 = ($12|0)!=(2147221504);
 $15 = $13 | $14;
 $conv = $15&1;
 STACKTOP = sp;return ($conv|0);
}
function _bfVmValue_asNumber($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $num = 0, $self$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self$addr = sp + 8|0;
 $num = sp;
 $2 = $self$addr;
 $3 = $2;
 HEAP32[$3>>2] = $0;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = $1;
 ;HEAP32[$num>>2]=HEAP32[$self$addr>>2]|0;HEAP32[$num+4>>2]=HEAP32[$self$addr+4>>2]|0;
 $6 = +HEAPF64[$num>>3];
 STACKTOP = sp;return (+$6);
}
function _bfVMValue_fromNumber($value) {
 $value = +$value;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $bits64 = 0, $value$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $value$addr = sp + 8|0;
 $bits64 = sp;
 HEAPF64[$value$addr>>3] = $value;
 ;HEAP32[$bits64>>2]=HEAP32[$value$addr>>2]|0;HEAP32[$bits64+4>>2]=HEAP32[$value$addr+4>>2]|0;
 $0 = $bits64;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 setTempRet0(($5) | 0);
 STACKTOP = sp;return ($2|0);
}
function _bfMakeStringRangeC($agg$result,$str) {
 $agg$result = $agg$result|0;
 $str = $str|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $end = 0, $incdec$ptr = 0, $str$addr = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $str$addr = $str;
 $0 = $str$addr;
 $end = $0;
 while(1) {
  $1 = $end;
  $2 = HEAP8[$1>>0]|0;
  $tobool = ($2<<24>>24)!=(0);
  if (!($tobool)) {
   break;
  }
  $3 = $end;
  $incdec$ptr = ((($3)) + 1|0);
  $end = $incdec$ptr;
 }
 $4 = $str$addr;
 $5 = $end;
 $6 = $str$addr;
 $sub$ptr$lhs$cast = $5;
 $sub$ptr$rhs$cast = $6;
 $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
 _bfMakeStringRangeLen($agg$result,$4,$sub$ptr$sub);
 STACKTOP = sp;return;
}
function _bfVMValue_sub($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $lhs$addr = 0, $rhs$addr = 0, $sub = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $lhs$addr = sp + 8|0;
 $rhs$addr = sp;
 $4 = $lhs$addr;
 $5 = $4;
 HEAP32[$5>>2] = $0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = $1;
 $8 = $rhs$addr;
 $9 = $8;
 HEAP32[$9>>2] = $2;
 $10 = (($8) + 4)|0;
 $11 = $10;
 HEAP32[$11>>2] = $3;
 $12 = $lhs$addr;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 $15 = (($12) + 4)|0;
 $16 = $15;
 $17 = HEAP32[$16>>2]|0;
 $18 = (+_bfVmValue_asNumber($14,$17));
 $19 = $rhs$addr;
 $20 = $19;
 $21 = HEAP32[$20>>2]|0;
 $22 = (($19) + 4)|0;
 $23 = $22;
 $24 = HEAP32[$23>>2]|0;
 $25 = (+_bfVmValue_asNumber($21,$24));
 $sub = $18 - $25;
 $26 = (_bfVMValue_fromNumber($sub)|0);
 $27 = (getTempRet0() | 0);
 setTempRet0(($27) | 0);
 STACKTOP = sp;return ($26|0);
}
function _bfVMValue_mul($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $lhs$addr = 0, $mul = 0.0, $retval = 0, $rhs$addr = 0, $tobool = 0, $tobool2 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $retval = sp + 16|0;
 $lhs$addr = sp + 8|0;
 $rhs$addr = sp;
 $4 = $lhs$addr;
 $5 = $4;
 HEAP32[$5>>2] = $0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = $1;
 $8 = $rhs$addr;
 $9 = $8;
 HEAP32[$9>>2] = $2;
 $10 = (($8) + 4)|0;
 $11 = $10;
 HEAP32[$11>>2] = $3;
 $12 = $lhs$addr;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 $15 = (($12) + 4)|0;
 $16 = $15;
 $17 = HEAP32[$16>>2]|0;
 $18 = (_bfVMValue_isNumber($14,$17)|0);
 $tobool = ($18|0)!=(0);
 if ($tobool) {
  $19 = $rhs$addr;
  $20 = $19;
  $21 = HEAP32[$20>>2]|0;
  $22 = (($19) + 4)|0;
  $23 = $22;
  $24 = HEAP32[$23>>2]|0;
  $25 = (_bfVMValue_isNumber($21,$24)|0);
  $tobool2 = ($25|0)!=(0);
  if ($tobool2) {
   $26 = $lhs$addr;
   $27 = $26;
   $28 = HEAP32[$27>>2]|0;
   $29 = (($26) + 4)|0;
   $30 = $29;
   $31 = HEAP32[$30>>2]|0;
   $32 = (+_bfVmValue_asNumber($28,$31));
   $33 = $rhs$addr;
   $34 = $33;
   $35 = HEAP32[$34>>2]|0;
   $36 = (($33) + 4)|0;
   $37 = $36;
   $38 = HEAP32[$37>>2]|0;
   $39 = (+_bfVmValue_asNumber($35,$38));
   $mul = $32 * $39;
   $40 = (_bfVMValue_fromNumber($mul)|0);
   $41 = (getTempRet0() | 0);
   $42 = $retval;
   $43 = $42;
   HEAP32[$43>>2] = $40;
   $44 = (($42) + 4)|0;
   $45 = $44;
   HEAP32[$45>>2] = $41;
   $52 = $retval;
   $53 = $52;
   $54 = HEAP32[$53>>2]|0;
   $55 = (($52) + 4)|0;
   $56 = $55;
   $57 = HEAP32[$56>>2]|0;
   setTempRet0(($57) | 0);
   STACKTOP = sp;return ($54|0);
  }
 }
 $46 = (_bfVMValue_fromNull()|0);
 $47 = (getTempRet0() | 0);
 $48 = $retval;
 $49 = $48;
 HEAP32[$49>>2] = $46;
 $50 = (($48) + 4)|0;
 $51 = $50;
 HEAP32[$51>>2] = $47;
 $52 = $retval;
 $53 = $52;
 $54 = HEAP32[$53>>2]|0;
 $55 = (($52) + 4)|0;
 $56 = $55;
 $57 = HEAP32[$56>>2]|0;
 setTempRet0(($57) | 0);
 STACKTOP = sp;return ($54|0);
}
function _bfVMValue_div($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $div = 0.0, $lhs$addr = 0, $retval = 0, $rhs$addr = 0, $tobool = 0, $tobool2 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $retval = sp + 16|0;
 $lhs$addr = sp + 8|0;
 $rhs$addr = sp;
 $4 = $lhs$addr;
 $5 = $4;
 HEAP32[$5>>2] = $0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = $1;
 $8 = $rhs$addr;
 $9 = $8;
 HEAP32[$9>>2] = $2;
 $10 = (($8) + 4)|0;
 $11 = $10;
 HEAP32[$11>>2] = $3;
 $12 = $lhs$addr;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 $15 = (($12) + 4)|0;
 $16 = $15;
 $17 = HEAP32[$16>>2]|0;
 $18 = (_bfVMValue_isNumber($14,$17)|0);
 $tobool = ($18|0)!=(0);
 if ($tobool) {
  $19 = $rhs$addr;
  $20 = $19;
  $21 = HEAP32[$20>>2]|0;
  $22 = (($19) + 4)|0;
  $23 = $22;
  $24 = HEAP32[$23>>2]|0;
  $25 = (_bfVMValue_isNumber($21,$24)|0);
  $tobool2 = ($25|0)!=(0);
  if ($tobool2) {
   $26 = $lhs$addr;
   $27 = $26;
   $28 = HEAP32[$27>>2]|0;
   $29 = (($26) + 4)|0;
   $30 = $29;
   $31 = HEAP32[$30>>2]|0;
   $32 = (+_bfVmValue_asNumber($28,$31));
   $33 = $rhs$addr;
   $34 = $33;
   $35 = HEAP32[$34>>2]|0;
   $36 = (($33) + 4)|0;
   $37 = $36;
   $38 = HEAP32[$37>>2]|0;
   $39 = (+_bfVmValue_asNumber($35,$38));
   $div = $32 / $39;
   $40 = (_bfVMValue_fromNumber($div)|0);
   $41 = (getTempRet0() | 0);
   $42 = $retval;
   $43 = $42;
   HEAP32[$43>>2] = $40;
   $44 = (($42) + 4)|0;
   $45 = $44;
   HEAP32[$45>>2] = $41;
   $52 = $retval;
   $53 = $52;
   $54 = HEAP32[$53>>2]|0;
   $55 = (($52) + 4)|0;
   $56 = $55;
   $57 = HEAP32[$56>>2]|0;
   setTempRet0(($57) | 0);
   STACKTOP = sp;return ($54|0);
  }
 }
 $46 = (_bfVMValue_fromNull()|0);
 $47 = (getTempRet0() | 0);
 $48 = $retval;
 $49 = $48;
 HEAP32[$49>>2] = $46;
 $50 = (($48) + 4)|0;
 $51 = $50;
 HEAP32[$51>>2] = $47;
 $52 = $retval;
 $53 = $52;
 $54 = HEAP32[$53>>2]|0;
 $55 = (($52) + 4)|0;
 $56 = $55;
 $57 = HEAP32[$56>>2]|0;
 setTempRet0(($57) | 0);
 STACKTOP = sp;return ($54|0);
}
function _bfVMValue_ee($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $call25 = 0;
 var $cmp = 0, $cmp14 = 0, $cmp18 = 0, $cmp22 = 0, $cmp26 = 0, $conv = 0, $conv32 = 0, $hash = 0, $hash21 = 0, $land$ext = 0, $lhs$addr = 0, $lhs_num = 0.0, $lhs_obj = 0, $lhs_string = 0, $retval = 0, $rhs$addr = 0, $rhs_num = 0.0, $rhs_obj = 0, $rhs_string = 0, $tobool = 0;
 var $tobool2 = 0, $tobool6 = 0, $tobool9 = 0, $value = 0, $value24 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $lhs$addr = sp + 24|0;
 $rhs$addr = sp + 16|0;
 $4 = $lhs$addr;
 $5 = $4;
 HEAP32[$5>>2] = $0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = $1;
 $8 = $rhs$addr;
 $9 = $8;
 HEAP32[$9>>2] = $2;
 $10 = (($8) + 4)|0;
 $11 = $10;
 HEAP32[$11>>2] = $3;
 $12 = $lhs$addr;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 $15 = (($12) + 4)|0;
 $16 = $15;
 $17 = HEAP32[$16>>2]|0;
 $18 = (_bfVMValue_isNumber($14,$17)|0);
 $tobool = ($18|0)!=(0);
 if ($tobool) {
  $19 = $rhs$addr;
  $20 = $19;
  $21 = HEAP32[$20>>2]|0;
  $22 = (($19) + 4)|0;
  $23 = $22;
  $24 = HEAP32[$23>>2]|0;
  $25 = (_bfVMValue_isNumber($21,$24)|0);
  $tobool2 = ($25|0)!=(0);
  if ($tobool2) {
   $26 = $lhs$addr;
   $27 = $26;
   $28 = HEAP32[$27>>2]|0;
   $29 = (($26) + 4)|0;
   $30 = $29;
   $31 = HEAP32[$30>>2]|0;
   $32 = (+_bfVmValue_asNumber($28,$31));
   $lhs_num = $32;
   $33 = $rhs$addr;
   $34 = $33;
   $35 = HEAP32[$34>>2]|0;
   $36 = (($33) + 4)|0;
   $37 = $36;
   $38 = HEAP32[$37>>2]|0;
   $39 = (+_bfVmValue_asNumber($35,$38));
   $rhs_num = $39;
   $40 = $lhs_num;
   $41 = $rhs_num;
   $cmp = $40 == $41;
   $conv = $cmp&1;
   $retval = $conv;
   $102 = $retval;
   STACKTOP = sp;return ($102|0);
  }
 }
 $42 = $lhs$addr;
 $43 = $42;
 $44 = HEAP32[$43>>2]|0;
 $45 = (($42) + 4)|0;
 $46 = $45;
 $47 = HEAP32[$46>>2]|0;
 $48 = (_bfVMValue_isPointer($44,$47)|0);
 $tobool6 = ($48|0)!=(0);
 if ($tobool6) {
  $49 = $rhs$addr;
  $50 = $49;
  $51 = HEAP32[$50>>2]|0;
  $52 = (($49) + 4)|0;
  $53 = $52;
  $54 = HEAP32[$53>>2]|0;
  $55 = (_bfVMValue_isPointer($51,$54)|0);
  $tobool9 = ($55|0)!=(0);
  if ($tobool9) {
   $56 = $lhs$addr;
   $57 = $56;
   $58 = HEAP32[$57>>2]|0;
   $59 = (($56) + 4)|0;
   $60 = $59;
   $61 = HEAP32[$60>>2]|0;
   $62 = (_bfVmValue_asPointer($58,$61)|0);
   $lhs_obj = $62;
   $63 = $rhs$addr;
   $64 = $63;
   $65 = HEAP32[$64>>2]|0;
   $66 = (($63) + 4)|0;
   $67 = $66;
   $68 = HEAP32[$67>>2]|0;
   $69 = (_bfVmValue_asPointer($65,$68)|0);
   $rhs_obj = $69;
   $70 = $lhs_obj;
   $71 = HEAP32[$70>>2]|0;
   $72 = $rhs_obj;
   $73 = HEAP32[$72>>2]|0;
   $cmp14 = ($71|0)==($73|0);
   if ($cmp14) {
    $74 = $lhs_obj;
    $75 = HEAP32[$74>>2]|0;
    $cmp18 = ($75|0)==(4);
    if ($cmp18) {
     $76 = $lhs_obj;
     $lhs_string = $76;
     $77 = $rhs_obj;
     $rhs_string = $77;
     $78 = $lhs_string;
     $hash = ((($78)) + 16|0);
     $79 = HEAP32[$hash>>2]|0;
     $80 = $rhs_string;
     $hash21 = ((($80)) + 16|0);
     $81 = HEAP32[$hash21>>2]|0;
     $cmp22 = ($79|0)==($81|0);
     if ($cmp22) {
      $82 = $lhs_string;
      $value = ((($82)) + 12|0);
      $83 = HEAP32[$value>>2]|0;
      $84 = $rhs_string;
      $value24 = ((($84)) + 12|0);
      $85 = HEAP32[$value24>>2]|0;
      $call25 = (_String_cmp($83,$85)|0);
      $cmp26 = ($call25|0)==(0);
      $86 = $cmp26;
     } else {
      $86 = 0;
     }
     $land$ext = $86&1;
     $retval = $land$ext;
     $102 = $retval;
     STACKTOP = sp;return ($102|0);
    }
   }
   $retval = 0;
   $102 = $retval;
   STACKTOP = sp;return ($102|0);
  }
 }
 $87 = $lhs$addr;
 $88 = $87;
 $89 = HEAP32[$88>>2]|0;
 $90 = (($87) + 4)|0;
 $91 = $90;
 $92 = HEAP32[$91>>2]|0;
 $93 = $rhs$addr;
 $94 = $93;
 $95 = HEAP32[$94>>2]|0;
 $96 = (($93) + 4)|0;
 $97 = $96;
 $98 = HEAP32[$97>>2]|0;
 $99 = ($89|0)==($95|0);
 $100 = ($92|0)==($98|0);
 $101 = $99 & $100;
 $conv32 = $101&1;
 $retval = $conv32;
 $102 = $retval;
 STACKTOP = sp;return ($102|0);
}
function _bfVMValue_lt($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cmp = 0, $conv = 0, $lhs$addr = 0;
 var $retval = 0, $rhs$addr = 0, $tobool = 0, $tobool2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $lhs$addr = sp + 8|0;
 $rhs$addr = sp;
 $4 = $lhs$addr;
 $5 = $4;
 HEAP32[$5>>2] = $0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = $1;
 $8 = $rhs$addr;
 $9 = $8;
 HEAP32[$9>>2] = $2;
 $10 = (($8) + 4)|0;
 $11 = $10;
 HEAP32[$11>>2] = $3;
 $12 = $lhs$addr;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 $15 = (($12) + 4)|0;
 $16 = $15;
 $17 = HEAP32[$16>>2]|0;
 $18 = (_bfVMValue_isNumber($14,$17)|0);
 $tobool = ($18|0)!=(0);
 if ($tobool) {
  $19 = $rhs$addr;
  $20 = $19;
  $21 = HEAP32[$20>>2]|0;
  $22 = (($19) + 4)|0;
  $23 = $22;
  $24 = HEAP32[$23>>2]|0;
  $25 = (_bfVMValue_isNumber($21,$24)|0);
  $tobool2 = ($25|0)!=(0);
  if ($tobool2) {
   $26 = $lhs$addr;
   $27 = $26;
   $28 = HEAP32[$27>>2]|0;
   $29 = (($26) + 4)|0;
   $30 = $29;
   $31 = HEAP32[$30>>2]|0;
   $32 = (+_bfVmValue_asNumber($28,$31));
   $33 = $rhs$addr;
   $34 = $33;
   $35 = HEAP32[$34>>2]|0;
   $36 = (($33) + 4)|0;
   $37 = $36;
   $38 = HEAP32[$37>>2]|0;
   $39 = (+_bfVmValue_asNumber($35,$38));
   $cmp = $32 < $39;
   $conv = $cmp&1;
   $retval = $conv;
   $40 = $retval;
   STACKTOP = sp;return ($40|0);
  }
 }
 $retval = 0;
 $40 = $retval;
 STACKTOP = sp;return ($40|0);
}
function _bfVMValue_gt($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cmp = 0, $conv = 0, $lhs$addr = 0;
 var $retval = 0, $rhs$addr = 0, $tobool = 0, $tobool2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $lhs$addr = sp + 8|0;
 $rhs$addr = sp;
 $4 = $lhs$addr;
 $5 = $4;
 HEAP32[$5>>2] = $0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = $1;
 $8 = $rhs$addr;
 $9 = $8;
 HEAP32[$9>>2] = $2;
 $10 = (($8) + 4)|0;
 $11 = $10;
 HEAP32[$11>>2] = $3;
 $12 = $lhs$addr;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 $15 = (($12) + 4)|0;
 $16 = $15;
 $17 = HEAP32[$16>>2]|0;
 $18 = (_bfVMValue_isNumber($14,$17)|0);
 $tobool = ($18|0)!=(0);
 if ($tobool) {
  $19 = $rhs$addr;
  $20 = $19;
  $21 = HEAP32[$20>>2]|0;
  $22 = (($19) + 4)|0;
  $23 = $22;
  $24 = HEAP32[$23>>2]|0;
  $25 = (_bfVMValue_isNumber($21,$24)|0);
  $tobool2 = ($25|0)!=(0);
  if ($tobool2) {
   $26 = $lhs$addr;
   $27 = $26;
   $28 = HEAP32[$27>>2]|0;
   $29 = (($26) + 4)|0;
   $30 = $29;
   $31 = HEAP32[$30>>2]|0;
   $32 = (+_bfVmValue_asNumber($28,$31));
   $33 = $rhs$addr;
   $34 = $33;
   $35 = HEAP32[$34>>2]|0;
   $36 = (($33) + 4)|0;
   $37 = $36;
   $38 = HEAP32[$37>>2]|0;
   $39 = (+_bfVmValue_asNumber($35,$38));
   $cmp = $32 > $39;
   $conv = $cmp&1;
   $retval = $conv;
   $40 = $retval;
   STACKTOP = sp;return ($40|0);
  }
 }
 $retval = 0;
 $40 = $retval;
 STACKTOP = sp;return ($40|0);
}
function _bfVMValue_ge($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cmp = 0, $conv = 0, $lhs$addr = 0;
 var $retval = 0, $rhs$addr = 0, $tobool = 0, $tobool2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $lhs$addr = sp + 8|0;
 $rhs$addr = sp;
 $4 = $lhs$addr;
 $5 = $4;
 HEAP32[$5>>2] = $0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = $1;
 $8 = $rhs$addr;
 $9 = $8;
 HEAP32[$9>>2] = $2;
 $10 = (($8) + 4)|0;
 $11 = $10;
 HEAP32[$11>>2] = $3;
 $12 = $lhs$addr;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 $15 = (($12) + 4)|0;
 $16 = $15;
 $17 = HEAP32[$16>>2]|0;
 $18 = (_bfVMValue_isNumber($14,$17)|0);
 $tobool = ($18|0)!=(0);
 if ($tobool) {
  $19 = $rhs$addr;
  $20 = $19;
  $21 = HEAP32[$20>>2]|0;
  $22 = (($19) + 4)|0;
  $23 = $22;
  $24 = HEAP32[$23>>2]|0;
  $25 = (_bfVMValue_isNumber($21,$24)|0);
  $tobool2 = ($25|0)!=(0);
  if ($tobool2) {
   $26 = $lhs$addr;
   $27 = $26;
   $28 = HEAP32[$27>>2]|0;
   $29 = (($26) + 4)|0;
   $30 = $29;
   $31 = HEAP32[$30>>2]|0;
   $32 = (+_bfVmValue_asNumber($28,$31));
   $33 = $rhs$addr;
   $34 = $33;
   $35 = HEAP32[$34>>2]|0;
   $36 = (($33) + 4)|0;
   $37 = $36;
   $38 = HEAP32[$37>>2]|0;
   $39 = (+_bfVmValue_asNumber($35,$38));
   $cmp = $32 >= $39;
   $conv = $cmp&1;
   $retval = $conv;
   $40 = $retval;
   STACKTOP = sp;return ($40|0);
  }
 }
 $retval = 0;
 $40 = $retval;
 STACKTOP = sp;return ($40|0);
}
function _bfVM_popAllCallFrames($self,$ref_frame) {
 $self = $self|0;
 $ref_frame = $ref_frame|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$ptr = 0, $arrayidx = 0, $call = 0, $call3 = 0, $call5 = 0, $cmp = 0, $cond = 0, $cond17 = 0, $conv = 0, $conv12 = 0;
 var $conv18 = 0, $conv19 = 0, $error_fn = 0, $error_str = 0, $fn = 0, $fn_name = 0, $frame = 0, $i = 0, $inc = 0, $instructions = 0, $ip = 0, $last_error = 0, $line_num = 0, $line_to_code = 0, $mul = 0, $name = 0, $num_frames = 0, $old_stack = 0, $params = 0, $ref_frame$addr = 0;
 var $self$addr = 0, $stack = 0, $stack_top = 0, $sub$ptr$div = 0, $sub$ptr$div11 = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast8 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast9 = 0, $sub$ptr$sub = 0, $sub$ptr$sub10 = 0, $tobool = 0, $tobool13 = 0, $tobool7 = 0, $total_frames = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer = sp;
 $error_str = sp + 36|0;
 $self$addr = $self;
 $ref_frame$addr = $ref_frame;
 $0 = $ref_frame$addr;
 $1 = $self$addr;
 $2 = HEAP32[$1>>2]|0;
 $sub$ptr$lhs$cast = $0;
 $sub$ptr$rhs$cast = $2;
 $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
 $sub$ptr$div = (($sub$ptr$sub|0) / 16)&-1;
 $num_frames = $sub$ptr$div;
 $3 = $self$addr;
 $call = (_Array_size($3)|0);
 $total_frames = $call;
 $4 = $self$addr;
 $params = ((($4)) + 16|0);
 $5 = HEAP32[$params>>2]|0;
 $error_fn = $5;
 $6 = $error_fn;
 $tobool = ($6|0)!=(0|0);
 if (!($tobool)) {
  $43 = $self$addr;
  $stack = ((($43)) + 4|0);
  $44 = HEAP32[$stack>>2]|0;
  $45 = $ref_frame$addr;
  $old_stack = ((($45)) + 8|0);
  $46 = HEAP32[$old_stack>>2]|0;
  $add$ptr = (($44) + ($46<<3)|0);
  $47 = $self$addr;
  $stack_top = ((($47)) + 8|0);
  HEAP32[$stack_top>>2] = $add$ptr;
  $48 = $self$addr;
  $49 = $num_frames;
  _Array_resize($48,$49);
  STACKTOP = sp;return;
 }
 $7 = $error_fn;
 $8 = $self$addr;
 FUNCTION_TABLE_viiii[$7 & 31]($8,10,-1,10688);
 $call3 = (_String_new(10688)|0);
 HEAP32[$error_str>>2] = $call3;
 $9 = $num_frames;
 $i = $9;
 while(1) {
  $10 = $i;
  $11 = $total_frames;
  $cmp = ($10>>>0)<($11>>>0);
  if (!($cmp)) {
   break;
  }
  $12 = $self$addr;
  $13 = $i;
  $call5 = (_Array_at($12,$13)|0);
  $frame = $call5;
  $14 = $frame;
  $15 = HEAP32[$14>>2]|0;
  $fn = $15;
  $16 = $fn;
  $tobool7 = ($16|0)!=(0|0);
  if ($tobool7) {
   $17 = $fn;
   $line_to_code = ((($17)) + 20|0);
   $18 = HEAP32[$line_to_code>>2]|0;
   $19 = $frame;
   $ip = ((($19)) + 4|0);
   $20 = HEAP32[$ip>>2]|0;
   $21 = $fn;
   $instructions = ((($21)) + 28|0);
   $22 = HEAP32[$instructions>>2]|0;
   $sub$ptr$lhs$cast8 = $20;
   $sub$ptr$rhs$cast9 = $22;
   $sub$ptr$sub10 = (($sub$ptr$lhs$cast8) - ($sub$ptr$rhs$cast9))|0;
   $sub$ptr$div11 = (($sub$ptr$sub10|0) / 4)&-1;
   $arrayidx = (($18) + ($sub$ptr$div11<<1)|0);
   $23 = HEAP16[$arrayidx>>1]|0;
   $conv = $23&65535;
   $cond = $conv;
  } else {
   $cond = 65535;
  }
  $conv12 = $cond&65535;
  $line_num = $conv12;
  $24 = $fn;
  $tobool13 = ($24|0)!=(0|0);
  if ($tobool13) {
   $25 = $fn;
   $name = ((($25)) + 12|0);
   $26 = HEAP32[$name>>2]|0;
   $cond17 = $26;
  } else {
   $cond17 = 5119;
  }
  $fn_name = $cond17;
  $27 = $i;
  $mul = ($27*3)|0;
  $28 = $i;
  $29 = $line_num;
  $conv18 = $29&65535;
  $30 = $fn_name;
  HEAP32[$vararg_buffer>>2] = $mul;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 10688;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $28;
  $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
  HEAP32[$vararg_ptr3>>2] = $conv18;
  $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
  HEAP32[$vararg_ptr4>>2] = $30;
  _String_sprintf($error_str,5128,$vararg_buffer);
  $31 = $error_fn;
  $32 = $self$addr;
  $33 = $line_num;
  $conv19 = $33&65535;
  $34 = HEAP32[$error_str>>2]|0;
  FUNCTION_TABLE_viiii[$31 & 31]($32,11,$conv19,$34);
  $35 = $i;
  $inc = (($35) + 1)|0;
  $i = $inc;
 }
 $36 = HEAP32[$error_str>>2]|0;
 _String_delete($36);
 $37 = $error_fn;
 $38 = $self$addr;
 $39 = $self$addr;
 $last_error = ((($39)) + 596|0);
 $40 = HEAP32[$last_error>>2]|0;
 FUNCTION_TABLE_viiii[$37 & 31]($38,11,-1,$40);
 $41 = $error_fn;
 $42 = $self$addr;
 FUNCTION_TABLE_viiii[$41 & 31]($42,12,-1,10688);
 $43 = $self$addr;
 $stack = ((($43)) + 4|0);
 $44 = HEAP32[$stack>>2]|0;
 $45 = $ref_frame$addr;
 $old_stack = ((($45)) + 8|0);
 $46 = HEAP32[$old_stack>>2]|0;
 $add$ptr = (($44) + ($46<<3)|0);
 $47 = $self$addr;
 $stack_top = ((($47)) + 8|0);
 HEAP32[$stack_top>>2] = $add$ptr;
 $48 = $self$addr;
 $49 = $num_frames;
 _Array_resize($48,$49);
 STACKTOP = sp;return;
}
function _String_new($initial_data) {
 $initial_data = $initial_data|0;
 var $0 = 0, $1 = 0, $call = 0, $call1 = 0, $initial_data$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $initial_data$addr = $initial_data;
 $0 = $initial_data$addr;
 $1 = $initial_data$addr;
 $call = (_strlen($1)|0);
 $call1 = (_String_newLen($0,$call)|0);
 STACKTOP = sp;return ($call1|0);
}
function _String_cmp($self,$other) {
 $self = $self|0;
 $other = $other|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $call = 0, $call1 = 0, $call2 = 0, $cmp = 0, $len1 = 0, $len2 = 0, $other$addr = 0, $retval = 0, $self$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $self$addr = $self;
 $other$addr = $other;
 $0 = $self$addr;
 $call = (_String_length($0)|0);
 $len1 = $call;
 $1 = $other$addr;
 $call1 = (_String_length($1)|0);
 $len2 = $call1;
 $2 = $len1;
 $3 = $len2;
 $cmp = ($2|0)!=($3|0);
 if ($cmp) {
  $retval = -1;
  $7 = $retval;
  STACKTOP = sp;return ($7|0);
 } else {
  $4 = $self$addr;
  $5 = $other$addr;
  $6 = $len1;
  $call2 = (_fast_strncmp($4,$5,$6)|0);
  $retval = $call2;
  $7 = $retval;
  STACKTOP = sp;return ($7|0);
 }
 return (0)|0;
}
function _fast_strncmp($s1,$s2,$length) {
 $s1 = $s1|0;
 $s2 = $s2|0;
 $length = $length|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $arrayidx = 0, $arrayidx22 = 0, $arrayidx23 = 0, $arrayidx3 = 0, $c1 = 0, $c2 = 0, $cmp = 0, $cmp1 = 0, $cmp19 = 0, $cmp29 = 0, $cmp33 = 0;
 var $cmp7 = 0, $conv = 0, $conv11 = 0, $conv15 = 0, $conv16 = 0, $conv24 = 0, $conv25 = 0, $conv28 = 0, $conv32 = 0, $conv36 = 0, $conv37 = 0, $conv5 = 0, $conv6 = 0, $conv9 = 0, $cur1 = 0, $cur2 = 0, $div = 0, $inc = 0, $inc40 = 0, $incdec$ptr = 0;
 var $incdec$ptr14 = 0, $lcur1 = 0, $lcur2 = 0, $length$addr = 0, $long_size = 0, $long_walker = 0, $ls1 = 0, $ls2 = 0, $mul = 0, $retval = 0, $s1$addr = 0, $s2$addr = 0, $short_walker = 0, $sub = 0, $sub38 = 0, $tobool = 0, $tobool10 = 0, $tobool12 = 0, $tobool27 = 0, $xor = 0;
 var $xor26 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $s1$addr = $s1;
 $s2$addr = $s2;
 $length$addr = $length;
 $0 = $length$addr;
 $div = (($0>>>0) / 4)&-1;
 $long_size = $div;
 $1 = $s1$addr;
 $ls1 = $1;
 $2 = $s2$addr;
 $ls2 = $2;
 $3 = $long_size;
 $mul = $3<<2;
 $4 = $long_size;
 $cmp = ($4|0)!=(0);
 $conv = $cmp&1;
 $add = (($mul) + ($conv))|0;
 $short_walker = $add;
 $long_walker = 0;
 while(1) {
  $5 = $long_walker;
  $6 = $long_size;
  $cmp1 = ($5>>>0)<($6>>>0);
  if (!($cmp1)) {
   break;
  }
  $7 = $ls1;
  $8 = $long_walker;
  $arrayidx = (($7) + ($8<<2)|0);
  $lcur1 = $arrayidx;
  $9 = $ls2;
  $10 = $long_walker;
  $arrayidx3 = (($9) + ($10<<2)|0);
  $lcur2 = $arrayidx3;
  $11 = $lcur1;
  $12 = HEAP32[$11>>2]|0;
  $13 = $lcur2;
  $14 = HEAP32[$13>>2]|0;
  $xor = $12 ^ $14;
  $tobool = ($xor|0)!=(0);
  if ($tobool) {
   label = 4;
   break;
  }
  $30 = $long_walker;
  $inc = (($30) + 1)|0;
  $long_walker = $inc;
 }
 if ((label|0) == 4) {
  $15 = $lcur1;
  $cur1 = $15;
  $16 = $lcur2;
  $cur2 = $16;
  while(1) {
   $17 = $cur1;
   $18 = HEAP8[$17>>0]|0;
   $conv5 = $18 << 24 >> 24;
   $19 = $cur2;
   $20 = HEAP8[$19>>0]|0;
   $conv6 = $20 << 24 >> 24;
   $cmp7 = ($conv5|0)==($conv6|0);
   if ($cmp7) {
    $21 = $cur1;
    $22 = HEAP8[$21>>0]|0;
    $conv9 = $22 << 24 >> 24;
    $tobool10 = ($conv9|0)!=(0);
    if ($tobool10) {
     $23 = $cur2;
     $24 = HEAP8[$23>>0]|0;
     $conv11 = $24 << 24 >> 24;
     $tobool12 = ($conv11|0)!=(0);
     $47 = $tobool12;
    } else {
     $47 = 0;
    }
   } else {
    $47 = 0;
   }
   $25 = $cur1;
   if (!($47)) {
    break;
   }
   $incdec$ptr = ((($25)) + 1|0);
   $cur1 = $incdec$ptr;
   $26 = $cur2;
   $incdec$ptr14 = ((($26)) + 1|0);
   $cur2 = $incdec$ptr14;
  }
  $27 = HEAP8[$25>>0]|0;
  $conv15 = $27&255;
  $28 = $cur2;
  $29 = HEAP8[$28>>0]|0;
  $conv16 = $29&255;
  $sub = (($conv15) - ($conv16))|0;
  $retval = $sub;
  $46 = $retval;
  STACKTOP = sp;return ($46|0);
 }
 while(1) {
  $31 = $short_walker;
  $32 = $length$addr;
  $cmp19 = ($31>>>0)<($32>>>0);
  if (!($cmp19)) {
   label = 19;
   break;
  }
  $33 = $s1$addr;
  $34 = $short_walker;
  $arrayidx22 = (($33) + ($34)|0);
  $35 = HEAP8[$arrayidx22>>0]|0;
  $c1 = $35;
  $36 = $s2$addr;
  $37 = $short_walker;
  $arrayidx23 = (($36) + ($37)|0);
  $38 = HEAP8[$arrayidx23>>0]|0;
  $c2 = $38;
  $39 = $c1;
  $conv24 = $39 << 24 >> 24;
  $40 = $c2;
  $conv25 = $40 << 24 >> 24;
  $xor26 = $conv24 ^ $conv25;
  $tobool27 = ($xor26|0)!=(0);
  if ($tobool27) {
   label = 17;
   break;
  }
  $41 = $c1;
  $conv28 = $41 << 24 >> 24;
  $cmp29 = ($conv28|0)==(0);
  if ($cmp29) {
   label = 17;
   break;
  }
  $42 = $c2;
  $conv32 = $42 << 24 >> 24;
  $cmp33 = ($conv32|0)==(0);
  if ($cmp33) {
   label = 17;
   break;
  }
  $45 = $short_walker;
  $inc40 = (($45) + 1)|0;
  $short_walker = $inc40;
 }
 if ((label|0) == 17) {
  $43 = $c1;
  $conv36 = $43&255;
  $44 = $c2;
  $conv37 = $44&255;
  $sub38 = (($conv36) - ($conv37))|0;
  $retval = $sub38;
  $46 = $retval;
  STACKTOP = sp;return ($46|0);
 }
 else if ((label|0) == 19) {
  $retval = 0;
  $46 = $retval;
  STACKTOP = sp;return ($46|0);
 }
 return (0)|0;
}
function _bfVMValue_isNull($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $conv = 0, $value$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $value$addr = sp;
 $2 = $value$addr;
 $3 = $2;
 HEAP32[$3>>2] = $0;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = $1;
 $6 = $value$addr;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($6) + 4)|0;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = ($8|0)==(1);
 $13 = ($11|0)==(2147221504);
 $14 = $12 & $13;
 $conv = $14&1;
 STACKTOP = sp;return ($conv|0);
}
function _bfVMValue_isFalse($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $conv = 0, $value$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $value$addr = sp;
 $2 = $value$addr;
 $3 = $2;
 HEAP32[$3>>2] = $0;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = $1;
 $6 = $value$addr;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($6) + 4)|0;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = ($8|0)==(3);
 $13 = ($11|0)==(2147221504);
 $14 = $12 & $13;
 $conv = $14&1;
 STACKTOP = sp;return ($conv|0);
}
function _bfVMValue_isBool($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $lor$ext = 0;
 var $tobool = 0, $tobool2 = 0, $value$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $value$addr = sp;
 $2 = $value$addr;
 $3 = $2;
 HEAP32[$3>>2] = $0;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = $1;
 $6 = $value$addr;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($6) + 4)|0;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = (_bfVMValue_isTrue($8,$11)|0);
 $tobool = ($12|0)!=(0);
 if ($tobool) {
  $20 = 1;
  $lor$ext = $20&1;
  STACKTOP = sp;return ($lor$ext|0);
 }
 $13 = $value$addr;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = (($13) + 4)|0;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 $19 = (_bfVMValue_isFalse($15,$18)|0);
 $tobool2 = ($19|0)!=(0);
 $20 = $tobool2;
 $lor$ext = $20&1;
 STACKTOP = sp;return ($lor$ext|0);
}
function _bfVMValue_isTrue($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $conv = 0, $value$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $value$addr = sp;
 $2 = $value$addr;
 $3 = $2;
 HEAP32[$3>>2] = $0;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = $1;
 $6 = $value$addr;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($6) + 4)|0;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = ($8|0)==(2);
 $13 = ($11|0)==(2147221504);
 $14 = $12 & $13;
 $conv = $14&1;
 STACKTOP = sp;return ($conv|0);
}
function _allocObj($self,$size,$type) {
 $self = $self|0;
 $size = $size|0;
 $type = $type|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $bytes_allocated = 0, $bytes_allocated2 = 0;
 var $call = 0, $cmp = 0, $gc_object_list = 0, $gc_object_list1 = 0, $heap_size = 0, $obj = 0, $params = 0, $self$addr = 0, $size$addr = 0, $type$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self$addr = $self;
 $size$addr = $size;
 $type$addr = $type;
 $0 = $self$addr;
 $bytes_allocated = ((($0)) + 600|0);
 $1 = HEAP32[$bytes_allocated>>2]|0;
 $2 = $self$addr;
 $params = ((($2)) + 16|0);
 $heap_size = ((($params)) + 20|0);
 $3 = HEAP32[$heap_size>>2]|0;
 $cmp = ($1>>>0)>=($3>>>0);
 if ($cmp) {
  $4 = $self$addr;
  _bfVM_gc($4);
 }
 $5 = $self$addr;
 $6 = $size$addr;
 $call = (_bfGCAllocMemory($5,0,0,$6)|0);
 $obj = $call;
 $7 = $obj;
 $8 = $type$addr;
 $9 = $self$addr;
 $gc_object_list = ((($9)) + 48|0);
 $10 = HEAP32[$gc_object_list>>2]|0;
 _objSetup($7,$8,$10);
 $11 = $obj;
 $12 = $self$addr;
 $gc_object_list1 = ((($12)) + 48|0);
 HEAP32[$gc_object_list1>>2] = $11;
 $13 = $size$addr;
 $14 = $self$addr;
 $bytes_allocated2 = ((($14)) + 600|0);
 $15 = HEAP32[$bytes_allocated2>>2]|0;
 $add = (($15) + ($13))|0;
 HEAP32[$bytes_allocated2>>2] = $add;
 $16 = $obj;
 STACKTOP = sp;return ($16|0);
}
function _bfHashMapParams_init($self) {
 $self = $self|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $cmp = 0, $hash = 0, $self$addr = 0, $value_size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self$addr = $self;
 $0 = $self$addr;
 HEAP32[$0>>2] = 38;
 $1 = $self$addr;
 $hash = ((($1)) + 4|0);
 HEAP32[$hash>>2] = 39;
 $2 = $self$addr;
 $cmp = ((($2)) + 8|0);
 HEAP32[$cmp>>2] = 40;
 $3 = $self$addr;
 $value_size = ((($3)) + 12|0);
 HEAP32[$value_size>>2] = 4;
 STACKTOP = sp;return;
}
function _bfHashMap_ctor($self,$params) {
 $self = $self|0;
 $params = $params|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $arrayidx = 0, $buckets = 0, $cmp = 0, $i = 0, $inc = 0, $num_buckets = 0, $num_buckets2 = 0, $params$addr = 0, $self$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self$addr = $self;
 $params$addr = $params;
 $0 = $self$addr;
 $1 = $params$addr;
 ;HEAP32[$0>>2]=HEAP32[$1>>2]|0;HEAP32[$0+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$1+12>>2]|0;
 $2 = $self$addr;
 $num_buckets = ((($2)) + 528|0);
 HEAP32[$num_buckets>>2] = 128;
 $i = 0;
 while(1) {
  $3 = $i;
  $4 = $self$addr;
  $num_buckets2 = ((($4)) + 528|0);
  $5 = HEAP32[$num_buckets2>>2]|0;
  $cmp = ($3>>>0)<($5>>>0);
  if (!($cmp)) {
   break;
  }
  $6 = $self$addr;
  $buckets = ((($6)) + 16|0);
  $7 = $i;
  $arrayidx = (($buckets) + ($7<<2)|0);
  HEAP32[$arrayidx>>2] = 0;
  $8 = $i;
  $inc = (($8) + 1)|0;
  $i = $inc;
 }
 STACKTOP = sp;return;
}
function _bfHashMap_defaultDtor($key,$value) {
 $key = $key|0;
 $value = $value|0;
 var $key$addr = 0, $value$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $key$addr = $key;
 $value$addr = $value;
 STACKTOP = sp;return;
}
function _bfHashMap_defaultHash($key) {
 $key = $key|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $conv = 0, $cp = 0, $hash = 0, $incdec$ptr = 0, $key$addr = 0, $mul = 0, $tobool = 0, $xor = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $key$addr = $key;
 $0 = $key$addr;
 $cp = $0;
 $hash = -2128831035;
 while(1) {
  $1 = $cp;
  $2 = HEAP8[$1>>0]|0;
  $tobool = ($2<<24>>24)!=(0);
  if (!($tobool)) {
   break;
  }
  $3 = $cp;
  $incdec$ptr = ((($3)) + 1|0);
  $cp = $incdec$ptr;
  $4 = HEAP8[$3>>0]|0;
  $conv = $4&255;
  $5 = $hash;
  $xor = $5 ^ $conv;
  $hash = $xor;
  $6 = $hash;
  $mul = Math_imul($6, 16777619)|0;
  $hash = $mul;
 }
 $7 = $hash;
 STACKTOP = sp;return ($7|0);
}
function _bfHashMap_defaultCmp($lhs,$rhs) {
 $lhs = $lhs|0;
 $rhs = $rhs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $call = 0, $cmp = 0, $conv = 0, $lhs$addr = 0, $rhs$addr = 0, $str1 = 0, $str2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $lhs$addr = $lhs;
 $rhs$addr = $rhs;
 $0 = $lhs$addr;
 $str1 = $0;
 $1 = $rhs$addr;
 $str2 = $1;
 $2 = $str1;
 $3 = $str2;
 $call = (_strcmp($2,$3)|0);
 $cmp = ($call|0)==(0);
 $conv = $cmp&1;
 STACKTOP = sp;return ($conv|0);
}
function _objSetup($obj,$type,$next) {
 $obj = $obj|0;
 $type = $type|0;
 $next = $next|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $gc_mark = 0, $next$addr = 0, $next2 = 0, $obj$addr = 0, $type$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $obj$addr = $obj;
 $type$addr = $type;
 $next$addr = $next;
 $0 = $type$addr;
 $1 = $obj$addr;
 HEAP32[$1>>2] = $0;
 $2 = $next$addr;
 $3 = $obj$addr;
 $next2 = ((($3)) + 4|0);
 HEAP32[$next2>>2] = $2;
 $4 = $obj$addr;
 $gc_mark = ((($4)) + 8|0);
 HEAP8[$gc_mark>>0] = 0;
 STACKTOP = sp;return;
}
function _bfHashMap_getNode($self,$key,$hash) {
 $self = $self|0;
 $key = $key|0;
 $hash = $hash|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $buckets = 0, $call = 0, $cmp = 0, $cursor = 0, $hash$addr = 0, $key$addr = 0, $next = 0;
 var $self$addr = 0, $tobool = 0, $tobool2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self$addr = $self;
 $key$addr = $key;
 $hash$addr = $hash;
 $0 = $self$addr;
 $buckets = ((($0)) + 16|0);
 $1 = $hash$addr;
 $arrayidx = (($buckets) + ($1<<2)|0);
 $2 = HEAP32[$arrayidx>>2]|0;
 $cursor = $2;
 while(1) {
  $3 = $cursor;
  $tobool = ($3|0)!=(0|0);
  if (!($tobool)) {
   label = 5;
   break;
  }
  $4 = $self$addr;
  $cmp = ((($4)) + 8|0);
  $5 = HEAP32[$cmp>>2]|0;
  $6 = $key$addr;
  $7 = $cursor;
  $8 = HEAP32[$7>>2]|0;
  $call = (FUNCTION_TABLE_iii[$5 & 63]($6,$8)|0);
  $tobool2 = ($call|0)!=(0);
  if ($tobool2) {
   label = 5;
   break;
  }
  $9 = $cursor;
  $next = ((($9)) + 4|0);
  $10 = HEAP32[$next>>2]|0;
  $cursor = $10;
 }
 if ((label|0) == 5) {
  $11 = $cursor;
  STACKTOP = sp;return ($11|0);
 }
 return (0)|0;
}
function _bfVMGetType($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cmp = 0, $cmp12 = 0;
 var $cmp14 = 0, $cmp17 = 0, $cmp21 = 0, $cmp24 = 0, $cmp28 = 0, $obj = 0, $retval = 0, $tobool = 0, $tobool2 = 0, $tobool6 = 0, $value$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $value$addr = sp;
 $2 = $value$addr;
 $3 = $2;
 HEAP32[$3>>2] = $0;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = $1;
 $6 = $value$addr;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($6) + 4)|0;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = (_bfVMValue_isBool($8,$11)|0);
 $tobool = ($12|0)!=(0);
 if ($tobool) {
  $retval = 2;
  $59 = $retval;
  STACKTOP = sp;return ($59|0);
 }
 $13 = $value$addr;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = (($13) + 4)|0;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 $19 = (_bfVMValue_isNumber($15,$18)|0);
 $tobool2 = ($19|0)!=(0);
 if ($tobool2) {
  $retval = 1;
  $59 = $retval;
  STACKTOP = sp;return ($59|0);
 }
 $20 = $value$addr;
 $21 = $20;
 $22 = HEAP32[$21>>2]|0;
 $23 = (($20) + 4)|0;
 $24 = $23;
 $25 = HEAP32[$24>>2]|0;
 $26 = (_bfVMValue_isPointer($22,$25)|0);
 $tobool6 = ($26|0)!=(0);
 do {
  if ($tobool6) {
   $27 = $value$addr;
   $28 = $27;
   $29 = HEAP32[$28>>2]|0;
   $30 = (($27) + 4)|0;
   $31 = $30;
   $32 = HEAP32[$31>>2]|0;
   $33 = (_bfVmValue_asPointer($29,$32)|0);
   $obj = $33;
   $34 = $obj;
   $35 = HEAP32[$34>>2]|0;
   $cmp = ($35|0)==(4);
   if ($cmp) {
    $retval = 0;
    $59 = $retval;
    STACKTOP = sp;return ($59|0);
   }
   $36 = $obj;
   $37 = HEAP32[$36>>2]|0;
   $cmp12 = ($37|0)==(3);
   if (!($cmp12)) {
    $38 = $obj;
    $39 = HEAP32[$38>>2]|0;
    $cmp14 = ($39|0)==(6);
    if (!($cmp14)) {
     $40 = $obj;
     $41 = HEAP32[$40>>2]|0;
     $cmp17 = ($41|0)==(7);
     if (!($cmp17)) {
      $42 = $obj;
      $43 = HEAP32[$42>>2]|0;
      $cmp21 = ($43|0)==(0);
      if (!($cmp21)) {
       $44 = $obj;
       $45 = HEAP32[$44>>2]|0;
       $cmp24 = ($45|0)==(5);
       if (!($cmp24)) {
        $46 = $obj;
        $47 = HEAP32[$46>>2]|0;
        $cmp28 = ($47|0)==(1);
        if (!($cmp28)) {
         break;
        }
        $retval = 6;
        $59 = $retval;
        STACKTOP = sp;return ($59|0);
       }
      }
      $retval = 5;
      $59 = $retval;
      STACKTOP = sp;return ($59|0);
     }
    }
   }
   $retval = 4;
   $59 = $retval;
   STACKTOP = sp;return ($59|0);
  }
 } while(0);
 $48 = $value$addr;
 $49 = $48;
 $50 = HEAP32[$49>>2]|0;
 $51 = (($48) + 4)|0;
 $52 = $51;
 $53 = HEAP32[$52>>2]|0;
 $54 = (_bfVMValue_fromNull()|0);
 $55 = (getTempRet0() | 0);
 $56 = ($50|0)==($54|0);
 $57 = ($53|0)==($55|0);
 $58 = $56 & $57;
 if ($58) {
  $retval = 3;
  $59 = $retval;
  STACKTOP = sp;return ($59|0);
 } else {
  $retval = 7;
  $59 = $retval;
  STACKTOP = sp;return ($59|0);
 }
 return (0)|0;
}
function _bfGCObjectSize($obj) {
 $obj = $obj|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add10 = 0, $add5 = 0, $add6 = 0, $and = 0, $clz = 0, $conv = 0, $extra_data = 0;
 var $extra_data_size = 0, $extra_data_size9 = 0, $mul = 0, $num_statics = 0, $obj$addr = 0, $retval = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $obj$addr = $obj;
 $0 = $obj$addr;
 $1 = HEAP32[$0>>2]|0;
 $and = $1 & 7;
 switch ($and|0) {
 case 1:  {
  $retval = 60;
  break;
 }
 case 2:  {
  $retval = 40;
  break;
 }
 case 3:  {
  $2 = $obj$addr;
  $clz = ((($2)) + 12|0);
  $3 = HEAP32[$clz>>2]|0;
  $extra_data = ((($3)) + 32|0);
  $4 = HEAP32[$extra_data>>2]|0;
  $add = (548 + ($4))|0;
  $retval = $add;
  break;
 }
 case 0:  {
  $retval = 40;
  break;
 }
 case 5:  {
  $5 = $obj$addr;
  $num_statics = ((($5)) + 20|0);
  $6 = HEAP32[$num_statics>>2]|0;
  $mul = $6<<3;
  $add5 = (32 + ($mul))|0;
  $7 = $obj$addr;
  $extra_data_size = ((($7)) + 28|0);
  $8 = HEAP16[$extra_data_size>>1]|0;
  $conv = $8&65535;
  $add6 = (($add5) + ($conv))|0;
  $retval = $add6;
  break;
 }
 case 4:  {
  $retval = 20;
  break;
 }
 case 6:  {
  $9 = $obj$addr;
  $extra_data_size9 = ((($9)) + 16|0);
  $10 = HEAP32[$extra_data_size9>>2]|0;
  $add10 = (20 + ($10))|0;
  $retval = $add10;
  break;
 }
 case 7:  {
  $retval = 20;
  break;
 }
 default: {
  // unreachable;
 }
 }
 $11 = $retval;
 STACKTOP = sp;return ($11|0);
}
function _bfObjIsFunction($obj) {
 $obj = $obj|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $cmp = 0, $cmp2 = 0, $lor$ext = 0, $obj$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $obj$addr = $obj;
 $0 = $obj$addr;
 $1 = HEAP32[$0>>2]|0;
 $cmp = ($1|0)==(0);
 if ($cmp) {
  $4 = 1;
 } else {
  $2 = $obj$addr;
  $3 = HEAP32[$2>>2]|0;
  $cmp2 = ($3|0)==(5);
  $4 = $cmp2;
 }
 $lor$ext = $4&1;
 STACKTOP = sp;return ($lor$ext|0);
}
function _bfGCMarkObj($obj,$mark_value) {
 $obj = $obj|0;
 $mark_value = $mark_value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, $and = 0, $base_clz = 0, $base_clz9 = 0, $call = 0, $clz = 0, $clz15 = 0, $clz25 = 0, $clz28 = 0, $clz32 = 0, $clz35 = 0, $constants = 0, $constants20 = 0;
 var $conv = 0, $field_initializers = 0, $fields = 0, $fields18 = 0, $fn = 0, $fn22 = 0, $gc_mark = 0, $gc_mark1 = 0, $init_fn = 0, $init_fn4 = 0, $init_fn5 = 0, $inst = 0, $it = 0, $mark_value$addr = 0, $module = 0, $module12 = 0, $name = 0, $num_statics = 0, $obj$addr = 0, $ref = 0;
 var $statics = 0, $symbols = 0, $tobool = 0, $tobool17 = 0, $tobool2 = 0, $tobool26 = 0, $tobool33 = 0, $tobool7 = 0, $value = 0, $variables = 0, $weak_ref = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $it = sp + 16|0;
 $obj$addr = $obj;
 $mark_value$addr = $mark_value;
 $0 = $obj$addr;
 $gc_mark = ((($0)) + 8|0);
 $1 = HEAP8[$gc_mark>>0]|0;
 $tobool = ($1<<24>>24)!=(0);
 if ($tobool) {
  STACKTOP = sp;return;
 }
 $2 = $mark_value$addr;
 $conv = $2&255;
 $3 = $obj$addr;
 $gc_mark1 = ((($3)) + 8|0);
 HEAP8[$gc_mark1>>0] = $conv;
 $4 = $obj$addr;
 $5 = HEAP32[$4>>2]|0;
 $and = $5 & 7;
 switch ($and|0) {
 case 1:  {
  $6 = $obj$addr;
  $module = $6;
  $7 = $module;
  $variables = ((($7)) + 16|0);
  $8 = HEAP32[$variables>>2]|0;
  $9 = $mark_value$addr;
  _bfGCMarkSymbols($8,$9);
  $10 = $module;
  $init_fn = ((($10)) + 20|0);
  $name = ((($init_fn)) + 12|0);
  $11 = HEAP32[$name>>2]|0;
  $tobool2 = ($11|0)!=(0|0);
  if (!($tobool2)) {
   STACKTOP = sp;return;
  }
  $12 = $module;
  $init_fn4 = ((($12)) + 20|0);
  $13 = $mark_value$addr;
  _bfGCMarkObj($init_fn4,$13);
  $14 = $module;
  $init_fn5 = ((($14)) + 20|0);
  $constants = ((($init_fn5)) + 24|0);
  $15 = HEAP32[$constants>>2]|0;
  $16 = $mark_value$addr;
  _bfGCMarkValues($15,$16);
  STACKTOP = sp;return;
  break;
 }
 case 2:  {
  $17 = $obj$addr;
  $clz = $17;
  $18 = $clz;
  $base_clz = ((($18)) + 16|0);
  $19 = HEAP32[$base_clz>>2]|0;
  $tobool7 = ($19|0)!=(0|0);
  if ($tobool7) {
   $20 = $clz;
   $base_clz9 = ((($20)) + 16|0);
   $21 = HEAP32[$base_clz9>>2]|0;
   $22 = $mark_value$addr;
   _bfGCMarkObj($21,$22);
  }
  $23 = $clz;
  $module12 = ((($23)) + 20|0);
  $24 = HEAP32[$module12>>2]|0;
  $25 = $mark_value$addr;
  _bfGCMarkObj($24,$25);
  $26 = $clz;
  $symbols = ((($26)) + 24|0);
  $27 = HEAP32[$symbols>>2]|0;
  $28 = $mark_value$addr;
  _bfGCMarkSymbols($27,$28);
  $29 = $clz;
  $field_initializers = ((($29)) + 28|0);
  $30 = HEAP32[$field_initializers>>2]|0;
  $31 = $mark_value$addr;
  _bfGCMarkSymbols($30,$31);
  STACKTOP = sp;return;
  break;
 }
 case 3:  {
  $32 = $obj$addr;
  $inst = $32;
  $33 = $inst;
  $clz15 = ((($33)) + 12|0);
  $34 = HEAP32[$clz15>>2]|0;
  $35 = $mark_value$addr;
  _bfGCMarkObj($34,$35);
  $36 = $inst;
  $fields = ((($36)) + 16|0);
  _bfHashMap_itBegin($it,$fields);
  while(1) {
   $call = (_bfHashMap_itHasNext($it)|0);
   $tobool17 = ($call|0)!=(0);
   if (!($tobool17)) {
    break;
   }
   $value = ((($it)) + 4|0);
   $37 = HEAP32[$value>>2]|0;
   $38 = $37;
   $39 = $38;
   $40 = HEAP32[$39>>2]|0;
   $41 = (($38) + 4)|0;
   $42 = $41;
   $43 = HEAP32[$42>>2]|0;
   $44 = $mark_value$addr;
   _bfGCMarkValue($40,$43,$44);
   $45 = $inst;
   $fields18 = ((($45)) + 16|0);
   _bfHashMap_itGetNext($fields18,$it);
  }
  STACKTOP = sp;return;
  break;
 }
 case 0:  {
  $46 = $obj$addr;
  $fn = $46;
  $47 = $fn;
  $constants20 = ((($47)) + 24|0);
  $48 = HEAP32[$constants20>>2]|0;
  $49 = $mark_value$addr;
  _bfGCMarkValues($48,$49);
  STACKTOP = sp;return;
  break;
 }
 case 5:  {
  $50 = $obj$addr;
  $fn22 = $50;
  $51 = $fn22;
  $statics = ((($51)) + 24|0);
  $52 = HEAP32[$statics>>2]|0;
  $53 = $fn22;
  $num_statics = ((($53)) + 20|0);
  $54 = HEAP32[$num_statics>>2]|0;
  $55 = $mark_value$addr;
  _bfGCMarkValuesN($52,$54,$55);
  STACKTOP = sp;return;
  break;
 }
 case 6:  {
  $56 = $obj$addr;
  $ref = $56;
  $57 = $ref;
  $clz25 = ((($57)) + 12|0);
  $58 = HEAP32[$clz25>>2]|0;
  $tobool26 = ($58|0)!=(0|0);
  if (!($tobool26)) {
   STACKTOP = sp;return;
  }
  $59 = $ref;
  $clz28 = ((($59)) + 12|0);
  $60 = HEAP32[$clz28>>2]|0;
  $61 = $mark_value$addr;
  _bfGCMarkObj($60,$61);
  STACKTOP = sp;return;
  break;
 }
 case 7:  {
  $62 = $obj$addr;
  $weak_ref = $62;
  $63 = $weak_ref;
  $clz32 = ((($63)) + 12|0);
  $64 = HEAP32[$clz32>>2]|0;
  $tobool33 = ($64|0)!=(0|0);
  if (!($tobool33)) {
   STACKTOP = sp;return;
  }
  $65 = $weak_ref;
  $clz35 = ((($65)) + 12|0);
  $66 = HEAP32[$clz35>>2]|0;
  $67 = $mark_value$addr;
  _bfGCMarkObj($66,$67);
  STACKTOP = sp;return;
  break;
 }
 case 4:  {
  STACKTOP = sp;return;
  break;
 }
 default: {
  // unreachable;
 }
 }
}
function _bfObjFinalize($self,$obj) {
 $self = $self|0;
 $obj = $obj|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $clz = 0, $clz11 = 0, $clz2 = 0, $clz7 = 0, $cmp = 0, $cmp5 = 0, $extra_data = 0, $extra_data13 = 0, $finalizer = 0, $finalizer12 = 0, $finalizer3 = 0, $finalizer8 = 0, $inst = 0, $obj$addr = 0, $ref = 0, $self$addr = 0, $tobool = 0, $tobool9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self$addr = $self;
 $obj$addr = $obj;
 $0 = $obj$addr;
 $1 = HEAP32[$0>>2]|0;
 $cmp = ($1|0)==(3);
 $2 = $obj$addr;
 if ($cmp) {
  $inst = $2;
  $3 = $inst;
  $clz = ((($3)) + 12|0);
  $4 = HEAP32[$clz>>2]|0;
  $finalizer = ((($4)) + 36|0);
  $5 = HEAP32[$finalizer>>2]|0;
  $tobool = ($5|0)!=(0|0);
  if (!($tobool)) {
   STACKTOP = sp;return;
  }
  $6 = $inst;
  $clz2 = ((($6)) + 12|0);
  $7 = HEAP32[$clz2>>2]|0;
  $finalizer3 = ((($7)) + 36|0);
  $8 = HEAP32[$finalizer3>>2]|0;
  $9 = $self$addr;
  $10 = $inst;
  $extra_data = ((($10)) + 548|0);
  FUNCTION_TABLE_vii[$8 & 63]($9,$extra_data);
  STACKTOP = sp;return;
 }
 $11 = HEAP32[$2>>2]|0;
 $cmp5 = ($11|0)==(6);
 if (!($cmp5)) {
  STACKTOP = sp;return;
 }
 $12 = $obj$addr;
 $ref = $12;
 $13 = $ref;
 $clz7 = ((($13)) + 12|0);
 $14 = HEAP32[$clz7>>2]|0;
 $finalizer8 = ((($14)) + 36|0);
 $15 = HEAP32[$finalizer8>>2]|0;
 $tobool9 = ($15|0)!=(0|0);
 if (!($tobool9)) {
  STACKTOP = sp;return;
 }
 $16 = $ref;
 $clz11 = ((($16)) + 12|0);
 $17 = HEAP32[$clz11>>2]|0;
 $finalizer12 = ((($17)) + 36|0);
 $18 = HEAP32[$finalizer12>>2]|0;
 $19 = $self$addr;
 $20 = $ref;
 $extra_data13 = ((($20)) + 20|0);
 FUNCTION_TABLE_vii[$18 & 63]($19,$extra_data13);
 STACKTOP = sp;return;
}
function _bfVMObject_delete($self,$obj) {
 $self = $self|0;
 $obj = $obj|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $call = 0, $obj$addr = 0, $obj_size = 0, $self$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self$addr = $self;
 $obj$addr = $obj;
 $0 = $obj$addr;
 $call = (_bfGCObjectSize($0)|0);
 $obj_size = $call;
 $1 = $self$addr;
 $2 = $obj$addr;
 _bfVMObject__delete($1,$2);
 $3 = $self$addr;
 $4 = $obj$addr;
 $5 = $obj_size;
 (_bfGCAllocMemory($3,$4,$5,0)|0);
 STACKTOP = sp;return;
}
function _bfVMObject__delete($self,$obj) {
 $self = $self|0;
 $obj = $obj|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $and = 0, $clz = 0, $constants = 0, $field_initializers = 0, $fields = 0, $fn = 0, $init_fn = 0, $init_fn2 = 0, $inst = 0, $instructions = 0, $line_to_code = 0, $module = 0, $name = 0, $name1 = 0;
 var $name4 = 0, $name7 = 0, $obj$addr = 0, $self$addr = 0, $str = 0, $symbols = 0, $tobool = 0, $value = 0, $variables = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $self$addr = $self;
 $obj$addr = $obj;
 $0 = $obj$addr;
 $1 = HEAP32[$0>>2]|0;
 $and = $1 & 7;
 switch ($and|0) {
 case 1:  {
  $2 = $obj$addr;
  $module = $2;
  $3 = $module;
  $name = ((($3)) + 12|0);
  $4 = HEAP32[$name>>2]|0;
  _String_delete($4);
  $5 = $module;
  $variables = ((($5)) + 16|0);
  _Array_delete($variables);
  $6 = $module;
  $init_fn = ((($6)) + 20|0);
  $name1 = ((($init_fn)) + 12|0);
  $7 = HEAP32[$name1>>2]|0;
  $tobool = ($7|0)!=(0|0);
  if (!($tobool)) {
   STACKTOP = sp;return;
  }
  $8 = $self$addr;
  $9 = $module;
  $init_fn2 = ((($9)) + 20|0);
  _bfVMObject__delete($8,$init_fn2);
  STACKTOP = sp;return;
  break;
 }
 case 2:  {
  $10 = $obj$addr;
  $clz = $10;
  $11 = $clz;
  $name4 = ((($11)) + 12|0);
  $12 = HEAP32[$name4>>2]|0;
  _String_delete($12);
  $13 = $clz;
  $symbols = ((($13)) + 24|0);
  _Array_delete($symbols);
  $14 = $clz;
  $field_initializers = ((($14)) + 28|0);
  _Array_delete($field_initializers);
  STACKTOP = sp;return;
  break;
 }
 case 3:  {
  $15 = $obj$addr;
  $inst = $15;
  $16 = $inst;
  $fields = ((($16)) + 16|0);
  _bfHashMap_dtor($fields);
  STACKTOP = sp;return;
  break;
 }
 case 0:  {
  $17 = $obj$addr;
  $fn = $17;
  $18 = $fn;
  $name7 = ((($18)) + 12|0);
  $19 = HEAP32[$name7>>2]|0;
  _String_delete($19);
  $20 = $fn;
  $constants = ((($20)) + 24|0);
  _Array_delete($constants);
  $21 = $fn;
  $instructions = ((($21)) + 28|0);
  _Array_delete($instructions);
  $22 = $fn;
  $line_to_code = ((($22)) + 20|0);
  _Array_delete($line_to_code);
  STACKTOP = sp;return;
  break;
 }
 case 4:  {
  $23 = $obj$addr;
  $str = $23;
  $24 = $str;
  $value = ((($24)) + 12|0);
  $25 = HEAP32[$value>>2]|0;
  _String_delete($25);
  STACKTOP = sp;return;
  break;
 }
 case 7: case 6: case 5:  {
  STACKTOP = sp;return;
  break;
 }
 default: {
  // unreachable;
 }
 }
}
function _bfHashMap_dtor($self) {
 $self = $self|0;
 var $0 = 0, $self$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self$addr = $self;
 $0 = $self$addr;
 _bfHashMap_clear($0);
 STACKTOP = sp;return;
}
function _bfHashMap_clear($self) {
 $self = $self|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx3 = 0, $buckets = 0, $buckets2 = 0, $cmp = 0;
 var $cursor = 0, $i = 0, $inc = 0, $next = 0, $next1 = 0, $num_buckets = 0, $self$addr = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self$addr = $self;
 $i = 0;
 while(1) {
  $0 = $i;
  $1 = $self$addr;
  $num_buckets = ((($1)) + 528|0);
  $2 = HEAP32[$num_buckets>>2]|0;
  $cmp = ($0>>>0)<($2>>>0);
  if (!($cmp)) {
   break;
  }
  $3 = $self$addr;
  $buckets = ((($3)) + 16|0);
  $4 = $i;
  $arrayidx = (($buckets) + ($4<<2)|0);
  $5 = HEAP32[$arrayidx>>2]|0;
  $cursor = $5;
  while(1) {
   $6 = $cursor;
   $tobool = ($6|0)!=(0|0);
   if (!($tobool)) {
    break;
   }
   $7 = $cursor;
   $next1 = ((($7)) + 4|0);
   $8 = HEAP32[$next1>>2]|0;
   $next = $8;
   $9 = $self$addr;
   $10 = $cursor;
   _bfHashMap_deleteNode($9,$10);
   $11 = $next;
   $cursor = $11;
  }
  $12 = $self$addr;
  $buckets2 = ((($12)) + 16|0);
  $13 = $i;
  $arrayidx3 = (($buckets2) + ($13<<2)|0);
  HEAP32[$arrayidx3>>2] = 0;
  $14 = $i;
  $inc = (($14) + 1)|0;
  $i = $inc;
 }
 STACKTOP = sp;return;
}
function _bfHashMap_deleteNode($self,$node) {
 $self = $self|0;
 $node = $node|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $node$addr = 0, $self$addr = 0, $value = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self$addr = $self;
 $node$addr = $node;
 $0 = $self$addr;
 $1 = HEAP32[$0>>2]|0;
 $2 = $node$addr;
 $3 = HEAP32[$2>>2]|0;
 $4 = $node$addr;
 $value = ((($4)) + 8|0);
 FUNCTION_TABLE_vii[$1 & 63]($3,$value);
 $5 = $node$addr;
 _free($5);
 STACKTOP = sp;return;
}
function _bfGCMarkSymbols($symbols,$mark_value) {
 $symbols = $symbols|0;
 $mark_value = $mark_value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $call = 0, $cmp = 0, $i = 0, $inc = 0, $mark_value$addr = 0, $size = 0, $symbols$addr = 0;
 var $value = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $symbols$addr = sp + 12|0;
 HEAP32[$symbols$addr>>2] = $symbols;
 $mark_value$addr = $mark_value;
 $call = (_Array_size($symbols$addr)|0);
 $size = $call;
 $i = 0;
 while(1) {
  $0 = $i;
  $1 = $size;
  $cmp = ($0>>>0)<($1>>>0);
  if (!($cmp)) {
   break;
  }
  $2 = HEAP32[$symbols$addr>>2]|0;
  $3 = $i;
  $arrayidx = (($2) + ($3<<4)|0);
  $value = ((($arrayidx)) + 8|0);
  $4 = $value;
  $5 = $4;
  $6 = HEAP32[$5>>2]|0;
  $7 = (($4) + 4)|0;
  $8 = $7;
  $9 = HEAP32[$8>>2]|0;
  $10 = $mark_value$addr;
  _bfGCMarkValue($6,$9,$10);
  $11 = $i;
  $inc = (($11) + 1)|0;
  $i = $inc;
 }
 STACKTOP = sp;return;
}
function _bfGCMarkValues($values,$mark_value) {
 $values = $values|0;
 $mark_value = $mark_value|0;
 var $0 = 0, $1 = 0, $call = 0, $mark_value$addr = 0, $values$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $values$addr = sp + 4|0;
 HEAP32[$values$addr>>2] = $values;
 $mark_value$addr = $mark_value;
 $0 = HEAP32[$values$addr>>2]|0;
 $call = (_Array_size($values$addr)|0);
 $1 = $mark_value$addr;
 _bfGCMarkValuesN($0,$call,$1);
 STACKTOP = sp;return;
}
function _bfHashMap_itBegin($agg$result,$self) {
 $agg$result = $agg$result|0;
 $self = $self|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $begin_it = 0, $buckets = 0, $cmp = 0, $cursor = 0, $i = 0;
 var $inc = 0, $index = 0, $next = 0, $next3 = 0, $num_buckets = 0, $self$addr = 0, $tobool = 0, $value = 0, $value2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $begin_it = sp + 8|0;
 $self$addr = $self;
 ;HEAP32[$begin_it>>2]=HEAP32[1976>>2]|0;HEAP32[$begin_it+4>>2]=HEAP32[1976+4>>2]|0;HEAP32[$begin_it+8>>2]=HEAP32[1976+8>>2]|0;HEAP32[$begin_it+12>>2]=HEAP32[1976+12>>2]|0;
 $i = 0;
 while(1) {
  $0 = $i;
  $1 = $self$addr;
  $num_buckets = ((($1)) + 528|0);
  $2 = HEAP32[$num_buckets>>2]|0;
  $cmp = ($0|0)<($2|0);
  if (!($cmp)) {
   label = 6;
   break;
  }
  $3 = $self$addr;
  $buckets = ((($3)) + 16|0);
  $4 = $i;
  $arrayidx = (($buckets) + ($4<<2)|0);
  $5 = HEAP32[$arrayidx>>2]|0;
  $cursor = $5;
  $6 = $cursor;
  $tobool = ($6|0)!=(0|0);
  if ($tobool) {
   break;
  }
  $13 = $i;
  $inc = (($13) + 1)|0;
  $i = $inc;
 }
 if ((label|0) == 6) {
  ;HEAP32[$agg$result>>2]=HEAP32[$begin_it>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$begin_it+4>>2]|0;HEAP32[$agg$result+8>>2]=HEAP32[$begin_it+8>>2]|0;HEAP32[$agg$result+12>>2]=HEAP32[$begin_it+12>>2]|0;
  STACKTOP = sp;return;
 }
 $7 = $cursor;
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$begin_it>>2] = $8;
 $9 = $cursor;
 $value = ((($9)) + 8|0);
 $value2 = ((($begin_it)) + 4|0);
 HEAP32[$value2>>2] = $value;
 $10 = $i;
 $index = ((($begin_it)) + 8|0);
 HEAP32[$index>>2] = $10;
 $11 = $cursor;
 $next = ((($11)) + 4|0);
 $12 = HEAP32[$next>>2]|0;
 $next3 = ((($begin_it)) + 12|0);
 HEAP32[$next3>>2] = $12;
 ;HEAP32[$agg$result>>2]=HEAP32[$begin_it>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$begin_it+4>>2]|0;HEAP32[$agg$result+8>>2]=HEAP32[$begin_it+8>>2]|0;HEAP32[$agg$result+12>>2]=HEAP32[$begin_it+12>>2]|0;
 STACKTOP = sp;return;
}
function _bfHashMap_itHasNext($it) {
 $it = $it|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $cmp = 0, $cmp1 = 0, $index = 0, $it$addr = 0, $land$ext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $it$addr = $it;
 $0 = $it$addr;
 $index = ((($0)) + 8|0);
 $1 = HEAP32[$index>>2]|0;
 $cmp = ($1|0)!=(-1);
 if ($cmp) {
  $2 = $it$addr;
  $3 = HEAP32[$2>>2]|0;
  $cmp1 = ($3|0)!=(0|0);
  $4 = $cmp1;
 } else {
  $4 = 0;
 }
 $land$ext = $4&1;
 STACKTOP = sp;return ($land$ext|0);
}
function _bfGCMarkValue($0,$1,$mark_value) {
 $0 = $0|0;
 $1 = $1|0;
 $mark_value = $mark_value|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $mark_value$addr = 0, $ptr = 0, $tobool = 0, $tobool2 = 0, $value$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $value$addr = sp;
 $2 = $value$addr;
 $3 = $2;
 HEAP32[$3>>2] = $0;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = $1;
 $mark_value$addr = $mark_value;
 $6 = $value$addr;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($6) + 4)|0;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = (_bfVMValue_isPointer($8,$11)|0);
 $tobool = ($12|0)!=(0);
 if (!($tobool)) {
  STACKTOP = sp;return;
 }
 $13 = $value$addr;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = (($13) + 4)|0;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 $19 = (_bfVmValue_asPointer($15,$18)|0);
 $ptr = $19;
 $20 = $ptr;
 $tobool2 = ($20|0)!=(0|0);
 if (!($tobool2)) {
  STACKTOP = sp;return;
 }
 $21 = $ptr;
 $22 = $mark_value$addr;
 _bfGCMarkObj($21,$22);
 STACKTOP = sp;return;
}
function _bfHashMap_itGetNext($self,$it) {
 $self = $self|0;
 $it = $it|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $arrayidx = 0, $buckets = 0, $cmp = 0, $cursor = 0, $i = 0;
 var $inc = 0, $index = 0, $index15 = 0, $index19 = 0, $it$addr = 0, $next = 0, $next1 = 0, $next16 = 0, $next17 = 0, $next3 = 0, $next5 = 0, $next6 = 0, $next7 = 0, $num_buckets = 0, $self$addr = 0, $tobool = 0, $tobool8 = 0, $value = 0, $value12 = 0, $value14 = 0;
 var $value4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self$addr = $self;
 $it$addr = $it;
 $0 = $it$addr;
 $next = ((($0)) + 12|0);
 $1 = HEAP32[$next>>2]|0;
 $tobool = ($1|0)!=(0|0);
 $2 = $it$addr;
 if ($tobool) {
  $next1 = ((($2)) + 12|0);
  $3 = HEAP32[$next1>>2]|0;
  $4 = HEAP32[$3>>2]|0;
  $5 = $it$addr;
  HEAP32[$5>>2] = $4;
  $6 = $it$addr;
  $next3 = ((($6)) + 12|0);
  $7 = HEAP32[$next3>>2]|0;
  $value = ((($7)) + 8|0);
  $8 = $it$addr;
  $value4 = ((($8)) + 4|0);
  HEAP32[$value4>>2] = $value;
  $9 = $it$addr;
  $next5 = ((($9)) + 12|0);
  $10 = HEAP32[$next5>>2]|0;
  $next6 = ((($10)) + 4|0);
  $11 = HEAP32[$next6>>2]|0;
  $12 = $it$addr;
  $next7 = ((($12)) + 12|0);
  HEAP32[$next7>>2] = $11;
  STACKTOP = sp;return;
 }
 $index = ((($2)) + 8|0);
 $13 = HEAP32[$index>>2]|0;
 $add = (($13) + 1)|0;
 $i = $add;
 while(1) {
  $14 = $i;
  $15 = $self$addr;
  $num_buckets = ((($15)) + 528|0);
  $16 = HEAP32[$num_buckets>>2]|0;
  $cmp = ($14|0)<($16|0);
  if (!($cmp)) {
   label = 8;
   break;
  }
  $17 = $self$addr;
  $buckets = ((($17)) + 16|0);
  $18 = $i;
  $arrayidx = (($buckets) + ($18<<2)|0);
  $19 = HEAP32[$arrayidx>>2]|0;
  $cursor = $19;
  $20 = $cursor;
  $tobool8 = ($20|0)!=(0|0);
  if ($tobool8) {
   label = 6;
   break;
  }
  $31 = $i;
  $inc = (($31) + 1)|0;
  $i = $inc;
 }
 if ((label|0) == 6) {
  $21 = $cursor;
  $22 = HEAP32[$21>>2]|0;
  $23 = $it$addr;
  HEAP32[$23>>2] = $22;
  $24 = $cursor;
  $value12 = ((($24)) + 8|0);
  $25 = $it$addr;
  $value14 = ((($25)) + 4|0);
  HEAP32[$value14>>2] = $value12;
  $26 = $i;
  $27 = $it$addr;
  $index15 = ((($27)) + 8|0);
  HEAP32[$index15>>2] = $26;
  $28 = $cursor;
  $next16 = ((($28)) + 4|0);
  $29 = HEAP32[$next16>>2]|0;
  $30 = $it$addr;
  $next17 = ((($30)) + 12|0);
  HEAP32[$next17>>2] = $29;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 8) {
  $32 = $it$addr;
  HEAP32[$32>>2] = 0;
  $33 = $it$addr;
  $index19 = ((($33)) + 8|0);
  HEAP32[$index19>>2] = -1;
  STACKTOP = sp;return;
 }
}
function _bfGCMarkValuesN($values,$size,$mark_value) {
 $values = $values|0;
 $size = $size|0;
 $mark_value = $mark_value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $cmp = 0, $i = 0, $inc = 0, $mark_value$addr = 0, $size$addr = 0, $values$addr = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $values$addr = $values;
 $size$addr = $size;
 $mark_value$addr = $mark_value;
 $i = 0;
 while(1) {
  $0 = $i;
  $1 = $size$addr;
  $cmp = ($0>>>0)<($1>>>0);
  if (!($cmp)) {
   break;
  }
  $2 = $values$addr;
  $3 = $i;
  $arrayidx = (($2) + ($3<<3)|0);
  $4 = $arrayidx;
  $5 = $4;
  $6 = HEAP32[$5>>2]|0;
  $7 = (($4) + 4)|0;
  $8 = $7;
  $9 = HEAP32[$8>>2]|0;
  $10 = $mark_value$addr;
  _bfGCMarkValue($6,$9,$10);
  $11 = $i;
  $inc = (($11) + 1)|0;
  $i = $inc;
 }
 STACKTOP = sp;return;
}
function _bfVM_getHandleValue($h) {
 $h = $h|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $h$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $h$addr = $h;
 $0 = $h$addr;
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 setTempRet0(($6) | 0);
 STACKTOP = sp;return ($3|0);
}
function _bfVM_getHandleNext($h) {
 $h = $h|0;
 var $0 = 0, $1 = 0, $h$addr = 0, $next = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $h$addr = $h;
 $0 = $h$addr;
 $next = ((($0)) + 12|0);
 $1 = HEAP32[$next>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function _bfHashMap_newNode($key,$value_size,$value,$next) {
 $key = $key|0;
 $value_size = $value_size|0;
 $value = $value|0;
 $next = $next|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $call = 0, $key$addr = 0, $next$addr = 0, $next2 = 0, $node = 0, $tobool = 0, $value$addr = 0, $value3 = 0, $value_size$addr = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $key$addr = $key;
 $value_size$addr = $value_size;
 $value$addr = $value;
 $next$addr = $next;
 $0 = $value_size$addr;
 $add = (8 + ($0))|0;
 $call = (_malloc($add)|0);
 $node = $call;
 $1 = $node;
 $tobool = ($1|0)!=(0|0);
 if ($tobool) {
  $2 = $key$addr;
  $3 = $node;
  HEAP32[$3>>2] = $2;
  $4 = $next$addr;
  $5 = $node;
  $next2 = ((($5)) + 4|0);
  HEAP32[$next2>>2] = $4;
  $6 = $node;
  $value3 = ((($6)) + 8|0);
  $7 = $value$addr;
  $8 = $value_size$addr;
  _memcpy(($value3|0),($7|0),($8|0))|0;
  $9 = $node;
  STACKTOP = sp;return ($9|0);
 } else {
  ___assert_fail((5495|0),(5539|0),225,(5589|0));
  // unreachable;
 }
 return (0)|0;
}
function _bfLexer_make($agg$result,$params) {
 $agg$result = $agg$result|0;
 $params = $params|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$ptr = 0, $do_comments = 0, $do_comments5 = 0, $keywords = 0, $keywords2 = 0, $length = 0;
 var $num_keywords = 0, $num_keywords3 = 0, $params$addr = 0, $self = 0, $source_end = 0, $vm = 0, $vm4 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $self = sp;
 $params$addr = $params;
 $0 = $params$addr;
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$self>>2] = $1;
 $2 = $params$addr;
 $3 = HEAP32[$2>>2]|0;
 $4 = $params$addr;
 $length = ((($4)) + 4|0);
 $5 = HEAP32[$length>>2]|0;
 $add$ptr = (($3) + ($5)|0);
 $source_end = ((($self)) + 4|0);
 HEAP32[$source_end>>2] = $add$ptr;
 $6 = $params$addr;
 $keywords = ((($6)) + 8|0);
 $7 = HEAP32[$keywords>>2]|0;
 $keywords2 = ((($self)) + 8|0);
 HEAP32[$keywords2>>2] = $7;
 $8 = $params$addr;
 $num_keywords = ((($8)) + 12|0);
 $9 = HEAP32[$num_keywords>>2]|0;
 $num_keywords3 = ((($self)) + 12|0);
 HEAP32[$num_keywords3>>2] = $9;
 $10 = $params$addr;
 $vm = ((($10)) + 16|0);
 $11 = HEAP32[$vm>>2]|0;
 $vm4 = ((($self)) + 32|0);
 HEAP32[$vm4>>2] = $11;
 $12 = $params$addr;
 $do_comments = ((($12)) + 20|0);
 $13 = HEAP32[$do_comments>>2]|0;
 $do_comments5 = ((($self)) + 36|0);
 HEAP32[$do_comments5>>2] = $13;
 _bfLexer_reset($self);
 dest=$agg$result; src=$self; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return;
}
function _bfParser_dtor($self) {
 $self = $self|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $current_module = 0, $fn_builder_stack = 0, $init_fn = 0, $module_fn = 0, $name = 0;
 var $name2 = 0, $parser_stack = 0, $self$addr = 0, $tobool = 0, $vm = 0, $vm1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self$addr = $self;
 $0 = $self$addr;
 $1 = HEAP32[$0>>2]|0;
 $2 = $self$addr;
 $vm = ((($2)) + 40|0);
 $3 = HEAP32[$vm>>2]|0;
 $parser_stack = ((($3)) + 584|0);
 HEAP32[$parser_stack>>2] = $1;
 $4 = $self$addr;
 $current_module = ((($4)) + 32|0);
 $5 = HEAP32[$current_module>>2]|0;
 $init_fn = ((($5)) + 20|0);
 $module_fn = $init_fn;
 $6 = $module_fn;
 $name = ((($6)) + 12|0);
 $7 = HEAP32[$name>>2]|0;
 $tobool = ($7|0)!=(0|0);
 if ($tobool) {
  $8 = $self$addr;
  $vm1 = ((($8)) + 40|0);
  $9 = HEAP32[$vm1>>2]|0;
  $10 = $module_fn;
  _bfVMObject__delete($9,$10);
  $11 = $module_fn;
  $name2 = ((($11)) + 12|0);
  HEAP32[$name2>>2] = 0;
 }
 $12 = $self$addr;
 $13 = $module_fn;
 _bfParser_popBuilder($12,$13,0);
 $14 = $self$addr;
 $fn_builder_stack = ((($14)) + 24|0);
 _Array_delete($fn_builder_stack);
 STACKTOP = sp;return;
}
function _bfParser_popBuilder($self,$fn_out,$arity) {
 $self = $self|0;
 $fn_out = $fn_out|0;
 $arity = $arity|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arity$addr = 0, $call4 = 0, $fn_builder = 0, $fn_builder1 = 0, $fn_builder2 = 0, $fn_builder5 = 0, $fn_builder_stack = 0, $fn_builder_stack3 = 0, $fn_out$addr = 0;
 var $self$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self$addr = $self;
 $fn_out$addr = $fn_out;
 $arity$addr = $arity;
 $0 = $self$addr;
 $fn_builder = ((($0)) + 28|0);
 $1 = HEAP32[$fn_builder>>2]|0;
 _bfVMFunctionBuilder_addInstABx($1,25,0,0);
 $2 = $self$addr;
 $fn_builder1 = ((($2)) + 28|0);
 $3 = HEAP32[$fn_builder1>>2]|0;
 $4 = $fn_out$addr;
 $5 = $arity$addr;
 _bfVMFunctionBuilder_end($3,$4,$5);
 $6 = $self$addr;
 $fn_builder2 = ((($6)) + 28|0);
 $7 = HEAP32[$fn_builder2>>2]|0;
 _bfVMFunctionBuilder_dtor($7);
 $8 = $self$addr;
 $fn_builder_stack = ((($8)) + 24|0);
 (_Array_pop($fn_builder_stack)|0);
 $9 = $self$addr;
 $fn_builder_stack3 = ((($9)) + 24|0);
 $call4 = (_Array_back($fn_builder_stack3)|0);
 $10 = $self$addr;
 $fn_builder5 = ((($10)) + 28|0);
 HEAP32[$fn_builder5>>2] = $call4;
 STACKTOP = sp;return;
}
function _bfVMFunctionBuilder_end($self,$out,$arity) {
 $self = $self|0;
 $out = $out|0;
 $arity = $arity|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add7 = 0, $arity$addr = 0, $arity2 = 0, $call = 0, $constants = 0, $constants3 = 0, $constants8 = 0, $instructions = 0, $instructions4 = 0, $line_to_code = 0, $line_to_code5 = 0, $line_to_code6 = 0, $max_local_idx = 0, $name1 = 0, $name_len = 0;
 var $needed_stack_space = 0, $out$addr = 0, $self$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self$addr = $self;
 $out$addr = $out;
 $arity$addr = $arity;
 $0 = $self$addr;
 _bfVMFunctionBuilder_popScope($0);
 $1 = $out$addr;
 HEAP32[$1>>2] = 0;
 $2 = $self$addr;
 $3 = HEAP32[$2>>2]|0;
 $4 = $self$addr;
 $name_len = ((($4)) + 4|0);
 $5 = HEAP32[$name_len>>2]|0;
 $call = (_String_newLen($3,$5)|0);
 $6 = $out$addr;
 $name1 = ((($6)) + 12|0);
 HEAP32[$name1>>2] = $call;
 $7 = $arity$addr;
 $8 = $out$addr;
 $arity2 = ((($8)) + 16|0);
 HEAP32[$arity2>>2] = $7;
 $9 = $out$addr;
 $line_to_code = ((($9)) + 20|0);
 HEAP32[$line_to_code>>2] = 0;
 $10 = $self$addr;
 $constants = ((($10)) + 8|0);
 $11 = HEAP32[$constants>>2]|0;
 $12 = $out$addr;
 $constants3 = ((($12)) + 24|0);
 HEAP32[$constants3>>2] = $11;
 $13 = $self$addr;
 $instructions = ((($13)) + 20|0);
 $14 = HEAP32[$instructions>>2]|0;
 $15 = $out$addr;
 $instructions4 = ((($15)) + 28|0);
 HEAP32[$instructions4>>2] = $14;
 $16 = $self$addr;
 $line_to_code5 = ((($16)) + 24|0);
 $17 = HEAP32[$line_to_code5>>2]|0;
 $18 = $out$addr;
 $line_to_code6 = ((($18)) + 20|0);
 HEAP32[$line_to_code6>>2] = $17;
 $19 = $self$addr;
 $max_local_idx = ((($19)) + 28|0);
 $20 = HEAP32[$max_local_idx>>2]|0;
 $21 = $arity$addr;
 $add = (($20) + ($21))|0;
 $add7 = (($add) + 1)|0;
 $22 = $out$addr;
 $needed_stack_space = ((($22)) + 32|0);
 HEAP32[$needed_stack_space>>2] = $add7;
 $23 = $self$addr;
 $constants8 = ((($23)) + 8|0);
 HEAP32[$constants8>>2] = 0;
 STACKTOP = sp;return;
}
function _bfVMFunctionBuilder_dtor($self) {
 $self = $self|0;
 var $0 = 0, $1 = 0, $local_var_scope_size = 0, $local_vars = 0, $self$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self$addr = $self;
 $0 = $self$addr;
 $local_vars = ((($0)) + 12|0);
 _Array_delete($local_vars);
 $1 = $self$addr;
 $local_var_scope_size = ((($1)) + 16|0);
 _Array_delete($local_var_scope_size);
 STACKTOP = sp;return;
}
function _bfLexer_reset($self) {
 $self = $self|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $current_line_no = 0, $cursor = 0, $line_pos_bgn = 0, $line_pos_end = 0, $self$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self$addr = $self;
 $0 = $self$addr;
 $cursor = ((($0)) + 16|0);
 HEAP32[$cursor>>2] = 0;
 $1 = $self$addr;
 $current_line_no = ((($1)) + 20|0);
 HEAP32[$current_line_no>>2] = 1;
 $2 = $self$addr;
 $line_pos_bgn = ((($2)) + 24|0);
 HEAP32[$line_pos_bgn>>2] = 0;
 $3 = $self$addr;
 $line_pos_end = ((($3)) + 28|0);
 HEAP32[$line_pos_end>>2] = 0;
 $4 = $self$addr;
 _bfLexer_advance($4,0);
 STACKTOP = sp;return;
}
function _String_unescape($self) {
 $self = $self|0;
 var $0 = 0, $1 = 0, $call = 0, $call1 = 0, $length = 0, $self$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self$addr = $self;
 $0 = $self$addr;
 $call = (_CString_unescape($0)|0);
 $1 = $self$addr;
 $call1 = (_String_getHeader($1)|0);
 $length = ((($call1)) + 4|0);
 HEAP32[$length>>2] = $call;
 STACKTOP = sp;return;
}
function _bfString_hashN($str,$length) {
 $str = $str|0;
 $length = $length|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$ptr = 0, $cmp = 0, $conv = 0, $hash = 0, $incdec$ptr = 0, $length$addr = 0, $mul = 0, $str$addr = 0, $str_end = 0, $xor = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $str$addr = $str;
 $length$addr = $length;
 $hash = -2128831035;
 $0 = $str$addr;
 $1 = $length$addr;
 $add$ptr = (($0) + ($1)|0);
 $str_end = $add$ptr;
 while(1) {
  $2 = $str$addr;
  $3 = $str_end;
  $cmp = ($2|0)!=($3|0);
  if (!($cmp)) {
   break;
  }
  $4 = $str$addr;
  $5 = HEAP8[$4>>0]|0;
  $conv = $5&255;
  $6 = $hash;
  $xor = $6 ^ $conv;
  $hash = $xor;
  $7 = $hash;
  $mul = Math_imul($7, 16777619)|0;
  $hash = $mul;
  $8 = $str$addr;
  $incdec$ptr = ((($8)) + 1|0);
  $str$addr = $incdec$ptr;
 }
 $9 = $hash;
 STACKTOP = sp;return ($9|0);
}
function _CString_unescape($str) {
 $str = $str|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, $call = 0, $call9 = 0;
 var $cmp = 0, $cmp4 = 0, $conv = 0, $conv3 = 0, $incdec$ptr = 0, $incdec$ptr12 = 0, $incdec$ptr2 = 0, $newStr = 0, $oldStr = 0, $str$addr = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $tobool = 0, $tobool7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $str$addr = $str;
 $0 = $str$addr;
 $oldStr = $0;
 $1 = $str$addr;
 $newStr = $1;
 while(1) {
  $2 = $oldStr;
  $3 = HEAP8[$2>>0]|0;
  $tobool = ($3<<24>>24)!=(0);
  if (!($tobool)) {
   break;
  }
  $4 = $oldStr;
  $incdec$ptr = ((($4)) + 1|0);
  $oldStr = $incdec$ptr;
  $5 = HEAP8[$4>>0]|0;
  $c = $5;
  $6 = $c;
  $conv = $6&255;
  $cmp = ($conv|0)==(92);
  if ($cmp) {
   $7 = $oldStr;
   $incdec$ptr2 = ((($7)) + 1|0);
   $oldStr = $incdec$ptr2;
   $8 = HEAP8[$7>>0]|0;
   $c = $8;
   $9 = $c;
   $conv3 = $9&255;
   $cmp4 = ($conv3|0)==(0);
   if ($cmp4) {
    break;
   }
   $10 = $c;
   $call = (_escape_convert($10)|0);
   $tobool7 = ($call<<24>>24)!=(0);
   if ($tobool7) {
    $11 = $c;
    $call9 = (_escape_convert($11)|0);
    $c = $call9;
   }
  }
  $12 = $c;
  $13 = $newStr;
  $incdec$ptr12 = ((($13)) + 1|0);
  $newStr = $incdec$ptr12;
  HEAP8[$13>>0] = $12;
 }
 $14 = $newStr;
 HEAP8[$14>>0] = 0;
 $15 = $newStr;
 $16 = $str$addr;
 $sub$ptr$lhs$cast = $15;
 $sub$ptr$rhs$cast = $16;
 $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
 STACKTOP = sp;return ($sub$ptr$sub|0);
}
function _escape_convert($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $c$addr = 0, $conv = 0, $retval = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $c$addr = $c;
 $0 = $c$addr;
 $conv = $0&255;
 do {
  switch ($conv|0) {
  case 97:  {
   $retval = 7;
   break;
  }
  case 98:  {
   $retval = 8;
   break;
  }
  case 102:  {
   $retval = 12;
   break;
  }
  case 110:  {
   $retval = 10;
   break;
  }
  case 114:  {
   $retval = 13;
   break;
  }
  case 116:  {
   $retval = 9;
   break;
  }
  case 118:  {
   $retval = 11;
   break;
  }
  case 92:  {
   $retval = 92;
   break;
  }
  case 39:  {
   $retval = 39;
   break;
  }
  case 34:  {
   $retval = 34;
   break;
  }
  case 63:  {
   $retval = 63;
   break;
  }
  default: {
   $retval = 0;
  }
  }
 } while(0);
 $1 = $retval;
 STACKTOP = sp;return ($1|0);
}
function _parserBeginFunction($agg$result,$self,$require_name) {
 $agg$result = $agg$result|0;
 $self = $self|0;
 $require_name = $require_name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$ptr = 0, $add$ptr13 = 0, $as = 0, $call = 0, $call2 = 0, $call25 = 0, $call8 = 0, $current_token = 0;
 var $end = 0, $end14 = 0, $end18 = 0, $name_str = 0, $require_name$addr = 0, $self$addr = 0, $tobool = 0, $tobool16 = 0, $tobool3 = 0, $tobool9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $name_str = sp + 8|0;
 $self$addr = $self;
 $require_name$addr = $require_name;
 _bfMakeStringRangeC($name_str,6082);
 $0 = $self$addr;
 $call = (_bfParser_is($0,20)|0);
 $tobool = ($call|0)!=(0);
 $1 = $self$addr;
 do {
  if ($tobool) {
   $current_token = ((($1)) + 8|0);
   $as = ((($current_token)) + 8|0);
   ;HEAP32[$name_str>>2]=HEAP32[$as>>2]|0;HEAP32[$name_str+4>>2]=HEAP32[$as+4>>2]|0;
   $2 = $self$addr;
   (_bfParser_eat($2,20,0,6094)|0);
  } else {
   $call2 = (_bfParser_is($1,2)|0);
   $tobool3 = ($call2|0)!=(0);
   if ($tobool3) {
    HEAP32[$name_str>>2] = 6139;
    $3 = HEAP32[$name_str>>2]|0;
    $add$ptr = ((($3)) + 2|0);
    $end = ((($name_str)) + 4|0);
    HEAP32[$end>>2] = $add$ptr;
    $4 = $self$addr;
    (_bfParser_eat($4,2,0,10688)|0);
    $5 = $self$addr;
    (_bfParser_eat($5,3,0,6142)|0);
    $6 = $self$addr;
    $call8 = (_bfParser_match($6,10)|0);
    $tobool9 = ($call8|0)!=(0);
    if (!($tobool9)) {
     break;
    }
    HEAP32[$name_str>>2] = 6206;
    $7 = HEAP32[$name_str>>2]|0;
    $add$ptr13 = ((($7)) + 3|0);
    $end14 = ((($name_str)) + 4|0);
    HEAP32[$end14>>2] = $add$ptr13;
    break;
   }
   $8 = $require_name$addr;
   $tobool16 = ($8|0)!=(0);
   if ($tobool16) {
    $9 = $self$addr;
    _bfEmitError($9,6210,$vararg_buffer);
    break;
   } else {
    $end18 = ((($name_str)) + 4|0);
    HEAP32[$end18>>2] = 0;
    HEAP32[$name_str>>2] = 0;
    break;
   }
  }
 } while(0);
 $10 = $self$addr;
 $11 = HEAP32[$name_str>>2]|0;
 $call25 = (_bfStringRange_length($name_str)|0);
 _bfParser_pushBuilder($10,$11,$call25);
 ;HEAP32[$agg$result>>2]=HEAP32[$name_str>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$name_str+4>>2]|0;
 STACKTOP = sp;return;
}
function _parserParseFunction($self) {
 $self = $self|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arity = 0, $as = 0, $call1 = 0, $call2 = 0, $current_token = 0, $fn_builder = 0, $inc = 0, $lnot = 0;
 var $param_str = 0, $self$addr = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $param_str = sp;
 $self$addr = $self;
 $arity = 0;
 $0 = $self$addr;
 (_bfParser_eat($0,0,0,5900)|0);
 while(1) {
  $1 = $self$addr;
  $call1 = (_bfParser_is($1,1)|0);
  $tobool = ($call1|0)!=(0);
  $lnot = $tobool ^ 1;
  $2 = $self$addr;
  if (!($lnot)) {
   break;
  }
  $current_token = ((($2)) + 8|0);
  $as = ((($current_token)) + 8|0);
  ;HEAP32[$param_str>>2]=HEAP32[$as>>2]|0;HEAP32[$param_str+4>>2]=HEAP32[$as+4>>2]|0;
  $3 = $self$addr;
  $fn_builder = ((($3)) + 28|0);
  $4 = HEAP32[$fn_builder>>2]|0;
  $5 = HEAP32[$param_str>>2]|0;
  $call2 = (_bfStringRange_length($param_str)|0);
  (_bfVMFunctionBuilder_declVariable($4,$5,$call2)|0);
  $6 = $self$addr;
  (_bfParser_eat($6,20,0,5945)|0);
  $7 = $self$addr;
  (_bfParser_eat($7,9,1,5995)|0);
  $8 = $arity;
  $inc = (($8) + 1)|0;
  $arity = $inc;
 }
 (_bfParser_eat($2,1,0,6062)|0);
 $9 = $self$addr;
 _parseBlock($9);
 $10 = $self$addr;
 (_bfParser_match($10,8)|0);
 $11 = $arity;
 STACKTOP = sp;return ($11|0);
}
function _bfVM_createFunction($self,$module) {
 $self = $self|0;
 $module = $module|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $call = 0, $fn = 0, $module$addr = 0, $module1 = 0, $self$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self$addr = $self;
 $module$addr = $module;
 $0 = $self$addr;
 $call = (_allocObj($0,40,0)|0);
 $fn = $call;
 $1 = $module$addr;
 $2 = $fn;
 $module1 = ((($2)) + 36|0);
 HEAP32[$module1>>2] = $1;
 $3 = $fn;
 STACKTOP = sp;return ($3|0);
}
function _parserEndFunction($self,$out,$arity) {
 $self = $self|0;
 $out = $out|0;
 $arity = $arity|0;
 var $0 = 0, $1 = 0, $2 = 0, $arity$addr = 0, $out$addr = 0, $self$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self$addr = $self;
 $out$addr = $out;
 $arity$addr = $arity;
 $0 = $self$addr;
 $1 = $out$addr;
 $2 = $arity$addr;
 _bfParser_popBuilder($0,$1,$2);
 STACKTOP = sp;return;
}
function _parserVariableMakeLocal($agg$result,$self,$name) {
 $agg$result = $agg$result|0;
 $self = $self|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $call = 0, $call1 = 0, $conv = 0, $fn_builder = 0, $location = 0, $self$addr = 0, $var = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $var = sp;
 $self$addr = $self;
 HEAP32[$var>>2] = 0;
 $0 = $self$addr;
 $fn_builder = ((($0)) + 28|0);
 $1 = HEAP32[$fn_builder>>2]|0;
 $2 = HEAP32[$name>>2]|0;
 $call = (_bfStringRange_length($name)|0);
 $call1 = (_bfVMFunctionBuilder_declVariable($1,$2,$call)|0);
 $conv = $call1&65535;
 $location = ((($var)) + 4|0);
 HEAP16[$location>>1] = $conv;
 ;HEAP32[$agg$result>>2]=HEAP32[$var>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$var+4>>2]|0;
 STACKTOP = sp;return;
}
function _bfVMFunctionBuilder_addConstant($self,$0,$1) {
 $self = $self|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call2 = 0, $cmp = 0, $constants = 0, $constants1 = 0, $constants3 = 0, $index = 0, $self$addr = 0, $value$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $value$addr = sp;
 $self$addr = $self;
 $2 = $value$addr;
 $3 = $2;
 HEAP32[$3>>2] = $0;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = $1;
 $6 = $self$addr;
 $constants = ((($6)) + 8|0);
 $call = (_Array_find($constants,$value$addr,0)|0);
 $index = $call;
 $7 = $index;
 $cmp = ($7|0)==(-1);
 if (!($cmp)) {
  $10 = $index;
  STACKTOP = sp;return ($10|0);
 }
 $8 = $self$addr;
 $constants1 = ((($8)) + 8|0);
 $call2 = (_Array_size($constants1)|0);
 $index = $call2;
 $9 = $self$addr;
 $constants3 = ((($9)) + 8|0);
 _Array_push($constants3,$value$addr);
 $10 = $index;
 STACKTOP = sp;return ($10|0);
}
function _Array_push($self,$data) {
 $self = $self|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $call = 0, $call2 = 0, $call3 = 0, $call4 = 0, $data$addr = 0, $inc = 0, $self$addr = 0, $size = 0;
 var $stride = 0, $stride1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self$addr = $self;
 $data$addr = $data;
 $0 = $self$addr;
 $1 = HEAP32[$0>>2]|0;
 $call = (_Array_getHeader($1)|0);
 $stride1 = ((($call)) + 8|0);
 $2 = HEAP32[$stride1>>2]|0;
 $stride = $2;
 $3 = $self$addr;
 $4 = $self$addr;
 $call2 = (_Array_size($4)|0);
 $add = (($call2) + 1)|0;
 _Array_reserve($3,$add);
 $5 = $self$addr;
 $call3 = (_Array_end($5)|0);
 $6 = $data$addr;
 $7 = $stride;
 _memcpy(($call3|0),($6|0),($7|0))|0;
 $8 = $self$addr;
 $9 = HEAP32[$8>>2]|0;
 $call4 = (_Array_getHeader($9)|0);
 $size = ((($call4)) + 4|0);
 $10 = HEAP32[$size>>2]|0;
 $inc = (($10) + 1)|0;
 HEAP32[$size>>2] = $inc;
 STACKTOP = sp;return;
}
function _bfVMFunctionBuilder_declVariable($self,$name,$length) {
 $self = $self|0;
 $name = $name|0;
 $length = $length|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $call = 0, $call2 = 0, $call4 = 0, $call6 = 0, $cmp = 0, $cmp7 = 0, $count = 0, $inc = 0, $length$addr = 0, $local_var_scope_size = 0, $local_vars = 0, $local_vars3 = 0, $max_local_idx = 0, $max_local_idx9 = 0, $name$addr = 0, $name_len = 0, $prev_decl = 0;
 var $retval = 0, $self$addr = 0, $var = 0, $var_loc = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer = sp;
 $self$addr = $self;
 $name$addr = $name;
 $length$addr = $length;
 $0 = $self$addr;
 $1 = $name$addr;
 $2 = $length$addr;
 $call = (_bfVMFunctionBuilder__getVariable($0,$1,$2,1)|0);
 $prev_decl = $call;
 $3 = $prev_decl;
 $cmp = ($3|0)!=(-1);
 if ($cmp) {
  $4 = $length$addr;
  $5 = $name$addr;
  HEAP32[$vararg_buffer>>2] = $4;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $5;
  (_printf(5771,$vararg_buffer)|0);
  $6 = $prev_decl;
  $retval = $6;
  $22 = $retval;
  STACKTOP = sp;return ($22|0);
 }
 $7 = $self$addr;
 $local_vars = ((($7)) + 12|0);
 $call2 = (_Array_size($local_vars)|0);
 $var_loc = $call2;
 $8 = $self$addr;
 $local_vars3 = ((($8)) + 12|0);
 $call4 = (_Array_emplace($local_vars3)|0);
 $var = $call4;
 $9 = $name$addr;
 $10 = $var;
 HEAP32[$10>>2] = $9;
 $11 = $length$addr;
 $12 = $var;
 $name_len = ((($12)) + 4|0);
 HEAP32[$name_len>>2] = $11;
 $13 = $self$addr;
 $local_var_scope_size = ((($13)) + 16|0);
 $call6 = (_Array_back($local_var_scope_size)|0);
 $count = $call6;
 $14 = $count;
 $15 = HEAP32[$14>>2]|0;
 $inc = (($15) + 1)|0;
 HEAP32[$14>>2] = $inc;
 $16 = $self$addr;
 $max_local_idx = ((($16)) + 28|0);
 $17 = HEAP32[$max_local_idx>>2]|0;
 $18 = $var_loc;
 $cmp7 = ($17>>>0)<($18>>>0);
 if ($cmp7) {
  $19 = $var_loc;
  $20 = $self$addr;
  $max_local_idx9 = ((($20)) + 28|0);
  HEAP32[$max_local_idx9>>2] = $19;
 }
 $21 = $var_loc;
 $retval = $21;
 $22 = $retval;
 STACKTOP = sp;return ($22|0);
}
function _bfVMFunctionBuilder__getVariable($self,$name,$length,$in_current_scope) {
 $self = $self|0;
 $name = $name|0;
 $length = $length|0;
 $in_current_scope = $in_current_scope|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $add$ptr = 0, $call = 0, $call1 = 0, $call4 = 0, $call9 = 0, $cmp = 0, $cmp10 = 0, $cmp5 = 0, $cmp6 = 0, $cond = 0, $count = 0, $dec = 0, $end = 0, $i = 0, $in_current_scope$addr = 0, $length$addr = 0, $local_var_scope_size = 0, $local_vars = 0;
 var $local_vars2 = 0, $local_vars3 = 0, $name$addr = 0, $name_len = 0, $retval = 0, $self$addr = 0, $sub = 0, $tobool = 0, $var = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $self$addr = $self;
 $name$addr = $name;
 $length$addr = $length;
 $in_current_scope$addr = $in_current_scope;
 $0 = $self$addr;
 $local_var_scope_size = ((($0)) + 16|0);
 $call = (_Array_back($local_var_scope_size)|0);
 $count = $call;
 $1 = $in_current_scope$addr;
 $tobool = ($1|0)!=(0);
 if ($tobool) {
  $2 = $count;
  $3 = HEAP32[$2>>2]|0;
  $cond = $3;
 } else {
  $4 = $self$addr;
  $local_vars = ((($4)) + 12|0);
  $call1 = (_Array_size($local_vars)|0);
  $cond = $call1;
 }
 $end = $cond;
 $5 = $end;
 $sub = (($5) - 1)|0;
 $i = $sub;
 while(1) {
  $6 = $i;
  $cmp = ($6|0)>=(0);
  if (!($cmp)) {
   label = 12;
   break;
  }
  $7 = $self$addr;
  $local_vars2 = ((($7)) + 12|0);
  $8 = HEAP32[$local_vars2>>2]|0;
  $9 = $i;
  $add$ptr = (($8) + ($9<<3)|0);
  $var = $add$ptr;
  $10 = $self$addr;
  $local_vars3 = ((($10)) + 12|0);
  $call4 = (_Array_size($local_vars3)|0);
  $11 = $i;
  $cmp5 = ($call4|0)>($11|0);
  if (!($cmp5)) {
   label = 7;
   break;
  }
  $12 = $length$addr;
  $13 = $var;
  $name_len = ((($13)) + 4|0);
  $14 = HEAP32[$name_len>>2]|0;
  $cmp6 = ($12|0)==($14|0);
  if ($cmp6) {
   $15 = $name$addr;
   $16 = $var;
   $17 = HEAP32[$16>>2]|0;
   $18 = $length$addr;
   $call9 = (_String_ccmpn($15,$17,$18)|0);
   $cmp10 = ($call9|0)==(0);
   if ($cmp10) {
    label = 10;
    break;
   }
  }
  $20 = $i;
  $dec = (($20) + -1)|0;
  $i = $dec;
 }
 if ((label|0) == 7) {
  ___assert_fail((5804|0),(2888|0),82,(5867|0));
  // unreachable;
 }
 else if ((label|0) == 10) {
  $19 = $i;
  $retval = $19;
  $21 = $retval;
  STACKTOP = sp;return ($21|0);
 }
 else if ((label|0) == 12) {
  $retval = -1;
  $21 = $retval;
  STACKTOP = sp;return ($21|0);
 }
 return (0)|0;
}
function _parserVariableStore($self,$variable,$read_loc) {
 $self = $self|0;
 $variable = $variable|0;
 $read_loc = $read_loc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $call = 0, $cmp = 0, $cmp2 = 0, $conv = 0, $conv10 = 0, $conv12 = 0, $conv14 = 0, $conv16 = 0, $conv18 = 0, $fn_builder = 0, $fn_builder11 = 0, $fn_builder13 = 0, $fn_builder17 = 0, $fn_builder9 = 0, $location = 0, $location15 = 0, $location7 = 0, $module_expr = 0, $read_loc$addr = 0, $self$addr = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self$addr = $self;
 $read_loc$addr = $read_loc;
 $location = ((($variable)) + 4|0);
 $0 = HEAP16[$location>>1]|0;
 $conv = $0&65535;
 $cmp = ($conv|0)!=(65535);
 if (!($cmp)) {
  ___assert_fail((6359|0),(2771|0),1658,(6404|0));
  // unreachable;
 }
 $1 = $read_loc$addr;
 $cmp2 = ($1|0)!=(65535);
 if (!($cmp2)) {
  ___assert_fail((6424|0),(2771|0),1659,(6404|0));
  // unreachable;
 }
 $2 = HEAP32[$variable>>2]|0;
 switch ($2|0) {
 case 0:  {
  $3 = $self$addr;
  $fn_builder = ((($3)) + 28|0);
  $4 = HEAP32[$fn_builder>>2]|0;
  $location7 = ((($variable)) + 4|0);
  $5 = HEAP16[$location7>>1]|0;
  $6 = $read_loc$addr;
  _bfVMFunctionBuilder_addInstABx($4,2,$5,$6);
  STACKTOP = sp;return;
  break;
 }
 case 1:  {
  $7 = $self$addr;
  $fn_builder9 = ((($7)) + 28|0);
  $8 = HEAP32[$fn_builder9>>2]|0;
  $call = (_bfVMFunctionBuilder_pushTemp($8,1)|0);
  $conv10 = $call&65535;
  $module_expr = $conv10;
  $9 = $self$addr;
  $fn_builder11 = ((($9)) + 28|0);
  $10 = HEAP32[$fn_builder11>>2]|0;
  $11 = $module_expr;
  $conv12 = $11&65535;
  _bfVMFunctionBuilder_addInstABx($10,1,$conv12,3);
  $12 = $self$addr;
  $fn_builder13 = ((($12)) + 28|0);
  $13 = HEAP32[$fn_builder13>>2]|0;
  $14 = $module_expr;
  $conv14 = $14&65535;
  $location15 = ((($variable)) + 4|0);
  $15 = HEAP16[$location15>>1]|0;
  $16 = $read_loc$addr;
  $conv16 = $16&65535;
  _bfVMFunctionBuilder_addInstABC($13,3,$conv14,$15,$conv16);
  $17 = $self$addr;
  $fn_builder17 = ((($17)) + 28|0);
  $18 = HEAP32[$fn_builder17>>2]|0;
  $19 = $module_expr;
  $conv18 = $19&65535;
  _bfVMFunctionBuilder_popTemp($18,$conv18);
  STACKTOP = sp;return;
  break;
 }
 default: {
  ___assert_fail((6460|0),(2771|0),1685,(6404|0));
  // unreachable;
 }
 }
}
function _bfVMFunctionBuilder_addInstABC($self,$op,$a,$b,$c) {
 $self = $self|0;
 $op = $op|0;
 $a = $a|0;
 $b = $b|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $a$addr = 0, $and = 0, $and1 = 0, $and3 = 0, $and7 = 0, $b$addr = 0, $c$addr = 0, $call = 0, $conv = 0, $conv2 = 0, $conv6 = 0, $op$addr = 0, $or = 0, $or5 = 0, $or9 = 0;
 var $self$addr = 0, $shl = 0, $shl4 = 0, $shl8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self$addr = $self;
 $op$addr = $op;
 $a$addr = $a;
 $b$addr = $b;
 $c$addr = $c;
 $0 = $op$addr;
 $and = $0 & 31;
 $1 = $a$addr;
 $conv = $1&65535;
 $and1 = $conv & 511;
 $shl = $and1 << 5;
 $or = $and | $shl;
 $2 = $b$addr;
 $conv2 = $2&65535;
 $and3 = $conv2 & 511;
 $shl4 = $and3 << 14;
 $or5 = $or | $shl4;
 $3 = $c$addr;
 $conv6 = $3&65535;
 $and7 = $conv6 & 511;
 $shl8 = $and7 << 23;
 $or9 = $or5 | $shl8;
 $4 = $self$addr;
 $call = (_bfVMFunctionBuilder_addInst($4)|0);
 HEAP32[$call>>2] = $or9;
 STACKTOP = sp;return;
}
function _bfVMFunctionBuilder_addInst($self) {
 $self = $self|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $call = 0, $call1 = 0, $conv = 0, $current_line_no = 0, $instructions = 0, $lexer = 0, $line_to_code = 0, $self$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self$addr = $self;
 $0 = $self$addr;
 $lexer = ((($0)) + 32|0);
 $1 = HEAP32[$lexer>>2]|0;
 $current_line_no = ((($1)) + 20|0);
 $2 = HEAP32[$current_line_no>>2]|0;
 $conv = $2&65535;
 $3 = $self$addr;
 $line_to_code = ((($3)) + 24|0);
 $call = (_Array_emplace($line_to_code)|0);
 HEAP16[$call>>1] = $conv;
 $4 = $self$addr;
 $instructions = ((($4)) + 20|0);
 $call1 = (_Array_emplace($instructions)|0);
 STACKTOP = sp;return ($call1|0);
}
function _bfVMFunctionBuilder_addInstAsBx($self,$op,$a,$sbx) {
 $self = $self|0;
 $op = $op|0;
 $a = $a|0;
 $sbx = $sbx|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $a$addr = 0, $add = 0, $and = 0, $and1 = 0, $and2 = 0, $call = 0, $conv = 0, $op$addr = 0, $or = 0, $or4 = 0, $sbx$addr = 0, $self$addr = 0, $shl = 0, $shl3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self$addr = $self;
 $op$addr = $op;
 $a$addr = $a;
 $sbx$addr = $sbx;
 $0 = $op$addr;
 $and = $0 & 31;
 $1 = $a$addr;
 $conv = $1&65535;
 $and1 = $conv & 511;
 $shl = $and1 << 5;
 $or = $and | $shl;
 $2 = $sbx$addr;
 $add = (($2) + 131071)|0;
 $and2 = $add & 262143;
 $shl3 = $and2 << 14;
 $or4 = $or | $shl3;
 $3 = $self$addr;
 $call = (_bfVMFunctionBuilder_addInst($3)|0);
 HEAP32[$call>>2] = $or4;
 STACKTOP = sp;return;
}
function _parserPatchJumpHelper($self,$jump_idx,$cond_var,$jump_amt,$if_not) {
 $self = $self|0;
 $jump_idx = $jump_idx|0;
 $cond_var = $cond_var|0;
 $jump_amt = $jump_amt|0;
 $if_not = $if_not|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0, $add5 = 0, $and = 0, $and1 = 0, $and2 = 0, $and6 = 0, $cmp = 0, $cond = 0;
 var $cond_var$addr = 0, $fn_builder = 0, $if_not$addr = 0, $inst = 0, $instructions = 0, $jump_amt$addr = 0, $jump_idx$addr = 0, $or = 0, $or4 = 0, $or8 = 0, $self$addr = 0, $shl = 0, $shl3 = 0, $shl7 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $self$addr = $self;
 $jump_idx$addr = $jump_idx;
 $cond_var$addr = $cond_var;
 $jump_amt$addr = $jump_amt;
 $if_not$addr = $if_not;
 $0 = $self$addr;
 $fn_builder = ((($0)) + 28|0);
 $1 = HEAP32[$fn_builder>>2]|0;
 $instructions = ((($1)) + 20|0);
 $2 = HEAP32[$instructions>>2]|0;
 $3 = $jump_idx$addr;
 $add$ptr = (($2) + ($3<<2)|0);
 $inst = $add$ptr;
 $4 = $cond_var$addr;
 $cmp = ($4|0)==(65535);
 if ($cmp) {
  $5 = $jump_amt$addr;
  $add = (($5) + 131071)|0;
  $and = $add & 262143;
  $shl = $and << 14;
  $or = 22 | $shl;
  $6 = $inst;
  HEAP32[$6>>2] = $or;
  STACKTOP = sp;return;
 } else {
  $7 = $if_not$addr;
  $tobool = ($7|0)!=(0);
  $cond = $tobool ? 24 : 23;
  $and1 = $cond & 31;
  $8 = $cond_var$addr;
  $and2 = $8 & 511;
  $shl3 = $and2 << 5;
  $or4 = $and1 | $shl3;
  $9 = $jump_amt$addr;
  $add5 = (($9) + 131071)|0;
  $and6 = $add5 & 262143;
  $shl7 = $and6 << 14;
  $or8 = $or4 | $shl7;
  $10 = $inst;
  HEAP32[$10>>2] = $or8;
  STACKTOP = sp;return;
 }
}
function _bfVM_createClass($self,$module,$name,$base_clz,$extra_data) {
 $self = $self|0;
 $module = $module|0;
 $name = $name|0;
 $base_clz = $base_clz|0;
 $extra_data = $extra_data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $base_clz$addr = 0, $base_clz4 = 0, $call = 0, $call1 = 0, $call2 = 0, $call6 = 0, $call7 = 0;
 var $clz = 0, $extra_data$addr = 0, $extra_data8 = 0, $field_initializers = 0, $finalizer = 0, $module$addr = 0, $module5 = 0, $name3 = 0, $self$addr = 0, $symbols = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $self$addr = $self;
 $module$addr = $module;
 $base_clz$addr = $base_clz;
 $extra_data$addr = $extra_data;
 $0 = $self$addr;
 $call = (_allocObj($0,40,2)|0);
 $clz = $call;
 $1 = HEAP32[$name>>2]|0;
 $call1 = (_bfStringRange_length($name)|0);
 $call2 = (_String_newLen($1,$call1)|0);
 $2 = $clz;
 $name3 = ((($2)) + 12|0);
 HEAP32[$name3>>2] = $call2;
 $3 = $base_clz$addr;
 $4 = $clz;
 $base_clz4 = ((($4)) + 16|0);
 HEAP32[$base_clz4>>2] = $3;
 $5 = $module$addr;
 $6 = $clz;
 $module5 = ((($6)) + 20|0);
 HEAP32[$module5>>2] = $5;
 $call6 = (__ArrayT_new(16,32)|0);
 $7 = $clz;
 $symbols = ((($7)) + 24|0);
 HEAP32[$symbols>>2] = $call6;
 $call7 = (__ArrayT_new(16,32)|0);
 $8 = $clz;
 $field_initializers = ((($8)) + 28|0);
 HEAP32[$field_initializers>>2] = $call7;
 $9 = $extra_data$addr;
 $10 = $clz;
 $extra_data8 = ((($10)) + 32|0);
 HEAP32[$extra_data8>>2] = $9;
 $11 = $clz;
 $finalizer = ((($11)) + 36|0);
 HEAP32[$finalizer>>2] = 0;
 $12 = $clz;
 STACKTOP = sp;return ($12|0);
}
function _parseClassVarDecl($self,$clz,$is_static) {
 $self = $self|0;
 $clz = $clz|0;
 $is_static = $is_static|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $as = 0, $call14 = 0, $call15 = 0, $call2 = 0, $call3 = 0, $clz$addr = 0, $current_token = 0, $current_token7 = 0, $field_initializers = 0;
 var $initial_value = 0, $is_static$addr = 0, $name_str = 0, $name_str$byval_copy = 0, $name_str$byval_copy1 = 0, $self$addr = 0, $symbol = 0, $symbols = 0, $symbols17 = 0, $tobool = 0, $tobool10 = 0, $tobool4 = 0, $value = 0, $var_init = 0, $vararg_buffer = 0, $vm = 0, $vm16 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $name_str$byval_copy1 = sp + 56|0;
 $name_str$byval_copy = sp + 48|0;
 $vararg_buffer = sp + 8|0;
 $name_str = sp + 24|0;
 $initial_value = sp;
 $self$addr = $self;
 $clz$addr = $clz;
 $is_static$addr = $is_static;
 $0 = $self$addr;
 $current_token = ((($0)) + 8|0);
 $as = ((($current_token)) + 8|0);
 ;HEAP32[$name_str>>2]=HEAP32[$as>>2]|0;HEAP32[$name_str+4>>2]=HEAP32[$as+4>>2]|0;
 $1 = $self$addr;
 (_bfParser_eat($1,20,0,7065)|0);
 $2 = (_bfVMValue_fromNull()|0);
 $3 = (getTempRet0() | 0);
 $4 = $initial_value;
 $5 = $4;
 HEAP32[$5>>2] = $2;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = $3;
 $8 = $self$addr;
 $call2 = (_bfParser_match($8,10)|0);
 $tobool = ($call2|0)!=(0);
 do {
  if ($tobool) {
   $9 = $self$addr;
   $call3 = (_parserIsConstexpr($9)|0);
   $tobool4 = ($call3|0)!=(0);
   $10 = $self$addr;
   if ($tobool4) {
    $11 = (_parserConstexprValue($10)|0);
    $12 = (getTempRet0() | 0);
    $13 = $initial_value;
    $14 = $13;
    HEAP32[$14>>2] = $11;
    $15 = (($13) + 4)|0;
    $16 = $15;
    HEAP32[$16>>2] = $12;
    $17 = $self$addr;
    $18 = $self$addr;
    $current_token7 = ((($18)) + 8|0);
    $19 = HEAP32[$current_token7>>2]|0;
    (_bfParser_match($17,$19)|0);
    break;
   } else {
    _bfEmitError($10,7098,$vararg_buffer);
    break;
   }
  }
 } while(0);
 $20 = $is_static$addr;
 $tobool10 = ($20|0)!=(0);
 if ($tobool10) {
  $21 = $clz$addr;
  $symbols = ((($21)) + 24|0);
  $22 = $self$addr;
  $vm = ((($22)) + 40|0);
  $23 = HEAP32[$vm>>2]|0;
  $24 = $initial_value;
  $25 = $24;
  $26 = HEAP32[$25>>2]|0;
  $27 = (($24) + 4)|0;
  $28 = $27;
  $29 = HEAP32[$28>>2]|0;
  ;HEAP32[$name_str$byval_copy>>2]=HEAP32[$name_str>>2]|0;HEAP32[$name_str$byval_copy+4>>2]=HEAP32[$name_str+4>>2]|0;
  (_bfVM_xSetVariable($symbols,$23,$name_str$byval_copy,$26,$29)|0);
  $49 = $self$addr;
  (_bfParser_eat($49,8,0,7150)|0);
  STACKTOP = sp;return;
 } else {
  $30 = $self$addr;
  ;HEAP32[$name_str$byval_copy1>>2]=HEAP32[$name_str>>2]|0;HEAP32[$name_str$byval_copy1+4>>2]=HEAP32[$name_str+4>>2]|0;
  $call14 = (_parserGetSymbol($30,$name_str$byval_copy1)|0);
  $symbol = $call14;
  $31 = $clz$addr;
  $field_initializers = ((($31)) + 28|0);
  $call15 = (_Array_emplace($field_initializers)|0);
  $var_init = $call15;
  $32 = $self$addr;
  $vm16 = ((($32)) + 40|0);
  $33 = HEAP32[$vm16>>2]|0;
  $symbols17 = ((($33)) + 12|0);
  $34 = HEAP32[$symbols17>>2]|0;
  $35 = $symbol;
  $arrayidx = (($34) + ($35<<2)|0);
  $36 = HEAP32[$arrayidx>>2]|0;
  $37 = $var_init;
  HEAP32[$37>>2] = $36;
  $38 = $initial_value;
  $39 = $38;
  $40 = HEAP32[$39>>2]|0;
  $41 = (($38) + 4)|0;
  $42 = $41;
  $43 = HEAP32[$42>>2]|0;
  $44 = $var_init;
  $value = ((($44)) + 8|0);
  $45 = $value;
  $46 = $45;
  HEAP32[$46>>2] = $40;
  $47 = (($45) + 4)|0;
  $48 = $47;
  HEAP32[$48>>2] = $43;
  $49 = $self$addr;
  (_bfParser_eat($49,8,0,7150)|0);
  STACKTOP = sp;return;
 }
}
function _parseClassFunc($self,$clz,$is_static) {
 $self = $self|0;
 $clz = $clz|0;
 $is_static = $is_static|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $add = 0, $arity = 0, $call2 = 0, $call3 = 0, $clz$addr = 0, $current_module = 0, $fn = 0, $fn_builder = 0, $is_static$addr = 0, $lnot = 0, $lnot$ext = 0, $name_str = 0, $name_str$byval_copy = 0, $self$addr = 0, $symbols = 0, $tobool = 0, $tobool1 = 0, $vm = 0, $vm4 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $name_str$byval_copy = sp + 32|0;
 $name_str = sp + 8|0;
 $self$addr = $self;
 $clz$addr = $clz;
 $is_static$addr = $is_static;
 $0 = $self$addr;
 _parserBeginFunction($name_str,$0,1);
 $1 = $is_static$addr;
 $tobool = ($1|0)!=(0);
 $lnot = $tobool ^ 1;
 $lnot$ext = $lnot&1;
 $arity = $lnot$ext;
 $2 = $is_static$addr;
 $tobool1 = ($2|0)!=(0);
 if (!($tobool1)) {
  $3 = $self$addr;
  $fn_builder = ((($3)) + 28|0);
  $4 = HEAP32[$fn_builder>>2]|0;
  (_bfVMFunctionBuilder_declVariable($4,7060,4)|0);
 }
 $5 = $self$addr;
 $call2 = (_parserParseFunction($5)|0);
 $6 = $arity;
 $add = (($6) + ($call2))|0;
 $arity = $add;
 $7 = $self$addr;
 $vm = ((($7)) + 40|0);
 $8 = HEAP32[$vm>>2]|0;
 $9 = $self$addr;
 $current_module = ((($9)) + 32|0);
 $10 = HEAP32[$current_module>>2]|0;
 $call3 = (_bfVM_createFunction($8,$10)|0);
 $fn = $call3;
 $11 = $clz$addr;
 $symbols = ((($11)) + 24|0);
 $12 = $self$addr;
 $vm4 = ((($12)) + 40|0);
 $13 = HEAP32[$vm4>>2]|0;
 $14 = $fn;
 $15 = (_bfVMValue_fromPointer($14)|0);
 $16 = (getTempRet0() | 0);
 ;HEAP32[$name_str$byval_copy>>2]=HEAP32[$name_str>>2]|0;HEAP32[$name_str$byval_copy+4>>2]=HEAP32[$name_str+4>>2]|0;
 (_bfVM_xSetVariable($symbols,$13,$name_str$byval_copy,$15,$16)|0);
 $17 = $self$addr;
 $18 = $fn;
 $19 = $arity;
 _parserEndFunction($17,$18,$19);
 STACKTOP = sp;return;
}
function _parserIsConstexpr($self) {
 $self = $self|0;
 var $$off = 0, $0 = 0, $1 = 0, $2 = 0, $current_token = 0, $retval = 0, $self$addr = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self$addr = $self;
 $0 = $self$addr;
 $current_token = ((($0)) + 8|0);
 $1 = HEAP32[$current_token>>2]|0;
 $$off = (($1) + -40)|0;
 $switch = ($$off>>>0)<(4);
 if ($switch) {
  $retval = 1;
  $2 = $retval;
  STACKTOP = sp;return ($2|0);
 } else {
  $retval = 0;
  $2 = $retval;
  STACKTOP = sp;return ($2|0);
 }
 return (0)|0;
}
function _parserConstexprValue($self) {
 $self = $self|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $current_token = 0, $self$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self$addr = $self;
 $0 = $self$addr;
 $1 = $self$addr;
 $current_token = ((($1)) + 8|0);
 $2 = (_parserTokenConstexprValue($0,$current_token)|0);
 $3 = (getTempRet0() | 0);
 setTempRet0(($3) | 0);
 STACKTOP = sp;return ($2|0);
}
function _parserGetSymbol($self,$name) {
 $self = $self|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $call = 0, $name$byval_copy = 0, $self$addr = 0, $vm = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $name$byval_copy = sp + 8|0;
 $self$addr = $self;
 $0 = $self$addr;
 $vm = ((($0)) + 40|0);
 $1 = HEAP32[$vm>>2]|0;
 ;HEAP32[$name$byval_copy>>2]=HEAP32[$name>>2]|0;HEAP32[$name$byval_copy+4>>2]=HEAP32[$name+4>>2]|0;
 $call = (_bfVM_getSymbol($1,$name$byval_copy)|0);
 STACKTOP = sp;return ($call|0);
}
function _parserTokenConstexprValue($self,$token) {
 $self = $self|0;
 $token = $token|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $as = 0, $as2 = 0, $as6 = 0, $call7 = 0, $cmp = 0, $conv = 0, $conv3 = 0, $retval = 0, $self$addr = 0, $str_range$byval_copy = 0, $token$addr = 0, $vm = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $str_range$byval_copy = sp + 16|0;
 $retval = sp;
 $self$addr = $self;
 $token$addr = $token;
 $0 = $token$addr;
 $1 = HEAP32[$0>>2]|0;
 switch ($1|0) {
 case 41:  {
  $2 = $token$addr;
  $as = ((($2)) + 8|0);
  $3 = +HEAPF64[$as>>3];
  $4 = (_bfVMValue_fromNumber($3)|0);
  $5 = (getTempRet0() | 0);
  $6 = $retval;
  $7 = $6;
  HEAP32[$7>>2] = $4;
  $8 = (($6) + 4)|0;
  $9 = $8;
  HEAP32[$9>>2] = $5;
  break;
 }
 case 42:  {
  $10 = $token$addr;
  $as2 = ((($10)) + 8|0);
  $11 = HEAP32[$as2>>2]|0;
  $12 = HEAP8[$11>>0]|0;
  $conv = $12 << 24 >> 24;
  $cmp = ($conv|0)==(116);
  $conv3 = $cmp&1;
  $13 = (_bfVMValue_fromBool($conv3)|0);
  $14 = (getTempRet0() | 0);
  $15 = $retval;
  $16 = $15;
  HEAP32[$16>>2] = $13;
  $17 = (($15) + 4)|0;
  $18 = $17;
  HEAP32[$18>>2] = $14;
  break;
 }
 case 40:  {
  $19 = $self$addr;
  $vm = ((($19)) + 40|0);
  $20 = HEAP32[$vm>>2]|0;
  $21 = $token$addr;
  $as6 = ((($21)) + 8|0);
  ;HEAP32[$str_range$byval_copy>>2]=HEAP32[$as6>>2]|0;HEAP32[$str_range$byval_copy+4>>2]=HEAP32[$as6+4>>2]|0;
  $call7 = (_bfVM_createString($20,$str_range$byval_copy)|0);
  $22 = (_bfVMValue_fromPointer($call7)|0);
  $23 = (getTempRet0() | 0);
  $24 = $retval;
  $25 = $24;
  HEAP32[$25>>2] = $22;
  $26 = (($24) + 4)|0;
  $27 = $26;
  HEAP32[$27>>2] = $23;
  break;
 }
 case 43:  {
  $28 = (_bfVMValue_fromNull()|0);
  $29 = (getTempRet0() | 0);
  $30 = $retval;
  $31 = $30;
  HEAP32[$31>>2] = $28;
  $32 = (($30) + 4)|0;
  $33 = $32;
  HEAP32[$33>>2] = $29;
  break;
 }
 default: {
  ___assert_fail((7198|0),(2771|0),1287,(7253|0));
  // unreachable;
 }
 }
 $34 = $retval;
 $35 = $34;
 $36 = HEAP32[$35>>2]|0;
 $37 = (($34) + 4)|0;
 $38 = $37;
 $39 = HEAP32[$38>>2]|0;
 setTempRet0(($39) | 0);
 STACKTOP = sp;return ($36|0);
}
function _typeToRule($agg$result,$type) {
 $agg$result = $agg$result|0;
 $type = $type|0;
 var $0 = 0, $1 = 0, $arrayidx = 0, $cmp = 0, $type$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $type$addr = $type;
 $0 = $type$addr;
 $cmp = ($0>>>0)<(51);
 if ($cmp) {
  $1 = $type$addr;
  $arrayidx = (464 + (($1*12)|0)|0);
  ;HEAP32[$agg$result>>2]=HEAP32[$arrayidx>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$arrayidx+4>>2]|0;HEAP32[$agg$result+8>>2]=HEAP32[$arrayidx+8>>2]|0;
  STACKTOP = sp;return;
 } else {
  ___assert_fail((7967|0),(2771|0),354,(8029|0));
  // unreachable;
 }
}
function _parseGroup($self,$expr_info,$token) {
 $self = $self|0;
 $expr_info = $expr_info|0;
 $token = $token|0;
 var $0 = 0, $1 = 0, $2 = 0, $expr_info$addr = 0, $self$addr = 0, $token$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self$addr = $self;
 $expr_info$addr = $expr_info;
 $token$addr = $token;
 $0 = $self$addr;
 $1 = $expr_info$addr;
 _parseExpr($0,$1,0);
 $2 = $self$addr;
 (_bfParser_eat($2,1,0,7914)|0);
 STACKTOP = sp;return;
}
function _parseCall($self,$expr,$lhs,$token,$prec) {
 $self = $self|0;
 $expr = $expr|0;
 $lhs = $lhs|0;
 $token = $token|0;
 $prec = $prec|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0;
 var $cmp = 0, $cmp6 = 0, $cond = 0, $conv = 0, $conv2 = 0, $conv3 = 0, $expr$addr = 0, $fn_builder = 0, $fn_builder9 = 0, $function_loc = 0, $function_var = 0, $function_var$byval_copy = 0, $lhs$addr = 0, $location = 0, $prec$addr = 0, $real_function_loc = 0, $return_var = 0, $return_var$byval_copy = 0, $self$addr = 0, $token$addr = 0;
 var $var = 0, $var1 = 0, $var4 = 0, $var8 = 0, $var8$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $return_var$byval_copy = sp + 56|0;
 $function_var$byval_copy = sp + 48|0;
 $var8$byval_copy = sp + 40|0;
 $function_var = sp + 8|0;
 $return_var = sp;
 $self$addr = $self;
 $expr$addr = $expr;
 $lhs$addr = $lhs;
 $token$addr = $token;
 $prec$addr = $prec;
 $0 = $self$addr;
 $fn_builder = ((($0)) + 28|0);
 $1 = HEAP32[$fn_builder>>2]|0;
 $call = (_bfVMFunctionBuilder_pushTemp($1,1)|0);
 $function_loc = $call;
 $2 = $lhs$addr;
 $var = ((($2)) + 24|0);
 $3 = HEAP32[$var>>2]|0;
 $cmp = ($3|0)==(0);
 if ($cmp) {
  $4 = $lhs$addr;
  $var1 = ((($4)) + 24|0);
  $location = ((($var1)) + 4|0);
  $5 = HEAP16[$location>>1]|0;
  $conv = $5&65535;
  $cond = $conv;
 } else {
  $6 = $function_loc;
  $conv2 = $6&65535;
  $cond = $conv2;
 }
 $conv3 = $cond&65535;
 $real_function_loc = $conv3;
 $7 = $lhs$addr;
 $var4 = ((($7)) + 24|0);
 $8 = HEAP32[$var4>>2]|0;
 $cmp6 = ($8|0)!=(0);
 if ($cmp6) {
  $9 = $self$addr;
  $10 = $lhs$addr;
  $var8 = ((($10)) + 24|0);
  $11 = $function_loc;
  ;HEAP32[$var8$byval_copy>>2]=HEAP32[$var8>>2]|0;HEAP32[$var8$byval_copy+4>>2]=HEAP32[$var8+4>>2]|0;
  _parserVariableLoad($9,$var8$byval_copy,$11);
 }
 $12 = $real_function_loc;
 _parserVariableMakeTemp($function_var,$12);
 $13 = $expr$addr;
 $14 = HEAP16[$13>>1]|0;
 _parserVariableMakeTemp($return_var,$14);
 $15 = $self$addr;
 ;HEAP32[$function_var$byval_copy>>2]=HEAP32[$function_var>>2]|0;HEAP32[$function_var$byval_copy+4>>2]=HEAP32[$function_var+4>>2]|0;
 ;HEAP32[$return_var$byval_copy>>2]=HEAP32[$return_var>>2]|0;HEAP32[$return_var$byval_copy+4>>2]=HEAP32[$return_var+4>>2]|0;
 _parserFinishCall($15,$function_var$byval_copy,$return_var$byval_copy,65535);
 $16 = $self$addr;
 $fn_builder9 = ((($16)) + 28|0);
 $17 = HEAP32[$fn_builder9>>2]|0;
 $18 = $function_loc;
 _bfVMFunctionBuilder_popTemp($17,$18);
 STACKTOP = sp;return;
}
function _parseSubscript($self,$expr,$lhs,$token,$prec) {
 $self = $self|0;
 $expr = $expr|0;
 $lhs = $lhs|0;
 $token = $token|0;
 $prec = $prec|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0, $add3 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp15 = 0;
 var $agg$tmp15$byval_copy = 0, $and = 0, $and19 = 0, $and20 = 0, $call = 0, $call12 = 0, $call14 = 0, $call16 = 0, $call22 = 0, $call5 = 0, $call7 = 0, $conv = 0, $conv1 = 0, $conv11 = 0, $conv2 = 0, $conv24 = 0, $conv26 = 0, $conv4 = 0, $conv9 = 0, $expr$addr = 0;
 var $fn_builder = 0, $fn_builder10 = 0, $fn_builder17 = 0, $fn_builder21 = 0, $fn_builder23 = 0, $fn_builder25 = 0, $fn_builder27 = 0, $fn_builder6 = 0, $fn_builder8 = 0, $inc = 0, $inst = 0, $instructions = 0, $instructions18 = 0, $lhs$addr = 0, $load_sym_inst = 0, $num_args = 0, $or = 0, $param_expr = 0, $param_loc = 0, $prec$addr = 0;
 var $self$addr = 0, $self_loc = 0, $shl = 0, $subscript_assign_sym = 0, $subscript_op_loc = 0, $subscript_sym = 0, $temp_first = 0, $tobool = 0, $token$addr = 0, $var = 0, $var$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $agg$tmp15$byval_copy = sp + 112|0;
 $var$byval_copy = sp + 104|0;
 $agg$tmp$byval_copy = sp + 96|0;
 $agg$tmp = sp + 64|0;
 $agg$tmp15 = sp + 40|0;
 $param_expr = sp;
 $self$addr = $self;
 $expr$addr = $expr;
 $lhs$addr = $lhs;
 $token$addr = $token;
 $prec$addr = $prec;
 $0 = $self$addr;
 $fn_builder = ((($0)) + 28|0);
 $1 = HEAP32[$fn_builder>>2]|0;
 $call = (_bfVMFunctionBuilder_pushTemp($1,3)|0);
 $subscript_op_loc = $call;
 $2 = $subscript_op_loc;
 $conv = $2&65535;
 $add = (($conv) + 1)|0;
 $conv1 = $add&65535;
 $self_loc = $conv1;
 $3 = $subscript_op_loc;
 $conv2 = $3&65535;
 $add3 = (($conv2) + 2)|0;
 $conv4 = $add3&65535;
 $temp_first = $conv4;
 $4 = $self$addr;
 _bfMakeStringRangeC($agg$tmp,6139);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 $call5 = (_parserGetSymbol($4,$agg$tmp$byval_copy)|0);
 $subscript_sym = $call5;
 $num_args = 1;
 $5 = $self$addr;
 $6 = $expr$addr;
 $var = ((($6)) + 24|0);
 $7 = $self_loc;
 ;HEAP32[$var$byval_copy>>2]=HEAP32[$var>>2]|0;HEAP32[$var$byval_copy+4>>2]=HEAP32[$var+4>>2]|0;
 _parserVariableLoad($5,$var$byval_copy,$7);
 $8 = $self$addr;
 $fn_builder6 = ((($8)) + 28|0);
 $9 = HEAP32[$fn_builder6>>2]|0;
 $instructions = ((($9)) + 20|0);
 $call7 = (_Array_size($instructions)|0);
 $load_sym_inst = $call7;
 $10 = $self$addr;
 $fn_builder8 = ((($10)) + 28|0);
 $11 = HEAP32[$fn_builder8>>2]|0;
 $12 = $subscript_op_loc;
 $13 = $self_loc;
 $14 = $subscript_sym;
 $conv9 = $14&65535;
 _bfVMFunctionBuilder_addInstABC($11,0,$12,$13,$conv9);
 $15 = $self$addr;
 $fn_builder10 = ((($15)) + 28|0);
 $16 = HEAP32[$fn_builder10>>2]|0;
 $17 = $temp_first;
 $18 = $self_loc;
 $conv11 = $18&65535;
 _bfVMFunctionBuilder_addInstABx($16,2,$17,$conv11);
 $19 = $self$addr;
 $20 = $temp_first;
 $21 = $num_args;
 $call12 = (_parserCallArgs($19,$20,$21,3)|0);
 $num_args = $call12;
 $22 = $self$addr;
 (_bfParser_eat($22,3,0,7863)|0);
 $23 = $self$addr;
 $call14 = (_bfParser_match($23,10)|0);
 $tobool = ($call14|0)!=(0);
 if (!($tobool)) {
  $41 = $self$addr;
  $fn_builder23 = ((($41)) + 28|0);
  $42 = HEAP32[$fn_builder23>>2]|0;
  $43 = $temp_first;
  $44 = $subscript_op_loc;
  $45 = $num_args;
  $conv24 = $45&65535;
  _bfVMFunctionBuilder_addInstABC($42,21,$43,$44,$conv24);
  $46 = $self$addr;
  $fn_builder25 = ((($46)) + 28|0);
  $47 = HEAP32[$fn_builder25>>2]|0;
  $48 = $expr$addr;
  $49 = HEAP16[$48>>1]|0;
  $50 = $temp_first;
  $conv26 = $50&65535;
  _bfVMFunctionBuilder_addInstABx($47,2,$49,$conv26);
  $51 = $self$addr;
  $fn_builder27 = ((($51)) + 28|0);
  $52 = HEAP32[$fn_builder27>>2]|0;
  $53 = $subscript_op_loc;
  _bfVMFunctionBuilder_popTemp($52,$53);
  STACKTOP = sp;return;
 }
 $24 = $self$addr;
 _bfMakeStringRangeC($agg$tmp15,6206);
 ;HEAP32[$agg$tmp15$byval_copy>>2]=HEAP32[$agg$tmp15>>2]|0;HEAP32[$agg$tmp15$byval_copy+4>>2]=HEAP32[$agg$tmp15+4>>2]|0;
 $call16 = (_parserGetSymbol($24,$agg$tmp15$byval_copy)|0);
 $subscript_assign_sym = $call16;
 $25 = $self$addr;
 $fn_builder17 = ((($25)) + 28|0);
 $26 = HEAP32[$fn_builder17>>2]|0;
 $instructions18 = ((($26)) + 20|0);
 $27 = HEAP32[$instructions18>>2]|0;
 $28 = $load_sym_inst;
 $add$ptr = (($27) + ($28<<2)|0);
 $inst = $add$ptr;
 $29 = $inst;
 $30 = HEAP32[$29>>2]|0;
 $and = $30 & -32;
 $31 = $inst;
 HEAP32[$31>>2] = $and;
 $32 = $inst;
 $33 = HEAP32[$32>>2]|0;
 $and19 = $33 & 8388607;
 $34 = $subscript_assign_sym;
 $and20 = $34 & 511;
 $shl = $and20 << 23;
 $or = $and19 | $shl;
 $35 = $inst;
 HEAP32[$35>>2] = $or;
 $36 = $self$addr;
 $fn_builder21 = ((($36)) + 28|0);
 $37 = HEAP32[$fn_builder21>>2]|0;
 $call22 = (_bfVMFunctionBuilder_pushTemp($37,1)|0);
 $param_loc = $call22;
 $38 = $param_loc;
 _exprMakeTemp($param_expr,$38);
 $39 = $self$addr;
 _parseExpr($39,$param_expr,0);
 $40 = $num_args;
 $inc = (($40) + 1)|0;
 $num_args = $inc;
 $41 = $self$addr;
 $fn_builder23 = ((($41)) + 28|0);
 $42 = HEAP32[$fn_builder23>>2]|0;
 $43 = $temp_first;
 $44 = $subscript_op_loc;
 $45 = $num_args;
 $conv24 = $45&65535;
 _bfVMFunctionBuilder_addInstABC($42,21,$43,$44,$conv24);
 $46 = $self$addr;
 $fn_builder25 = ((($46)) + 28|0);
 $47 = HEAP32[$fn_builder25>>2]|0;
 $48 = $expr$addr;
 $49 = HEAP16[$48>>1]|0;
 $50 = $temp_first;
 $conv26 = $50&65535;
 _bfVMFunctionBuilder_addInstABx($47,2,$49,$conv26);
 $51 = $self$addr;
 $fn_builder27 = ((($51)) + 28|0);
 $52 = HEAP32[$fn_builder27>>2]|0;
 $53 = $subscript_op_loc;
 _bfVMFunctionBuilder_popTemp($52,$53);
 STACKTOP = sp;return;
}
function _parseMethodCall($self,$expr,$lhs,$token,$prec) {
 $self = $self|0;
 $expr = $expr|0;
 $lhs = $lhs|0;
 $token = $token|0;
 $prec = $prec|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $as = 0, $call1 = 0, $call3 = 0, $cmp = 0, $cmp11 = 0, $cond = 0, $conv = 0, $conv15 = 0, $conv17 = 0;
 var $conv2 = 0, $conv6 = 0, $conv7 = 0, $conv8 = 0, $current_token = 0, $expr$addr = 0, $fn_builder = 0, $fn_builder14 = 0, $fn_builder18 = 0, $function_loc = 0, $function_var = 0, $function_var$byval_copy = 0, $lhs$addr = 0, $location = 0, $method_name = 0, $method_name$byval_copy = 0, $prec$addr = 0, $real_var_loc = 0, $return_var = 0, $return_var$byval_copy = 0;
 var $self$addr = 0, $sym = 0, $token$addr = 0, $var = 0, $var13 = 0, $var13$byval_copy = 0, $var5 = 0, $var9 = 0, $var_loc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $return_var$byval_copy = sp + 80|0;
 $function_var$byval_copy = sp + 72|0;
 $var13$byval_copy = sp + 64|0;
 $method_name$byval_copy = sp + 56|0;
 $method_name = sp + 24|0;
 $function_var = sp + 8|0;
 $return_var = sp;
 $self$addr = $self;
 $expr$addr = $expr;
 $lhs$addr = $lhs;
 $token$addr = $token;
 $prec$addr = $prec;
 $0 = $self$addr;
 $current_token = ((($0)) + 8|0);
 $as = ((($current_token)) + 8|0);
 ;HEAP32[$method_name>>2]=HEAP32[$as>>2]|0;HEAP32[$method_name+4>>2]=HEAP32[$as+4>>2]|0;
 $1 = $self$addr;
 (_bfParser_eat($1,20,0,7767)|0);
 $2 = $self$addr;
 $fn_builder = ((($2)) + 28|0);
 $3 = HEAP32[$fn_builder>>2]|0;
 $call1 = (_bfVMFunctionBuilder_pushTemp($3,2)|0);
 $function_loc = $call1;
 $4 = $function_loc;
 $conv = $4&65535;
 $add = (($conv) + 1)|0;
 $conv2 = $add&65535;
 $var_loc = $conv2;
 $5 = $self$addr;
 ;HEAP32[$method_name$byval_copy>>2]=HEAP32[$method_name>>2]|0;HEAP32[$method_name$byval_copy+4>>2]=HEAP32[$method_name+4>>2]|0;
 $call3 = (_parserGetSymbol($5,$method_name$byval_copy)|0);
 $sym = $call3;
 $6 = $lhs$addr;
 $var = ((($6)) + 24|0);
 $7 = HEAP32[$var>>2]|0;
 $cmp = ($7|0)==(0);
 if ($cmp) {
  $8 = $lhs$addr;
  $var5 = ((($8)) + 24|0);
  $location = ((($var5)) + 4|0);
  $9 = HEAP16[$location>>1]|0;
  $conv6 = $9&65535;
  $cond = $conv6;
 } else {
  $10 = $var_loc;
  $conv7 = $10&65535;
  $cond = $conv7;
 }
 $conv8 = $cond&65535;
 $real_var_loc = $conv8;
 $11 = $lhs$addr;
 $var9 = ((($11)) + 24|0);
 $12 = HEAP32[$var9>>2]|0;
 $cmp11 = ($12|0)!=(0);
 if ($cmp11) {
  $13 = $self$addr;
  $14 = $lhs$addr;
  $var13 = ((($14)) + 24|0);
  $15 = $var_loc;
  ;HEAP32[$var13$byval_copy>>2]=HEAP32[$var13>>2]|0;HEAP32[$var13$byval_copy+4>>2]=HEAP32[$var13+4>>2]|0;
  _parserVariableLoad($13,$var13$byval_copy,$15);
 }
 $16 = $self$addr;
 $fn_builder14 = ((($16)) + 28|0);
 $17 = HEAP32[$fn_builder14>>2]|0;
 $18 = $function_loc;
 $19 = $real_var_loc;
 $20 = $sym;
 $conv15 = $20&65535;
 _bfVMFunctionBuilder_addInstABC($17,0,$18,$19,$conv15);
 $21 = $function_loc;
 _parserVariableMakeTemp($function_var,$21);
 $22 = $expr$addr;
 $23 = HEAP16[$22>>1]|0;
 _parserVariableMakeTemp($return_var,$23);
 $24 = $self$addr;
 (_bfParser_eat($24,0,0,7812)|0);
 $25 = $self$addr;
 $26 = $real_var_loc;
 $conv17 = $26&65535;
 ;HEAP32[$function_var$byval_copy>>2]=HEAP32[$function_var>>2]|0;HEAP32[$function_var$byval_copy+4>>2]=HEAP32[$function_var+4>>2]|0;
 ;HEAP32[$return_var$byval_copy>>2]=HEAP32[$return_var>>2]|0;HEAP32[$return_var$byval_copy+4>>2]=HEAP32[$return_var+4>>2]|0;
 _parserFinishCall($25,$function_var$byval_copy,$return_var$byval_copy,$conv17);
 $27 = $self$addr;
 $fn_builder18 = ((($27)) + 28|0);
 $28 = HEAP32[$fn_builder18>>2]|0;
 $29 = $function_loc;
 _bfVMFunctionBuilder_popTemp($28,$29);
 STACKTOP = sp;return;
}
function _parseAssign($self,$expr,$lhs,$token,$prec) {
 $self = $self|0;
 $expr = $expr|0;
 $lhs = $lhs|0;
 $token = $token|0;
 $prec = $prec|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $conv = 0, $expr$addr = 0, $fn_builder = 0, $fn_builder1 = 0, $lhs$addr = 0, $prec$addr = 0, $rhs_expr = 0, $rhs_loc = 0;
 var $self$addr = 0, $token$addr = 0, $var = 0, $var$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $var$byval_copy = sp + 56|0;
 $rhs_expr = sp;
 $self$addr = $self;
 $expr$addr = $expr;
 $lhs$addr = $lhs;
 $token$addr = $token;
 $prec$addr = $prec;
 $0 = $self$addr;
 $fn_builder = ((($0)) + 28|0);
 $1 = HEAP32[$fn_builder>>2]|0;
 $call = (_bfVMFunctionBuilder_pushTemp($1,1)|0);
 $rhs_loc = $call;
 $2 = $rhs_loc;
 _exprMakeTemp($rhs_expr,$2);
 $3 = $self$addr;
 $4 = $prec$addr;
 _parseExpr($3,$rhs_expr,$4);
 $5 = $self$addr;
 $6 = $lhs$addr;
 $var = ((($6)) + 24|0);
 $7 = $rhs_loc;
 $conv = $7&65535;
 ;HEAP32[$var$byval_copy>>2]=HEAP32[$var>>2]|0;HEAP32[$var$byval_copy+4>>2]=HEAP32[$var+4>>2]|0;
 _parserVariableStore($5,$var$byval_copy,$conv);
 $8 = $self$addr;
 $fn_builder1 = ((($8)) + 28|0);
 $9 = HEAP32[$fn_builder1>>2]|0;
 $10 = $rhs_loc;
 _bfVMFunctionBuilder_popTemp($9,$10);
 STACKTOP = sp;return;
}
function _parseBinOp($self,$expr_info,$lhs,$token,$prec) {
 $self = $self|0;
 $expr_info = $expr_info|0;
 $lhs = $lhs|0;
 $token = $token|0;
 $prec = $prec|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $as = 0, $as17 = 0;
 var $bin_op = 0, $call = 0, $call25 = 0, $cmp = 0, $cmp14 = 0, $cmp20 = 0, $cmp23 = 0, $cmp29 = 0, $cmp34 = 0, $cond = 0, $cond16 = 0, $cond26 = 0, $conv = 0, $conv19 = 0, $conv22 = 0, $conv32 = 0, $conv33 = 0, $conv35 = 0, $expr_info$addr = 0, $fn_builder = 0;
 var $fn_builder27 = 0, $fn_builder36 = 0, $inst = 0, $jmp = 0, $lhs$addr = 0, $prec$addr = 0, $rhs_expr = 0, $rhs_loc = 0, $self$addr = 0, $token$addr = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $agg$tmp$byval_copy = sp + 72|0;
 $vararg_buffer = sp + 32|0;
 $rhs_expr = sp;
 $agg$tmp = sp + 40|0;
 $self$addr = $self;
 $expr_info$addr = $expr_info;
 $lhs$addr = $lhs;
 $token$addr = $token;
 $prec$addr = $prec;
 $inst = 12;
 $0 = $token$addr;
 $as = ((($0)) + 8|0);
 $1 = HEAP32[$as>>2]|0;
 $2 = HEAP8[$1>>0]|0;
 $bin_op = $2;
 $3 = $bin_op;
 $conv = $3 << 24 >> 24;
 do {
  switch ($conv|0) {
  case 61:  {
   $inst = 12;
   break;
  }
  case 33:  {
   $inst = 13;
   break;
  }
  case 43:  {
   $inst = 5;
   break;
  }
  case 45:  {
   $inst = 6;
   break;
  }
  case 42:  {
   $inst = 7;
   break;
  }
  case 47:  {
   $inst = 8;
   break;
  }
  case 37:  {
   $inst = 9;
   break;
  }
  case 94:  {
   $inst = 10;
   break;
  }
  case 124:  {
   $inst = 19;
   break;
  }
  case 38:  {
   $inst = 18;
   break;
  }
  case 60:  {
   $4 = $token$addr;
   $5 = HEAP32[$4>>2]|0;
   $cmp = ($5|0)==(30);
   $cond = $cmp ? 15 : 14;
   $inst = $cond;
   break;
  }
  case 62:  {
   $6 = $token$addr;
   $7 = HEAP32[$6>>2]|0;
   $cmp14 = ($7|0)==(31);
   $cond16 = $cmp14 ? 17 : 16;
   $inst = $cond16;
   break;
  }
  default: {
   $8 = $self$addr;
   $9 = $token$addr;
   $as17 = ((($9)) + 8|0);
   $10 = HEAP32[$as17>>2]|0;
   HEAP32[$vararg_buffer>>2] = $10;
   _bfEmitError($8,7739,$vararg_buffer);
  }
  }
 } while(0);
 $11 = $self$addr;
 $fn_builder = ((($11)) + 28|0);
 $12 = HEAP32[$fn_builder>>2]|0;
 $call = (_bfVMFunctionBuilder_pushTemp($12,1)|0);
 $rhs_loc = $call;
 $13 = $rhs_loc;
 _parserVariableMakeTemp($agg$tmp,-1);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 _exprMake($rhs_expr,$13,$agg$tmp$byval_copy);
 $14 = $bin_op;
 $conv19 = $14 << 24 >> 24;
 $cmp20 = ($conv19|0)==(38);
 if ($cmp20) {
  label = 17;
 } else {
  $15 = $bin_op;
  $conv22 = $15 << 24 >> 24;
  $cmp23 = ($conv22|0)==(124);
  if ($cmp23) {
   label = 17;
  } else {
   $cond26 = 65535;
  }
 }
 if ((label|0) == 17) {
  $16 = $self$addr;
  $call25 = (_parserMakeJump($16)|0);
  $cond26 = $call25;
 }
 $jmp = $cond26;
 $17 = $self$addr;
 $18 = $prec$addr;
 _parseExpr($17,$rhs_expr,$18);
 $19 = $self$addr;
 $fn_builder27 = ((($19)) + 28|0);
 $20 = HEAP32[$fn_builder27>>2]|0;
 $21 = $inst;
 $22 = $expr_info$addr;
 $23 = HEAP16[$22>>1]|0;
 $24 = $lhs$addr;
 $25 = HEAP16[$24>>1]|0;
 $26 = $rhs_loc;
 _bfVMFunctionBuilder_addInstABC($20,$21,$23,$25,$26);
 $27 = $jmp;
 $cmp29 = ($27|0)!=(65535);
 if (!($cmp29)) {
  $33 = $self$addr;
  $fn_builder36 = ((($33)) + 28|0);
  $34 = HEAP32[$fn_builder36>>2]|0;
  $35 = $rhs_loc;
  _bfVMFunctionBuilder_popTemp($34,$35);
  STACKTOP = sp;return;
 }
 $28 = $self$addr;
 $29 = $jmp;
 $30 = $expr_info$addr;
 $31 = HEAP16[$30>>1]|0;
 $conv32 = $31&65535;
 $32 = $bin_op;
 $conv33 = $32 << 24 >> 24;
 $cmp34 = ($conv33|0)==(38);
 $conv35 = $cmp34&1;
 _parserPatchJump($28,$29,$conv32,$conv35);
 $33 = $self$addr;
 $fn_builder36 = ((($33)) + 28|0);
 $34 = HEAP32[$fn_builder36>>2]|0;
 $35 = $rhs_loc;
 _bfVMFunctionBuilder_popTemp($34,$35);
 STACKTOP = sp;return;
}
function _parseDotOp($self,$expr,$lhs,$token,$prec) {
 $self = $self|0;
 $expr = $expr|0;
 $lhs = $lhs|0;
 $token = $token|0;
 $prec = $prec|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0;
 var $as = 0, $call = 0, $call10 = 0, $call18 = 0, $call6 = 0, $cmp = 0, $cond = 0, $conv = 0, $conv11 = 0, $conv12 = 0, $conv14 = 0, $current_token = 0, $current_token1 = 0, $expr$addr = 0, $field = 0, $fn_builder = 0, $fn_builder13 = 0, $fn_builder16 = 0, $fn_builder9 = 0, $lhs$addr = 0;
 var $lhs_var = 0, $lhs_var$byval_copy = 0, $location = 0, $prec$addr = 0, $rhs_expr = 0, $rhs_loc = 0, $self$addr = 0, $str_range$byval_copy = 0, $sub = 0, $sym = 0, $tmp = 0, $tobool = 0, $tobool7 = 0, $token$addr = 0, $var = 0, $var5 = 0, $var_loc = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $lhs_var$byval_copy = sp + 128|0;
 $str_range$byval_copy = sp + 120|0;
 $vararg_buffer = sp + 80|0;
 $field = sp + 64|0;
 $lhs_var = sp + 88|0;
 $tmp = sp + 32|0;
 $rhs_expr = sp;
 $self$addr = $self;
 $expr$addr = $expr;
 $lhs$addr = $lhs;
 $token$addr = $token;
 $prec$addr = $prec;
 $0 = $self$addr;
 $current_token = ((($0)) + 8|0);
 $1 = HEAP32[$current_token>>2]|0;
 $cmp = ($1|0)==(20);
 $2 = $self$addr;
 if (!($cmp)) {
  $37 = $token$addr;
  $38 = HEAP32[$37>>2]|0;
  $call18 = (_tokentypeToString($38)|0);
  HEAP32[$vararg_buffer>>2] = $call18;
  _bfEmitError($2,7680,$vararg_buffer);
  STACKTOP = sp;return;
 }
 $current_token1 = ((($2)) + 8|0);
 ;HEAP32[$field>>2]=HEAP32[$current_token1>>2]|0;HEAP32[$field+4>>2]=HEAP32[$current_token1+4>>2]|0;HEAP32[$field+8>>2]=HEAP32[$current_token1+8>>2]|0;HEAP32[$field+12>>2]=HEAP32[$current_token1+12>>2]|0;
 $3 = $self$addr;
 $as = ((($field)) + 8|0);
 ;HEAP32[$str_range$byval_copy>>2]=HEAP32[$as>>2]|0;HEAP32[$str_range$byval_copy+4>>2]=HEAP32[$as+4>>2]|0;
 $call = (_parserGetSymbol($3,$str_range$byval_copy)|0);
 $sym = $call;
 $4 = $self$addr;
 $fn_builder = ((($4)) + 28|0);
 $5 = HEAP32[$fn_builder>>2]|0;
 $6 = $expr$addr;
 $7 = HEAP16[$6>>1]|0;
 $8 = $lhs$addr;
 $9 = HEAP16[$8>>1]|0;
 $10 = $sym;
 $conv = $10&65535;
 _bfVMFunctionBuilder_addInstABC($5,0,$7,$9,$conv);
 $11 = $lhs$addr;
 $var = ((($11)) + 24|0);
 ;HEAP32[$lhs_var>>2]=HEAP32[$var>>2]|0;HEAP32[$lhs_var+4>>2]=HEAP32[$var+4>>2]|0;
 $12 = $expr$addr;
 $13 = $expr$addr;
 $14 = HEAP16[$13>>1]|0;
 _exprMakeTemp($tmp,$14);
 ;HEAP32[$12>>2]=HEAP32[$tmp>>2]|0;HEAP32[$12+4>>2]=HEAP32[$tmp+4>>2]|0;HEAP32[$12+8>>2]=HEAP32[$tmp+8>>2]|0;HEAP32[$12+12>>2]=HEAP32[$tmp+12>>2]|0;HEAP32[$12+16>>2]=HEAP32[$tmp+16>>2]|0;HEAP32[$12+20>>2]=HEAP32[$tmp+20>>2]|0;HEAP32[$12+24>>2]=HEAP32[$tmp+24>>2]|0;HEAP32[$12+28>>2]=HEAP32[$tmp+28>>2]|0;
 $15 = $expr$addr;
 $16 = HEAP16[$15>>1]|0;
 $17 = $expr$addr;
 $var5 = ((($17)) + 24|0);
 $location = ((($var5)) + 4|0);
 HEAP16[$location>>1] = $16;
 $18 = $self$addr;
 $19 = $expr$addr;
 $20 = $prec$addr;
 $tobool = (1)!=(0);
 $cond = $tobool ? 1 : 0;
 $sub = (($20) - ($cond))|0;
 _parseExpr($18,$19,$sub);
 $21 = $self$addr;
 $call6 = (_bfParser_match($21,10)|0);
 $tobool7 = ($call6|0)!=(0);
 if (!($tobool7)) {
  STACKTOP = sp;return;
 }
 $22 = $self$addr;
 $fn_builder9 = ((($22)) + 28|0);
 $23 = HEAP32[$fn_builder9>>2]|0;
 $call10 = (_bfVMFunctionBuilder_pushTemp($23,2)|0);
 $rhs_loc = $call10;
 $24 = $rhs_loc;
 $conv11 = $24&65535;
 $add = (($conv11) + 1)|0;
 $conv12 = $add&65535;
 $var_loc = $conv12;
 $25 = $rhs_loc;
 _exprMakeTemp($rhs_expr,$25);
 $26 = $self$addr;
 _parseExpr($26,$rhs_expr,1);
 $27 = $self$addr;
 $28 = $var_loc;
 ;HEAP32[$lhs_var$byval_copy>>2]=HEAP32[$lhs_var>>2]|0;HEAP32[$lhs_var$byval_copy+4>>2]=HEAP32[$lhs_var+4>>2]|0;
 _parserVariableLoad($27,$lhs_var$byval_copy,$28);
 $29 = $self$addr;
 $fn_builder13 = ((($29)) + 28|0);
 $30 = HEAP32[$fn_builder13>>2]|0;
 $31 = $var_loc;
 $32 = $sym;
 $conv14 = $32&65535;
 $33 = HEAP16[$rhs_expr>>1]|0;
 _bfVMFunctionBuilder_addInstABC($30,3,$31,$conv14,$33);
 $34 = $self$addr;
 $fn_builder16 = ((($34)) + 28|0);
 $35 = HEAP32[$fn_builder16>>2]|0;
 $36 = $rhs_loc;
 _bfVMFunctionBuilder_popTemp($35,$36);
 STACKTOP = sp;return;
}
function _parseVariable($self,$expr,$token) {
 $self = $self|0;
 $expr = $expr|0;
 $token = $token|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $as = 0, $cmp = 0, $cmp5 = 0, $conv = 0, $conv4 = 0, $end = 0;
 var $expr$addr = 0, $location = 0, $location3 = 0, $self$addr = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $tmp = 0, $tmp9 = 0, $token$addr = 0, $var = 0, $var$byval_copy = 0, $var$byval_copy2 = 0, $var1 = 0, $var_name = 0, $var_name$byval_copy = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $var$byval_copy2 = sp + 96|0;
 $var$byval_copy = sp + 88|0;
 $var_name$byval_copy = sp + 80|0;
 $vararg_buffer = sp + 32|0;
 $var_name = sp + 56|0;
 $var = sp + 48|0;
 $tmp = sp + 40|0;
 $tmp9 = sp;
 $self$addr = $self;
 $expr$addr = $expr;
 $token$addr = $token;
 $0 = $token$addr;
 $as = ((($0)) + 8|0);
 ;HEAP32[$var_name>>2]=HEAP32[$as>>2]|0;HEAP32[$var_name+4>>2]=HEAP32[$as+4>>2]|0;
 $1 = $expr$addr;
 $var1 = ((($1)) + 24|0);
 ;HEAP32[$var>>2]=HEAP32[$var1>>2]|0;HEAP32[$var+4>>2]=HEAP32[$var1+4>>2]|0;
 $location = ((($var)) + 4|0);
 $2 = HEAP16[$location>>1]|0;
 $conv = $2&65535;
 $cmp = ($conv|0)==(65535);
 if ($cmp) {
  $3 = $self$addr;
  ;HEAP32[$var_name$byval_copy>>2]=HEAP32[$var_name>>2]|0;HEAP32[$var_name$byval_copy+4>>2]=HEAP32[$var_name+4>>2]|0;
  _parserVariableFind($tmp,$3,$var_name$byval_copy);
  ;HEAP32[$var>>2]=HEAP32[$tmp>>2]|0;HEAP32[$var+4>>2]=HEAP32[$tmp+4>>2]|0;
 }
 $location3 = ((($var)) + 4|0);
 $4 = HEAP16[$location3>>1]|0;
 $conv4 = $4&65535;
 $cmp5 = ($conv4|0)!=(65535);
 $5 = $self$addr;
 if ($cmp5) {
  $6 = $expr$addr;
  $7 = HEAP16[$6>>1]|0;
  ;HEAP32[$var$byval_copy>>2]=HEAP32[$var>>2]|0;HEAP32[$var$byval_copy+4>>2]=HEAP32[$var+4>>2]|0;
  _parserVariableLoad($5,$var$byval_copy,$7);
  $8 = $expr$addr;
  $9 = $expr$addr;
  $10 = HEAP16[$9>>1]|0;
  ;HEAP32[$var$byval_copy2>>2]=HEAP32[$var>>2]|0;HEAP32[$var$byval_copy2+4>>2]=HEAP32[$var+4>>2]|0;
  _exprMake($tmp9,$10,$var$byval_copy2);
  ;HEAP32[$8>>2]=HEAP32[$tmp9>>2]|0;HEAP32[$8+4>>2]=HEAP32[$tmp9+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$tmp9+8>>2]|0;HEAP32[$8+12>>2]=HEAP32[$tmp9+12>>2]|0;HEAP32[$8+16>>2]=HEAP32[$tmp9+16>>2]|0;HEAP32[$8+20>>2]=HEAP32[$tmp9+20>>2]|0;HEAP32[$8+24>>2]=HEAP32[$tmp9+24>>2]|0;HEAP32[$8+28>>2]=HEAP32[$tmp9+28>>2]|0;
  STACKTOP = sp;return;
 } else {
  $end = ((($var_name)) + 4|0);
  $11 = HEAP32[$end>>2]|0;
  $12 = HEAP32[$var_name>>2]|0;
  $sub$ptr$lhs$cast = $11;
  $sub$ptr$rhs$cast = $12;
  $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
  $13 = HEAP32[$var_name>>2]|0;
  HEAP32[$vararg_buffer>>2] = $sub$ptr$sub;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $13;
  _bfEmitError($5,7656,$vararg_buffer);
  STACKTOP = sp;return;
 }
}
function _parseFunctionExpr($self,$expr,$token) {
 $self = $self|0;
 $expr = $expr|0;
 $token = $token|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $add = 0, $arity = 0, $call = 0, $call1 = 0, $current_module = 0, $expr$addr = 0, $fn = 0, $fn_builder = 0, $fn_builder4 = 0, $k_loc = 0, $self$addr = 0, $tmp = 0, $token$addr = 0, $vm = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $tmp = sp + 16|0;
 $self$addr = $self;
 $expr$addr = $expr;
 $token$addr = $token;
 $0 = $self$addr;
 _parserBeginFunction($tmp,$0,0);
 $1 = $self$addr;
 $call = (_parserParseFunction($1)|0);
 $arity = $call;
 $2 = $self$addr;
 $vm = ((($2)) + 40|0);
 $3 = HEAP32[$vm>>2]|0;
 $4 = $self$addr;
 $current_module = ((($4)) + 32|0);
 $5 = HEAP32[$current_module>>2]|0;
 $call1 = (_bfVM_createFunction($3,$5)|0);
 $fn = $call1;
 $6 = $self$addr;
 $7 = $fn;
 $8 = $arity;
 _parserEndFunction($6,$7,$8);
 $9 = $self$addr;
 $fn_builder = ((($9)) + 28|0);
 $10 = HEAP32[$fn_builder>>2]|0;
 $11 = $fn;
 $12 = (_bfVMValue_fromPointer($11)|0);
 $13 = (getTempRet0() | 0);
 $14 = (_bfVMFunctionBuilder_addConstant($10,$12,$13)|0);
 $k_loc = $14;
 $15 = $self$addr;
 $fn_builder4 = ((($15)) + 28|0);
 $16 = HEAP32[$fn_builder4>>2]|0;
 $17 = $expr$addr;
 $18 = HEAP16[$17>>1]|0;
 $19 = $k_loc;
 $add = (4 + ($19))|0;
 _bfVMFunctionBuilder_addInstABx($16,1,$18,$add);
 STACKTOP = sp;return;
}
function _parseLiteral($self,$expr_info,$token) {
 $self = $self|0;
 $expr_info = $expr_info|0;
 $token = $token|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $constexpr_value = 0, $expr_info$addr = 0, $fn_builder = 0, $fn_builder11 = 0, $fn_builder5 = 0, $self$addr = 0, $tobool = 0, $tobool3 = 0, $tobool9 = 0, $token$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $constexpr_value = sp;
 $self$addr = $self;
 $expr_info$addr = $expr_info;
 $token$addr = $token;
 $0 = $self$addr;
 $1 = $token$addr;
 $2 = (_parserTokenConstexprValue($0,$1)|0);
 $3 = (getTempRet0() | 0);
 $4 = $constexpr_value;
 $5 = $4;
 HEAP32[$5>>2] = $2;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = $3;
 $8 = $constexpr_value;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = (($8) + 4)|0;
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 $14 = (_bfVMValue_isTrue($10,$13)|0);
 $tobool = ($14|0)!=(0);
 if ($tobool) {
  $15 = $self$addr;
  $fn_builder = ((($15)) + 28|0);
  $16 = HEAP32[$fn_builder>>2]|0;
  $17 = $expr_info$addr;
  $18 = HEAP16[$17>>1]|0;
  _bfVMFunctionBuilder_addInstABx($16,1,$18,0);
  STACKTOP = sp;return;
 }
 $19 = $constexpr_value;
 $20 = $19;
 $21 = HEAP32[$20>>2]|0;
 $22 = (($19) + 4)|0;
 $23 = $22;
 $24 = HEAP32[$23>>2]|0;
 $25 = (_bfVMValue_isFalse($21,$24)|0);
 $tobool3 = ($25|0)!=(0);
 if ($tobool3) {
  $26 = $self$addr;
  $fn_builder5 = ((($26)) + 28|0);
  $27 = HEAP32[$fn_builder5>>2]|0;
  $28 = $expr_info$addr;
  $29 = HEAP16[$28>>1]|0;
  _bfVMFunctionBuilder_addInstABx($27,1,$29,1);
  STACKTOP = sp;return;
 }
 $30 = $constexpr_value;
 $31 = $30;
 $32 = HEAP32[$31>>2]|0;
 $33 = (($30) + 4)|0;
 $34 = $33;
 $35 = HEAP32[$34>>2]|0;
 $36 = (_bfVMValue_isNull($32,$35)|0);
 $tobool9 = ($36|0)!=(0);
 $37 = $self$addr;
 if ($tobool9) {
  $fn_builder11 = ((($37)) + 28|0);
  $38 = HEAP32[$fn_builder11>>2]|0;
  $39 = $expr_info$addr;
  $40 = HEAP16[$39>>1]|0;
  _bfVMFunctionBuilder_addInstABx($38,1,$40,2);
  STACKTOP = sp;return;
 } else {
  $41 = $expr_info$addr;
  $42 = $constexpr_value;
  $43 = $42;
  $44 = HEAP32[$43>>2]|0;
  $45 = (($42) + 4)|0;
  $46 = $45;
  $47 = HEAP32[$46>>2]|0;
  _bfParser_loadConstant($37,$41,$44,$47);
  STACKTOP = sp;return;
 }
}
function _parseNew($self,$expr,$token) {
 $self = $self|0;
 $expr = $expr|0;
 $token = $token|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $as = 0, $as10 = 0, $call = 0, $call1 = 0, $call14 = 0, $call17 = 0, $call3 = 0, $call6 = 0, $clz_loc = 0, $clz_name = 0;
 var $clz_name$byval_copy = 0, $clz_var = 0, $clz_var$byval_copy = 0, $conv = 0, $conv18 = 0, $conv21 = 0, $ctor_name = 0, $ctor_name$byval_copy = 0, $ctor_sym = 0, $current_token = 0, $current_token9 = 0, $expr$addr = 0, $fn_builder = 0, $fn_builder19 = 0, $fn_builder2 = 0, $fn_builder23 = 0, $function_var = 0, $function_var$byval_copy = 0, $return_var = 0, $return_var$byval_copy = 0;
 var $self$addr = 0, $tobool = 0, $tobool15 = 0, $tobool4 = 0, $tobool7 = 0, $token$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $return_var$byval_copy = sp + 88|0;
 $function_var$byval_copy = sp + 80|0;
 $ctor_name$byval_copy = sp + 72|0;
 $clz_var$byval_copy = sp + 64|0;
 $clz_name$byval_copy = sp + 56|0;
 $clz_name = sp + 32|0;
 $clz_var = sp + 24|0;
 $ctor_name = sp + 16|0;
 $function_var = sp + 8|0;
 $return_var = sp;
 $self$addr = $self;
 $expr$addr = $expr;
 $token$addr = $token;
 $0 = $self$addr;
 $current_token = ((($0)) + 8|0);
 $as = ((($current_token)) + 8|0);
 ;HEAP32[$clz_name>>2]=HEAP32[$as>>2]|0;HEAP32[$clz_name+4>>2]=HEAP32[$as+4>>2]|0;
 $1 = $self$addr;
 $call = (_bfParser_eat($1,20,0,7460)|0);
 $tobool = ($call|0)!=(0);
 if (!($tobool)) {
  STACKTOP = sp;return;
 }
 $2 = $self$addr;
 ;HEAP32[$clz_name$byval_copy>>2]=HEAP32[$clz_name>>2]|0;HEAP32[$clz_name$byval_copy+4>>2]=HEAP32[$clz_name+4>>2]|0;
 _parserVariableFind($clz_var,$2,$clz_name$byval_copy);
 $3 = $self$addr;
 $fn_builder = ((($3)) + 28|0);
 $4 = HEAP32[$fn_builder>>2]|0;
 $call1 = (_bfVMFunctionBuilder_pushTemp($4,1)|0);
 $clz_loc = $call1;
 $5 = $self$addr;
 $6 = $clz_loc;
 ;HEAP32[$clz_var$byval_copy>>2]=HEAP32[$clz_var>>2]|0;HEAP32[$clz_var$byval_copy+4>>2]=HEAP32[$clz_var+4>>2]|0;
 _parserVariableLoad($5,$clz_var$byval_copy,$6);
 $7 = $self$addr;
 $fn_builder2 = ((($7)) + 28|0);
 $8 = HEAP32[$fn_builder2>>2]|0;
 $9 = $expr$addr;
 $10 = HEAP16[$9>>1]|0;
 $11 = $clz_loc;
 $conv = $11&65535;
 _bfVMFunctionBuilder_addInstABx($8,4,$10,$conv);
 _bfMakeStringRangeC($ctor_name,7498);
 $12 = $self$addr;
 $call3 = (_bfParser_match($12,19)|0);
 $tobool4 = ($call3|0)!=(0);
 if ($tobool4) {
  $13 = $self$addr;
  $call6 = (_bfParser_is($13,20)|0);
  $tobool7 = ($call6|0)!=(0);
  if ($tobool7) {
   $14 = $self$addr;
   $current_token9 = ((($14)) + 8|0);
   $as10 = ((($current_token9)) + 8|0);
   ;HEAP32[$ctor_name>>2]=HEAP32[$as10>>2]|0;HEAP32[$ctor_name+4>>2]=HEAP32[$as10+4>>2]|0;
  }
  $15 = $self$addr;
  (_bfParser_eat($15,20,0,7503)|0);
 }
 $16 = $self$addr;
 $call14 = (_bfParser_match($16,0)|0);
 $tobool15 = ($call14|0)!=(0);
 if ($tobool15) {
  $17 = $self$addr;
  ;HEAP32[$ctor_name$byval_copy>>2]=HEAP32[$ctor_name>>2]|0;HEAP32[$ctor_name$byval_copy+4>>2]=HEAP32[$ctor_name+4>>2]|0;
  $call17 = (_parserGetSymbol($17,$ctor_name$byval_copy)|0);
  $conv18 = $call17&65535;
  $ctor_sym = $conv18;
  $18 = $self$addr;
  $fn_builder19 = ((($18)) + 28|0);
  $19 = HEAP32[$fn_builder19>>2]|0;
  $20 = $clz_loc;
  $21 = $clz_loc;
  $22 = $ctor_sym;
  _bfVMFunctionBuilder_addInstABC($19,0,$20,$21,$22);
  $23 = $clz_loc;
  _parserVariableMakeTemp($function_var,$23);
  _parserVariableMakeTemp($return_var,-1);
  $24 = $self$addr;
  $25 = $expr$addr;
  $26 = HEAP16[$25>>1]|0;
  $conv21 = $26&65535;
  ;HEAP32[$function_var$byval_copy>>2]=HEAP32[$function_var>>2]|0;HEAP32[$function_var$byval_copy+4>>2]=HEAP32[$function_var+4>>2]|0;
  ;HEAP32[$return_var$byval_copy>>2]=HEAP32[$return_var>>2]|0;HEAP32[$return_var$byval_copy+4>>2]=HEAP32[$return_var+4>>2]|0;
  _parserFinishCall($24,$function_var$byval_copy,$return_var$byval_copy,$conv21);
 }
 $27 = $self$addr;
 $fn_builder23 = ((($27)) + 28|0);
 $28 = HEAP32[$fn_builder23>>2]|0;
 $29 = $clz_loc;
 _bfVMFunctionBuilder_popTemp($28,$29);
 STACKTOP = sp;return;
}
function _parseSuper($self,$expr,$token) {
 $self = $self|0;
 $expr = $expr|0;
 $token = $token|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $base_clz = 0, $base_clz5 = 0, $current_clz = 0, $current_clz1 = 0, $current_clz4 = 0, $expr$addr = 0, $self$addr = 0, $tobool = 0;
 var $tobool2 = 0, $token$addr = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $self$addr = $self;
 $expr$addr = $expr;
 $token$addr = $token;
 $0 = $self$addr;
 $current_clz = ((($0)) + 36|0);
 $1 = HEAP32[$current_clz>>2]|0;
 $tobool = ($1|0)!=(0|0);
 $2 = $self$addr;
 if (!($tobool)) {
  _bfEmitError($2,7408,$vararg_buffer1);
  STACKTOP = sp;return;
 }
 $current_clz1 = ((($2)) + 36|0);
 $3 = HEAP32[$current_clz1>>2]|0;
 $base_clz = ((($3)) + 16|0);
 $4 = HEAP32[$base_clz>>2]|0;
 $tobool2 = ($4|0)!=(0|0);
 $5 = $self$addr;
 if ($tobool2) {
  $6 = $expr$addr;
  $7 = $self$addr;
  $current_clz4 = ((($7)) + 36|0);
  $8 = HEAP32[$current_clz4>>2]|0;
  $base_clz5 = ((($8)) + 16|0);
  $9 = HEAP32[$base_clz5>>2]|0;
  $10 = (_bfVMValue_fromPointer($9)|0);
  $11 = (getTempRet0() | 0);
  _bfParser_loadConstant($5,$6,$10,$11);
  STACKTOP = sp;return;
 } else {
  _bfEmitError($5,7344,$vararg_buffer);
  STACKTOP = sp;return;
 }
}
function _bfParser_loadConstant($self,$expr_info,$0,$1) {
 $self = $self|0;
 $expr_info = $expr_info|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $expr_info$addr = 0;
 var $fn_builder = 0, $fn_builder1 = 0, $konst_loc = 0, $self$addr = 0, $value$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $value$addr = sp;
 $self$addr = $self;
 $expr_info$addr = $expr_info;
 $2 = $value$addr;
 $3 = $2;
 HEAP32[$3>>2] = $0;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = $1;
 $6 = $self$addr;
 $fn_builder = ((($6)) + 28|0);
 $7 = HEAP32[$fn_builder>>2]|0;
 $8 = $value$addr;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = (($8) + 4)|0;
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 $14 = (_bfVMFunctionBuilder_addConstant($7,$10,$13)|0);
 $konst_loc = $14;
 $15 = $self$addr;
 $fn_builder1 = ((($15)) + 28|0);
 $16 = HEAP32[$fn_builder1>>2]|0;
 $17 = $expr_info$addr;
 $18 = HEAP16[$17>>1]|0;
 $19 = $konst_loc;
 $add = (($19) + 4)|0;
 _bfVMFunctionBuilder_addInstABx($16,1,$18,$add);
 STACKTOP = sp;return;
}
function _parserVariableFind($agg$result,$self,$name) {
 $agg$result = $agg$result|0;
 $self = $self|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $call = 0, $cmp = 0, $conv = 0, $conv2 = 0, $location = 0, $location3 = 0, $name$byval_copy = 0, $name$byval_copy1 = 0, $self$addr = 0, $var = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $name$byval_copy1 = sp + 24|0;
 $name$byval_copy = sp + 16|0;
 $var = sp;
 $self$addr = $self;
 $0 = $self$addr;
 ;HEAP32[$name$byval_copy>>2]=HEAP32[$name>>2]|0;HEAP32[$name$byval_copy+4>>2]=HEAP32[$name+4>>2]|0;
 _parserVariableFindLocal($var,$0,$name$byval_copy);
 $location = ((($var)) + 4|0);
 $1 = HEAP16[$location>>1]|0;
 $conv = $1&65535;
 $cmp = ($conv|0)==(65535);
 if (!($cmp)) {
  ;HEAP32[$agg$result>>2]=HEAP32[$var>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$var+4>>2]|0;
  STACKTOP = sp;return;
 }
 HEAP32[$var>>2] = 1;
 $2 = $self$addr;
 ;HEAP32[$name$byval_copy1>>2]=HEAP32[$name>>2]|0;HEAP32[$name$byval_copy1+4>>2]=HEAP32[$name+4>>2]|0;
 $call = (_parserGetSymbol($2,$name$byval_copy1)|0);
 $conv2 = $call&65535;
 $location3 = ((($var)) + 4|0);
 HEAP16[$location3>>1] = $conv2;
 ;HEAP32[$agg$result>>2]=HEAP32[$var>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$var+4>>2]|0;
 STACKTOP = sp;return;
}
function _parserVariableLoad($self,$variable,$write_loc) {
 $self = $self|0;
 $variable = $variable|0;
 $write_loc = $write_loc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $call = 0, $cmp = 0, $cmp11 = 0, $cmp3 = 0, $conv = 0, $conv10 = 0, $conv14 = 0, $conv17 = 0, $conv19 = 0, $conv2 = 0, $conv21 = 0, $conv24 = 0, $conv8 = 0, $fn_builder = 0, $fn_builder16 = 0, $fn_builder18 = 0, $fn_builder20 = 0, $fn_builder23 = 0;
 var $location = 0, $location13 = 0, $location22 = 0, $location9 = 0, $module_expr = 0, $self$addr = 0, $write_loc$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self$addr = $self;
 $write_loc$addr = $write_loc;
 $location = ((($variable)) + 4|0);
 $0 = HEAP16[$location>>1]|0;
 $conv = $0&65535;
 $cmp = ($conv|0)!=(65535);
 if (!($cmp)) {
  ___assert_fail((6359|0),(2771|0),1613,(7600|0));
  // unreachable;
 }
 $1 = $write_loc$addr;
 $conv2 = $1&65535;
 $cmp3 = ($conv2|0)!=(65535);
 if (!($cmp3)) {
  ___assert_fail((7619|0),(2771|0),1614,(7600|0));
  // unreachable;
 }
 $2 = HEAP32[$variable>>2]|0;
 switch ($2|0) {
 case 0:  {
  $3 = $write_loc$addr;
  $conv8 = $3&65535;
  $location9 = ((($variable)) + 4|0);
  $4 = HEAP16[$location9>>1]|0;
  $conv10 = $4&65535;
  $cmp11 = ($conv8|0)!=($conv10|0);
  if (!($cmp11)) {
   STACKTOP = sp;return;
  }
  $5 = $self$addr;
  $fn_builder = ((($5)) + 28|0);
  $6 = HEAP32[$fn_builder>>2]|0;
  $7 = $write_loc$addr;
  $location13 = ((($variable)) + 4|0);
  $8 = HEAP16[$location13>>1]|0;
  $conv14 = $8&65535;
  _bfVMFunctionBuilder_addInstABx($6,2,$7,$conv14);
  STACKTOP = sp;return;
  break;
 }
 case 1:  {
  $9 = $self$addr;
  $fn_builder16 = ((($9)) + 28|0);
  $10 = HEAP32[$fn_builder16>>2]|0;
  $call = (_bfVMFunctionBuilder_pushTemp($10,1)|0);
  $conv17 = $call&65535;
  $module_expr = $conv17;
  $11 = $self$addr;
  $fn_builder18 = ((($11)) + 28|0);
  $12 = HEAP32[$fn_builder18>>2]|0;
  $13 = $module_expr;
  $conv19 = $13&65535;
  _bfVMFunctionBuilder_addInstABx($12,1,$conv19,3);
  $14 = $self$addr;
  $fn_builder20 = ((($14)) + 28|0);
  $15 = HEAP32[$fn_builder20>>2]|0;
  $16 = $write_loc$addr;
  $17 = $module_expr;
  $conv21 = $17&65535;
  $location22 = ((($variable)) + 4|0);
  $18 = HEAP16[$location22>>1]|0;
  _bfVMFunctionBuilder_addInstABC($15,0,$16,$conv21,$18);
  $19 = $self$addr;
  $fn_builder23 = ((($19)) + 28|0);
  $20 = HEAP32[$fn_builder23>>2]|0;
  $21 = $module_expr;
  $conv24 = $21&65535;
  _bfVMFunctionBuilder_popTemp($20,$conv24);
  STACKTOP = sp;return;
  break;
 }
 default: {
  ___assert_fail((6460|0),(2771|0),1650,(7600|0));
  // unreachable;
 }
 }
}
function _parserFinishCall($self,$fn,$return_loc,$zero_slot) {
 $self = $self|0;
 $fn = $fn|0;
 $return_loc = $return_loc|0;
 $zero_slot = $zero_slot|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call12 = 0, $call6 = 0, $cmp = 0, $cmp18 = 0, $cmp7 = 0, $cond = 0;
 var $cond30 = 0, $conv = 0, $conv1 = 0, $conv15 = 0, $conv17 = 0, $conv2 = 0, $conv21 = 0, $conv26 = 0, $conv28 = 0, $conv3 = 0, $conv31 = 0, $fn$byval_copy = 0, $fn_builder = 0, $fn_builder10 = 0, $fn_builder14 = 0, $fn_builder23 = 0, $fn_builder5 = 0, $function_loc = 0, $inc = 0, $is_local_fn = 0;
 var $location = 0, $location16 = 0, $num_params = 0, $return_loc$byval_copy = 0, $self$addr = 0, $temp_first = 0, $tobool = 0, $tobool24 = 0, $tobool4 = 0, $zero_slot$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $return_loc$byval_copy = sp + 24|0;
 $fn$byval_copy = sp + 16|0;
 $self$addr = $self;
 $zero_slot$addr = $zero_slot;
 $0 = HEAP32[$fn>>2]|0;
 $cmp = ($0|0)==(0);
 $conv = $cmp&1;
 $is_local_fn = $conv;
 $1 = $is_local_fn;
 $tobool = ($1|0)!=(0);
 if ($tobool) {
  $location = ((($fn)) + 4|0);
  $2 = HEAP16[$location>>1]|0;
  $conv1 = $2&65535;
  $cond = $conv1;
 } else {
  $3 = $self$addr;
  $fn_builder = ((($3)) + 28|0);
  $4 = HEAP32[$fn_builder>>2]|0;
  $call = (_bfVMFunctionBuilder_pushTemp($4,1)|0);
  $conv2 = $call&65535;
  $cond = $conv2;
 }
 $conv3 = $cond&65535;
 $function_loc = $conv3;
 $5 = $is_local_fn;
 $tobool4 = ($5|0)!=(0);
 if (!($tobool4)) {
  $6 = $self$addr;
  $7 = $function_loc;
  ;HEAP32[$fn$byval_copy>>2]=HEAP32[$fn>>2]|0;HEAP32[$fn$byval_copy+4>>2]=HEAP32[$fn+4>>2]|0;
  _parserVariableLoad($6,$fn$byval_copy,$7);
 }
 $num_params = 0;
 $8 = $self$addr;
 $fn_builder5 = ((($8)) + 28|0);
 $9 = HEAP32[$fn_builder5>>2]|0;
 $call6 = (_bfVMFunctionBuilder_pushTemp($9,1)|0);
 $temp_first = $call6;
 $10 = $zero_slot$addr;
 $cmp7 = ($10|0)!=(65535);
 if ($cmp7) {
  $11 = $self$addr;
  $fn_builder10 = ((($11)) + 28|0);
  $12 = HEAP32[$fn_builder10>>2]|0;
  $13 = $temp_first;
  $14 = $zero_slot$addr;
  _bfVMFunctionBuilder_addInstABx($12,2,$13,$14);
  $15 = $num_params;
  $inc = (($15) + 1)|0;
  $num_params = $inc;
 }
 $16 = $self$addr;
 $17 = $temp_first;
 $18 = $num_params;
 $call12 = (_parserCallArgs($16,$17,$18,1)|0);
 $num_params = $call12;
 $19 = $self$addr;
 (_bfParser_eat($19,1,0,7549)|0);
 $20 = $self$addr;
 $fn_builder14 = ((($20)) + 28|0);
 $21 = HEAP32[$fn_builder14>>2]|0;
 $22 = $temp_first;
 $23 = $function_loc;
 $24 = $num_params;
 $conv15 = $24&65535;
 _bfVMFunctionBuilder_addInstABC($21,21,$22,$23,$conv15);
 $location16 = ((($return_loc)) + 4|0);
 $25 = HEAP16[$location16>>1]|0;
 $conv17 = $25&65535;
 $cmp18 = ($conv17|0)!=(65535);
 if (!($cmp18)) {
  $28 = $self$addr;
  $fn_builder23 = ((($28)) + 28|0);
  $29 = HEAP32[$fn_builder23>>2]|0;
  $30 = $is_local_fn;
  $tobool24 = ($30|0)!=(0);
  $31 = $temp_first;
  $conv26 = $31&65535;
  $32 = $function_loc;
  $conv28 = $32&65535;
  $cond30 = $tobool24 ? $conv26 : $conv28;
  $conv31 = $cond30&65535;
  _bfVMFunctionBuilder_popTemp($29,$conv31);
  STACKTOP = sp;return;
 }
 $26 = $self$addr;
 $27 = $temp_first;
 $conv21 = $27&65535;
 ;HEAP32[$return_loc$byval_copy>>2]=HEAP32[$return_loc>>2]|0;HEAP32[$return_loc$byval_copy+4>>2]=HEAP32[$return_loc+4>>2]|0;
 _parserVariableStore($26,$return_loc$byval_copy,$conv21);
 $28 = $self$addr;
 $fn_builder23 = ((($28)) + 28|0);
 $29 = HEAP32[$fn_builder23>>2]|0;
 $30 = $is_local_fn;
 $tobool24 = ($30|0)!=(0);
 $31 = $temp_first;
 $conv26 = $31&65535;
 $32 = $function_loc;
 $conv28 = $32&65535;
 $cond30 = $tobool24 ? $conv26 : $conv28;
 $conv31 = $cond30&65535;
 _bfVMFunctionBuilder_popTemp($29,$conv31);
 STACKTOP = sp;return;
}
function _parserCallArgs($self,$temp_first,$num_params,$end_token) {
 $self = $self|0;
 $temp_first = $temp_first|0;
 $num_params = $num_params|0;
 $end_token = $end_token|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call1 = 0, $call4 = 0, $cmp = 0, $cond = 0, $conv = 0, $conv2 = 0, $conv3 = 0, $end_token$addr = 0;
 var $fn_builder = 0, $inc = 0, $num_params$addr = 0, $param_expr = 0, $param_loc = 0, $self$addr = 0, $temp_first$addr = 0, $tobool = 0, $tobool5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $param_expr = sp;
 $self$addr = $self;
 $temp_first$addr = $temp_first;
 $num_params$addr = $num_params;
 $end_token$addr = $end_token;
 $0 = $self$addr;
 $1 = $end_token$addr;
 $call = (_bfParser_is($0,$1)|0);
 $tobool = ($call|0)!=(0);
 if ($tobool) {
  $10 = $num_params$addr;
  STACKTOP = sp;return ($10|0);
 }
 while(1) {
  $2 = $num_params$addr;
  $cmp = ($2|0)==(0);
  if ($cmp) {
   $3 = $temp_first$addr;
   $conv = $3&65535;
   $cond = $conv;
  } else {
   $4 = $self$addr;
   $fn_builder = ((($4)) + 28|0);
   $5 = HEAP32[$fn_builder>>2]|0;
   $call1 = (_bfVMFunctionBuilder_pushTemp($5,1)|0);
   $conv2 = $call1&65535;
   $cond = $conv2;
  }
  $conv3 = $cond&65535;
  $param_loc = $conv3;
  $6 = $param_loc;
  _exprMakeTemp($param_expr,$6);
  $7 = $self$addr;
  _parseExpr($7,$param_expr,0);
  $8 = $num_params$addr;
  $inc = (($8) + 1)|0;
  $num_params$addr = $inc;
  $9 = $self$addr;
  $call4 = (_bfParser_match($9,9)|0);
  $tobool5 = ($call4|0)!=(0);
  if (!($tobool5)) {
   break;
  }
 }
 $10 = $num_params$addr;
 STACKTOP = sp;return ($10|0);
}
function _exprMakeTemp($agg$result,$temp_loc) {
 $agg$result = $agg$result|0;
 $temp_loc = $temp_loc|0;
 var $0 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $temp_loc$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $temp_loc$addr = $temp_loc;
 $0 = $temp_loc$addr;
 _parserVariableMakeTemp($agg$tmp,-1);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 _exprMake($agg$result,$0,$agg$tmp$byval_copy);
 STACKTOP = sp;return;
}
function _parserVariableFindLocal($agg$result,$self,$name) {
 $agg$result = $agg$result|0;
 $self = $self|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $and = 0, $call = 0, $call1 = 0, $conv = 0, $fn_builder = 0, $location = 0, $self$addr = 0, $var = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $var = sp;
 $self$addr = $self;
 HEAP32[$var>>2] = 0;
 $0 = $self$addr;
 $fn_builder = ((($0)) + 28|0);
 $1 = HEAP32[$fn_builder>>2]|0;
 $2 = HEAP32[$name>>2]|0;
 $call = (_bfStringRange_length($name)|0);
 $call1 = (_bfVMFunctionBuilder_getVariable($1,$2,$call)|0);
 $and = $call1 & 65535;
 $conv = $and&65535;
 $location = ((($var)) + 4|0);
 HEAP16[$location>>1] = $conv;
 ;HEAP32[$agg$result>>2]=HEAP32[$var>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$var+4>>2]|0;
 STACKTOP = sp;return;
}
function _bfVMFunctionBuilder_getVariable($self,$name,$length) {
 $self = $self|0;
 $name = $name|0;
 $length = $length|0;
 var $0 = 0, $1 = 0, $2 = 0, $call = 0, $length$addr = 0, $name$addr = 0, $self$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self$addr = $self;
 $name$addr = $name;
 $length$addr = $length;
 $0 = $self$addr;
 $1 = $name$addr;
 $2 = $length$addr;
 $call = (_bfVMFunctionBuilder__getVariable($0,$1,$2,0)|0);
 STACKTOP = sp;return ($call|0);
}
function _bfVMParams_init($self) {
 $self = $self|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $heap_growth_factor = 0, $heap_size = 0, $memory_fn = 0, $min_heap_size = 0, $module_fn = 0, $print_fn = 0, $self$addr = 0, $user_data = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self$addr = $self;
 $0 = $self$addr;
 HEAP32[$0>>2] = 0;
 $1 = $self$addr;
 $print_fn = ((($1)) + 4|0);
 HEAP32[$print_fn>>2] = 0;
 $2 = $self$addr;
 $module_fn = ((($2)) + 8|0);
 HEAP32[$module_fn>>2] = 0;
 $3 = $self$addr;
 $memory_fn = ((($3)) + 12|0);
 HEAP32[$memory_fn>>2] = 41;
 $4 = $self$addr;
 $min_heap_size = ((($4)) + 16|0);
 HEAP32[$min_heap_size>>2] = 1000000;
 $5 = $self$addr;
 $heap_size = ((($5)) + 20|0);
 HEAP32[$heap_size>>2] = 5242880;
 $6 = $self$addr;
 $heap_growth_factor = ((($6)) + 24|0);
 HEAPF32[$heap_growth_factor>>2] = 0.5;
 $7 = $self$addr;
 $user_data = ((($7)) + 28|0);
 HEAP32[$user_data>>2] = 0;
 STACKTOP = sp;return;
}
function _bfGCDefaultAllocator($user_data,$ptr,$old_size,$new_size) {
 $user_data = $user_data|0;
 $ptr = $ptr|0;
 $old_size = $old_size|0;
 $new_size = $new_size|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $call = 0, $cmp = 0, $new_ptr = 0, $new_size$addr = 0, $old_size$addr = 0, $ptr$addr = 0, $tobool = 0, $user_data$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $user_data$addr = $user_data;
 $ptr$addr = $ptr;
 $old_size$addr = $old_size;
 $new_size$addr = $new_size;
 $0 = $new_size$addr;
 $cmp = ($0|0)==(0);
 $1 = $ptr$addr;
 if ($cmp) {
  _free($1);
  $ptr$addr = 0;
  $6 = $ptr$addr;
  STACKTOP = sp;return ($6|0);
 }
 $2 = $new_size$addr;
 $call = (_realloc($1,$2)|0);
 $new_ptr = $call;
 $3 = $new_ptr;
 $tobool = ($3|0)!=(0|0);
 if (!($tobool)) {
  $4 = $ptr$addr;
  _free($4);
 }
 $5 = $new_ptr;
 $ptr$addr = $5;
 $6 = $ptr$addr;
 STACKTOP = sp;return ($6|0);
}
function _bfVM_ctor($self,$params) {
 $self = $self|0;
 $params = $params|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp11 = 0, $agg$tmp11$byval_copy = 0, $agg$tmp7 = 0, $agg$tmp7$byval_copy = 0, $arrayidx10 = 0, $arrayidx14 = 0, $build_in_symbols = 0, $build_in_symbols13 = 0, $build_in_symbols9 = 0, $bytes_allocated = 0, $call = 0, $call1 = 0;
 var $call12 = 0, $call3 = 0, $call5 = 0, $call6 = 0, $call8 = 0, $cmp = 0, $current_native_fn = 0, $finalized = 0, $free_handles = 0, $gc_is_running = 0, $gc_object_list = 0, $handles = 0, $hash = 0, $hash_params = 0, $last_error = 0, $modules = 0, $params$addr = 0, $params4 = 0, $parser_stack = 0, $self$addr = 0;
 var $stack = 0, $stack2 = 0, $stack_top = 0, $symbols = 0, $temp_roots_top = 0, $value_size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $agg$tmp11$byval_copy = sp + 64|0;
 $agg$tmp7$byval_copy = sp + 56|0;
 $agg$tmp$byval_copy = sp + 48|0;
 $hash_params = sp + 24|0;
 $agg$tmp = sp + 16|0;
 $agg$tmp7 = sp + 8|0;
 $agg$tmp11 = sp;
 $self$addr = $self;
 $params$addr = $params;
 $0 = $self$addr;
 _memset(($0|0),0,664)|0;
 $call = (__ArrayT_new(16,12)|0);
 $1 = $self$addr;
 HEAP32[$1>>2] = $call;
 $call1 = (__ArrayT_new(8,10)|0);
 $2 = $self$addr;
 $stack = ((($2)) + 4|0);
 HEAP32[$stack>>2] = $call1;
 $3 = $self$addr;
 $stack2 = ((($3)) + 4|0);
 $4 = HEAP32[$stack2>>2]|0;
 $5 = $self$addr;
 $stack_top = ((($5)) + 8|0);
 HEAP32[$stack_top>>2] = $4;
 $call3 = (__ArrayT_new(4,10)|0);
 $6 = $self$addr;
 $symbols = ((($6)) + 12|0);
 HEAP32[$symbols>>2] = $call3;
 $7 = $self$addr;
 $params4 = ((($7)) + 16|0);
 $8 = $params$addr;
 ;HEAP32[$params4>>2]=HEAP32[$8>>2]|0;HEAP32[$params4+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$params4+8>>2]=HEAP32[$8+8>>2]|0;HEAP32[$params4+12>>2]=HEAP32[$8+12>>2]|0;HEAP32[$params4+16>>2]=HEAP32[$8+16>>2]|0;HEAP32[$params4+20>>2]=HEAP32[$8+20>>2]|0;HEAP32[$params4+24>>2]=HEAP32[$8+24>>2]|0;HEAP32[$params4+28>>2]=HEAP32[$8+28>>2]|0;
 $9 = $self$addr;
 $gc_object_list = ((($9)) + 48|0);
 HEAP32[$gc_object_list>>2] = 0;
 $call5 = (_String_new(10688)|0);
 $10 = $self$addr;
 $last_error = ((($10)) + 596|0);
 HEAP32[$last_error>>2] = $call5;
 $11 = $self$addr;
 $bytes_allocated = ((($11)) + 600|0);
 HEAP32[$bytes_allocated>>2] = 664;
 $12 = $self$addr;
 $handles = ((($12)) + 588|0);
 HEAP32[$handles>>2] = 0;
 $13 = $self$addr;
 $free_handles = ((($13)) + 592|0);
 HEAP32[$free_handles>>2] = 0;
 $14 = $self$addr;
 $parser_stack = ((($14)) + 584|0);
 HEAP32[$parser_stack>>2] = 0;
 $15 = $self$addr;
 $temp_roots_top = ((($15)) + 640|0);
 HEAP8[$temp_roots_top>>0] = 0;
 $16 = $self$addr;
 $gc_is_running = ((($16)) + 644|0);
 HEAP32[$gc_is_running>>2] = 0;
 $17 = $self$addr;
 $finalized = ((($17)) + 604|0);
 HEAP32[$finalized>>2] = 0;
 $18 = $self$addr;
 $current_native_fn = ((($18)) + 660|0);
 HEAP32[$current_native_fn>>2] = 0;
 _bfHashMapParams_init($hash_params);
 $hash = ((($hash_params)) + 4|0);
 HEAP32[$hash>>2] = 42;
 $cmp = ((($hash_params)) + 8|0);
 HEAP32[$cmp>>2] = 43;
 $value_size = ((($hash_params)) + 12|0);
 HEAP32[$value_size>>2] = 4;
 $19 = $self$addr;
 $modules = ((($19)) + 52|0);
 _bfHashMap_ctor($modules,$hash_params);
 $20 = $self$addr;
 _bfMakeStringRangeC($agg$tmp,7498);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 $call6 = (_bfVM_getSymbol($20,$agg$tmp$byval_copy)|0);
 $21 = $self$addr;
 $build_in_symbols = ((($21)) + 648|0);
 HEAP32[$build_in_symbols>>2] = $call6;
 $22 = $self$addr;
 _bfMakeStringRangeC($agg$tmp7,5490);
 ;HEAP32[$agg$tmp7$byval_copy>>2]=HEAP32[$agg$tmp7>>2]|0;HEAP32[$agg$tmp7$byval_copy+4>>2]=HEAP32[$agg$tmp7+4>>2]|0;
 $call8 = (_bfVM_getSymbol($22,$agg$tmp7$byval_copy)|0);
 $23 = $self$addr;
 $build_in_symbols9 = ((($23)) + 648|0);
 $arrayidx10 = ((($build_in_symbols9)) + 4|0);
 HEAP32[$arrayidx10>>2] = $call8;
 $24 = $self$addr;
 _bfMakeStringRangeC($agg$tmp11,8717);
 ;HEAP32[$agg$tmp11$byval_copy>>2]=HEAP32[$agg$tmp11>>2]|0;HEAP32[$agg$tmp11$byval_copy+4>>2]=HEAP32[$agg$tmp11+4>>2]|0;
 $call12 = (_bfVM_getSymbol($24,$agg$tmp11$byval_copy)|0);
 $25 = $self$addr;
 $build_in_symbols13 = ((($25)) + 648|0);
 $arrayidx14 = ((($build_in_symbols13)) + 8|0);
 HEAP32[$arrayidx14>>2] = $call12;
 STACKTOP = sp;return;
}
function _ModuleMap_hash($key) {
 $key = $key|0;
 var $0 = 0, $1 = 0, $hash = 0, $key$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $key$addr = $key;
 $0 = $key$addr;
 $hash = ((($0)) + 16|0);
 $1 = HEAP32[$hash>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function _ModuleMap_cmp($lhs,$rhs) {
 $lhs = $lhs|0;
 $rhs = $rhs|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $cmp = 0, $cmp3 = 0, $hash = 0, $hash1 = 0, $land$ext = 0, $lhs$addr = 0, $rhs$addr = 0, $str_lhs = 0;
 var $str_rhs = 0, $value = 0, $value2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $lhs$addr = $lhs;
 $rhs$addr = $rhs;
 $0 = $lhs$addr;
 $str_lhs = $0;
 $1 = $rhs$addr;
 $str_rhs = $1;
 $2 = $str_lhs;
 $hash = ((($2)) + 16|0);
 $3 = HEAP32[$hash>>2]|0;
 $4 = $str_rhs;
 $hash1 = ((($4)) + 16|0);
 $5 = HEAP32[$hash1>>2]|0;
 $cmp = ($3|0)==($5|0);
 if (!($cmp)) {
  $10 = 0;
  $land$ext = $10&1;
  STACKTOP = sp;return ($land$ext|0);
 }
 $6 = $str_lhs;
 $value = ((($6)) + 12|0);
 $7 = HEAP32[$value>>2]|0;
 $8 = $str_rhs;
 $value2 = ((($8)) + 12|0);
 $9 = HEAP32[$value2>>2]|0;
 $call = (_String_cmp($7,$9)|0);
 $cmp3 = ($call|0)==(0);
 $10 = $cmp3;
 $land$ext = $10&1;
 STACKTOP = sp;return ($land$ext|0);
}
function _bfVM_userData($self) {
 $self = $self|0;
 var $0 = 0, $1 = 0, $params = 0, $self$addr = 0, $user_data = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self$addr = $self;
 $0 = $self$addr;
 $params = ((($0)) + 16|0);
 $user_data = ((($params)) + 28|0);
 $1 = HEAP32[$user_data>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function _bfVM_moduleMake($self,$idx,$module) {
 $self = $self|0;
 $idx = $idx|0;
 $module = $module|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $call = 0, $err = 0, $idx$addr = 0, $module$addr = 0;
 var $self$addr = 0, $stack_top = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $temp = sp + 4|0;
 $self$addr = $self;
 $idx$addr = $idx;
 $module$addr = $module;
 $0 = $self$addr;
 $1 = $idx$addr;
 _bfVM_assertStackIndex($0,$1);
 $2 = $self$addr;
 $3 = $module$addr;
 $call = (_bfVM__moduleMake($2,$3,$temp)|0);
 $err = $call;
 $4 = HEAP32[$temp>>2]|0;
 $5 = (_bfVMValue_fromPointer($4)|0);
 $6 = (getTempRet0() | 0);
 $7 = $self$addr;
 $stack_top = ((($7)) + 8|0);
 $8 = HEAP32[$stack_top>>2]|0;
 $9 = $idx$addr;
 $arrayidx = (($8) + ($9<<3)|0);
 $10 = $arrayidx;
 $11 = $10;
 HEAP32[$11>>2] = $5;
 $12 = (($10) + 4)|0;
 $13 = $12;
 HEAP32[$13>>2] = $6;
 $14 = $err;
 STACKTOP = sp;return ($14|0);
}
function _bfVM__moduleMake($self,$module,$out) {
 $self = $self|0;
 $module = $module|0;
 $out = $out|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $call = 0, $call1 = 0, $call5 = 0, $call8 = 0, $cmp = 0, $conv = 0, $is_anon = 0, $module$addr = 0, $module_name = 0, $modules = 0, $name_range = 0, $name_range$byval_copy = 0, $name_range$byval_copy1 = 0, $out$addr = 0, $retval = 0, $self$addr = 0, $tobool = 0, $tobool2 = 0, $tobool6 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $name_range$byval_copy1 = sp + 48|0;
 $name_range$byval_copy = sp + 40|0;
 $name_range = sp + 8|0;
 $self$addr = $self;
 $module$addr = $module;
 $out$addr = $out;
 $0 = $module$addr;
 $cmp = ($0|0)==(0|0);
 $conv = $cmp&1;
 $is_anon = $conv;
 $1 = $is_anon;
 $tobool = ($1|0)!=(0);
 if ($tobool) {
  $module$addr = 8722;
 }
 $2 = $module$addr;
 _bfMakeStringRangeC($name_range,$2);
 $3 = $self$addr;
 $4 = $module$addr;
 $call = (_bfStringRange_length($name_range)|0);
 $call1 = (_bfVM_findModule($3,$4,$call)|0);
 $5 = $out$addr;
 HEAP32[$5>>2] = $call1;
 $6 = $out$addr;
 $7 = HEAP32[$6>>2]|0;
 $tobool2 = ($7|0)!=(0|0);
 if ($tobool2) {
  $retval = 6;
  $19 = $retval;
  STACKTOP = sp;return ($19|0);
 }
 $8 = $self$addr;
 ;HEAP32[$name_range$byval_copy>>2]=HEAP32[$name_range>>2]|0;HEAP32[$name_range$byval_copy+4>>2]=HEAP32[$name_range+4>>2]|0;
 $call5 = (_bfVM_createModule($8,$name_range$byval_copy)|0);
 $9 = $out$addr;
 HEAP32[$9>>2] = $call5;
 $10 = $is_anon;
 $tobool6 = ($10|0)!=(0);
 if (!($tobool6)) {
  $11 = $self$addr;
  $12 = $out$addr;
  $13 = HEAP32[$12>>2]|0;
  _bfGCPushRoot($11,$13);
  $14 = $self$addr;
  ;HEAP32[$name_range$byval_copy1>>2]=HEAP32[$name_range>>2]|0;HEAP32[$name_range$byval_copy1+4>>2]=HEAP32[$name_range+4>>2]|0;
  $call8 = (_bfVM_createString($14,$name_range$byval_copy1)|0);
  $module_name = $call8;
  $15 = $self$addr;
  $modules = ((($15)) + 52|0);
  $16 = $module_name;
  $17 = $out$addr;
  _bfHashMap_set($modules,$16,$17);
  $18 = $self$addr;
  _bfGCPopRoot($18);
 }
 $retval = 0;
 $19 = $retval;
 STACKTOP = sp;return ($19|0);
}
function _bfVM_moduleLoadStd($self,$idx,$module_flags) {
 $self = $self|0;
 $idx = $idx|0;
 $module_flags = $module_flags|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $and = 0, $call = 0, $cmp = 0, $idx$addr = 0, $module_flags$addr = 0, $self$addr = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self$addr = $self;
 $idx$addr = $idx;
 $module_flags$addr = $module_flags;
 $0 = $module_flags$addr;
 $and = $0 & 1;
 $tobool = ($and|0)!=(0);
 if (!($tobool)) {
  STACKTOP = sp;return;
 }
 $1 = $self$addr;
 $2 = $idx$addr;
 $call = (_bfVM_moduleMake($1,$2,8738)|0);
 $cmp = ($call|0)==(0);
 if (!($cmp)) {
  STACKTOP = sp;return;
 }
 $3 = $self$addr;
 $4 = $idx$addr;
 (_bfVM_stackStoreNativeFn($3,$4,8745,44,-1)|0);
 STACKTOP = sp;return;
}
function _bfVM_moduleLoadStdIOPrint($vm,$num_args) {
 $vm = $vm|0;
 $num_args = $num_args|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$ptr = 0, $add$ptr5 = 0, $arrayidx = 0, $buffer = 0;
 var $buffer_end = 0, $buffer_head = 0, $cmp = 0, $cmp4 = 0, $i = 0, $inc = 0, $num_args$addr = 0, $or$cond = 0, $params = 0, $print = 0, $print_fn = 0, $stack_top = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $tobool = 0, $tobool1 = 0, $value = 0, $vm$addr = 0, $written_bytes = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1072|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1072|0);
 $buffer = sp;
 $value = sp + 1024|0;
 $vm$addr = $vm;
 $num_args$addr = $num_args;
 $0 = $vm$addr;
 $params = ((($0)) + 16|0);
 $print_fn = ((($params)) + 4|0);
 $1 = HEAP32[$print_fn>>2]|0;
 $print = $1;
 $2 = $print;
 $tobool = ($2|0)!=(0|0);
 $3 = $num_args$addr;
 $tobool1 = ($3|0)!=(0);
 $or$cond = $tobool & $tobool1;
 if (!($or$cond)) {
  STACKTOP = sp;return;
 }
 $buffer_head = $buffer;
 $add$ptr = ((($buffer)) + 1024|0);
 $buffer_end = $add$ptr;
 $i = 0;
 while(1) {
  $4 = $i;
  $5 = $num_args$addr;
  $cmp = ($4|0)<($5|0);
  $6 = $buffer_end;
  $cmp4 = ($buffer>>>0)<($6>>>0);
  $7 = $cmp ? $cmp4 : 0;
  if (!($7)) {
   break;
  }
  $8 = $vm$addr;
  $stack_top = ((($8)) + 8|0);
  $9 = HEAP32[$stack_top>>2]|0;
  $10 = $i;
  $arrayidx = (($9) + ($10<<3)|0);
  $11 = $arrayidx;
  $12 = $11;
  $13 = HEAP32[$12>>2]|0;
  $14 = (($11) + 4)|0;
  $15 = $14;
  $16 = HEAP32[$15>>2]|0;
  $17 = $value;
  $18 = $17;
  HEAP32[$18>>2] = $13;
  $19 = (($17) + 4)|0;
  $20 = $19;
  HEAP32[$20>>2] = $16;
  $21 = $value;
  $22 = $21;
  $23 = HEAP32[$22>>2]|0;
  $24 = (($21) + 4)|0;
  $25 = $24;
  $26 = HEAP32[$25>>2]|0;
  $27 = $buffer_head;
  $28 = $buffer_end;
  $29 = $buffer_head;
  $sub$ptr$lhs$cast = $28;
  $sub$ptr$rhs$cast = $29;
  $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
  $30 = (_bfDbgValueToString($23,$26,$27,$sub$ptr$sub)|0);
  $written_bytes = $30;
  $31 = $written_bytes;
  $32 = $buffer_head;
  $add$ptr5 = (($32) + ($31)|0);
  $buffer_head = $add$ptr5;
  $33 = $i;
  $inc = (($33) + 1)|0;
  $i = $inc;
 }
 $34 = $print;
 $35 = $vm$addr;
 FUNCTION_TABLE_vii[$34 & 63]($35,$buffer);
 STACKTOP = sp;return;
}
function _bfVM_stackStoreNativeFn($self,$inst_or_class_or_module,$field,$func,$arity) {
 $self = $self|0;
 $inst_or_class_or_module = $inst_or_class_or_module|0;
 $field = $field|0;
 $func = $func|0;
 $arity = $arity|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arity$addr = 0, $call = 0, $field$addr = 0, $func$addr = 0, $inst_or_class_or_module$addr = 0, $self$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $self$addr = $self;
 $inst_or_class_or_module$addr = $inst_or_class_or_module;
 $field$addr = $field;
 $func$addr = $func;
 $arity$addr = $arity;
 $0 = $self$addr;
 $1 = $inst_or_class_or_module$addr;
 $2 = $field$addr;
 $3 = $func$addr;
 $4 = $arity$addr;
 $call = (_bfVM_stackStoreClosure($0,$1,$2,$3,$4,0,0)|0);
 STACKTOP = sp;return ($call|0);
}
function _bfVM_stackStoreClosure($self,$inst_or_class_or_module,$field,$func,$arity,$num_statics,$extra_data) {
 $self = $self|0;
 $inst_or_class_or_module = $inst_or_class_or_module|0;
 $field = $field|0;
 $func = $func|0;
 $arity = $arity|0;
 $num_statics = $num_statics|0;
 $extra_data = $extra_data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arity$addr = 0, $arrayidx = 0, $call = 0, $extra_data$addr = 0, $field$addr = 0, $func$addr = 0, $inst_or_class_or_module$addr = 0, $num_statics$addr = 0;
 var $obj = 0, $retval = 0, $self$addr = 0, $stack_top = 0, $tobool = 0, $var_name = 0, $var_name$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $var_name$byval_copy = sp + 48|0;
 $obj = sp;
 $var_name = sp + 8|0;
 $self$addr = $self;
 $inst_or_class_or_module$addr = $inst_or_class_or_module;
 $field$addr = $field;
 $func$addr = $func;
 $arity$addr = $arity;
 $num_statics$addr = $num_statics;
 $extra_data$addr = $extra_data;
 $0 = $self$addr;
 $1 = $inst_or_class_or_module$addr;
 _bfVM_assertStackIndex($0,$1);
 $2 = $self$addr;
 $stack_top = ((($2)) + 8|0);
 $3 = HEAP32[$stack_top>>2]|0;
 $4 = $inst_or_class_or_module$addr;
 $arrayidx = (($3) + ($4<<3)|0);
 $5 = $arrayidx;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = $obj;
 $12 = $11;
 HEAP32[$12>>2] = $7;
 $13 = (($11) + 4)|0;
 $14 = $13;
 HEAP32[$14>>2] = $10;
 $15 = $field$addr;
 _bfMakeStringRangeC($var_name,$15);
 $16 = $self$addr;
 $17 = $obj;
 $18 = $17;
 $19 = HEAP32[$18>>2]|0;
 $20 = (($17) + 4)|0;
 $21 = $20;
 $22 = HEAP32[$21>>2]|0;
 $23 = $self$addr;
 $24 = $func$addr;
 $25 = $arity$addr;
 $26 = $num_statics$addr;
 $27 = $extra_data$addr;
 $call = (_bfVM_createNativeFn($23,$24,$25,$26,$27)|0);
 $28 = (_bfVMValue_fromPointer($call)|0);
 $29 = (getTempRet0() | 0);
 ;HEAP32[$var_name$byval_copy>>2]=HEAP32[$var_name>>2]|0;HEAP32[$var_name$byval_copy+4>>2]=HEAP32[$var_name+4>>2]|0;
 $30 = (_bfVM__stackStoreVariable($16,$19,$22,$var_name$byval_copy,$28,$29)|0);
 $tobool = ($30|0)!=(0);
 if ($tobool) {
  $retval = 8;
  $31 = $retval;
  STACKTOP = sp;return ($31|0);
 } else {
  $retval = 0;
  $31 = $retval;
  STACKTOP = sp;return ($31|0);
 }
 return (0)|0;
}
function _bfVM_createNativeFn($self,$fn_ptr,$arity,$num_statics,$extra_data) {
 $self = $self|0;
 $fn_ptr = $fn_ptr|0;
 $arity = $arity|0;
 $num_statics = $num_statics|0;
 $extra_data = $extra_data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0, $add1 = 0, $arity$addr = 0, $arity2 = 0, $call = 0;
 var $conv = 0, $extra_data$addr = 0, $extra_data_size = 0, $fn = 0, $fn_ptr$addr = 0, $mul = 0, $num_statics$addr = 0, $num_statics3 = 0, $self$addr = 0, $statics = 0, $value = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $self$addr = $self;
 $fn_ptr$addr = $fn_ptr;
 $arity$addr = $arity;
 $num_statics$addr = $num_statics;
 $extra_data$addr = $extra_data;
 $0 = $self$addr;
 $1 = $num_statics$addr;
 $mul = $1<<3;
 $add = (32 + ($mul))|0;
 $2 = $extra_data$addr;
 $conv = $2&65535;
 $add1 = (($add) + ($conv))|0;
 $call = (_allocObj($0,$add1,5)|0);
 $fn = $call;
 $3 = $fn_ptr$addr;
 $4 = $fn;
 $value = ((($4)) + 12|0);
 HEAP32[$value>>2] = $3;
 $5 = $arity$addr;
 $6 = $fn;
 $arity2 = ((($6)) + 16|0);
 HEAP32[$arity2>>2] = $5;
 $7 = $num_statics$addr;
 $8 = $fn;
 $num_statics3 = ((($8)) + 20|0);
 HEAP32[$num_statics3>>2] = $7;
 $9 = $fn;
 $add$ptr = ((($9)) + 32|0);
 $10 = $fn;
 $statics = ((($10)) + 24|0);
 HEAP32[$statics>>2] = $add$ptr;
 $11 = $extra_data$addr;
 $12 = $fn;
 $extra_data_size = ((($12)) + 28|0);
 HEAP16[$extra_data_size>>1] = $11;
 $13 = $fn;
 STACKTOP = sp;return ($13|0);
}
function _bfVM_execInModule($self,$module,$source,$source_length) {
 $self = $self|0;
 $module = $module|0;
 $source = $source|0;
 $source_length = $source_length|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $call = 0, $call1 = 0, $call3 = 0, $err = 0, $module$addr = 0, $module_obj = 0, $self$addr = 0, $source$addr = 0, $source_length$addr = 0, $stack_top = 0, $tobool = 0, $tobool2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $module_obj = sp + 4|0;
 $self$addr = $self;
 $module$addr = $module;
 $source$addr = $source;
 $source_length$addr = $source_length;
 $0 = $self$addr;
 $1 = $module$addr;
 $call = (_bfVM__moduleMake($0,$1,$module_obj)|0);
 $err = $call;
 $2 = $err;
 $tobool = ($2|0)!=(0);
 if ($tobool) {
  $22 = $err;
  STACKTOP = sp;return ($22|0);
 }
 $3 = $self$addr;
 $4 = HEAP32[$module_obj>>2]|0;
 _bfGCPushRoot($3,$4);
 $5 = $self$addr;
 $6 = HEAP32[$module_obj>>2]|0;
 $7 = $source$addr;
 $8 = $source_length$addr;
 $call1 = (_bfVM_compileIntoModule($5,$6,$7,$8)|0);
 $err = $call1;
 $tobool2 = ($call1|0)!=(0);
 if (!($tobool2)) {
  $9 = $self$addr;
  $10 = HEAP32[$module_obj>>2]|0;
  $call3 = (_bfVM_runModule($9,$10)|0);
  $err = $call3;
 }
 $11 = $self$addr;
 (_bfVM_stackResize($11,1)|0);
 $12 = HEAP32[$module_obj>>2]|0;
 $13 = (_bfVMValue_fromPointer($12)|0);
 $14 = (getTempRet0() | 0);
 $15 = $self$addr;
 $stack_top = ((($15)) + 8|0);
 $16 = HEAP32[$stack_top>>2]|0;
 $17 = $16;
 $18 = $17;
 HEAP32[$18>>2] = $13;
 $19 = (($17) + 4)|0;
 $20 = $19;
 HEAP32[$20>>2] = $14;
 $21 = $self$addr;
 _bfGCPopRoot($21);
 $22 = $err;
 STACKTOP = sp;return ($22|0);
}
function _bfVM_dtor($self) {
 $self = $self|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $call = 0, $cmp = 0, $finalized = 0, $finalized16 = 0, $finalized18 = 0, $finalized19 = 0, $free_handles = 0, $free_handles27 = 0;
 var $free_handles29 = 0, $free_handles31 = 0, $garbage_list = 0, $gc_object_list = 0, $gc_object_list10 = 0, $gc_object_list3 = 0, $gc_object_list7 = 0, $gc_object_list9 = 0, $handles = 0, $i = 0, $inc = 0, $last_error = 0, $modules = 0, $next = 0, $next1 = 0, $next15 = 0, $next17 = 0, $next26 = 0, $next28 = 0, $next6 = 0;
 var $next8 = 0, $num_symbols = 0, $self$addr = 0, $stack = 0, $symbols = 0, $symbols21 = 0, $tobool = 0, $tobool13 = 0, $tobool24 = 0, $tobool33 = 0, $tobool4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $self$addr = $self;
 $0 = $self$addr;
 $gc_object_list = ((($0)) + 48|0);
 $1 = HEAP32[$gc_object_list>>2]|0;
 $garbage_list = $1;
 while(1) {
  $2 = $garbage_list;
  $tobool = ($2|0)!=(0|0);
  if (!($tobool)) {
   break;
  }
  $3 = $garbage_list;
  $next1 = ((($3)) + 4|0);
  $4 = HEAP32[$next1>>2]|0;
  $next = $4;
  $5 = $self$addr;
  $6 = $garbage_list;
  _bfObjFinalize($5,$6);
  $7 = $next;
  $garbage_list = $7;
 }
 while(1) {
  $8 = $self$addr;
  $gc_object_list3 = ((($8)) + 48|0);
  $9 = HEAP32[$gc_object_list3>>2]|0;
  $tobool4 = ($9|0)!=(0|0);
  if (!($tobool4)) {
   break;
  }
  $10 = $self$addr;
  $gc_object_list7 = ((($10)) + 48|0);
  $11 = HEAP32[$gc_object_list7>>2]|0;
  $next8 = ((($11)) + 4|0);
  $12 = HEAP32[$next8>>2]|0;
  $next6 = $12;
  $13 = $self$addr;
  $14 = $self$addr;
  $gc_object_list9 = ((($14)) + 48|0);
  $15 = HEAP32[$gc_object_list9>>2]|0;
  _bfVMObject_delete($13,$15);
  $16 = $next6;
  $17 = $self$addr;
  $gc_object_list10 = ((($17)) + 48|0);
  HEAP32[$gc_object_list10>>2] = $16;
 }
 while(1) {
  $18 = $self$addr;
  $finalized = ((($18)) + 604|0);
  $19 = HEAP32[$finalized>>2]|0;
  $tobool13 = ($19|0)!=(0|0);
  $20 = $self$addr;
  if (!($tobool13)) {
   break;
  }
  $finalized16 = ((($20)) + 604|0);
  $21 = HEAP32[$finalized16>>2]|0;
  $next17 = ((($21)) + 4|0);
  $22 = HEAP32[$next17>>2]|0;
  $next15 = $22;
  $23 = $self$addr;
  $24 = $self$addr;
  $finalized18 = ((($24)) + 604|0);
  $25 = HEAP32[$finalized18>>2]|0;
  _bfVMObject_delete($23,$25);
  $26 = $next15;
  $27 = $self$addr;
  $finalized19 = ((($27)) + 604|0);
  HEAP32[$finalized19>>2] = $26;
 }
 $symbols = ((($20)) + 12|0);
 $call = (_Array_size($symbols)|0);
 $num_symbols = $call;
 $i = 0;
 while(1) {
  $28 = $i;
  $29 = $num_symbols;
  $cmp = ($28>>>0)<($29>>>0);
  $30 = $self$addr;
  $symbols21 = ((($30)) + 12|0);
  if (!($cmp)) {
   break;
  }
  $31 = HEAP32[$symbols21>>2]|0;
  $32 = $i;
  $arrayidx = (($31) + ($32<<2)|0);
  $33 = HEAP32[$arrayidx>>2]|0;
  _String_delete($33);
  $34 = $i;
  $inc = (($34) + 1)|0;
  $i = $inc;
 }
 _Array_delete($symbols21);
 $35 = $self$addr;
 _Array_delete($35);
 $36 = $self$addr;
 $stack = ((($36)) + 4|0);
 _Array_delete($stack);
 $37 = $self$addr;
 $modules = ((($37)) + 52|0);
 _bfHashMap_dtor($modules);
 $38 = $self$addr;
 $last_error = ((($38)) + 596|0);
 $39 = HEAP32[$last_error>>2]|0;
 _String_delete($39);
 while(1) {
  $40 = $self$addr;
  $free_handles = ((($40)) + 592|0);
  $41 = HEAP32[$free_handles>>2]|0;
  $tobool24 = ($41|0)!=(0|0);
  $42 = $self$addr;
  if (!($tobool24)) {
   break;
  }
  $free_handles27 = ((($42)) + 592|0);
  $43 = HEAP32[$free_handles27>>2]|0;
  $next28 = ((($43)) + 12|0);
  $44 = HEAP32[$next28>>2]|0;
  $next26 = $44;
  $45 = $self$addr;
  $46 = $self$addr;
  $free_handles29 = ((($46)) + 592|0);
  $47 = HEAP32[$free_handles29>>2]|0;
  (_bfGCAllocMemory($45,$47,16,0)|0);
  $48 = $next26;
  $49 = $self$addr;
  $free_handles31 = ((($49)) + 592|0);
  HEAP32[$free_handles31>>2] = $48;
 }
 $handles = ((($42)) + 588|0);
 $50 = HEAP32[$handles>>2]|0;
 $tobool33 = ($50|0)!=(0|0);
 if ($tobool33) {
  ___assert_fail((8751|0),(4211|0),1703,(8795|0));
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function ___stdio_close($f) {
 $f = $f|0;
 var $0 = 0, $call = 0, $call1 = 0, $call2 = 0, $fd = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $fd = ((($f)) + 60|0);
 $0 = HEAP32[$fd>>2]|0;
 $call = (_dummy_282($0)|0);
 HEAP32[$vararg_buffer>>2] = $call;
 $call1 = (___syscall6(6,($vararg_buffer|0))|0);
 $call2 = (___syscall_ret($call1)|0);
 STACKTOP = sp;return ($call2|0);
}
function ___stdout_write($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $2 = 0, $and = 0, $call = 0, $call3 = 0, $fd = 0, $lbf = 0, $tobool = 0, $tobool2 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $write = 0, $wsz = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $wsz = sp + 16|0;
 $write = ((($f)) + 36|0);
 HEAP32[$write>>2] = 45;
 $0 = HEAP32[$f>>2]|0;
 $and = $0 & 64;
 $tobool = ($and|0)==(0);
 if ($tobool) {
  $fd = ((($f)) + 60|0);
  $1 = HEAP32[$fd>>2]|0;
  $2 = $wsz;
  HEAP32[$vararg_buffer>>2] = $1;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 21523;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $2;
  $call = (___syscall54(54,($vararg_buffer|0))|0);
  $tobool2 = ($call|0)==(0);
  if (!($tobool2)) {
   $lbf = ((($f)) + 75|0);
   HEAP8[$lbf>>0] = -1;
  }
 }
 $call3 = (___stdio_write($f,$buf,$len)|0);
 STACKTOP = sp;return ($call3|0);
}
function ___stdio_seek($f,$0,$1,$whence) {
 $f = $f|0;
 $0 = $0|0;
 $1 = $1|0;
 $whence = $whence|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call2 = 0, $cmp = 0, $fd = 0, $ret = 0, $vararg_buffer = 0;
 var $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp + 8|0;
 $ret = sp;
 $fd = ((($f)) + 60|0);
 $2 = HEAP32[$fd>>2]|0;
 $3 = $ret;
 HEAP32[$vararg_buffer>>2] = $2;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $1;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $0;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $3;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $whence;
 $call = (___syscall140(140,($vararg_buffer|0))|0);
 $call2 = (___syscall_ret($call)|0);
 $cmp = ($call2|0)<(0);
 if ($cmp) {
  $10 = $ret;
  $11 = $10;
  HEAP32[$11>>2] = -1;
  $12 = (($10) + 4)|0;
  $13 = $12;
  HEAP32[$13>>2] = -1;
  $14 = -1;$15 = -1;
 } else {
  $4 = $ret;
  $5 = $4;
  $6 = HEAP32[$5>>2]|0;
  $7 = (($4) + 4)|0;
  $8 = $7;
  $9 = HEAP32[$8>>2]|0;
  $14 = $9;$15 = $6;
 }
 setTempRet0(($14) | 0);
 STACKTOP = sp;return ($15|0);
}
function ___syscall_ret($r) {
 $r = $r|0;
 var $call = 0, $cmp = 0, $retval$0 = 0, $sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($r>>>0)>(4294963200);
 if ($cmp) {
  $sub = (0 - ($r))|0;
  $call = (___errno_location()|0);
  HEAP32[$call>>2] = $sub;
  $retval$0 = -1;
 } else {
  $retval$0 = $r;
 }
 return ($retval$0|0);
}
function ___errno_location() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (10176|0);
}
function ___stdio_write($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0, $add$ptr32 = 0, $buf8 = 0, $buf_size = 0, $call = 0;
 var $call40 = 0, $call7 = 0, $call741 = 0, $call746 = 0, $cmp = 0, $cmp12 = 0, $cmp17 = 0, $cmp24 = 0, $cmp42 = 0, $cnt$0 = 0, $dec = 0, $fd = 0, $incdec$ptr = 0, $iov$043 = 0, $iov$1 = 0, $iov_base2 = 0, $iov_len = 0, $iov_len19 = 0, $iov_len23 = 0, $iov_len3 = 0;
 var $iov_len36 = 0, $iovcnt$045 = 0, $iovcnt$1 = 0, $iovs = 0, $or = 0, $rem$044 = 0, $retval$0 = 0, $sub = 0, $sub$ptr$sub = 0, $sub21 = 0, $sub28 = 0, $sub37 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, $wbase = 0, $wend = 0;
 var $wend14 = 0, $wpos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer3 = sp + 32|0;
 $vararg_buffer = sp + 16|0;
 $iovs = sp;
 $wbase = ((($f)) + 28|0);
 $0 = HEAP32[$wbase>>2]|0;
 HEAP32[$iovs>>2] = $0;
 $iov_len = ((($iovs)) + 4|0);
 $wpos = ((($f)) + 20|0);
 $1 = HEAP32[$wpos>>2]|0;
 $sub$ptr$sub = (($1) - ($0))|0;
 HEAP32[$iov_len>>2] = $sub$ptr$sub;
 $iov_base2 = ((($iovs)) + 8|0);
 HEAP32[$iov_base2>>2] = $buf;
 $iov_len3 = ((($iovs)) + 12|0);
 HEAP32[$iov_len3>>2] = $len;
 $add = (($sub$ptr$sub) + ($len))|0;
 $fd = ((($f)) + 60|0);
 $2 = HEAP32[$fd>>2]|0;
 $3 = $iovs;
 HEAP32[$vararg_buffer>>2] = $2;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $3;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 2;
 $call40 = (___syscall146(146,($vararg_buffer|0))|0);
 $call741 = (___syscall_ret($call40)|0);
 $cmp42 = ($add|0)==($call741|0);
 L1: do {
  if ($cmp42) {
   label = 3;
  } else {
   $call746 = $call741;$iov$043 = $iovs;$iovcnt$045 = 2;$rem$044 = $add;
   while(1) {
    $cmp12 = ($call746|0)<(0);
    if ($cmp12) {
     break;
    }
    $sub21 = (($rem$044) - ($call746))|0;
    $iov_len23 = ((($iov$043)) + 4|0);
    $9 = HEAP32[$iov_len23>>2]|0;
    $cmp24 = ($call746>>>0)>($9>>>0);
    $incdec$ptr = ((($iov$043)) + 8|0);
    $iov$1 = $cmp24 ? $incdec$ptr : $iov$043;
    $dec = $cmp24 << 31 >> 31;
    $iovcnt$1 = (($iovcnt$045) + ($dec))|0;
    $sub28 = $cmp24 ? $9 : 0;
    $cnt$0 = (($call746) - ($sub28))|0;
    $10 = HEAP32[$iov$1>>2]|0;
    $add$ptr32 = (($10) + ($cnt$0)|0);
    HEAP32[$iov$1>>2] = $add$ptr32;
    $iov_len36 = ((($iov$1)) + 4|0);
    $11 = HEAP32[$iov_len36>>2]|0;
    $sub37 = (($11) - ($cnt$0))|0;
    HEAP32[$iov_len36>>2] = $sub37;
    $12 = HEAP32[$fd>>2]|0;
    $13 = $iov$1;
    HEAP32[$vararg_buffer3>>2] = $12;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $13;
    $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
    HEAP32[$vararg_ptr7>>2] = $iovcnt$1;
    $call = (___syscall146(146,($vararg_buffer3|0))|0);
    $call7 = (___syscall_ret($call)|0);
    $cmp = ($sub21|0)==($call7|0);
    if ($cmp) {
     label = 3;
     break L1;
    } else {
     $call746 = $call7;$iov$043 = $iov$1;$iovcnt$045 = $iovcnt$1;$rem$044 = $sub21;
    }
   }
   $wend14 = ((($f)) + 16|0);
   HEAP32[$wend14>>2] = 0;
   HEAP32[$wbase>>2] = 0;
   HEAP32[$wpos>>2] = 0;
   $7 = HEAP32[$f>>2]|0;
   $or = $7 | 32;
   HEAP32[$f>>2] = $or;
   $cmp17 = ($iovcnt$045|0)==(2);
   if ($cmp17) {
    $retval$0 = 0;
   } else {
    $iov_len19 = ((($iov$043)) + 4|0);
    $8 = HEAP32[$iov_len19>>2]|0;
    $sub = (($len) - ($8))|0;
    $retval$0 = $sub;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $buf8 = ((($f)) + 44|0);
  $4 = HEAP32[$buf8>>2]|0;
  $buf_size = ((($f)) + 48|0);
  $5 = HEAP32[$buf_size>>2]|0;
  $add$ptr = (($4) + ($5)|0);
  $wend = ((($f)) + 16|0);
  HEAP32[$wend>>2] = $add$ptr;
  $6 = $4;
  HEAP32[$wbase>>2] = $6;
  HEAP32[$wpos>>2] = $6;
  $retval$0 = $len;
 }
 STACKTOP = sp;return ($retval$0|0);
}
function _dummy_282($fd) {
 $fd = $fd|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($fd|0);
}
function ___stdio_read($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $$cast = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $add$ptr = 0, $and = 0, $arrayidx21 = 0, $arrayinit$element = 0, $buf3 = 0, $buf_size = 0, $call = 0, $call6 = 0, $cmp = 0, $cmp8 = 0;
 var $fd = 0, $incdec$ptr = 0, $iov = 0, $iov_len = 0, $iov_len4 = 0, $lnot$ext = 0, $or = 0, $rend = 0, $retval$0 = 0, $rpos = 0, $sub = 0, $sub13 = 0, $sub20 = 0, $tobool = 0, $tobool17 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $xor = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp + 16|0;
 $iov = sp;
 HEAP32[$iov>>2] = $buf;
 $iov_len = ((($iov)) + 4|0);
 $buf_size = ((($f)) + 48|0);
 $0 = HEAP32[$buf_size>>2]|0;
 $tobool = ($0|0)!=(0);
 $lnot$ext = $tobool&1;
 $sub = (($len) - ($lnot$ext))|0;
 HEAP32[$iov_len>>2] = $sub;
 $arrayinit$element = ((($iov)) + 8|0);
 $buf3 = ((($f)) + 44|0);
 $1 = HEAP32[$buf3>>2]|0;
 HEAP32[$arrayinit$element>>2] = $1;
 $iov_len4 = ((($iov)) + 12|0);
 HEAP32[$iov_len4>>2] = $0;
 $fd = ((($f)) + 60|0);
 $2 = HEAP32[$fd>>2]|0;
 $3 = $iov;
 HEAP32[$vararg_buffer>>2] = $2;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $3;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 2;
 $call = (___syscall145(145,($vararg_buffer|0))|0);
 $call6 = (___syscall_ret($call)|0);
 $cmp = ($call6|0)<(1);
 if ($cmp) {
  $and = $call6 & 48;
  $xor = $and ^ 16;
  $4 = HEAP32[$f>>2]|0;
  $or = $4 | $xor;
  HEAP32[$f>>2] = $or;
  $retval$0 = $call6;
 } else {
  $5 = HEAP32[$iov_len>>2]|0;
  $cmp8 = ($call6>>>0)>($5>>>0);
  if ($cmp8) {
   $sub13 = (($call6) - ($5))|0;
   $6 = HEAP32[$buf3>>2]|0;
   $rpos = ((($f)) + 4|0);
   HEAP32[$rpos>>2] = $6;
   $$cast = $6;
   $add$ptr = (($$cast) + ($sub13)|0);
   $rend = ((($f)) + 8|0);
   HEAP32[$rend>>2] = $add$ptr;
   $7 = HEAP32[$buf_size>>2]|0;
   $tobool17 = ($7|0)==(0);
   if ($tobool17) {
    $retval$0 = $len;
   } else {
    $incdec$ptr = ((($$cast)) + 1|0);
    HEAP32[$rpos>>2] = $incdec$ptr;
    $8 = HEAP8[$$cast>>0]|0;
    $sub20 = (($len) + -1)|0;
    $arrayidx21 = (($buf) + ($sub20)|0);
    HEAP8[$arrayidx21>>0] = $8;
    $retval$0 = $len;
   }
  } else {
   $retval$0 = $call6;
  }
 }
 STACKTOP = sp;return ($retval$0|0);
}
function ___shlim($f,$0,$1) {
 $f = $f|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $add$ptr = 0, $or$cond = 0, $rend = 0, $rpos = 0, $shcnt = 0, $shend = 0, $shend5 = 0, $shlim = 0, $sub$ptr$sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $shlim = ((($f)) + 112|0);
 $2 = $shlim;
 $3 = $2;
 HEAP32[$3>>2] = $0;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = $1;
 $rend = ((($f)) + 8|0);
 $6 = HEAP32[$rend>>2]|0;
 $rpos = ((($f)) + 4|0);
 $7 = HEAP32[$rpos>>2]|0;
 $sub$ptr$sub = (($6) - ($7))|0;
 $8 = ($sub$ptr$sub|0)<(0);
 $9 = $8 << 31 >> 31;
 $shcnt = ((($f)) + 120|0);
 $10 = $shcnt;
 $11 = $10;
 HEAP32[$11>>2] = $sub$ptr$sub;
 $12 = (($10) + 4)|0;
 $13 = $12;
 HEAP32[$13>>2] = $9;
 $14 = ($0|0)!=(0);
 $15 = ($1|0)!=(0);
 $16 = $14 | $15;
 $17 = ($9|0)>($1|0);
 $18 = ($sub$ptr$sub>>>0)>($0>>>0);
 $19 = ($9|0)==($1|0);
 $20 = $19 & $18;
 $21 = $17 | $20;
 $or$cond = $16 & $21;
 if ($or$cond) {
  $22 = $7;
  $add$ptr = (($22) + ($0)|0);
  $shend = ((($f)) + 104|0);
  HEAP32[$shend>>2] = $add$ptr;
 } else {
  $shend5 = ((($f)) + 104|0);
  HEAP32[$shend5>>2] = $6;
 }
 return;
}
function ___shgetc($f) {
 $f = $f|0;
 var $$pre = 0, $$pre25 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0, $arrayidx = 0, $call = 0, $cmp2 = 0, $cmp35 = 0, $conv34 = 0, $conv38 = 0, $idx$ext = 0, $rend18$phi$trans$insert = 0, $retval$0 = 0;
 var $rpos = 0, $rpos33$phi$trans$insert = 0, $shcnt = 0, $shcnt30 = 0, $shcnt7 = 0, $shend = 0, $shend17 = 0, $shend19 = 0, $shlim = 0, $sub$ptr$lhs$cast26 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $sub$ptr$sub28 = 0, $tobool22 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $shlim = ((($f)) + 112|0);
 $0 = $shlim;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = ($2|0)==(0);
 $7 = ($5|0)==(0);
 $8 = $6 & $7;
 if ($8) {
  label = 3;
 } else {
  $shcnt = ((($f)) + 120|0);
  $9 = $shcnt;
  $10 = $9;
  $11 = HEAP32[$10>>2]|0;
  $12 = (($9) + 4)|0;
  $13 = $12;
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)<($5|0);
  $16 = ($11>>>0)<($2>>>0);
  $17 = ($14|0)==($5|0);
  $18 = $17 & $16;
  $19 = $15 | $18;
  if ($19) {
   label = 3;
  } else {
   label = 4;
  }
 }
 if ((label|0) == 3) {
  $call = (___uflow($f)|0);
  $cmp2 = ($call|0)<(0);
  if ($cmp2) {
   label = 4;
  } else {
   $20 = $shlim;
   $21 = $20;
   $22 = HEAP32[$21>>2]|0;
   $23 = (($20) + 4)|0;
   $24 = $23;
   $25 = HEAP32[$24>>2]|0;
   $26 = ($22|0)==(0);
   $27 = ($25|0)==(0);
   $28 = $26 & $27;
   $rend18$phi$trans$insert = ((($f)) + 8|0);
   $$pre = HEAP32[$rend18$phi$trans$insert>>2]|0;
   if ($28) {
    $29 = $$pre;
    $66 = $29;
    label = 9;
   } else {
    $rpos = ((($f)) + 4|0);
    $30 = HEAP32[$rpos>>2]|0;
    $sub$ptr$rhs$cast = $30;
    $sub$ptr$sub = (($$pre) - ($sub$ptr$rhs$cast))|0;
    $31 = ($sub$ptr$sub|0)<(0);
    $32 = $31 << 31 >> 31;
    $shcnt7 = ((($f)) + 120|0);
    $33 = $shcnt7;
    $34 = $33;
    $35 = HEAP32[$34>>2]|0;
    $36 = (($33) + 4)|0;
    $37 = $36;
    $38 = HEAP32[$37>>2]|0;
    $39 = (_i64Subtract(($22|0),($25|0),($35|0),($38|0))|0);
    $40 = (getTempRet0() | 0);
    $41 = ($40|0)>($32|0);
    $42 = ($39>>>0)>($sub$ptr$sub>>>0);
    $43 = ($40|0)==($32|0);
    $44 = $43 & $42;
    $45 = $41 | $44;
    $46 = $$pre;
    if ($45) {
     $66 = $46;
     label = 9;
    } else {
     $idx$ext = (($39) + -1)|0;
     $add$ptr = (($30) + ($idx$ext)|0);
     $shend17 = ((($f)) + 104|0);
     HEAP32[$shend17>>2] = $add$ptr;
     $47 = $46;
    }
   }
   if ((label|0) == 9) {
    $shend19 = ((($f)) + 104|0);
    HEAP32[$shend19>>2] = $$pre;
    $47 = $66;
   }
   $tobool22 = ($47|0)==(0|0);
   $rpos33$phi$trans$insert = ((($f)) + 4|0);
   if ($tobool22) {
    $$pre25 = HEAP32[$rpos33$phi$trans$insert>>2]|0;
    $64 = $$pre25;
   } else {
    $48 = HEAP32[$rpos33$phi$trans$insert>>2]|0;
    $sub$ptr$lhs$cast26 = $47;
    $sub$ptr$sub28 = (($sub$ptr$lhs$cast26) + 1)|0;
    $add = (($sub$ptr$sub28) - ($48))|0;
    $49 = ($add|0)<(0);
    $50 = $49 << 31 >> 31;
    $shcnt30 = ((($f)) + 120|0);
    $51 = $shcnt30;
    $52 = $51;
    $53 = HEAP32[$52>>2]|0;
    $54 = (($51) + 4)|0;
    $55 = $54;
    $56 = HEAP32[$55>>2]|0;
    $57 = (_i64Add(($53|0),($56|0),($add|0),($50|0))|0);
    $58 = (getTempRet0() | 0);
    $59 = $shcnt30;
    $60 = $59;
    HEAP32[$60>>2] = $57;
    $61 = (($59) + 4)|0;
    $62 = $61;
    HEAP32[$62>>2] = $58;
    $63 = $48;
    $64 = $63;
   }
   $arrayidx = ((($64)) + -1|0);
   $65 = HEAP8[$arrayidx>>0]|0;
   $conv34 = $65&255;
   $cmp35 = ($call|0)==($conv34|0);
   if ($cmp35) {
    $retval$0 = $call;
   } else {
    $conv38 = $call&255;
    HEAP8[$arrayidx>>0] = $conv38;
    $retval$0 = $call;
   }
  }
 }
 if ((label|0) == 4) {
  $shend = ((($f)) + 104|0);
  HEAP32[$shend>>2] = 0;
  $retval$0 = -1;
 }
 return ($retval$0|0);
}
function _isspace($c) {
 $c = $c|0;
 var $0 = 0, $cmp = 0, $cmp1 = 0, $narrow = 0, $sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($c|0)==(32);
 $sub = (($c) + -9)|0;
 $cmp1 = ($sub>>>0)<(5);
 $narrow = $cmp | $cmp1;
 $0 = $narrow&1;
 return ($0|0);
}
function ___uflow($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $c = 0, $call = 0, $call1 = 0, $cmp = 0, $conv = 0, $read = 0, $retval$0 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $c = sp;
 $call = (___toread($f)|0);
 $tobool = ($call|0)==(0);
 if ($tobool) {
  $read = ((($f)) + 32|0);
  $0 = HEAP32[$read>>2]|0;
  $call1 = (FUNCTION_TABLE_iiii[$0 & 63]($f,$c,1)|0);
  $cmp = ($call1|0)==(1);
  if ($cmp) {
   $1 = HEAP8[$c>>0]|0;
   $conv = $1&255;
   $retval$0 = $conv;
  } else {
   $retval$0 = -1;
  }
 } else {
  $retval$0 = -1;
 }
 STACKTOP = sp;return ($retval$0|0);
}
function ___toread($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $add$ptr = 0, $and = 0, $buf = 0, $buf_size = 0, $cmp = 0, $conv = 0, $conv3 = 0, $mode = 0, $or = 0, $or9 = 0, $rend = 0, $retval$0 = 0;
 var $rpos = 0, $sext = 0, $sub = 0, $tobool = 0, $wbase = 0, $wend = 0, $wpos = 0, $write = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $mode = ((($f)) + 74|0);
 $0 = HEAP8[$mode>>0]|0;
 $conv = $0 << 24 >> 24;
 $sub = (($conv) + 255)|0;
 $or = $sub | $conv;
 $conv3 = $or&255;
 HEAP8[$mode>>0] = $conv3;
 $wpos = ((($f)) + 20|0);
 $1 = HEAP32[$wpos>>2]|0;
 $wbase = ((($f)) + 28|0);
 $2 = HEAP32[$wbase>>2]|0;
 $cmp = ($1>>>0)>($2>>>0);
 if ($cmp) {
  $write = ((($f)) + 36|0);
  $3 = HEAP32[$write>>2]|0;
  (FUNCTION_TABLE_iiii[$3 & 63]($f,0,0)|0);
 }
 $wend = ((($f)) + 16|0);
 HEAP32[$wend>>2] = 0;
 HEAP32[$wbase>>2] = 0;
 HEAP32[$wpos>>2] = 0;
 $4 = HEAP32[$f>>2]|0;
 $and = $4 & 4;
 $tobool = ($and|0)==(0);
 if ($tobool) {
  $buf = ((($f)) + 44|0);
  $5 = HEAP32[$buf>>2]|0;
  $buf_size = ((($f)) + 48|0);
  $6 = HEAP32[$buf_size>>2]|0;
  $add$ptr = (($5) + ($6)|0);
  $rend = ((($f)) + 8|0);
  HEAP32[$rend>>2] = $add$ptr;
  $rpos = ((($f)) + 4|0);
  HEAP32[$rpos>>2] = $add$ptr;
  $7 = $4 << 27;
  $sext = $7 >> 31;
  $retval$0 = $sext;
 } else {
  $or9 = $4 | 32;
  HEAP32[$f>>2] = $or9;
  $retval$0 = -1;
 }
 return ($retval$0|0);
}
function _strlen($s) {
 $s = $s|0;
 var $$pn = 0, $$pn24 = 0, $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $and = 0, $and3 = 0, $incdec$ptr = 0, $incdec$ptr1323 = 0, $incdec$ptr7 = 0, $neg = 0, $rem = 0, $rem13 = 0, $retval$0 = 0, $s$addr$0$lcssa = 0, $s$addr$015 = 0;
 var $s$addr$1$lcssa = 0, $sub = 0, $sub$ptr$lhs$cast15 = 0, $tobool = 0, $tobool1 = 0, $tobool10 = 0, $tobool1021 = 0, $tobool14 = 0, $tobool4 = 0, $w$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $s;
 $rem13 = $0 & 3;
 $tobool14 = ($rem13|0)==(0);
 L1: do {
  if ($tobool14) {
   $s$addr$0$lcssa = $s;
   label = 5;
  } else {
   $5 = $0;$s$addr$015 = $s;
   while(1) {
    $1 = HEAP8[$s$addr$015>>0]|0;
    $tobool1 = ($1<<24>>24)==(0);
    if ($tobool1) {
     $$pn = $5;
     break L1;
    }
    $incdec$ptr = ((($s$addr$015)) + 1|0);
    $2 = $incdec$ptr;
    $rem = $2 & 3;
    $tobool = ($rem|0)==(0);
    if ($tobool) {
     $s$addr$0$lcssa = $incdec$ptr;
     label = 5;
     break;
    } else {
     $5 = $2;$s$addr$015 = $incdec$ptr;
    }
   }
  }
 } while(0);
 if ((label|0) == 5) {
  $w$0 = $s$addr$0$lcssa;
  while(1) {
   $3 = HEAP32[$w$0>>2]|0;
   $sub = (($3) + -16843009)|0;
   $neg = $3 & -2139062144;
   $and = $neg ^ -2139062144;
   $and3 = $and & $sub;
   $tobool4 = ($and3|0)==(0);
   $incdec$ptr7 = ((($w$0)) + 4|0);
   if ($tobool4) {
    $w$0 = $incdec$ptr7;
   } else {
    break;
   }
  }
  $4 = $3&255;
  $tobool1021 = ($4<<24>>24)==(0);
  if ($tobool1021) {
   $s$addr$1$lcssa = $w$0;
  } else {
   $$pn24 = $w$0;
   while(1) {
    $incdec$ptr1323 = ((($$pn24)) + 1|0);
    $$pre = HEAP8[$incdec$ptr1323>>0]|0;
    $tobool10 = ($$pre<<24>>24)==(0);
    if ($tobool10) {
     $s$addr$1$lcssa = $incdec$ptr1323;
     break;
    } else {
     $$pn24 = $incdec$ptr1323;
    }
   }
  }
  $sub$ptr$lhs$cast15 = $s$addr$1$lcssa;
  $$pn = $sub$ptr$lhs$cast15;
 }
 $retval$0 = (($$pn) - ($0))|0;
 return ($retval$0|0);
}
function _memcmp($vl,$vr,$n) {
 $vl = $vl|0;
 $vr = $vr|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $cmp = 0, $cond = 0, $conv5 = 0, $conv6 = 0, $dec = 0, $incdec$ptr = 0, $incdec$ptr3 = 0, $l$012 = 0, $n$addr$011 = 0, $r$013 = 0, $sub = 0, $tobool = 0, $tobool10 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $tobool10 = ($n|0)==(0);
 L1: do {
  if ($tobool10) {
   $cond = 0;
  } else {
   $l$012 = $vl;$n$addr$011 = $n;$r$013 = $vr;
   while(1) {
    $0 = HEAP8[$l$012>>0]|0;
    $1 = HEAP8[$r$013>>0]|0;
    $cmp = ($0<<24>>24)==($1<<24>>24);
    if (!($cmp)) {
     break;
    }
    $dec = (($n$addr$011) + -1)|0;
    $incdec$ptr = ((($l$012)) + 1|0);
    $incdec$ptr3 = ((($r$013)) + 1|0);
    $tobool = ($dec|0)==(0);
    if ($tobool) {
     $cond = 0;
     break L1;
    } else {
     $l$012 = $incdec$ptr;$n$addr$011 = $dec;$r$013 = $incdec$ptr3;
    }
   }
   $conv5 = $0&255;
   $conv6 = $1&255;
   $sub = (($conv5) - ($conv6))|0;
   $cond = $sub;
  }
 } while(0);
 return ($cond|0);
}
function _scalbn($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $add = 0, $add14 = 0, $add21 = 0, $cmp = 0, $cmp1 = 0, $cmp11 = 0, $cmp8 = 0, $mul = 0.0, $mul10 = 0.0, $mul13 = 0.0, $mul22 = 0.0, $mul3 = 0.0, $n$addr$0 = 0, $spec$select = 0, $spec$select20 = 0.0;
 var $spec$select21 = 0, $spec$select22 = 0.0, $spec$store$select = 0, $spec$store$select1 = 0, $sub = 0, $sub4 = 0, $y$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($n|0)>(1023);
 if ($cmp) {
  $mul = $x * 8.9884656743115795E+307;
  $sub = (($n) + -1023)|0;
  $cmp1 = ($n|0)>(2046);
  $mul3 = $mul * 8.9884656743115795E+307;
  $sub4 = (($n) + -2046)|0;
  $0 = ($sub4|0)<(1023);
  $spec$store$select = $0 ? $sub4 : 1023;
  $spec$select = $cmp1 ? $spec$store$select : $sub;
  $spec$select20 = $cmp1 ? $mul3 : $mul;
  $n$addr$0 = $spec$select;$y$0 = $spec$select20;
 } else {
  $cmp8 = ($n|0)<(-1022);
  if ($cmp8) {
   $mul10 = $x * 2.2250738585072014E-308;
   $add = (($n) + 1022)|0;
   $cmp11 = ($n|0)<(-2044);
   $mul13 = $mul10 * 2.2250738585072014E-308;
   $add14 = (($n) + 2044)|0;
   $1 = ($add14|0)>(-1022);
   $spec$store$select1 = $1 ? $add14 : -1022;
   $spec$select21 = $cmp11 ? $spec$store$select1 : $add;
   $spec$select22 = $cmp11 ? $mul13 : $mul10;
   $n$addr$0 = $spec$select21;$y$0 = $spec$select22;
  } else {
   $n$addr$0 = $n;$y$0 = $x;
  }
 }
 $add21 = (($n$addr$0) + 1023)|0;
 $2 = (_bitshift64Shl(($add21|0),0,52)|0);
 $3 = (getTempRet0() | 0);
 HEAP32[tempDoublePtr>>2] = $2;HEAP32[tempDoublePtr+4>>2] = $3;$4 = +HEAPF64[tempDoublePtr>>3];
 $mul22 = $y$0 * $4;
 return (+$mul22);
}
function _frexp($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $call = 0.0, $conv = 0, $mul = 0.0, $retval$0 = 0.0, $storemerge = 0, $sub = 0, $sub8 = 0, $tobool1 = 0, $trunc$clear = 0, $x$addr$0 = 0.0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $3 = (getTempRet0() | 0);
 $4 = $2&65535;
 $trunc$clear = $4 & 2047;
 switch ($trunc$clear<<16>>16) {
 case 0:  {
  $tobool1 = $x != 0.0;
  if ($tobool1) {
   $mul = $x * 1.8446744073709552E+19;
   $call = (+_frexp($mul,$e));
   $5 = HEAP32[$e>>2]|0;
   $sub = (($5) + -64)|0;
   $storemerge = $sub;$x$addr$0 = $call;
  } else {
   $storemerge = 0;$x$addr$0 = $x;
  }
  HEAP32[$e>>2] = $storemerge;
  $retval$0 = $x$addr$0;
  break;
 }
 case 2047:  {
  $retval$0 = $x;
  break;
 }
 default: {
  $conv = $2 & 2047;
  $sub8 = (($conv) + -1022)|0;
  HEAP32[$e>>2] = $sub8;
  $6 = $1 & -2146435073;
  $7 = $6 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $7;$8 = +HEAPF64[tempDoublePtr>>3];
  $retval$0 = $8;
 }
 }
 return (+$retval$0);
}
function _copysign($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $y;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = $1 & 2147483647;
 $5 = $3 & -2147483648;
 $6 = $5 | $4;
 HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $6;$7 = +HEAPF64[tempDoublePtr>>3];
 return (+$7);
}
function _scalbnl($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $call = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (+_scalbn($x,$n));
 return (+$call);
}
function _fmodl($x,$y) {
 $x = +$x;
 $y = +$y;
 var $call = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (+_fmod($x,$y));
 return (+$call);
}
function _fmod($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0.0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $add = 0, $add128 = 0;
 var $add68 = 0, $cmp119 = 0, $cmp27 = 0, $cmp79 = 0, $cmp7965 = 0, $cmp85$lcssa = 0, $cmp8571 = 0, $conv = 0, $conv5 = 0, $dec = 0, $dec117 = 0, $dec64 = 0, $dec96 = 0, $div = 0.0, $ex$0$lcssa = 0, $ex$081 = 0, $ex$1 = 0, $ex$2$lcssa = 0, $ex$268 = 0, $ex$3$lcssa = 0;
 var $ex$362 = 0, $ey$0$lcssa = 0, $ey$077 = 0, $ey$1 = 0, $mul = 0.0, $mul107 = 0.0, $mul42 = 0.0, $mul91 = 0.0, $or$cond = 0, $retval$0 = 0.0, $spec$select = 0.0, $tobool = 0, $tobool54 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $y;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $5 = (getTempRet0() | 0);
 $conv = $4 & 2047;
 $6 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $7 = (getTempRet0() | 0);
 $conv5 = $6 & 2047;
 $8 = $1 & -2147483648;
 $9 = (_bitshift64Shl(($2|0),($3|0),1)|0);
 $10 = (getTempRet0() | 0);
 $11 = ($9|0)==(0);
 $12 = ($10|0)==(0);
 $13 = $11 & $12;
 L1: do {
  if ($13) {
   label = 3;
  } else {
   $14 = (___DOUBLE_BITS_126($y)|0);
   $15 = (getTempRet0() | 0);
   $16 = $15 & 2147483647;
   $17 = ($16>>>0)>(2146435072);
   $18 = ($14>>>0)>(0);
   $19 = ($16|0)==(2146435072);
   $20 = $19 & $18;
   $21 = $17 | $20;
   $cmp27 = ($conv|0)==(2047);
   $or$cond = $cmp27 | $21;
   if ($or$cond) {
    label = 3;
   } else {
    $22 = (_bitshift64Shl(($0|0),($1|0),1)|0);
    $23 = (getTempRet0() | 0);
    $24 = ($23>>>0)>($10>>>0);
    $25 = ($22>>>0)>($9>>>0);
    $26 = ($23|0)==($10|0);
    $27 = $26 & $25;
    $28 = $24 | $27;
    if (!($28)) {
     $29 = ($22|0)==($9|0);
     $30 = ($23|0)==($10|0);
     $31 = $29 & $30;
     $mul42 = $x * 0.0;
     $spec$select = $31 ? $mul42 : $x;
     return (+$spec$select);
    }
    $tobool = ($conv|0)==(0);
    if ($tobool) {
     $32 = (_bitshift64Shl(($0|0),($1|0),12)|0);
     $33 = (getTempRet0() | 0);
     $34 = ($33|0)>(-1);
     $35 = ($32>>>0)>(4294967295);
     $36 = ($33|0)==(-1);
     $37 = $36 & $35;
     $38 = $34 | $37;
     if ($38) {
      $39 = $32;$40 = $33;$ex$081 = 0;
      while(1) {
       $dec = (($ex$081) + -1)|0;
       $41 = (_bitshift64Shl(($39|0),($40|0),1)|0);
       $42 = (getTempRet0() | 0);
       $43 = ($42|0)>(-1);
       $44 = ($41>>>0)>(4294967295);
       $45 = ($42|0)==(-1);
       $46 = $45 & $44;
       $47 = $43 | $46;
       if ($47) {
        $39 = $41;$40 = $42;$ex$081 = $dec;
       } else {
        $ex$0$lcssa = $dec;
        break;
       }
      }
     } else {
      $ex$0$lcssa = 0;
     }
     $add = (1 - ($ex$0$lcssa))|0;
     $48 = (_bitshift64Shl(($0|0),($1|0),($add|0))|0);
     $49 = (getTempRet0() | 0);
     $72 = $48;$73 = $49;$ex$1 = $ex$0$lcssa;
    } else {
     $50 = $1 & 1048575;
     $51 = $50 | 1048576;
     $72 = $0;$73 = $51;$ex$1 = $conv;
    }
    $tobool54 = ($conv5|0)==(0);
    if ($tobool54) {
     $52 = (_bitshift64Shl(($2|0),($3|0),12)|0);
     $53 = (getTempRet0() | 0);
     $54 = ($53|0)>(-1);
     $55 = ($52>>>0)>(4294967295);
     $56 = ($53|0)==(-1);
     $57 = $56 & $55;
     $58 = $54 | $57;
     if ($58) {
      $59 = $52;$60 = $53;$ey$077 = 0;
      while(1) {
       $dec64 = (($ey$077) + -1)|0;
       $61 = (_bitshift64Shl(($59|0),($60|0),1)|0);
       $62 = (getTempRet0() | 0);
       $63 = ($62|0)>(-1);
       $64 = ($61>>>0)>(4294967295);
       $65 = ($62|0)==(-1);
       $66 = $65 & $64;
       $67 = $63 | $66;
       if ($67) {
        $59 = $61;$60 = $62;$ey$077 = $dec64;
       } else {
        $ey$0$lcssa = $dec64;
        break;
       }
      }
     } else {
      $ey$0$lcssa = 0;
     }
     $add68 = (1 - ($ey$0$lcssa))|0;
     $68 = (_bitshift64Shl(($2|0),($3|0),($add68|0))|0);
     $69 = (getTempRet0() | 0);
     $74 = $68;$75 = $69;$ey$1 = $ey$0$lcssa;
    } else {
     $70 = $3 & 1048575;
     $71 = $70 | 1048576;
     $74 = $2;$75 = $71;$ey$1 = $conv5;
    }
    $cmp7965 = ($ex$1|0)>($ey$1|0);
    $76 = (_i64Subtract(($72|0),($73|0),($74|0),($75|0))|0);
    $77 = (getTempRet0() | 0);
    $78 = ($77|0)>(-1);
    $79 = ($76>>>0)>(4294967295);
    $80 = ($77|0)==(-1);
    $81 = $80 & $79;
    $82 = $78 | $81;
    L25: do {
     if ($cmp7965) {
      $136 = $72;$137 = $73;$84 = $76;$86 = $77;$cmp8571 = $82;$ex$268 = $ex$1;
      while(1) {
       if ($cmp8571) {
        $83 = ($84|0)==(0);
        $85 = ($86|0)==(0);
        $87 = $83 & $85;
        if ($87) {
         break;
        } else {
         $88 = $84;$89 = $86;
        }
       } else {
        $88 = $136;$89 = $137;
       }
       $90 = (_bitshift64Shl(($88|0),($89|0),1)|0);
       $91 = (getTempRet0() | 0);
       $dec96 = (($ex$268) + -1)|0;
       $cmp79 = ($dec96|0)>($ey$1|0);
       $92 = (_i64Subtract(($90|0),($91|0),($74|0),($75|0))|0);
       $93 = (getTempRet0() | 0);
       $94 = ($93|0)>(-1);
       $95 = ($92>>>0)>(4294967295);
       $96 = ($93|0)==(-1);
       $97 = $96 & $95;
       $98 = $94 | $97;
       if ($cmp79) {
        $136 = $90;$137 = $91;$84 = $92;$86 = $93;$cmp8571 = $98;$ex$268 = $dec96;
       } else {
        $100 = $92;$102 = $93;$134 = $90;$135 = $91;$cmp85$lcssa = $98;$ex$2$lcssa = $dec96;
        break L25;
       }
      }
      $mul91 = $x * 0.0;
      $retval$0 = $mul91;
      break L1;
     } else {
      $100 = $76;$102 = $77;$134 = $72;$135 = $73;$cmp85$lcssa = $82;$ex$2$lcssa = $ex$1;
     }
    } while(0);
    if ($cmp85$lcssa) {
     $99 = ($100|0)==(0);
     $101 = ($102|0)==(0);
     $103 = $99 & $101;
     if ($103) {
      $mul107 = $x * 0.0;
      $retval$0 = $mul107;
      break;
     } else {
      $105 = $102;$107 = $100;
     }
    } else {
     $105 = $135;$107 = $134;
    }
    $104 = ($105>>>0)<(1048576);
    $106 = ($107>>>0)<(0);
    $108 = ($105|0)==(1048576);
    $109 = $108 & $106;
    $110 = $104 | $109;
    if ($110) {
     $111 = $107;$112 = $105;$ex$362 = $ex$2$lcssa;
     while(1) {
      $113 = (_bitshift64Shl(($111|0),($112|0),1)|0);
      $114 = (getTempRet0() | 0);
      $dec117 = (($ex$362) + -1)|0;
      $115 = ($114>>>0)<(1048576);
      $116 = ($113>>>0)<(0);
      $117 = ($114|0)==(1048576);
      $118 = $117 & $116;
      $119 = $115 | $118;
      if ($119) {
       $111 = $113;$112 = $114;$ex$362 = $dec117;
      } else {
       $120 = $113;$121 = $114;$ex$3$lcssa = $dec117;
       break;
      }
     }
    } else {
     $120 = $107;$121 = $105;$ex$3$lcssa = $ex$2$lcssa;
    }
    $cmp119 = ($ex$3$lcssa|0)>(0);
    if ($cmp119) {
     $122 = (_i64Add(($120|0),($121|0),0,-1048576)|0);
     $123 = (getTempRet0() | 0);
     $124 = (_bitshift64Shl(($ex$3$lcssa|0),0,52)|0);
     $125 = (getTempRet0() | 0);
     $126 = $122 | $124;
     $127 = $123 | $125;
     $131 = $127;$133 = $126;
    } else {
     $add128 = (1 - ($ex$3$lcssa))|0;
     $128 = (_bitshift64Lshr(($120|0),($121|0),($add128|0))|0);
     $129 = (getTempRet0() | 0);
     $131 = $129;$133 = $128;
    }
    $130 = $131 | $8;
    HEAP32[tempDoublePtr>>2] = $133;HEAP32[tempDoublePtr+4>>2] = $130;$132 = +HEAPF64[tempDoublePtr>>3];
    $retval$0 = $132;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $mul = $x * $y;
  $div = $mul / $mul;
  $retval$0 = $div;
 }
 return (+$retval$0);
}
function ___DOUBLE_BITS_126($__f) {
 $__f = +$__f;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $__f;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 setTempRet0(($1) | 0);
 return ($0|0);
}
function _copysignl($x,$y) {
 $x = +$x;
 $y = +$y;
 var $call = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (+_copysign($x,$y));
 return (+$call);
}
function _strcmp($l,$r) {
 $l = $l|0;
 $r = $r|0;
 var $$lcssa = 0, $$lcssa6 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $cmp = 0, $cmp7 = 0, $conv5 = 0, $conv6 = 0, $incdec$ptr = 0, $incdec$ptr4 = 0, $l$addr$010 = 0, $or$cond = 0, $or$cond9 = 0, $r$addr$011 = 0, $sub = 0, $tobool = 0, $tobool8 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$l>>0]|0;
 $1 = HEAP8[$r>>0]|0;
 $cmp7 = ($0<<24>>24)!=($1<<24>>24);
 $tobool8 = ($0<<24>>24)==(0);
 $or$cond9 = $tobool8 | $cmp7;
 if ($or$cond9) {
  $$lcssa = $1;$$lcssa6 = $0;
 } else {
  $l$addr$010 = $l;$r$addr$011 = $r;
  while(1) {
   $incdec$ptr = ((($l$addr$010)) + 1|0);
   $incdec$ptr4 = ((($r$addr$011)) + 1|0);
   $2 = HEAP8[$incdec$ptr>>0]|0;
   $3 = HEAP8[$incdec$ptr4>>0]|0;
   $cmp = ($2<<24>>24)!=($3<<24>>24);
   $tobool = ($2<<24>>24)==(0);
   $or$cond = $tobool | $cmp;
   if ($or$cond) {
    $$lcssa = $3;$$lcssa6 = $2;
    break;
   } else {
    $l$addr$010 = $incdec$ptr;$r$addr$011 = $incdec$ptr4;
   }
  }
 }
 $conv5 = $$lcssa6&255;
 $conv6 = $$lcssa&255;
 $sub = (($conv5) - ($conv6))|0;
 return ($sub|0);
}
function _pthread_self() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2000|0);
}
function _strncmp($_l,$_r,$n) {
 $_l = $_l|0;
 $_r = $_r|0;
 $n = $n|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $cmp = 0, $conv11 = 0, $conv12 = 0, $incdec$ptr = 0, $incdec$ptr9 = 0, $l$015 = 0, $n$addr$017 = 0, $n$addr$017$in = 0, $or$cond = 0, $or$cond12 = 0, $r$0$lcssa = 0, $r$016 = 0, $retval$0 = 0, $sub = 0;
 var $tobool = 0, $tobool1 = 0, $tobool114 = 0, $tobool3 = 0, $tobool5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $tobool = ($n|0)==(0);
 if ($tobool) {
  $retval$0 = 0;
 } else {
  $0 = HEAP8[$_l>>0]|0;
  $tobool114 = ($0<<24>>24)==(0);
  L3: do {
   if ($tobool114) {
    $$lcssa = 0;$r$0$lcssa = $_r;
   } else {
    $2 = $0;$l$015 = $_l;$n$addr$017$in = $n;$r$016 = $_r;
    while(1) {
     $n$addr$017 = (($n$addr$017$in) + -1)|0;
     $1 = HEAP8[$r$016>>0]|0;
     $tobool3 = ($1<<24>>24)!=(0);
     $tobool5 = ($n$addr$017|0)!=(0);
     $or$cond = $tobool5 & $tobool3;
     $cmp = ($2<<24>>24)==($1<<24>>24);
     $or$cond12 = $cmp & $or$cond;
     if (!($or$cond12)) {
      $$lcssa = $2;$r$0$lcssa = $r$016;
      break L3;
     }
     $incdec$ptr = ((($l$015)) + 1|0);
     $incdec$ptr9 = ((($r$016)) + 1|0);
     $3 = HEAP8[$incdec$ptr>>0]|0;
     $tobool1 = ($3<<24>>24)==(0);
     if ($tobool1) {
      $$lcssa = 0;$r$0$lcssa = $incdec$ptr9;
      break;
     } else {
      $2 = $3;$l$015 = $incdec$ptr;$n$addr$017$in = $n$addr$017;$r$016 = $incdec$ptr9;
     }
    }
   }
  } while(0);
  $conv11 = $$lcssa&255;
  $4 = HEAP8[$r$0$lcssa>>0]|0;
  $conv12 = $4&255;
  $sub = (($conv11) - ($conv12))|0;
  $retval$0 = $sub;
 }
 return ($retval$0|0);
}
function _strchr($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $call = 0, $cmp = 0, $cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (___strchrnul($s,$c)|0);
 $0 = HEAP8[$call>>0]|0;
 $1 = $c&255;
 $cmp = ($0<<24>>24)==($1<<24>>24);
 $cond = $cmp ? $call : 0;
 return ($cond|0);
}
function _memchr($src,$c,$n) {
 $src = $src|0;
 $c = $c|0;
 $n = $n|0;
 var $$in = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $and = 0, $and15 = 0, $and16 = 0, $and39 = 0, $cmp = 0, $cmp11 = 0, $cmp1132 = 0, $cmp28 = 0, $cmp8 = 0, $conv1 = 0;
 var $dec = 0, $dec34 = 0, $incdec$ptr = 0, $incdec$ptr21 = 0, $incdec$ptr33 = 0, $mul = 0, $n$addr$0$lcssa = 0, $n$addr$0$lcssa52 = 0, $n$addr$043 = 0, $n$addr$1$lcssa = 0, $n$addr$1$lcssa55 = 0, $n$addr$133 = 0, $n$addr$227 = 0, $neg = 0, $or$cond = 0, $or$cond42 = 0, $s$0$lcssa = 0, $s$0$lcssa53 = 0, $s$044 = 0, $s$128 = 0;
 var $sub = 0, $sub22 = 0, $tobool = 0, $tobool17 = 0, $tobool2 = 0, $tobool2$lcssa = 0, $tobool241 = 0, $tobool25 = 0, $tobool2526 = 0, $tobool36 = 0, $tobool40 = 0, $w$0$lcssa = 0, $w$034 = 0, $xor = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $conv1 = $c & 255;
 $0 = $src;
 $and39 = $0 & 3;
 $tobool40 = ($and39|0)!=(0);
 $tobool241 = ($n|0)!=(0);
 $or$cond42 = $tobool241 & $tobool40;
 L1: do {
  if ($or$cond42) {
   $1 = $c&255;
   $n$addr$043 = $n;$s$044 = $src;
   while(1) {
    $2 = HEAP8[$s$044>>0]|0;
    $cmp = ($2<<24>>24)==($1<<24>>24);
    if ($cmp) {
     $n$addr$0$lcssa52 = $n$addr$043;$s$0$lcssa53 = $s$044;
     label = 6;
     break L1;
    }
    $incdec$ptr = ((($s$044)) + 1|0);
    $dec = (($n$addr$043) + -1)|0;
    $3 = $incdec$ptr;
    $and = $3 & 3;
    $tobool = ($and|0)!=(0);
    $tobool2 = ($dec|0)!=(0);
    $or$cond = $tobool2 & $tobool;
    if ($or$cond) {
     $n$addr$043 = $dec;$s$044 = $incdec$ptr;
    } else {
     $n$addr$0$lcssa = $dec;$s$0$lcssa = $incdec$ptr;$tobool2$lcssa = $tobool2;
     label = 5;
     break;
    }
   }
  } else {
   $n$addr$0$lcssa = $n;$s$0$lcssa = $src;$tobool2$lcssa = $tobool241;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($tobool2$lcssa) {
   $n$addr$0$lcssa52 = $n$addr$0$lcssa;$s$0$lcssa53 = $s$0$lcssa;
   label = 6;
  } else {
   label = 16;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $4 = HEAP8[$s$0$lcssa53>>0]|0;
   $5 = $c&255;
   $cmp8 = ($4<<24>>24)==($5<<24>>24);
   if ($cmp8) {
    $tobool36 = ($n$addr$0$lcssa52|0)==(0);
    if ($tobool36) {
     label = 16;
     break;
    } else {
     $8 = $s$0$lcssa53;
     break;
    }
   }
   $mul = Math_imul($conv1, 16843009)|0;
   $cmp1132 = ($n$addr$0$lcssa52>>>0)>(3);
   L13: do {
    if ($cmp1132) {
     $n$addr$133 = $n$addr$0$lcssa52;$w$034 = $s$0$lcssa53;
     while(1) {
      $6 = HEAP32[$w$034>>2]|0;
      $xor = $6 ^ $mul;
      $sub = (($xor) + -16843009)|0;
      $neg = $xor & -2139062144;
      $and15 = $neg ^ -2139062144;
      $and16 = $and15 & $sub;
      $tobool17 = ($and16|0)==(0);
      if (!($tobool17)) {
       $$in = $w$034;$n$addr$1$lcssa55 = $n$addr$133;
       break L13;
      }
      $incdec$ptr21 = ((($w$034)) + 4|0);
      $sub22 = (($n$addr$133) + -4)|0;
      $cmp11 = ($sub22>>>0)>(3);
      if ($cmp11) {
       $n$addr$133 = $sub22;$w$034 = $incdec$ptr21;
      } else {
       $n$addr$1$lcssa = $sub22;$w$0$lcssa = $incdec$ptr21;
       label = 11;
       break;
      }
     }
    } else {
     $n$addr$1$lcssa = $n$addr$0$lcssa52;$w$0$lcssa = $s$0$lcssa53;
     label = 11;
    }
   } while(0);
   if ((label|0) == 11) {
    $tobool2526 = ($n$addr$1$lcssa|0)==(0);
    if ($tobool2526) {
     label = 16;
     break;
    } else {
     $$in = $w$0$lcssa;$n$addr$1$lcssa55 = $n$addr$1$lcssa;
    }
   }
   $n$addr$227 = $n$addr$1$lcssa55;$s$128 = $$in;
   while(1) {
    $7 = HEAP8[$s$128>>0]|0;
    $cmp28 = ($7<<24>>24)==($5<<24>>24);
    if ($cmp28) {
     $8 = $s$128;
     break L8;
    }
    $incdec$ptr33 = ((($s$128)) + 1|0);
    $dec34 = (($n$addr$227) + -1)|0;
    $tobool25 = ($dec34|0)==(0);
    if ($tobool25) {
     label = 16;
     break;
    } else {
     $n$addr$227 = $dec34;$s$128 = $incdec$ptr33;
    }
   }
  }
 } while(0);
 if ((label|0) == 16) {
  $8 = 0;
 }
 return ($8|0);
}
function ___strchrnul($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $add$ptr = 0, $and = 0, $and14 = 0, $and15 = 0, $and29 = 0, $and9 = 0, $and930 = 0, $call = 0, $cmp = 0, $cmp26 = 0, $conv1 = 0;
 var $incdec$ptr = 0, $incdec$ptr19 = 0, $incdec$ptr31 = 0, $mul = 0, $neg = 0, $neg13 = 0, $neg28 = 0, $or$cond = 0, $or$cond24 = 0, $rem = 0, $rem34 = 0, $retval$0 = 0, $s$addr$0$lcssa = 0, $s$addr$036 = 0, $s$addr$1 = 0, $sub = 0, $sub11 = 0, $sub27 = 0, $tobool = 0, $tobool10 = 0;
 var $tobool1031 = 0, $tobool16 = 0, $tobool2 = 0, $tobool23 = 0, $tobool235 = 0, $tobool3 = 0, $w$0$lcssa = 0, $w$032 = 0, $xor = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $conv1 = $c & 255;
 $tobool = ($conv1|0)==(0);
 L1: do {
  if ($tobool) {
   $call = (_strlen($s)|0);
   $add$ptr = (($s) + ($call)|0);
   $retval$0 = $add$ptr;
  } else {
   $0 = $s;
   $rem34 = $0 & 3;
   $tobool235 = ($rem34|0)==(0);
   if ($tobool235) {
    $s$addr$0$lcssa = $s;
   } else {
    $1 = $c&255;
    $s$addr$036 = $s;
    while(1) {
     $2 = HEAP8[$s$addr$036>>0]|0;
     $tobool3 = ($2<<24>>24)==(0);
     $cmp = ($2<<24>>24)==($1<<24>>24);
     $or$cond = $tobool3 | $cmp;
     if ($or$cond) {
      $retval$0 = $s$addr$036;
      break L1;
     }
     $incdec$ptr = ((($s$addr$036)) + 1|0);
     $3 = $incdec$ptr;
     $rem = $3 & 3;
     $tobool2 = ($rem|0)==(0);
     if ($tobool2) {
      $s$addr$0$lcssa = $incdec$ptr;
      break;
     } else {
      $s$addr$036 = $incdec$ptr;
     }
    }
   }
   $mul = Math_imul($conv1, 16843009)|0;
   $4 = HEAP32[$s$addr$0$lcssa>>2]|0;
   $sub27 = (($4) + -16843009)|0;
   $neg28 = $4 & -2139062144;
   $and29 = $neg28 ^ -2139062144;
   $and930 = $and29 & $sub27;
   $tobool1031 = ($and930|0)==(0);
   L10: do {
    if ($tobool1031) {
     $5 = $4;$w$032 = $s$addr$0$lcssa;
     while(1) {
      $xor = $5 ^ $mul;
      $sub11 = (($xor) + -16843009)|0;
      $neg13 = $xor & -2139062144;
      $and14 = $neg13 ^ -2139062144;
      $and15 = $and14 & $sub11;
      $tobool16 = ($and15|0)==(0);
      if (!($tobool16)) {
       $w$0$lcssa = $w$032;
       break L10;
      }
      $incdec$ptr19 = ((($w$032)) + 4|0);
      $6 = HEAP32[$incdec$ptr19>>2]|0;
      $sub = (($6) + -16843009)|0;
      $neg = $6 & -2139062144;
      $and = $neg ^ -2139062144;
      $and9 = $and & $sub;
      $tobool10 = ($and9|0)==(0);
      if ($tobool10) {
       $5 = $6;$w$032 = $incdec$ptr19;
      } else {
       $w$0$lcssa = $incdec$ptr19;
       break;
      }
     }
    } else {
     $w$0$lcssa = $s$addr$0$lcssa;
    }
   } while(0);
   $7 = $c&255;
   $s$addr$1 = $w$0$lcssa;
   while(1) {
    $8 = HEAP8[$s$addr$1>>0]|0;
    $tobool23 = ($8<<24>>24)==(0);
    $cmp26 = ($8<<24>>24)==($7<<24>>24);
    $or$cond24 = $tobool23 | $cmp26;
    $incdec$ptr31 = ((($s$addr$1)) + 1|0);
    if ($or$cond24) {
     $retval$0 = $s$addr$1;
     break;
    } else {
     $s$addr$1 = $incdec$ptr31;
    }
   }
  }
 } while(0);
 return ($retval$0|0);
}
function _snprintf($s,$n,$fmt,$varargs) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $ap = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $call = (_vsnprintf($s,$n,$fmt,$ap)|0);
 STACKTOP = sp;return ($call|0);
}
function _vsnprintf($s,$n,$fmt,$ap) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $0 = 0, $1 = 0, $add$ptr = 0, $arrayidx = 0, $b = 0, $buf = 0, $buf_size = 0, $call = 0, $call10 = 0, $cmp = 0, $cmp16 = 0, $cmp4 = 0, $f = 0, $n$addr$0 = 0, $retval$0 = 0, $s$addr$0 = 0, $spec$select = 0, $sub = 0, $sub$ptr$rhs$cast = 0, $sub17 = 0;
 var $sub3 = 0, $tobool = 0, $tobool11 = 0, $wbase = 0, $wend = 0, $wpos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $b = sp + 144|0;
 $f = sp;
 _memcpy(($f|0),(1744|0),144)|0;
 $sub = (($n) + -1)|0;
 $cmp = ($sub>>>0)>(2147483646);
 if ($cmp) {
  $tobool = ($n|0)==(0);
  if ($tobool) {
   $n$addr$0 = 1;$s$addr$0 = $b;
   label = 4;
  } else {
   $call = (___errno_location()|0);
   HEAP32[$call>>2] = 75;
   $retval$0 = -1;
  }
 } else {
  $n$addr$0 = $n;$s$addr$0 = $s;
  label = 4;
 }
 if ((label|0) == 4) {
  $sub$ptr$rhs$cast = $s$addr$0;
  $sub3 = (-2 - ($sub$ptr$rhs$cast))|0;
  $cmp4 = ($n$addr$0>>>0)>($sub3>>>0);
  $spec$select = $cmp4 ? $sub3 : $n$addr$0;
  $buf_size = ((($f)) + 48|0);
  HEAP32[$buf_size>>2] = $spec$select;
  $wpos = ((($f)) + 20|0);
  HEAP32[$wpos>>2] = $s$addr$0;
  $buf = ((($f)) + 44|0);
  HEAP32[$buf>>2] = $s$addr$0;
  $add$ptr = (($s$addr$0) + ($spec$select)|0);
  $wend = ((($f)) + 16|0);
  HEAP32[$wend>>2] = $add$ptr;
  $wbase = ((($f)) + 28|0);
  HEAP32[$wbase>>2] = $add$ptr;
  $call10 = (_vfprintf($f,$fmt,$ap)|0);
  $tobool11 = ($spec$select|0)==(0);
  if ($tobool11) {
   $retval$0 = $call10;
  } else {
   $0 = HEAP32[$wpos>>2]|0;
   $1 = HEAP32[$wend>>2]|0;
   $cmp16 = ($0|0)==($1|0);
   $sub17 = $cmp16 << 31 >> 31;
   $arrayidx = (($0) + ($sub17)|0);
   HEAP8[$arrayidx>>0] = 0;
   $retval$0 = $call10;
  }
 }
 STACKTOP = sp;return ($retval$0|0);
}
function _vfprintf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (___vfprintf_internal($f,$fmt,$ap,46,47)|0);
 return ($call|0);
}
function _fmt_fp($f,$y,$w,$p,$fl,$t) {
 $f = $f|0;
 $y = +$y;
 $w = $w|0;
 $p = $p|0;
 $fl = $fl|0;
 $t = $t|0;
 var $$ = 0, $$pr = 0, $$pr415 = 0, $$pre = 0, $$pre517 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $a$1$lcssa = 0, $a$1502 = 0, $a$2 = 0, $a$3$lcssa = 0, $a$3488 = 0, $a$5$lcssa = 0, $a$5471 = 0, $a$6 = 0, $a$8 = 0;
 var $a$9 = 0, $add = 0, $add$ptr213 = 0, $add$ptr311 = 0, $add$ptr354 = 0, $add$ptr358 = 0, $add$ptr373 = 0, $add$ptr442 = 0, $add$ptr65 = 0, $add$ptr671 = 0, $add$ptr742 = 0, $add$ptr756 = 0, $add113 = 0, $add150 = 0, $add154 = 0, $add163 = 0, $add165 = 0, $add273 = 0, $add275 = 0, $add284 = 0;
 var $add313 = 0, $add355 = 0, $add410 = 0.0, $add414 = 0, $add477$neg = 0, $add561 = 0, $add608 = 0, $add612 = 0, $add620 = 0, $add653 = 0, $add653$sink524 = 0, $add67 = 0, $add737 = 0, $add810 = 0, $add87 = 0.0, $add90 = 0.0, $and = 0, $and12 = 0, $and134 = 0, $and282 = 0;
 var $and36 = 0, $and379 = 0, $and45 = 0, $and483 = 0, $and610 = 0, $and610$lobit = 0, $and62 = 0, $and702 = 0, $and780 = 0, $arrayidx = 0, $arrayidx117 = 0, $arrayidx251 = 0, $arrayidx453 = 0, $arrayidx489 = 0, $big = 0, $buf = 0, $call55 = 0.0, $carry$0493 = 0, $carry262$0484 = 0, $cmp103 = 0;
 var $cmp127 = 0, $cmp131 = 0, $cmp147 = 0, $cmp196 = 0, $cmp205 = 0, $cmp225 = 0, $cmp225500 = 0, $cmp235 = 0, $cmp235492 = 0, $cmp249 = 0, $cmp249496 = 0, $cmp259 = 0, $cmp259486 = 0, $cmp277 = 0, $cmp277482 = 0, $cmp299 = 0, $cmp308 = 0, $cmp315 = 0, $cmp324 = 0, $cmp324478 = 0;
 var $cmp333 = 0, $cmp338 = 0, $cmp350 = 0, $cmp363 = 0, $cmp363474 = 0, $cmp374 = 0, $cmp38 = 0, $cmp385 = 0, $cmp390 = 0, $cmp403 = 0, $cmp411 = 0, $cmp416 = 0, $cmp416469 = 0, $cmp420 = 0, $cmp433 = 0, $cmp433465 = 0, $cmp443 = 0, $cmp450 = 0, $cmp450$lcssa = 0, $cmp450458 = 0;
 var $cmp470 = 0, $cmp473 = 0, $cmp495 = 0, $cmp495454 = 0, $cmp505 = 0, $cmp528 = 0, $cmp577 = 0, $cmp59 = 0, $cmp614 = 0, $cmp617 = 0, $cmp623 = 0, $cmp636 = 0, $cmp636449 = 0, $cmp660 = 0, $cmp665 = 0, $cmp673 = 0, $cmp678 = 0, $cmp678435 = 0, $cmp686 = 0, $cmp707 = 0;
 var $cmp707430 = 0, $cmp710 = 0, $cmp710431 = 0, $cmp722 = 0, $cmp722427 = 0, $cmp745 = 0, $cmp745442 = 0, $cmp748 = 0, $cmp748443 = 0, $cmp760 = 0, $cmp765 = 0, $cmp770 = 0, $cmp770439 = 0, $cmp777 = 0, $cmp790 = 0, $cmp818 = 0, $cmp82 = 0, $cmp94 = 0, $cond = 0, $cond100 = 0;
 var $cond233 = 0, $cond271 = 0, $cond304 = 0, $cond43 = 0, $cond629 = 0, $cond732 = 0, $cond800 = 0, $conv111 = 0, $conv114 = 0, $conv116 = 0, $conv118393 = 0, $conv121 = 0, $conv123 = 0.0, $conv216 = 0, $conv218 = 0.0, $conv644 = 0, $conv646 = 0, $d$0 = 0, $d$0491 = 0, $d$0494 = 0;
 var $d$1483 = 0, $d$2$lcssa = 0, $d$2470 = 0, $d$4 = 0, $d$5438 = 0, $d$6432 = 0, $d$7444 = 0, $dec = 0, $dec476 = 0, $dec481 = 0, $dec78 = 0, $div274 = 0, $div356 = 0, $div378 = 0, $div384 = 0, $e$0480 = 0, $e$1 = 0, $e$2467 = 0, $e$4 = 0, $e$5 = 0;
 var $e2 = 0, $ebuf0 = 0, $estr$0 = 0, $estr$1$lcssa = 0, $estr$1450 = 0, $estr$2 = 0, $i$0479 = 0, $i$1$lcssa = 0, $i$1475 = 0, $i$2466 = 0, $i$3455 = 0, $inc = 0, $inc425 = 0, $inc438 = 0, $inc468 = 0, $inc500 = 0, $incdec$ptr106 = 0, $incdec$ptr112 = 0, $incdec$ptr115 = 0, $incdec$ptr122 = 0;
 var $incdec$ptr137 = 0, $incdec$ptr217 = 0, $incdec$ptr246 = 0, $incdec$ptr288 = 0, $incdec$ptr292 = 0, $incdec$ptr292520 = 0, $incdec$ptr296 = 0, $incdec$ptr419 = 0, $incdec$ptr423 = 0, $incdec$ptr639 = 0, $incdec$ptr645 = 0, $incdec$ptr647 = 0, $incdec$ptr681 = 0, $incdec$ptr689 = 0, $incdec$ptr698 = 0, $incdec$ptr725 = 0, $incdec$ptr734 = 0, $incdec$ptr763 = 0, $incdec$ptr773 = 0, $incdec$ptr776 = 0;
 var $incdec$ptr808 = 0, $j$0 = 0, $j$0$in476 = 0, $j$1456 = 0, $j$2 = 0, $l$0 = 0, $l$1 = 0, $land$ext$neg = 0, $mul = 0.0, $mul125 = 0.0, $mul202 = 0.0, $mul220 = 0.0, $mul286 = 0, $mul322 = 0, $mul328 = 0, $mul335 = 0, $mul349 = 0, $mul367 = 0, $mul406 = 0.0, $mul407 = 0.0;
 var $mul431 = 0, $mul437 = 0, $mul499 = 0, $mul513 = 0, $mul80 = 0.0, $not$tobool341 = 0, $or = 0, $or$cond = 0, $or$cond1$not = 0, $or$cond2 = 0, $or$cond398 = 0, $or$cond400 = 0, $or$cond409 = 0, $or$cond411 = 0, $or120 = 0, $or504 = 0, $or613 = 0, $p$addr$2 = 0, $p$addr$3 = 0, $p$addr$4$lcssa = 0;
 var $p$addr$4433 = 0, $p$addr$5$lcssa = 0, $p$addr$5445 = 0, $pl$0 = 0, $prefix$0 = 0, $re$1426 = 0, $rem494 = 0, $rem494453 = 0, $round$0425 = 0.0, $round377$1 = 0.0, $s$0 = 0, $s$1 = 0, $s35$0 = 0, $s668$0436 = 0, $s668$1 = 0, $s715$0$lcssa = 0, $s715$0428 = 0, $s753$0 = 0, $s753$1440 = 0, $s753$2 = 0;
 var $scevgep513 = 0, $scevgep513514 = 0, $shl280 = 0, $shr283 = 0, $shr285 = 0, $small$1 = 0.0, $spec$select = 0, $spec$select395 = 0, $spec$select396 = 0, $spec$select396521 = 0, $spec$select396523 = 0, $spec$select397 = 0, $spec$select399 = 0.0, $spec$select401 = 0, $spec$select402 = 0, $spec$select403 = 0, $spec$select405 = 0, $spec$select408 = 0, $spec$select410 = 0, $spec$select412 = 0.0;
 var $spec$select413 = 0, $spec$select414 = 0, $spec$select416 = 0, $spec$select417 = 0, $spec$select418 = 0.0, $spec$select419 = 0.0, $spec$select420 = 0.0, $sub = 0.0, $sub$ptr$div = 0, $sub$ptr$div321 = 0, $sub$ptr$div347 = 0, $sub$ptr$div430 = 0, $sub$ptr$div511 = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast151 = 0, $sub$ptr$lhs$cast160 = 0, $sub$ptr$lhs$cast173$pre$phiZZZZ2D = 0, $sub$ptr$lhs$cast305 = 0, $sub$ptr$lhs$cast344 = 0, $sub$ptr$lhs$cast508 = 0;
 var $sub$ptr$lhs$cast633 = 0, $sub$ptr$lhs$cast694 = 0, $sub$ptr$lhs$cast787 = 0, $sub$ptr$lhs$cast811 = 0, $sub$ptr$rhs$cast$le = 0, $sub$ptr$rhs$cast152 = 0, $sub$ptr$rhs$cast161 = 0, $sub$ptr$rhs$cast174$pre$phiZZZZ2D = 0, $sub$ptr$rhs$cast306 = 0, $sub$ptr$rhs$cast319 = 0, $sub$ptr$rhs$cast345 = 0, $sub$ptr$rhs$cast428 = 0, $sub$ptr$rhs$cast634 = 0, $sub$ptr$rhs$cast634447 = 0, $sub$ptr$rhs$cast649 = 0, $sub$ptr$rhs$cast695 = 0, $sub$ptr$rhs$cast788 = 0, $sub$ptr$rhs$cast812 = 0, $sub$ptr$sub = 0, $sub$ptr$sub145 = 0;
 var $sub$ptr$sub153 = 0, $sub$ptr$sub159 = 0, $sub$ptr$sub162 = 0, $sub$ptr$sub172 = 0, $sub$ptr$sub175 = 0, $sub$ptr$sub307 = 0, $sub$ptr$sub320 = 0, $sub$ptr$sub346 = 0, $sub$ptr$sub429 = 0, $sub$ptr$sub510 = 0, $sub$ptr$sub635 = 0, $sub$ptr$sub635448 = 0, $sub$ptr$sub650 = 0, $sub$ptr$sub650$pn = 0, $sub$ptr$sub696 = 0, $sub$ptr$sub789 = 0, $sub$ptr$sub813 = 0, $sub124 = 0.0, $sub146 = 0, $sub181 = 0;
 var $sub203 = 0, $sub219 = 0.0, $sub256 = 0, $sub264 = 0, $sub281 = 0, $sub336 = 0, $sub343 = 0, $sub357 = 0, $sub409 = 0, $sub478 = 0, $sub480 = 0, $sub514 = 0, $sub562 = 0, $sub626 = 0, $sub735 = 0, $sub74 = 0, $sub806 = 0, $sub85 = 0.0, $sub86 = 0.0, $sub88 = 0.0;
 var $sub91 = 0.0, $sub97 = 0, $t$addr$0 = 0, $t$addr$1 = 0, $tobool129 = 0, $tobool13 = 0, $tobool135 = 0, $tobool139 = 0, $tobool140 = 0, $tobool222 = 0, $tobool244 = 0, $tobool252 = 0, $tobool290 = 0, $tobool290519 = 0, $tobool294 = 0, $tobool341 = 0, $tobool37 = 0, $tobool371 = 0, $tobool380 = 0, $tobool400 = 0;
 var $tobool454 = 0, $tobool484 = 0, $tobool490 = 0, $tobool56 = 0, $tobool609 = 0, $tobool609$not = 0, $tobool63 = 0, $tobool703 = 0, $tobool76 = 0, $tobool76421 = 0, $tobool781 = 0, $tobool79 = 0, $tobool9 = 0, $w$add653 = 0, $xor = 0, $xor167 = 0, $xor186 = 0, $xor655 = 0, $xor816 = 0, $y$addr$0 = 0.0;
 var $y$addr$1 = 0.0, $y$addr$2 = 0.0, $y$addr$3 = 0.0, $y$addr$4 = 0.0, $z$0 = 0, $z$1 = 0, $z$2$lcssa = 0, $z$2501 = 0, $z$3$lcssa = 0, $z$3497 = 0, $z$4$lcssa = 0, $z$4487 = 0, $z$5 = 0, $z$8 = 0, $z$9$lcssa = 0, $z$9459 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(560|0);
 $big = sp + 32|0;
 $e2 = sp + 536|0;
 $buf = sp;
 $sub$ptr$rhs$cast$le = $buf;
 $ebuf0 = sp + 540|0;
 HEAP32[$e2>>2] = 0;
 $arrayidx = ((($ebuf0)) + 12|0);
 $0 = (___DOUBLE_BITS_527($y)|0);
 $1 = (getTempRet0() | 0);
 $2 = ($1|0)<(0);
 if ($2) {
  $sub = - $y;
  $3 = (___DOUBLE_BITS_527($sub)|0);
  $4 = (getTempRet0() | 0);
  $8 = $4;$85 = $3;$pl$0 = 1;$prefix$0 = 8822;$y$addr$0 = $sub;
 } else {
  $and = $fl & 2048;
  $tobool9 = ($and|0)==(0);
  $and12 = $fl & 1;
  $tobool13 = ($and12|0)==(0);
  $$ = $tobool13 ? (8823) : (8828);
  $spec$select416 = $tobool9 ? $$ : (8825);
  $5 = $fl & 2049;
  $6 = ($5|0)!=(0);
  $spec$select417 = $6&1;
  $8 = $1;$85 = $0;$pl$0 = $spec$select417;$prefix$0 = $spec$select416;$y$addr$0 = $y;
 }
 $7 = $8 & 2146435072;
 $9 = (0)==(0);
 $10 = ($7|0)==(2146435072);
 $11 = $9 & $10;
 do {
  if ($11) {
   $and36 = $t & 32;
   $tobool37 = ($and36|0)!=(0);
   $cond = $tobool37 ? 8841 : 8845;
   $cmp38 = ($y$addr$0 != $y$addr$0) | (0.0 != 0.0);
   $cond43 = $tobool37 ? 8864 : 8849;
   $s35$0 = $cmp38 ? $cond43 : $cond;
   $add = (($pl$0) + 3)|0;
   $and45 = $fl & -65537;
   _pad_524($f,32,$w,$add,$and45);
   _out($f,$prefix$0,$pl$0);
   _out($f,$s35$0,3);
   $xor = $fl ^ 8192;
   _pad_524($f,32,$w,$add,$xor);
   $add653$sink524 = $add;
  } else {
   $call55 = (+_frexp($y$addr$0,$e2));
   $mul = $call55 * 2.0;
   $tobool56 = $mul != 0.0;
   if ($tobool56) {
    $12 = HEAP32[$e2>>2]|0;
    $dec = (($12) + -1)|0;
    HEAP32[$e2>>2] = $dec;
   }
   $or = $t | 32;
   $cmp59 = ($or|0)==(97);
   if ($cmp59) {
    $and62 = $t & 32;
    $tobool63 = ($and62|0)==(0);
    $add$ptr65 = ((($prefix$0)) + 9|0);
    $spec$select = $tobool63 ? $prefix$0 : $add$ptr65;
    $add67 = $pl$0 | 2;
    $13 = ($p>>>0)>(11);
    $sub74 = (12 - ($p))|0;
    $tobool76421 = ($sub74|0)==(0);
    $tobool76 = $13 | $tobool76421;
    do {
     if ($tobool76) {
      $y$addr$1 = $mul;
     } else {
      $re$1426 = $sub74;$round$0425 = 8.0;
      while(1) {
       $dec78 = (($re$1426) + -1)|0;
       $mul80 = $round$0425 * 16.0;
       $tobool79 = ($dec78|0)==(0);
       if ($tobool79) {
        break;
       } else {
        $re$1426 = $dec78;$round$0425 = $mul80;
       }
      }
      $14 = HEAP8[$spec$select>>0]|0;
      $cmp82 = ($14<<24>>24)==(45);
      if ($cmp82) {
       $sub85 = - $mul;
       $sub86 = $sub85 - $mul80;
       $add87 = $mul80 + $sub86;
       $sub88 = - $add87;
       $y$addr$1 = $sub88;
       break;
      } else {
       $add90 = $mul + $mul80;
       $sub91 = $add90 - $mul80;
       $y$addr$1 = $sub91;
       break;
      }
     }
    } while(0);
    $15 = HEAP32[$e2>>2]|0;
    $cmp94 = ($15|0)<(0);
    $sub97 = (0 - ($15))|0;
    $cond100 = $cmp94 ? $sub97 : $15;
    $16 = ($cond100|0)<(0);
    $17 = $16 << 31 >> 31;
    $18 = (_fmt_u($cond100,$17,$arrayidx)|0);
    $cmp103 = ($18|0)==($arrayidx|0);
    if ($cmp103) {
     $incdec$ptr106 = ((($ebuf0)) + 11|0);
     HEAP8[$incdec$ptr106>>0] = 48;
     $estr$0 = $incdec$ptr106;
    } else {
     $estr$0 = $18;
    }
    $19 = $15 >> 31;
    $20 = $19 & 2;
    $21 = (($20) + 43)|0;
    $conv111 = $21&255;
    $incdec$ptr112 = ((($estr$0)) + -1|0);
    HEAP8[$incdec$ptr112>>0] = $conv111;
    $add113 = (($t) + 15)|0;
    $conv114 = $add113&255;
    $incdec$ptr115 = ((($estr$0)) + -2|0);
    HEAP8[$incdec$ptr115>>0] = $conv114;
    $cmp131 = ($p|0)<(1);
    $and134 = $fl & 8;
    $tobool135 = ($and134|0)==(0);
    $s$0 = $buf;$y$addr$2 = $y$addr$1;
    while(1) {
     $conv116 = (~~(($y$addr$2)));
     $arrayidx117 = (1552 + ($conv116)|0);
     $22 = HEAP8[$arrayidx117>>0]|0;
     $conv118393 = $22&255;
     $or120 = $and62 | $conv118393;
     $conv121 = $or120&255;
     $incdec$ptr122 = ((($s$0)) + 1|0);
     HEAP8[$s$0>>0] = $conv121;
     $conv123 = (+($conv116|0));
     $sub124 = $y$addr$2 - $conv123;
     $mul125 = $sub124 * 16.0;
     $sub$ptr$lhs$cast = $incdec$ptr122;
     $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast$le))|0;
     $cmp127 = ($sub$ptr$sub|0)==(1);
     if ($cmp127) {
      $tobool129 = $mul125 == 0.0;
      $or$cond1$not = $cmp131 & $tobool129;
      $or$cond = $tobool135 & $or$cond1$not;
      if ($or$cond) {
       $s$1 = $incdec$ptr122;
      } else {
       $incdec$ptr137 = ((($s$0)) + 2|0);
       HEAP8[$incdec$ptr122>>0] = 46;
       $s$1 = $incdec$ptr137;
      }
     } else {
      $s$1 = $incdec$ptr122;
     }
     $tobool139 = $mul125 != 0.0;
     if ($tobool139) {
      $s$0 = $s$1;$y$addr$2 = $mul125;
     } else {
      break;
     }
    }
    $tobool140 = ($p|0)==(0);
    $$pre517 = $s$1;
    if ($tobool140) {
     label = 25;
    } else {
     $sub$ptr$sub145 = (-2 - ($sub$ptr$rhs$cast$le))|0;
     $sub146 = (($sub$ptr$sub145) + ($$pre517))|0;
     $cmp147 = ($sub146|0)<($p|0);
     if ($cmp147) {
      $sub$ptr$lhs$cast151 = $arrayidx;
      $sub$ptr$rhs$cast152 = $incdec$ptr115;
      $sub$ptr$sub153 = (($p) + 2)|0;
      $add150 = (($sub$ptr$sub153) + ($sub$ptr$lhs$cast151))|0;
      $add154 = (($add150) - ($sub$ptr$rhs$cast152))|0;
      $l$0 = $add154;$sub$ptr$lhs$cast173$pre$phiZZZZ2D = $sub$ptr$lhs$cast151;$sub$ptr$rhs$cast174$pre$phiZZZZ2D = $sub$ptr$rhs$cast152;
     } else {
      label = 25;
     }
    }
    if ((label|0) == 25) {
     $sub$ptr$lhs$cast160 = $arrayidx;
     $sub$ptr$rhs$cast161 = $incdec$ptr115;
     $sub$ptr$sub159 = (($sub$ptr$lhs$cast160) - ($sub$ptr$rhs$cast$le))|0;
     $sub$ptr$sub162 = (($sub$ptr$sub159) - ($sub$ptr$rhs$cast161))|0;
     $add163 = (($sub$ptr$sub162) + ($$pre517))|0;
     $l$0 = $add163;$sub$ptr$lhs$cast173$pre$phiZZZZ2D = $sub$ptr$lhs$cast160;$sub$ptr$rhs$cast174$pre$phiZZZZ2D = $sub$ptr$rhs$cast161;
    }
    $add165 = (($l$0) + ($add67))|0;
    _pad_524($f,32,$w,$add165,$fl);
    _out($f,$spec$select,$add67);
    $xor167 = $fl ^ 65536;
    _pad_524($f,48,$w,$add165,$xor167);
    $sub$ptr$sub172 = (($$pre517) - ($sub$ptr$rhs$cast$le))|0;
    _out($f,$buf,$sub$ptr$sub172);
    $sub$ptr$sub175 = (($sub$ptr$lhs$cast173$pre$phiZZZZ2D) - ($sub$ptr$rhs$cast174$pre$phiZZZZ2D))|0;
    $23 = (($sub$ptr$sub172) + ($sub$ptr$sub175))|0;
    $sub181 = (($l$0) - ($23))|0;
    _pad_524($f,48,$sub181,0,0);
    _out($f,$incdec$ptr115,$sub$ptr$sub175);
    $xor186 = $fl ^ 8192;
    _pad_524($f,32,$w,$add165,$xor186);
    $add653$sink524 = $add165;
    break;
   }
   $cmp196 = ($p|0)<(0);
   $spec$select395 = $cmp196 ? 6 : $p;
   if ($tobool56) {
    $mul202 = $mul * 268435456.0;
    $24 = HEAP32[$e2>>2]|0;
    $sub203 = (($24) + -28)|0;
    HEAP32[$e2>>2] = $sub203;
    $$pr = $sub203;$y$addr$3 = $mul202;
   } else {
    $$pre = HEAP32[$e2>>2]|0;
    $$pr = $$pre;$y$addr$3 = $mul;
   }
   $cmp205 = ($$pr|0)<(0);
   $add$ptr213 = ((($big)) + 288|0);
   $z$0 = $cmp205 ? $big : $add$ptr213;
   $y$addr$4 = $y$addr$3;$z$1 = $z$0;
   while(1) {
    $conv216 = (~~(($y$addr$4))>>>0);
    HEAP32[$z$1>>2] = $conv216;
    $incdec$ptr217 = ((($z$1)) + 4|0);
    $conv218 = (+($conv216>>>0));
    $sub219 = $y$addr$4 - $conv218;
    $mul220 = $sub219 * 1.0E+9;
    $tobool222 = $mul220 != 0.0;
    if ($tobool222) {
     $y$addr$4 = $mul220;$z$1 = $incdec$ptr217;
    } else {
     break;
    }
   }
   $sub$ptr$rhs$cast345 = $z$0;
   $cmp225500 = ($$pr|0)>(0);
   if ($cmp225500) {
    $26 = $$pr;$a$1502 = $z$0;$z$2501 = $incdec$ptr217;
    while(1) {
     $25 = ($26|0)<(29);
     $cond233 = $25 ? $26 : 29;
     $d$0491 = ((($z$2501)) + -4|0);
     $cmp235492 = ($d$0491>>>0)<($a$1502>>>0);
     if ($cmp235492) {
      $a$2 = $a$1502;
     } else {
      $carry$0493 = 0;$d$0494 = $d$0491;
      while(1) {
       $27 = HEAP32[$d$0494>>2]|0;
       $28 = (_bitshift64Shl(($27|0),0,($cond233|0))|0);
       $29 = (getTempRet0() | 0);
       $30 = (_i64Add(($28|0),($29|0),($carry$0493|0),0)|0);
       $31 = (getTempRet0() | 0);
       $32 = (___udivdi3(($30|0),($31|0),1000000000,0)|0);
       $33 = (getTempRet0() | 0);
       $34 = (___muldi3(($32|0),($33|0),1000000000,0)|0);
       $35 = (getTempRet0() | 0);
       $36 = (_i64Subtract(($30|0),($31|0),($34|0),($35|0))|0);
       $37 = (getTempRet0() | 0);
       HEAP32[$d$0494>>2] = $36;
       $d$0 = ((($d$0494)) + -4|0);
       $cmp235 = ($d$0>>>0)<($a$1502>>>0);
       if ($cmp235) {
        break;
       } else {
        $carry$0493 = $32;$d$0494 = $d$0;
       }
      }
      $tobool244 = ($32|0)==(0);
      if ($tobool244) {
       $a$2 = $a$1502;
      } else {
       $incdec$ptr246 = ((($a$1502)) + -4|0);
       HEAP32[$incdec$ptr246>>2] = $32;
       $a$2 = $incdec$ptr246;
      }
     }
     $cmp249496 = ($z$2501>>>0)>($a$2>>>0);
     L57: do {
      if ($cmp249496) {
       $z$3497 = $z$2501;
       while(1) {
        $arrayidx251 = ((($z$3497)) + -4|0);
        $38 = HEAP32[$arrayidx251>>2]|0;
        $tobool252 = ($38|0)==(0);
        if (!($tobool252)) {
         $z$3$lcssa = $z$3497;
         break L57;
        }
        $cmp249 = ($arrayidx251>>>0)>($a$2>>>0);
        if ($cmp249) {
         $z$3497 = $arrayidx251;
        } else {
         $z$3$lcssa = $arrayidx251;
         break;
        }
       }
      } else {
       $z$3$lcssa = $z$2501;
      }
     } while(0);
     $39 = HEAP32[$e2>>2]|0;
     $sub256 = (($39) - ($cond233))|0;
     HEAP32[$e2>>2] = $sub256;
     $cmp225 = ($sub256|0)>(0);
     if ($cmp225) {
      $26 = $sub256;$a$1502 = $a$2;$z$2501 = $z$3$lcssa;
     } else {
      $$pr415 = $sub256;$a$1$lcssa = $a$2;$z$2$lcssa = $z$3$lcssa;
      break;
     }
    }
   } else {
    $$pr415 = $$pr;$a$1$lcssa = $z$0;$z$2$lcssa = $incdec$ptr217;
   }
   $cmp259486 = ($$pr415|0)<(0);
   if ($cmp259486) {
    $add273 = (($spec$select395) + 25)|0;
    $div274 = (($add273|0) / 9)&-1;
    $add275 = (($div274) + 1)|0;
    $cmp299 = ($or|0)==(102);
    $40 = $$pr415;$a$3488 = $a$1$lcssa;$z$4487 = $z$2$lcssa;
    while(1) {
     $sub264 = (0 - ($40))|0;
     $41 = ($sub264|0)<(9);
     $cond271 = $41 ? $sub264 : 9;
     $cmp277482 = ($a$3488>>>0)<($z$4487>>>0);
     if ($cmp277482) {
      $shl280 = 1 << $cond271;
      $sub281 = (($shl280) + -1)|0;
      $shr285 = 1000000000 >>> $cond271;
      $carry262$0484 = 0;$d$1483 = $a$3488;
      while(1) {
       $43 = HEAP32[$d$1483>>2]|0;
       $and282 = $43 & $sub281;
       $shr283 = $43 >>> $cond271;
       $add284 = (($shr283) + ($carry262$0484))|0;
       HEAP32[$d$1483>>2] = $add284;
       $mul286 = Math_imul($and282, $shr285)|0;
       $incdec$ptr288 = ((($d$1483)) + 4|0);
       $cmp277 = ($incdec$ptr288>>>0)<($z$4487>>>0);
       if ($cmp277) {
        $carry262$0484 = $mul286;$d$1483 = $incdec$ptr288;
       } else {
        break;
       }
      }
      $44 = HEAP32[$a$3488>>2]|0;
      $tobool290 = ($44|0)==(0);
      $incdec$ptr292 = ((($a$3488)) + 4|0);
      $spec$select396 = $tobool290 ? $incdec$ptr292 : $a$3488;
      $tobool294 = ($mul286|0)==(0);
      if ($tobool294) {
       $spec$select396523 = $spec$select396;$z$5 = $z$4487;
      } else {
       $incdec$ptr296 = ((($z$4487)) + 4|0);
       HEAP32[$z$4487>>2] = $mul286;
       $spec$select396523 = $spec$select396;$z$5 = $incdec$ptr296;
      }
     } else {
      $42 = HEAP32[$a$3488>>2]|0;
      $tobool290519 = ($42|0)==(0);
      $incdec$ptr292520 = ((($a$3488)) + 4|0);
      $spec$select396521 = $tobool290519 ? $incdec$ptr292520 : $a$3488;
      $spec$select396523 = $spec$select396521;$z$5 = $z$4487;
     }
     $cond304 = $cmp299 ? $z$0 : $spec$select396523;
     $sub$ptr$lhs$cast305 = $z$5;
     $sub$ptr$rhs$cast306 = $cond304;
     $sub$ptr$sub307 = (($sub$ptr$lhs$cast305) - ($sub$ptr$rhs$cast306))|0;
     $sub$ptr$div = $sub$ptr$sub307 >> 2;
     $cmp308 = ($sub$ptr$div|0)>($add275|0);
     $add$ptr311 = (($cond304) + ($add275<<2)|0);
     $spec$select397 = $cmp308 ? $add$ptr311 : $z$5;
     $45 = HEAP32[$e2>>2]|0;
     $add313 = (($45) + ($cond271))|0;
     HEAP32[$e2>>2] = $add313;
     $cmp259 = ($add313|0)<(0);
     if ($cmp259) {
      $40 = $add313;$a$3488 = $spec$select396523;$z$4487 = $spec$select397;
     } else {
      $a$3$lcssa = $spec$select396523;$z$4$lcssa = $spec$select397;
      break;
     }
    }
   } else {
    $a$3$lcssa = $a$1$lcssa;$z$4$lcssa = $z$2$lcssa;
   }
   $cmp315 = ($a$3$lcssa>>>0)<($z$4$lcssa>>>0);
   if ($cmp315) {
    $sub$ptr$rhs$cast319 = $a$3$lcssa;
    $sub$ptr$sub320 = (($sub$ptr$rhs$cast345) - ($sub$ptr$rhs$cast319))|0;
    $sub$ptr$div321 = $sub$ptr$sub320 >> 2;
    $mul322 = ($sub$ptr$div321*9)|0;
    $46 = HEAP32[$a$3$lcssa>>2]|0;
    $cmp324478 = ($46>>>0)<(10);
    if ($cmp324478) {
     $e$1 = $mul322;
    } else {
     $e$0480 = $mul322;$i$0479 = 10;
     while(1) {
      $mul328 = ($i$0479*10)|0;
      $inc = (($e$0480) + 1)|0;
      $cmp324 = ($46>>>0)<($mul328>>>0);
      if ($cmp324) {
       $e$1 = $inc;
       break;
      } else {
       $e$0480 = $inc;$i$0479 = $mul328;
      }
     }
    }
   } else {
    $e$1 = 0;
   }
   $cmp333 = ($or|0)==(102);
   $mul335 = $cmp333 ? 0 : $e$1;
   $sub336 = (($spec$select395) - ($mul335))|0;
   $cmp338 = ($or|0)==(103);
   $tobool341 = ($spec$select395|0)!=(0);
   $47 = $tobool341 & $cmp338;
   $land$ext$neg = $47 << 31 >> 31;
   $sub343 = (($sub336) + ($land$ext$neg))|0;
   $sub$ptr$lhs$cast344 = $z$4$lcssa;
   $sub$ptr$sub346 = (($sub$ptr$lhs$cast344) - ($sub$ptr$rhs$cast345))|0;
   $sub$ptr$div347 = $sub$ptr$sub346 >> 2;
   $48 = ($sub$ptr$div347*9)|0;
   $mul349 = (($48) + -9)|0;
   $cmp350 = ($sub343|0)<($mul349|0);
   if ($cmp350) {
    $add$ptr354 = ((($z$0)) + 4|0);
    $add355 = (($sub343) + 9216)|0;
    $div356 = (($add355|0) / 9)&-1;
    $sub357 = (($div356) + -1024)|0;
    $add$ptr358 = (($add$ptr354) + ($sub357<<2)|0);
    $49 = ($div356*9)|0;
    $50 = (($add355) - ($49))|0;
    $cmp363474 = ($50|0)<(8);
    if ($cmp363474) {
     $i$1475 = 10;$j$0$in476 = $50;
     while(1) {
      $j$0 = (($j$0$in476) + 1)|0;
      $mul367 = ($i$1475*10)|0;
      $cmp363 = ($j$0$in476|0)<(7);
      if ($cmp363) {
       $i$1475 = $mul367;$j$0$in476 = $j$0;
      } else {
       $i$1$lcssa = $mul367;
       break;
      }
     }
    } else {
     $i$1$lcssa = 10;
    }
    $51 = HEAP32[$add$ptr358>>2]|0;
    $div378 = (($51>>>0) / ($i$1$lcssa>>>0))&-1;
    $52 = Math_imul($div378, $i$1$lcssa)|0;
    $53 = (($51) - ($52))|0;
    $tobool371 = ($53|0)==(0);
    $add$ptr373 = ((($add$ptr358)) + 4|0);
    $cmp374 = ($add$ptr373|0)==($z$4$lcssa|0);
    $or$cond398 = $cmp374 & $tobool371;
    if ($or$cond398) {
     $a$8 = $a$3$lcssa;$d$4 = $add$ptr358;$e$4 = $e$1;
    } else {
     $and379 = $div378 & 1;
     $tobool380 = ($and379|0)==(0);
     $spec$select399 = $tobool380 ? 9007199254740992.0 : 9007199254740994.0;
     $div384 = $i$1$lcssa >>> 1;
     $cmp385 = ($53>>>0)<($div384>>>0);
     $cmp390 = ($53|0)==($div384|0);
     $or$cond400 = $cmp374 & $cmp390;
     $spec$select412 = $or$cond400 ? 1.0 : 1.5;
     $spec$select418 = $cmp385 ? 0.5 : $spec$select412;
     $tobool400 = ($pl$0|0)==(0);
     if ($tobool400) {
      $round377$1 = $spec$select399;$small$1 = $spec$select418;
     } else {
      $54 = HEAP8[$prefix$0>>0]|0;
      $cmp403 = ($54<<24>>24)==(45);
      $mul406 = - $spec$select399;
      $mul407 = - $spec$select418;
      $spec$select419 = $cmp403 ? $mul406 : $spec$select399;
      $spec$select420 = $cmp403 ? $mul407 : $spec$select418;
      $round377$1 = $spec$select419;$small$1 = $spec$select420;
     }
     $sub409 = (($51) - ($53))|0;
     HEAP32[$add$ptr358>>2] = $sub409;
     $add410 = $round377$1 + $small$1;
     $cmp411 = $add410 != $round377$1;
     if ($cmp411) {
      $add414 = (($sub409) + ($i$1$lcssa))|0;
      HEAP32[$add$ptr358>>2] = $add414;
      $cmp416469 = ($add414>>>0)>(999999999);
      if ($cmp416469) {
       $a$5471 = $a$3$lcssa;$d$2470 = $add$ptr358;
       while(1) {
        $incdec$ptr419 = ((($d$2470)) + -4|0);
        HEAP32[$d$2470>>2] = 0;
        $cmp420 = ($incdec$ptr419>>>0)<($a$5471>>>0);
        if ($cmp420) {
         $incdec$ptr423 = ((($a$5471)) + -4|0);
         HEAP32[$incdec$ptr423>>2] = 0;
         $a$6 = $incdec$ptr423;
        } else {
         $a$6 = $a$5471;
        }
        $55 = HEAP32[$incdec$ptr419>>2]|0;
        $inc425 = (($55) + 1)|0;
        HEAP32[$incdec$ptr419>>2] = $inc425;
        $cmp416 = ($inc425>>>0)>(999999999);
        if ($cmp416) {
         $a$5471 = $a$6;$d$2470 = $incdec$ptr419;
        } else {
         $a$5$lcssa = $a$6;$d$2$lcssa = $incdec$ptr419;
         break;
        }
       }
      } else {
       $a$5$lcssa = $a$3$lcssa;$d$2$lcssa = $add$ptr358;
      }
      $sub$ptr$rhs$cast428 = $a$5$lcssa;
      $sub$ptr$sub429 = (($sub$ptr$rhs$cast345) - ($sub$ptr$rhs$cast428))|0;
      $sub$ptr$div430 = $sub$ptr$sub429 >> 2;
      $mul431 = ($sub$ptr$div430*9)|0;
      $56 = HEAP32[$a$5$lcssa>>2]|0;
      $cmp433465 = ($56>>>0)<(10);
      if ($cmp433465) {
       $a$8 = $a$5$lcssa;$d$4 = $d$2$lcssa;$e$4 = $mul431;
      } else {
       $e$2467 = $mul431;$i$2466 = 10;
       while(1) {
        $mul437 = ($i$2466*10)|0;
        $inc438 = (($e$2467) + 1)|0;
        $cmp433 = ($56>>>0)<($mul437>>>0);
        if ($cmp433) {
         $a$8 = $a$5$lcssa;$d$4 = $d$2$lcssa;$e$4 = $inc438;
         break;
        } else {
         $e$2467 = $inc438;$i$2466 = $mul437;
        }
       }
      }
     } else {
      $a$8 = $a$3$lcssa;$d$4 = $add$ptr358;$e$4 = $e$1;
     }
    }
    $add$ptr442 = ((($d$4)) + 4|0);
    $cmp443 = ($z$4$lcssa>>>0)>($add$ptr442>>>0);
    $spec$select401 = $cmp443 ? $add$ptr442 : $z$4$lcssa;
    $a$9 = $a$8;$e$5 = $e$4;$z$8 = $spec$select401;
   } else {
    $a$9 = $a$3$lcssa;$e$5 = $e$1;$z$8 = $z$4$lcssa;
   }
   $sub626 = (0 - ($e$5))|0;
   $cmp450458 = ($z$8>>>0)>($a$9>>>0);
   L109: do {
    if ($cmp450458) {
     $z$9459 = $z$8;
     while(1) {
      $arrayidx453 = ((($z$9459)) + -4|0);
      $57 = HEAP32[$arrayidx453>>2]|0;
      $tobool454 = ($57|0)==(0);
      if (!($tobool454)) {
       $cmp450$lcssa = 1;$z$9$lcssa = $z$9459;
       break L109;
      }
      $cmp450 = ($arrayidx453>>>0)>($a$9>>>0);
      if ($cmp450) {
       $z$9459 = $arrayidx453;
      } else {
       $cmp450$lcssa = 0;$z$9$lcssa = $arrayidx453;
       break;
      }
     }
    } else {
     $cmp450$lcssa = 0;$z$9$lcssa = $z$8;
    }
   } while(0);
   do {
    if ($cmp338) {
     $not$tobool341 = $tobool341 ^ 1;
     $inc468 = $not$tobool341&1;
     $spec$select402 = (($spec$select395) + ($inc468))|0;
     $cmp470 = ($spec$select402|0)>($e$5|0);
     $cmp473 = ($e$5|0)>(-5);
     $or$cond2 = $cmp470 & $cmp473;
     if ($or$cond2) {
      $dec476 = (($t) + -1)|0;
      $add477$neg = (($spec$select402) + -1)|0;
      $sub478 = (($add477$neg) - ($e$5))|0;
      $p$addr$2 = $sub478;$t$addr$0 = $dec476;
     } else {
      $sub480 = (($t) + -2)|0;
      $dec481 = (($spec$select402) + -1)|0;
      $p$addr$2 = $dec481;$t$addr$0 = $sub480;
     }
     $and483 = $fl & 8;
     $tobool484 = ($and483|0)==(0);
     if ($tobool484) {
      if ($cmp450$lcssa) {
       $arrayidx489 = ((($z$9$lcssa)) + -4|0);
       $58 = HEAP32[$arrayidx489>>2]|0;
       $tobool490 = ($58|0)==(0);
       if ($tobool490) {
        $j$2 = 9;
       } else {
        $rem494453 = (($58>>>0) % 10)&-1;
        $cmp495454 = ($rem494453|0)==(0);
        if ($cmp495454) {
         $i$3455 = 10;$j$1456 = 0;
         while(1) {
          $mul499 = ($i$3455*10)|0;
          $inc500 = (($j$1456) + 1)|0;
          $rem494 = (($58>>>0) % ($mul499>>>0))&-1;
          $cmp495 = ($rem494|0)==(0);
          if ($cmp495) {
           $i$3455 = $mul499;$j$1456 = $inc500;
          } else {
           $j$2 = $inc500;
           break;
          }
         }
        } else {
         $j$2 = 0;
        }
       }
      } else {
       $j$2 = 9;
      }
      $or504 = $t$addr$0 | 32;
      $cmp505 = ($or504|0)==(102);
      $sub$ptr$lhs$cast508 = $z$9$lcssa;
      $sub$ptr$sub510 = (($sub$ptr$lhs$cast508) - ($sub$ptr$rhs$cast345))|0;
      $sub$ptr$div511 = $sub$ptr$sub510 >> 2;
      $59 = ($sub$ptr$div511*9)|0;
      $mul513 = (($59) + -9)|0;
      if ($cmp505) {
       $sub514 = (($mul513) - ($j$2))|0;
       $60 = ($sub514|0)>(0);
       $spec$select403 = $60 ? $sub514 : 0;
       $cmp528 = ($p$addr$2|0)<($spec$select403|0);
       $spec$select413 = $cmp528 ? $p$addr$2 : $spec$select403;
       $p$addr$3 = $spec$select413;$t$addr$1 = $t$addr$0;
       break;
      } else {
       $add561 = (($mul513) + ($e$5))|0;
       $sub562 = (($add561) - ($j$2))|0;
       $61 = ($sub562|0)>(0);
       $spec$select405 = $61 ? $sub562 : 0;
       $cmp577 = ($p$addr$2|0)<($spec$select405|0);
       $spec$select414 = $cmp577 ? $p$addr$2 : $spec$select405;
       $p$addr$3 = $spec$select414;$t$addr$1 = $t$addr$0;
       break;
      }
     } else {
      $p$addr$3 = $p$addr$2;$t$addr$1 = $t$addr$0;
     }
    } else {
     $p$addr$3 = $spec$select395;$t$addr$1 = $t;
    }
   } while(0);
   $tobool609 = ($p$addr$3|0)!=(0);
   $and610 = $fl >>> 3;
   $and610$lobit = $and610 & 1;
   $62 = $tobool609 ? 1 : $and610$lobit;
   $or613 = $t$addr$1 | 32;
   $cmp614 = ($or613|0)==(102);
   if ($cmp614) {
    $cmp617 = ($e$5|0)>(0);
    $add620 = $cmp617 ? $e$5 : 0;
    $estr$2 = 0;$sub$ptr$sub650$pn = $add620;
   } else {
    $cmp623 = ($e$5|0)<(0);
    $cond629 = $cmp623 ? $sub626 : $e$5;
    $63 = ($cond629|0)<(0);
    $64 = $63 << 31 >> 31;
    $65 = (_fmt_u($cond629,$64,$arrayidx)|0);
    $sub$ptr$lhs$cast633 = $arrayidx;
    $sub$ptr$rhs$cast634447 = $65;
    $sub$ptr$sub635448 = (($sub$ptr$lhs$cast633) - ($sub$ptr$rhs$cast634447))|0;
    $cmp636449 = ($sub$ptr$sub635448|0)<(2);
    if ($cmp636449) {
     $estr$1450 = $65;
     while(1) {
      $incdec$ptr639 = ((($estr$1450)) + -1|0);
      HEAP8[$incdec$ptr639>>0] = 48;
      $sub$ptr$rhs$cast634 = $incdec$ptr639;
      $sub$ptr$sub635 = (($sub$ptr$lhs$cast633) - ($sub$ptr$rhs$cast634))|0;
      $cmp636 = ($sub$ptr$sub635|0)<(2);
      if ($cmp636) {
       $estr$1450 = $incdec$ptr639;
      } else {
       $estr$1$lcssa = $incdec$ptr639;
       break;
      }
     }
    } else {
     $estr$1$lcssa = $65;
    }
    $66 = $e$5 >> 31;
    $67 = $66 & 2;
    $68 = (($67) + 43)|0;
    $conv644 = $68&255;
    $incdec$ptr645 = ((($estr$1$lcssa)) + -1|0);
    HEAP8[$incdec$ptr645>>0] = $conv644;
    $conv646 = $t$addr$1&255;
    $incdec$ptr647 = ((($estr$1$lcssa)) + -2|0);
    HEAP8[$incdec$ptr647>>0] = $conv646;
    $sub$ptr$rhs$cast649 = $incdec$ptr647;
    $sub$ptr$sub650 = (($sub$ptr$lhs$cast633) - ($sub$ptr$rhs$cast649))|0;
    $estr$2 = $incdec$ptr647;$sub$ptr$sub650$pn = $sub$ptr$sub650;
   }
   $add608 = (($pl$0) + 1)|0;
   $add612 = (($add608) + ($p$addr$3))|0;
   $l$1 = (($add612) + ($62))|0;
   $add653 = (($l$1) + ($sub$ptr$sub650$pn))|0;
   _pad_524($f,32,$w,$add653,$fl);
   _out($f,$prefix$0,$pl$0);
   $xor655 = $fl ^ 65536;
   _pad_524($f,48,$w,$add653,$xor655);
   if ($cmp614) {
    $cmp660 = ($a$9>>>0)>($z$0>>>0);
    $spec$select408 = $cmp660 ? $z$0 : $a$9;
    $add$ptr671 = ((($buf)) + 9|0);
    $sub$ptr$lhs$cast694 = $add$ptr671;
    $incdec$ptr689 = ((($buf)) + 8|0);
    $d$5438 = $spec$select408;
    while(1) {
     $69 = HEAP32[$d$5438>>2]|0;
     $70 = (_fmt_u($69,0,$add$ptr671)|0);
     $cmp673 = ($d$5438|0)==($spec$select408|0);
     if ($cmp673) {
      $cmp686 = ($70|0)==($add$ptr671|0);
      if ($cmp686) {
       HEAP8[$incdec$ptr689>>0] = 48;
       $s668$1 = $incdec$ptr689;
      } else {
       $s668$1 = $70;
      }
     } else {
      $cmp678435 = ($70>>>0)>($buf>>>0);
      if ($cmp678435) {
       $71 = $70;
       $72 = (($71) - ($sub$ptr$rhs$cast$le))|0;
       _memset(($buf|0),48,($72|0))|0;
       $s668$0436 = $70;
       while(1) {
        $incdec$ptr681 = ((($s668$0436)) + -1|0);
        $cmp678 = ($incdec$ptr681>>>0)>($buf>>>0);
        if ($cmp678) {
         $s668$0436 = $incdec$ptr681;
        } else {
         $s668$1 = $incdec$ptr681;
         break;
        }
       }
      } else {
       $s668$1 = $70;
      }
     }
     $sub$ptr$rhs$cast695 = $s668$1;
     $sub$ptr$sub696 = (($sub$ptr$lhs$cast694) - ($sub$ptr$rhs$cast695))|0;
     _out($f,$s668$1,$sub$ptr$sub696);
     $incdec$ptr698 = ((($d$5438)) + 4|0);
     $cmp665 = ($incdec$ptr698>>>0)>($z$0>>>0);
     if ($cmp665) {
      break;
     } else {
      $d$5438 = $incdec$ptr698;
     }
    }
    $tobool609$not = $tobool609 ^ 1;
    $and702 = $fl & 8;
    $tobool703 = ($and702|0)==(0);
    $or$cond409 = $tobool703 & $tobool609$not;
    if (!($or$cond409)) {
     _out($f,8853,1);
    }
    $cmp707430 = ($incdec$ptr698>>>0)<($z$9$lcssa>>>0);
    $cmp710431 = ($p$addr$3|0)>(0);
    $73 = $cmp707430 & $cmp710431;
    if ($73) {
     $d$6432 = $incdec$ptr698;$p$addr$4433 = $p$addr$3;
     while(1) {
      $74 = HEAP32[$d$6432>>2]|0;
      $75 = (_fmt_u($74,0,$add$ptr671)|0);
      $cmp722427 = ($75>>>0)>($buf>>>0);
      if ($cmp722427) {
       $76 = $75;
       $77 = (($76) - ($sub$ptr$rhs$cast$le))|0;
       _memset(($buf|0),48,($77|0))|0;
       $s715$0428 = $75;
       while(1) {
        $incdec$ptr725 = ((($s715$0428)) + -1|0);
        $cmp722 = ($incdec$ptr725>>>0)>($buf>>>0);
        if ($cmp722) {
         $s715$0428 = $incdec$ptr725;
        } else {
         $s715$0$lcssa = $incdec$ptr725;
         break;
        }
       }
      } else {
       $s715$0$lcssa = $75;
      }
      $78 = ($p$addr$4433|0)<(9);
      $cond732 = $78 ? $p$addr$4433 : 9;
      _out($f,$s715$0$lcssa,$cond732);
      $incdec$ptr734 = ((($d$6432)) + 4|0);
      $sub735 = (($p$addr$4433) + -9)|0;
      $cmp707 = ($incdec$ptr734>>>0)<($z$9$lcssa>>>0);
      $cmp710 = ($p$addr$4433|0)>(9);
      $79 = $cmp707 & $cmp710;
      if ($79) {
       $d$6432 = $incdec$ptr734;$p$addr$4433 = $sub735;
      } else {
       $p$addr$4$lcssa = $sub735;
       break;
      }
     }
    } else {
     $p$addr$4$lcssa = $p$addr$3;
    }
    $add737 = (($p$addr$4$lcssa) + 9)|0;
    _pad_524($f,48,$add737,9,0);
   } else {
    $add$ptr742 = ((($a$9)) + 4|0);
    $spec$select410 = $cmp450$lcssa ? $z$9$lcssa : $add$ptr742;
    $cmp745442 = ($a$9>>>0)<($spec$select410>>>0);
    $cmp748443 = ($p$addr$3|0)>(-1);
    $80 = $cmp745442 & $cmp748443;
    if ($80) {
     $add$ptr756 = ((($buf)) + 9|0);
     $and780 = $fl & 8;
     $tobool781 = ($and780|0)==(0);
     $sub$ptr$lhs$cast787 = $add$ptr756;
     $81 = (0 - ($sub$ptr$rhs$cast$le))|0;
     $incdec$ptr763 = ((($buf)) + 8|0);
     $d$7444 = $a$9;$p$addr$5445 = $p$addr$3;
     while(1) {
      $82 = HEAP32[$d$7444>>2]|0;
      $83 = (_fmt_u($82,0,$add$ptr756)|0);
      $cmp760 = ($83|0)==($add$ptr756|0);
      if ($cmp760) {
       HEAP8[$incdec$ptr763>>0] = 48;
       $s753$0 = $incdec$ptr763;
      } else {
       $s753$0 = $83;
      }
      $cmp765 = ($d$7444|0)==($a$9|0);
      do {
       if ($cmp765) {
        $incdec$ptr776 = ((($s753$0)) + 1|0);
        _out($f,$s753$0,1);
        $cmp777 = ($p$addr$5445|0)<(1);
        $or$cond411 = $tobool781 & $cmp777;
        if ($or$cond411) {
         $s753$2 = $incdec$ptr776;
         break;
        }
        _out($f,8853,1);
        $s753$2 = $incdec$ptr776;
       } else {
        $cmp770439 = ($s753$0>>>0)>($buf>>>0);
        if (!($cmp770439)) {
         $s753$2 = $s753$0;
         break;
        }
        $scevgep513 = (($s753$0) + ($81)|0);
        $scevgep513514 = $scevgep513;
        _memset(($buf|0),48,($scevgep513514|0))|0;
        $s753$1440 = $s753$0;
        while(1) {
         $incdec$ptr773 = ((($s753$1440)) + -1|0);
         $cmp770 = ($incdec$ptr773>>>0)>($buf>>>0);
         if ($cmp770) {
          $s753$1440 = $incdec$ptr773;
         } else {
          $s753$2 = $incdec$ptr773;
          break;
         }
        }
       }
      } while(0);
      $sub$ptr$rhs$cast788 = $s753$2;
      $sub$ptr$sub789 = (($sub$ptr$lhs$cast787) - ($sub$ptr$rhs$cast788))|0;
      $cmp790 = ($p$addr$5445|0)>($sub$ptr$sub789|0);
      $cond800 = $cmp790 ? $sub$ptr$sub789 : $p$addr$5445;
      _out($f,$s753$2,$cond800);
      $sub806 = (($p$addr$5445) - ($sub$ptr$sub789))|0;
      $incdec$ptr808 = ((($d$7444)) + 4|0);
      $cmp745 = ($incdec$ptr808>>>0)<($spec$select410>>>0);
      $cmp748 = ($sub806|0)>(-1);
      $84 = $cmp745 & $cmp748;
      if ($84) {
       $d$7444 = $incdec$ptr808;$p$addr$5445 = $sub806;
      } else {
       $p$addr$5$lcssa = $sub806;
       break;
      }
     }
    } else {
     $p$addr$5$lcssa = $p$addr$3;
    }
    $add810 = (($p$addr$5$lcssa) + 18)|0;
    _pad_524($f,48,$add810,18,0);
    $sub$ptr$lhs$cast811 = $arrayidx;
    $sub$ptr$rhs$cast812 = $estr$2;
    $sub$ptr$sub813 = (($sub$ptr$lhs$cast811) - ($sub$ptr$rhs$cast812))|0;
    _out($f,$estr$2,$sub$ptr$sub813);
   }
   $xor816 = $fl ^ 8192;
   _pad_524($f,32,$w,$add653,$xor816);
   $add653$sink524 = $add653;
  }
 } while(0);
 $cmp818 = ($add653$sink524|0)<($w|0);
 $w$add653 = $cmp818 ? $w : $add653$sink524;
 STACKTOP = sp;return ($w$add653|0);
}
function _pop_arg_long_double($arg,$ap) {
 $arg = $arg|0;
 $ap = $ap|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $arglist_current = 0, $arglist_next = 0, $expanded = 0, $expanded1 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $arglist_current = HEAP32[$ap>>2]|0;
 $0 = $arglist_current;
 $1 = ((0) + 8|0);
 $expanded1 = $1;
 $expanded = (($expanded1) - 1)|0;
 $2 = (($0) + ($expanded))|0;
 $3 = ((0) + 8|0);
 $expanded5 = $3;
 $expanded4 = (($expanded5) - 1)|0;
 $expanded3 = $expanded4 ^ -1;
 $4 = $2 & $expanded3;
 $5 = $4;
 $6 = +HEAPF64[$5>>3];
 $arglist_next = ((($5)) + 8|0);
 HEAP32[$ap>>2] = $arglist_next;
 HEAPF64[$arg>>3] = $6;
 return;
}
function ___vfprintf_internal($f,$fmt,$ap,$fmt_fp,$pop_arg_long_double) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 $fmt_fp = $fmt_fp|0;
 $pop_arg_long_double = $pop_arg_long_double|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $add$ptr = 0, $and = 0, $and11 = 0, $and36 = 0, $ap2 = 0, $buf = 0, $buf_size = 0, $call = 0, $call21 = 0, $call2133 = 0, $call6 = 0, $cmp = 0;
 var $cmp5 = 0, $cmp7 = 0, $cond = 0, $internal_buf = 0, $lock = 0, $mode = 0, $nl_arg = 0, $nl_type = 0, $or = 0, $ret$1 = 0, $retval$0 = 0, $spec$select = 0, $spec$select32 = 0, $tobool = 0, $tobool22 = 0, $tobool26 = 0, $tobool37 = 0, $tobool41 = 0, $vacopy_currentptr = 0, $wbase = 0;
 var $wend = 0, $wpos = 0, $write = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $ap2 = sp + 208|0;
 $nl_type = sp + 160|0;
 $nl_arg = sp + 80|0;
 $internal_buf = sp;
 dest=$nl_type; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$ap>>2]|0;
 HEAP32[$ap2>>2] = $vacopy_currentptr;
 $call = (_printf_core(0,$fmt,$ap2,$nl_arg,$nl_type,$fmt_fp,$pop_arg_long_double)|0);
 $cmp = ($call|0)<(0);
 if ($cmp) {
  $retval$0 = -1;
 } else {
  $lock = ((($f)) + 76|0);
  $0 = HEAP32[$lock>>2]|0;
  $cmp5 = ($0|0)>(-1);
  if ($cmp5) {
   $call6 = (___lockfile($f)|0);
   $cond = $call6;
  } else {
   $cond = 0;
  }
  $1 = HEAP32[$f>>2]|0;
  $and = $1 & 32;
  $mode = ((($f)) + 74|0);
  $2 = HEAP8[$mode>>0]|0;
  $cmp7 = ($2<<24>>24)<(1);
  if ($cmp7) {
   $and11 = $1 & -33;
   HEAP32[$f>>2] = $and11;
  }
  $buf_size = ((($f)) + 48|0);
  $3 = HEAP32[$buf_size>>2]|0;
  $tobool = ($3|0)==(0);
  if ($tobool) {
   $buf = ((($f)) + 44|0);
   $4 = HEAP32[$buf>>2]|0;
   HEAP32[$buf>>2] = $internal_buf;
   $wbase = ((($f)) + 28|0);
   HEAP32[$wbase>>2] = $internal_buf;
   $wpos = ((($f)) + 20|0);
   HEAP32[$wpos>>2] = $internal_buf;
   HEAP32[$buf_size>>2] = 80;
   $add$ptr = ((($internal_buf)) + 80|0);
   $wend = ((($f)) + 16|0);
   HEAP32[$wend>>2] = $add$ptr;
   $call21 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type,$fmt_fp,$pop_arg_long_double)|0);
   $tobool22 = ($4|0)==(0|0);
   if ($tobool22) {
    $ret$1 = $call21;
   } else {
    $write = ((($f)) + 36|0);
    $5 = HEAP32[$write>>2]|0;
    (FUNCTION_TABLE_iiii[$5 & 63]($f,0,0)|0);
    $6 = HEAP32[$wpos>>2]|0;
    $tobool26 = ($6|0)==(0|0);
    $spec$select = $tobool26 ? -1 : $call21;
    HEAP32[$buf>>2] = $4;
    HEAP32[$buf_size>>2] = 0;
    HEAP32[$wend>>2] = 0;
    HEAP32[$wbase>>2] = 0;
    HEAP32[$wpos>>2] = 0;
    $ret$1 = $spec$select;
   }
  } else {
   $call2133 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type,$fmt_fp,$pop_arg_long_double)|0);
   $ret$1 = $call2133;
  }
  $7 = HEAP32[$f>>2]|0;
  $and36 = $7 & 32;
  $tobool37 = ($and36|0)==(0);
  $spec$select32 = $tobool37 ? $ret$1 : -1;
  $or = $7 | $and;
  HEAP32[$f>>2] = $or;
  $tobool41 = ($cond|0)==(0);
  if (!($tobool41)) {
   ___unlockfile($f);
  }
  $retval$0 = $spec$select32;
 }
 STACKTOP = sp;return ($retval$0|0);
}
function _printf_core($f,$fmt,$ap,$nl_arg,$nl_type,$fmt_fp,$pop_arg_long_double) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 $nl_arg = $nl_arg|0;
 $nl_type = $nl_type|0;
 $fmt_fp = $fmt_fp|0;
 $pop_arg_long_double = $pop_arg_long_double|0;
 var $$ = 0, $$lcssa213 = 0, $$pre = 0, $$pre261 = 0, $$pre262 = 0, $$pre263 = 0, $$pre263$pre = 0, $$pre264 = 0, $$pre267 = 0, $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0.0, $166 = 0, $167 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a$0 = 0, $a$1 = 0;
 var $add = 0, $add$ptr = 0, $add$ptr139 = 0, $add$ptr150 = 0, $add$ptr206 = 0, $add$ptr258 = 0, $add$ptr341 = 0, $add$ptr354 = 0, $add$ptr468 = 0, $add$ptr88 = 0, $add270 = 0, $add323 = 0, $add390 = 0, $add407 = 0, $add436 = 0, $and = 0, $and211 = 0, $and215 = 0, $and217 = 0, $and220 = 0;
 var $and233 = 0, $and250 = 0, $and255 = 0, $and264 = 0, $and290 = 0, $and295 = 0, $and310 = 0, $arg = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0, $argpos$0 = 0, $arrayidx114 = 0, $arrayidx119 = 0, $arrayidx124 = 0, $arrayidx129 = 0, $arrayidx132 = 0, $arrayidx16 = 0, $arrayidx174 = 0;
 var $arrayidx193 = 0, $arrayidx207 = 0, $arrayidx31 = 0, $arrayidx35 = 0, $arrayidx365 = 0, $arrayidx40 = 0, $arrayidx464 = 0, $arrayidx476 = 0, $arrayidx68 = 0, $arrayidx73 = 0, $arrayidx78 = 0, $arrayidx81 = 0, $brmerge = 0, $brmerge235 = 0, $buf = 0, $call = 0, $call104 = 0, $call121 = 0, $call160 = 0, $call33 = 0;
 var $call351 = 0, $call379 = 0, $call406 = 0, $call424 = 0, $call70 = 0, $cmp = 0, $cmp1 = 0, $cmp105 = 0, $cmp111 = 0, $cmp116 = 0, $cmp126 = 0, $cmp13 = 0, $cmp166 = 0, $cmp177 = 0, $cmp18 = 0, $cmp182 = 0, $cmp185 = 0, $cmp212 = 0, $cmp241 = 0, $cmp271 = 0;
 var $cmp307 = 0, $cmp324 = 0, $cmp37 = 0, $cmp372 = 0, $cmp372242 = 0, $cmp380 = 0, $cmp385 = 0, $cmp399 = 0, $cmp399247 = 0, $cmp408 = 0, $cmp416 = 0, $cmp429 = 0, $cmp437 = 0, $cmp461 = 0, $cmp473 = 0, $cmp50 = 0, $cmp50231 = 0, $cmp65 = 0, $cmp75 = 0, $cmp97 = 0;
 var $cnt$0 = 0, $cnt$0$ph = 0, $cnt$1 = 0, $cond = 0, $cond149 = 0, $cond246 = 0, $cond350 = 0, $cond421 = 0, $conv120 = 0, $conv130 = 0, $conv134 = 0, $conv164 = 0, $conv172 = 0, $conv175 = 0, $conv208 = 0, $conv230 = 0, $conv233 = 0, $conv32 = 0, $conv41 = 0, $conv48 = 0;
 var $conv48229 = 0, $conv69 = 0, $conv79 = 0, $conv83 = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $fl$0$lcssa = 0, $fl$0237 = 0, $fl$1 = 0, $fl$3 = 0, $fl$4 = 0, $fl$6 = 0;
 var $i$0217 = 0, $i$0217271 = 0, $i$0243 = 0, $i$1248 = 0, $i$2224 = 0, $i$3221 = 0, $i137 = 0, $i86 = 0, $inc = 0, $inc483 = 0, $incdec$ptr = 0, $incdec$ptr171 = 0, $incdec$ptr23 = 0, $incdec$ptr378 = 0, $incdec$ptr405 = 0, $incdec$ptr45 = 0, $incdec$ptr62 = 0, $incdec$ptr93 = 0, $l$0 = 0, $l$0$ph = 0;
 var $l$0$ph$be = 0, $l10n$0$ph = 0, $l10n$1 = 0, $l10n$2 = 0, $l10n$3 = 0, $lnot = 0, $lnot$ext = 0, $mb = 0, $or = 0, $or$cond = 0, $or$cond189 = 0, $or$cond190 = 0, $or$cond194 = 0, $or100 = 0, $or247 = 0, $p$0 = 0, $p$1 = 0, $p$2 = 0, $p$2$add323 = 0, $p$3 = 0;
 var $p$4269 = 0, $p$5 = 0, $pl$0 = 0, $pl$1 = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$1 = 0, $prefix$2 = 0, $retval$0 = 0, $s = 0, $shl = 0, $shl232 = 0, $shl60 = 0, $shr199 = 0, $spec$select = 0, $spec$select193 = 0, $spec$select195 = 0, $spec$select200 = 0, $spec$select201 = 0, $spec$select202 = 0;
 var $spec$select203 = 0, $spec$select204 = 0, $spec$select205 = 0, $spec$select206 = 0, $spec$select207 = 0, $spec$select208 = 0, $st$0 = 0, $storemerge187$lcssa = 0, $storemerge187236 = 0, $storemerge188 = 0, $sub = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast318 = 0, $sub$ptr$lhs$cast356 = 0, $sub$ptr$lhs$cast426$pre$phiZZZZ2D = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast268 = 0, $sub$ptr$rhs$cast319 = 0, $sub$ptr$rhs$cast357 = 0, $sub$ptr$rhs$cast427 = 0;
 var $sub$ptr$sub = 0, $sub$ptr$sub269 = 0, $sub$ptr$sub320 = 0, $sub$ptr$sub358 = 0, $sub$ptr$sub428 = 0, $sub101 = 0, $sub131 = 0, $sub135 = 0, $sub165 = 0, $sub173 = 0, $sub176 = 0, $sub384 = 0, $sub42 = 0, $sub49 = 0, $sub49230 = 0, $sub49238 = 0, $sub80 = 0, $sub84 = 0, $t$0 = 0, $t$1 = 0;
 var $tobool = 0, $tobool122 = 0, $tobool141 = 0, $tobool179 = 0, $tobool209 = 0, $tobool218 = 0, $tobool25 = 0, $tobool256 = 0, $tobool265 = 0, $tobool28 = 0, $tobool291 = 0, $tobool296 = 0, $tobool315 = 0, $tobool34 = 0, $tobool345 = 0, $tobool352 = 0, $tobool375 = 0, $tobool402 = 0, $tobool454 = 0, $tobool457 = 0;
 var $tobool465 = 0, $tobool477 = 0, $tobool55 = 0, $tobool55234 = 0, $tobool71 = 0, $tobool90 = 0, $trunc = 0, $w$0 = 0, $w$1 = 0, $w$2 = 0, $wc = 0, $ws$0244 = 0, $ws$1249 = 0, $xor = 0, $xor444 = 0, $xor452 = 0, $z$0$lcssa = 0, $z$0226 = 0, $z$1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $s = sp + 56|0;
 $arg = sp + 40|0;
 $buf = sp;
 $wc = sp + 48|0;
 $mb = sp + 60|0;
 HEAP32[$s>>2] = $fmt;
 $tobool25 = ($f|0)!=(0|0);
 $add$ptr206 = ((($buf)) + 40|0);
 $sub$ptr$lhs$cast318 = $add$ptr206;
 $add$ptr341 = ((($buf)) + 39|0);
 $arrayidx365 = ((($wc)) + 4|0);
 $cnt$0$ph = 0;$l$0$ph = 0;$l10n$0$ph = 0;
 L1: while(1) {
  $cnt$0 = $cnt$0$ph;$l$0 = $l$0$ph;
  while(1) {
   $cmp = ($cnt$0|0)>(-1);
   do {
    if ($cmp) {
     $sub = (2147483647 - ($cnt$0))|0;
     $cmp1 = ($l$0|0)>($sub|0);
     if ($cmp1) {
      $call = (___errno_location()|0);
      HEAP32[$call>>2] = 75;
      $cnt$1 = -1;
      break;
     } else {
      $add = (($l$0) + ($cnt$0))|0;
      $cnt$1 = $add;
      break;
     }
    } else {
     $cnt$1 = $cnt$0;
    }
   } while(0);
   $0 = HEAP32[$s>>2]|0;
   $1 = HEAP8[$0>>0]|0;
   $tobool = ($1<<24>>24)==(0);
   if ($tobool) {
    label = 92;
    break L1;
   }
   $2 = $1;$3 = $0;
   L12: while(1) {
    switch ($2<<24>>24) {
    case 37:  {
     label = 10;
     break L12;
     break;
    }
    case 0:  {
     $z$0$lcssa = $3;
     break L12;
     break;
    }
    default: {
    }
    }
    $incdec$ptr = ((($3)) + 1|0);
    HEAP32[$s>>2] = $incdec$ptr;
    $$pre = HEAP8[$incdec$ptr>>0]|0;
    $2 = $$pre;$3 = $incdec$ptr;
   }
   L15: do {
    if ((label|0) == 10) {
     label = 0;
     $4 = $3;$z$0226 = $3;
     while(1) {
      $arrayidx16 = ((($4)) + 1|0);
      $5 = HEAP8[$arrayidx16>>0]|0;
      $cmp18 = ($5<<24>>24)==(37);
      if (!($cmp18)) {
       $z$0$lcssa = $z$0226;
       break L15;
      }
      $incdec$ptr23 = ((($z$0226)) + 1|0);
      $add$ptr = ((($4)) + 2|0);
      HEAP32[$s>>2] = $add$ptr;
      $6 = HEAP8[$add$ptr>>0]|0;
      $cmp13 = ($6<<24>>24)==(37);
      if ($cmp13) {
       $4 = $add$ptr;$z$0226 = $incdec$ptr23;
      } else {
       $z$0$lcssa = $incdec$ptr23;
       break;
      }
     }
    }
   } while(0);
   $sub$ptr$lhs$cast = $z$0$lcssa;
   $sub$ptr$rhs$cast = $0;
   $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
   if ($tobool25) {
    _out($f,$0,$sub$ptr$sub);
   }
   $tobool28 = ($sub$ptr$sub|0)==(0);
   if ($tobool28) {
    break;
   } else {
    $cnt$0 = $cnt$1;$l$0 = $sub$ptr$sub;
   }
  }
  $7 = HEAP32[$s>>2]|0;
  $arrayidx31 = ((($7)) + 1|0);
  $8 = HEAP8[$arrayidx31>>0]|0;
  $conv32 = $8 << 24 >> 24;
  $call33 = (_isdigit($conv32)|0);
  $tobool34 = ($call33|0)==(0);
  $$pre261 = HEAP32[$s>>2]|0;
  if ($tobool34) {
   $$sink = 1;$argpos$0 = -1;$l10n$1 = $l10n$0$ph;
  } else {
   $arrayidx35 = ((($$pre261)) + 2|0);
   $9 = HEAP8[$arrayidx35>>0]|0;
   $cmp37 = ($9<<24>>24)==(36);
   if ($cmp37) {
    $arrayidx40 = ((($$pre261)) + 1|0);
    $10 = HEAP8[$arrayidx40>>0]|0;
    $conv41 = $10 << 24 >> 24;
    $sub42 = (($conv41) + -48)|0;
    $$sink = 3;$argpos$0 = $sub42;$l10n$1 = 1;
   } else {
    $$sink = 1;$argpos$0 = -1;$l10n$1 = $l10n$0$ph;
   }
  }
  $incdec$ptr45 = (($$pre261) + ($$sink)|0);
  HEAP32[$s>>2] = $incdec$ptr45;
  $11 = HEAP8[$incdec$ptr45>>0]|0;
  $conv48229 = $11 << 24 >> 24;
  $sub49230 = (($conv48229) + -32)|0;
  $cmp50231 = ($sub49230>>>0)>(31);
  $shl232 = 1 << $sub49230;
  $and233 = $shl232 & 75913;
  $tobool55234 = ($and233|0)==(0);
  $brmerge235 = $cmp50231 | $tobool55234;
  if ($brmerge235) {
   $$lcssa213 = $11;$fl$0$lcssa = 0;$storemerge187$lcssa = $incdec$ptr45;
  } else {
   $fl$0237 = 0;$storemerge187236 = $incdec$ptr45;$sub49238 = $sub49230;
   while(1) {
    $shl60 = 1 << $sub49238;
    $or = $shl60 | $fl$0237;
    $incdec$ptr62 = ((($storemerge187236)) + 1|0);
    HEAP32[$s>>2] = $incdec$ptr62;
    $12 = HEAP8[$incdec$ptr62>>0]|0;
    $conv48 = $12 << 24 >> 24;
    $sub49 = (($conv48) + -32)|0;
    $cmp50 = ($sub49>>>0)>(31);
    $shl = 1 << $sub49;
    $and = $shl & 75913;
    $tobool55 = ($and|0)==(0);
    $brmerge = $cmp50 | $tobool55;
    if ($brmerge) {
     $$lcssa213 = $12;$fl$0$lcssa = $or;$storemerge187$lcssa = $incdec$ptr62;
     break;
    } else {
     $fl$0237 = $or;$storemerge187236 = $incdec$ptr62;$sub49238 = $sub49;
    }
   }
  }
  $cmp65 = ($$lcssa213<<24>>24)==(42);
  if ($cmp65) {
   $arrayidx68 = ((($storemerge187$lcssa)) + 1|0);
   $13 = HEAP8[$arrayidx68>>0]|0;
   $conv69 = $13 << 24 >> 24;
   $call70 = (_isdigit($conv69)|0);
   $tobool71 = ($call70|0)==(0);
   if ($tobool71) {
    label = 27;
   } else {
    $14 = HEAP32[$s>>2]|0;
    $arrayidx73 = ((($14)) + 2|0);
    $15 = HEAP8[$arrayidx73>>0]|0;
    $cmp75 = ($15<<24>>24)==(36);
    if ($cmp75) {
     $arrayidx78 = ((($14)) + 1|0);
     $16 = HEAP8[$arrayidx78>>0]|0;
     $conv79 = $16 << 24 >> 24;
     $sub80 = (($conv79) + -48)|0;
     $arrayidx81 = (($nl_type) + ($sub80<<2)|0);
     HEAP32[$arrayidx81>>2] = 10;
     $17 = HEAP8[$arrayidx78>>0]|0;
     $conv83 = $17 << 24 >> 24;
     $sub84 = (($conv83) + -48)|0;
     $i86 = (($nl_arg) + ($sub84<<3)|0);
     $18 = $i86;
     $19 = $18;
     $20 = HEAP32[$19>>2]|0;
     $21 = (($18) + 4)|0;
     $22 = $21;
     $23 = HEAP32[$22>>2]|0;
     $add$ptr88 = ((($14)) + 3|0);
     $l10n$2 = 1;$storemerge188 = $add$ptr88;$w$0 = $20;
    } else {
     label = 27;
    }
   }
   if ((label|0) == 27) {
    label = 0;
    $tobool90 = ($l10n$1|0)==(0);
    if (!($tobool90)) {
     $retval$0 = -1;
     break;
    }
    if ($tobool25) {
     $arglist_current = HEAP32[$ap>>2]|0;
     $24 = $arglist_current;
     $25 = ((0) + 4|0);
     $expanded4 = $25;
     $expanded = (($expanded4) - 1)|0;
     $26 = (($24) + ($expanded))|0;
     $27 = ((0) + 4|0);
     $expanded8 = $27;
     $expanded7 = (($expanded8) - 1)|0;
     $expanded6 = $expanded7 ^ -1;
     $28 = $26 & $expanded6;
     $29 = $28;
     $30 = HEAP32[$29>>2]|0;
     $arglist_next = ((($29)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     $cond = $30;
    } else {
     $cond = 0;
    }
    $31 = HEAP32[$s>>2]|0;
    $incdec$ptr93 = ((($31)) + 1|0);
    $l10n$2 = 0;$storemerge188 = $incdec$ptr93;$w$0 = $cond;
   }
   HEAP32[$s>>2] = $storemerge188;
   $cmp97 = ($w$0|0)<(0);
   $or100 = $fl$0$lcssa | 8192;
   $sub101 = (0 - ($w$0))|0;
   $spec$select200 = $cmp97 ? $or100 : $fl$0$lcssa;
   $spec$select201 = $cmp97 ? $sub101 : $w$0;
   $33 = $storemerge188;$fl$1 = $spec$select200;$l10n$3 = $l10n$2;$w$1 = $spec$select201;
  } else {
   $call104 = (_getint($s)|0);
   $cmp105 = ($call104|0)<(0);
   if ($cmp105) {
    $retval$0 = -1;
    break;
   }
   $$pre262 = HEAP32[$s>>2]|0;
   $33 = $$pre262;$fl$1 = $fl$0$lcssa;$l10n$3 = $l10n$1;$w$1 = $call104;
  }
  $32 = HEAP8[$33>>0]|0;
  $cmp111 = ($32<<24>>24)==(46);
  do {
   if ($cmp111) {
    $arrayidx114 = ((($33)) + 1|0);
    $34 = HEAP8[$arrayidx114>>0]|0;
    $cmp116 = ($34<<24>>24)==(42);
    if (!($cmp116)) {
     HEAP32[$s>>2] = $arrayidx114;
     $call160 = (_getint($s)|0);
     $$pre263$pre = HEAP32[$s>>2]|0;
     $$pre263 = $$pre263$pre;$p$0 = $call160;
     break;
    }
    $arrayidx119 = ((($33)) + 2|0);
    $35 = HEAP8[$arrayidx119>>0]|0;
    $conv120 = $35 << 24 >> 24;
    $call121 = (_isdigit($conv120)|0);
    $tobool122 = ($call121|0)==(0);
    if (!($tobool122)) {
     $36 = HEAP32[$s>>2]|0;
     $arrayidx124 = ((($36)) + 3|0);
     $37 = HEAP8[$arrayidx124>>0]|0;
     $cmp126 = ($37<<24>>24)==(36);
     if ($cmp126) {
      $arrayidx129 = ((($36)) + 2|0);
      $38 = HEAP8[$arrayidx129>>0]|0;
      $conv130 = $38 << 24 >> 24;
      $sub131 = (($conv130) + -48)|0;
      $arrayidx132 = (($nl_type) + ($sub131<<2)|0);
      HEAP32[$arrayidx132>>2] = 10;
      $39 = HEAP8[$arrayidx129>>0]|0;
      $conv134 = $39 << 24 >> 24;
      $sub135 = (($conv134) + -48)|0;
      $i137 = (($nl_arg) + ($sub135<<3)|0);
      $40 = $i137;
      $41 = $40;
      $42 = HEAP32[$41>>2]|0;
      $43 = (($40) + 4)|0;
      $44 = $43;
      $45 = HEAP32[$44>>2]|0;
      $add$ptr139 = ((($36)) + 4|0);
      HEAP32[$s>>2] = $add$ptr139;
      $$pre263 = $add$ptr139;$p$0 = $42;
      break;
     }
    }
    $tobool141 = ($l10n$3|0)==(0);
    if (!($tobool141)) {
     $retval$0 = -1;
     break L1;
    }
    if ($tobool25) {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $46 = $arglist_current2;
     $47 = ((0) + 4|0);
     $expanded11 = $47;
     $expanded10 = (($expanded11) - 1)|0;
     $48 = (($46) + ($expanded10))|0;
     $49 = ((0) + 4|0);
     $expanded15 = $49;
     $expanded14 = (($expanded15) - 1)|0;
     $expanded13 = $expanded14 ^ -1;
     $50 = $48 & $expanded13;
     $51 = $50;
     $52 = HEAP32[$51>>2]|0;
     $arglist_next3 = ((($51)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $cond149 = $52;
    } else {
     $cond149 = 0;
    }
    $53 = HEAP32[$s>>2]|0;
    $add$ptr150 = ((($53)) + 2|0);
    HEAP32[$s>>2] = $add$ptr150;
    $$pre263 = $add$ptr150;$p$0 = $cond149;
   } else {
    $$pre263 = $33;$p$0 = -1;
   }
  } while(0);
  $55 = $$pre263;$st$0 = 0;
  while(1) {
   $54 = HEAP8[$55>>0]|0;
   $conv164 = $54 << 24 >> 24;
   $sub165 = (($conv164) + -65)|0;
   $cmp166 = ($sub165>>>0)>(57);
   if ($cmp166) {
    $retval$0 = -1;
    break L1;
   }
   $incdec$ptr171 = ((($55)) + 1|0);
   HEAP32[$s>>2] = $incdec$ptr171;
   $56 = HEAP8[$55>>0]|0;
   $conv172 = $56 << 24 >> 24;
   $sub173 = (($conv172) + -65)|0;
   $arrayidx174 = ((1088 + (($st$0*58)|0)|0) + ($sub173)|0);
   $57 = HEAP8[$arrayidx174>>0]|0;
   $conv175 = $57&255;
   $sub176 = (($conv175) + -1)|0;
   $cmp177 = ($sub176>>>0)<(8);
   if ($cmp177) {
    $55 = $incdec$ptr171;$st$0 = $conv175;
   } else {
    break;
   }
  }
  $tobool179 = ($57<<24>>24)==(0);
  if ($tobool179) {
   $retval$0 = -1;
   break;
  }
  $cmp182 = ($57<<24>>24)==(19);
  $cmp185 = ($argpos$0|0)>(-1);
  do {
   if ($cmp182) {
    if ($cmp185) {
     $retval$0 = -1;
     break L1;
    } else {
     label = 54;
    }
   } else {
    if ($cmp185) {
     $arrayidx193 = (($nl_type) + ($argpos$0<<2)|0);
     HEAP32[$arrayidx193>>2] = $conv175;
     $58 = (($nl_arg) + ($argpos$0<<3)|0);
     $59 = $58;
     $60 = $59;
     $61 = HEAP32[$60>>2]|0;
     $62 = (($59) + 4)|0;
     $63 = $62;
     $64 = HEAP32[$63>>2]|0;
     $65 = $arg;
     $66 = $65;
     HEAP32[$66>>2] = $61;
     $67 = (($65) + 4)|0;
     $68 = $67;
     HEAP32[$68>>2] = $64;
     label = 54;
     break;
    }
    if (!($tobool25)) {
     $retval$0 = 0;
     break L1;
    }
    _pop_arg($arg,$conv175,$ap,$pop_arg_long_double);
    $$pre264 = HEAP32[$s>>2]|0;
    $69 = $$pre264;
    label = 55;
   }
  } while(0);
  if ((label|0) == 54) {
   label = 0;
   if ($tobool25) {
    $69 = $incdec$ptr171;
    label = 55;
   } else {
    $l$0$ph$be = 0;
   }
  }
  L77: do {
   if ((label|0) == 55) {
    label = 0;
    $arrayidx207 = ((($69)) + -1|0);
    $70 = HEAP8[$arrayidx207>>0]|0;
    $conv208 = $70 << 24 >> 24;
    $tobool209 = ($st$0|0)!=(0);
    $and211 = $conv208 & 15;
    $cmp212 = ($and211|0)==(3);
    $or$cond189 = $tobool209 & $cmp212;
    $and215 = $conv208 & -33;
    $t$0 = $or$cond189 ? $and215 : $conv208;
    $and217 = $fl$1 & 8192;
    $tobool218 = ($and217|0)==(0);
    $and220 = $fl$1 & -65537;
    $spec$select = $tobool218 ? $fl$1 : $and220;
    L79: do {
     switch ($t$0|0) {
     case 110:  {
      $trunc = $st$0&255;
      switch ($trunc<<24>>24) {
      case 0:  {
       $77 = HEAP32[$arg>>2]|0;
       HEAP32[$77>>2] = $cnt$1;
       $l$0$ph$be = 0;
       break L77;
       break;
      }
      case 1:  {
       $78 = HEAP32[$arg>>2]|0;
       HEAP32[$78>>2] = $cnt$1;
       $l$0$ph$be = 0;
       break L77;
       break;
      }
      case 2:  {
       $79 = ($cnt$1|0)<(0);
       $80 = $79 << 31 >> 31;
       $81 = HEAP32[$arg>>2]|0;
       $82 = $81;
       $83 = $82;
       HEAP32[$83>>2] = $cnt$1;
       $84 = (($82) + 4)|0;
       $85 = $84;
       HEAP32[$85>>2] = $80;
       $l$0$ph$be = 0;
       break L77;
       break;
      }
      case 3:  {
       $conv230 = $cnt$1&65535;
       $86 = HEAP32[$arg>>2]|0;
       HEAP16[$86>>1] = $conv230;
       $l$0$ph$be = 0;
       break L77;
       break;
      }
      case 4:  {
       $conv233 = $cnt$1&255;
       $87 = HEAP32[$arg>>2]|0;
       HEAP8[$87>>0] = $conv233;
       $l$0$ph$be = 0;
       break L77;
       break;
      }
      case 6:  {
       $88 = HEAP32[$arg>>2]|0;
       HEAP32[$88>>2] = $cnt$1;
       $l$0$ph$be = 0;
       break L77;
       break;
      }
      case 7:  {
       $89 = ($cnt$1|0)<(0);
       $90 = $89 << 31 >> 31;
       $91 = HEAP32[$arg>>2]|0;
       $92 = $91;
       $93 = $92;
       HEAP32[$93>>2] = $cnt$1;
       $94 = (($92) + 4)|0;
       $95 = $94;
       HEAP32[$95>>2] = $90;
       $l$0$ph$be = 0;
       break L77;
       break;
      }
      default: {
       $l$0$ph$be = 0;
       break L77;
      }
      }
      break;
     }
     case 112:  {
      $cmp241 = ($p$0>>>0)>(8);
      $cond246 = $cmp241 ? $p$0 : 8;
      $or247 = $spec$select | 8;
      $fl$3 = $or247;$p$1 = $cond246;$t$1 = 120;
      label = 67;
      break;
     }
     case 88: case 120:  {
      $fl$3 = $spec$select;$p$1 = $p$0;$t$1 = $t$0;
      label = 67;
      break;
     }
     case 111:  {
      $112 = $arg;
      $113 = $112;
      $114 = HEAP32[$113>>2]|0;
      $115 = (($112) + 4)|0;
      $116 = $115;
      $117 = HEAP32[$116>>2]|0;
      $118 = (_fmt_o($114,$117,$add$ptr206)|0);
      $and264 = $spec$select & 8;
      $tobool265 = ($and264|0)==(0);
      $sub$ptr$rhs$cast268 = $118;
      $sub$ptr$sub269 = (($sub$ptr$lhs$cast318) - ($sub$ptr$rhs$cast268))|0;
      $cmp271 = ($p$0|0)>($sub$ptr$sub269|0);
      $add270 = (($sub$ptr$sub269) + 1)|0;
      $119 = $tobool265 | $cmp271;
      $spec$select204 = $119 ? $p$0 : $add270;
      $a$0 = $118;$fl$4 = $spec$select;$p$2 = $spec$select204;$pl$1 = 0;$prefix$1 = 8805;
      label = 73;
      break;
     }
     case 105: case 100:  {
      $120 = $arg;
      $121 = $120;
      $122 = HEAP32[$121>>2]|0;
      $123 = (($120) + 4)|0;
      $124 = $123;
      $125 = HEAP32[$124>>2]|0;
      $126 = ($125|0)<(0);
      if ($126) {
       $127 = (_i64Subtract(0,0,($122|0),($125|0))|0);
       $128 = (getTempRet0() | 0);
       $129 = $arg;
       $130 = $129;
       HEAP32[$130>>2] = $127;
       $131 = (($129) + 4)|0;
       $132 = $131;
       HEAP32[$132>>2] = $128;
       $135 = $127;$136 = $128;$pl$0 = 1;$prefix$0 = 8805;
       label = 72;
       break L79;
      } else {
       $and290 = $spec$select & 2048;
       $tobool291 = ($and290|0)==(0);
       $and295 = $spec$select & 1;
       $tobool296 = ($and295|0)==(0);
       $$ = $tobool296 ? 8805 : (8807);
       $spec$select205 = $tobool291 ? $$ : (8806);
       $133 = $spec$select & 2049;
       $134 = ($133|0)!=(0);
       $spec$select206 = $134&1;
       $135 = $122;$136 = $125;$pl$0 = $spec$select206;$prefix$0 = $spec$select205;
       label = 72;
       break L79;
      }
      break;
     }
     case 117:  {
      $71 = $arg;
      $72 = $71;
      $73 = HEAP32[$72>>2]|0;
      $74 = (($71) + 4)|0;
      $75 = $74;
      $76 = HEAP32[$75>>2]|0;
      $135 = $73;$136 = $76;$pl$0 = 0;$prefix$0 = 8805;
      label = 72;
      break;
     }
     case 99:  {
      $147 = $arg;
      $148 = $147;
      $149 = HEAP32[$148>>2]|0;
      $150 = (($147) + 4)|0;
      $151 = $150;
      $152 = HEAP32[$151>>2]|0;
      $153 = $149&255;
      HEAP8[$add$ptr341>>0] = $153;
      $a$1 = $add$ptr341;$fl$6 = $and220;$p$5 = 1;$pl$2 = 0;$prefix$2 = 8805;$sub$ptr$lhs$cast426$pre$phiZZZZ2D = $sub$ptr$lhs$cast318;
      break;
     }
     case 115:  {
      $154 = HEAP32[$arg>>2]|0;
      $tobool345 = ($154|0)==(0|0);
      $cond350 = $tobool345 ? 8815 : $154;
      $call351 = (_memchr($cond350,0,$p$0)|0);
      $tobool352 = ($call351|0)==(0|0);
      $sub$ptr$lhs$cast356 = $call351;
      $sub$ptr$rhs$cast357 = $cond350;
      $sub$ptr$sub358 = (($sub$ptr$lhs$cast356) - ($sub$ptr$rhs$cast357))|0;
      $add$ptr354 = (($cond350) + ($p$0)|0);
      $p$3 = $tobool352 ? $p$0 : $sub$ptr$sub358;
      $z$1 = $tobool352 ? $add$ptr354 : $call351;
      $$pre267 = $z$1;
      $a$1 = $cond350;$fl$6 = $and220;$p$5 = $p$3;$pl$2 = 0;$prefix$2 = 8805;$sub$ptr$lhs$cast426$pre$phiZZZZ2D = $$pre267;
      break;
     }
     case 67:  {
      $155 = $arg;
      $156 = $155;
      $157 = HEAP32[$156>>2]|0;
      $158 = (($155) + 4)|0;
      $159 = $158;
      $160 = HEAP32[$159>>2]|0;
      HEAP32[$wc>>2] = $157;
      HEAP32[$arrayidx365>>2] = 0;
      HEAP32[$arg>>2] = $wc;
      $p$4269 = -1;
      label = 79;
      break;
     }
     case 83:  {
      $cmp372242 = ($p$0|0)==(0);
      if ($cmp372242) {
       _pad_524($f,32,$w$1,0,$spec$select);
       $i$0217271 = 0;
       label = 89;
      } else {
       $p$4269 = $p$0;
       label = 79;
      }
      break;
     }
     case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
      $165 = +HEAPF64[$arg>>3];
      $call424 = (FUNCTION_TABLE_iidiiii[$fmt_fp & 63]($f,$165,$w$1,$p$0,$spec$select,$t$0)|0);
      $l$0$ph$be = $call424;
      break L77;
      break;
     }
     default: {
      $a$1 = $0;$fl$6 = $spec$select;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 8805;$sub$ptr$lhs$cast426$pre$phiZZZZ2D = $sub$ptr$lhs$cast318;
     }
     }
    } while(0);
    L102: do {
     if ((label|0) == 67) {
      label = 0;
      $96 = $arg;
      $97 = $96;
      $98 = HEAP32[$97>>2]|0;
      $99 = (($96) + 4)|0;
      $100 = $99;
      $101 = HEAP32[$100>>2]|0;
      $and250 = $t$1 & 32;
      $102 = (_fmt_x($98,$101,$add$ptr206,$and250)|0);
      $103 = $arg;
      $104 = $103;
      $105 = HEAP32[$104>>2]|0;
      $106 = (($103) + 4)|0;
      $107 = $106;
      $108 = HEAP32[$107>>2]|0;
      $109 = ($105|0)==(0);
      $110 = ($108|0)==(0);
      $111 = $109 & $110;
      $and255 = $fl$3 & 8;
      $tobool256 = ($and255|0)==(0);
      $or$cond190 = $tobool256 | $111;
      $shr199 = $t$1 >>> 4;
      $add$ptr258 = (8805 + ($shr199)|0);
      $spec$select202 = $or$cond190 ? 8805 : $add$ptr258;
      $spec$select203 = $or$cond190 ? 0 : 2;
      $a$0 = $102;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = $spec$select203;$prefix$1 = $spec$select202;
      label = 73;
     }
     else if ((label|0) == 72) {
      label = 0;
      $137 = (_fmt_u($135,$136,$add$ptr206)|0);
      $a$0 = $137;$fl$4 = $spec$select;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
      label = 73;
     }
     else if ((label|0) == 79) {
      label = 0;
      $161 = HEAP32[$arg>>2]|0;
      $i$0243 = 0;$ws$0244 = $161;
      while(1) {
       $162 = HEAP32[$ws$0244>>2]|0;
       $tobool375 = ($162|0)==(0);
       if ($tobool375) {
        $i$0217 = $i$0243;
        break;
       }
       $call379 = (_wctomb($mb,$162)|0);
       $cmp380 = ($call379|0)<(0);
       $sub384 = (($p$4269) - ($i$0243))|0;
       $cmp385 = ($call379>>>0)>($sub384>>>0);
       $or$cond194 = $cmp380 | $cmp385;
       if ($or$cond194) {
        label = 83;
        break;
       }
       $incdec$ptr378 = ((($ws$0244)) + 4|0);
       $add390 = (($call379) + ($i$0243))|0;
       $cmp372 = ($p$4269>>>0)>($add390>>>0);
       if ($cmp372) {
        $i$0243 = $add390;$ws$0244 = $incdec$ptr378;
       } else {
        $i$0217 = $add390;
        break;
       }
      }
      if ((label|0) == 83) {
       label = 0;
       if ($cmp380) {
        $retval$0 = -1;
        break L1;
       } else {
        $i$0217 = $i$0243;
       }
      }
      _pad_524($f,32,$w$1,$i$0217,$spec$select);
      $cmp399247 = ($i$0217|0)==(0);
      if ($cmp399247) {
       $i$0217271 = 0;
       label = 89;
      } else {
       $163 = HEAP32[$arg>>2]|0;
       $i$1248 = 0;$ws$1249 = $163;
       while(1) {
        $164 = HEAP32[$ws$1249>>2]|0;
        $tobool402 = ($164|0)==(0);
        if ($tobool402) {
         $i$0217271 = $i$0217;
         label = 89;
         break L102;
        }
        $call406 = (_wctomb($mb,$164)|0);
        $add407 = (($call406) + ($i$1248))|0;
        $cmp408 = ($add407|0)>($i$0217|0);
        if ($cmp408) {
         $i$0217271 = $i$0217;
         label = 89;
         break L102;
        }
        $incdec$ptr405 = ((($ws$1249)) + 4|0);
        _out($f,$mb,$call406);
        $cmp399 = ($add407>>>0)<($i$0217>>>0);
        if ($cmp399) {
         $i$1248 = $add407;$ws$1249 = $incdec$ptr405;
        } else {
         $i$0217271 = $i$0217;
         label = 89;
         break;
        }
       }
      }
     }
    } while(0);
    if ((label|0) == 73) {
     label = 0;
     $cmp307 = ($p$2|0)>(-1);
     $and310 = $fl$4 & -65537;
     $spec$select193 = $cmp307 ? $and310 : $fl$4;
     $138 = $arg;
     $139 = $138;
     $140 = HEAP32[$139>>2]|0;
     $141 = (($138) + 4)|0;
     $142 = $141;
     $143 = HEAP32[$142>>2]|0;
     $144 = ($140|0)!=(0);
     $145 = ($143|0)!=(0);
     $146 = $144 | $145;
     $tobool315 = ($p$2|0)!=(0);
     $or$cond = $tobool315 | $146;
     $sub$ptr$rhs$cast319 = $a$0;
     $sub$ptr$sub320 = (($sub$ptr$lhs$cast318) - ($sub$ptr$rhs$cast319))|0;
     $lnot = $146 ^ 1;
     $lnot$ext = $lnot&1;
     $add323 = (($sub$ptr$sub320) + ($lnot$ext))|0;
     $cmp324 = ($p$2|0)>($add323|0);
     $p$2$add323 = $cmp324 ? $p$2 : $add323;
     $spec$select207 = $or$cond ? $p$2$add323 : 0;
     $spec$select208 = $or$cond ? $a$0 : $add$ptr206;
     $a$1 = $spec$select208;$fl$6 = $spec$select193;$p$5 = $spec$select207;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$sub$ptr$lhs$cast426$pre$phiZZZZ2D = $sub$ptr$lhs$cast318;
    }
    else if ((label|0) == 89) {
     label = 0;
     $xor = $spec$select ^ 8192;
     _pad_524($f,32,$w$1,$i$0217271,$xor);
     $cmp416 = ($w$1|0)>($i$0217271|0);
     $cond421 = $cmp416 ? $w$1 : $i$0217271;
     $l$0$ph$be = $cond421;
     break;
    }
    $sub$ptr$rhs$cast427 = $a$1;
    $sub$ptr$sub428 = (($sub$ptr$lhs$cast426$pre$phiZZZZ2D) - ($sub$ptr$rhs$cast427))|0;
    $cmp429 = ($p$5|0)<($sub$ptr$sub428|0);
    $spec$select195 = $cmp429 ? $sub$ptr$sub428 : $p$5;
    $add436 = (($spec$select195) + ($pl$2))|0;
    $cmp437 = ($w$1|0)<($add436|0);
    $w$2 = $cmp437 ? $add436 : $w$1;
    _pad_524($f,32,$w$2,$add436,$fl$6);
    _out($f,$prefix$2,$pl$2);
    $xor444 = $fl$6 ^ 65536;
    _pad_524($f,48,$w$2,$add436,$xor444);
    _pad_524($f,48,$spec$select195,$sub$ptr$sub428,0);
    _out($f,$a$1,$sub$ptr$sub428);
    $xor452 = $fl$6 ^ 8192;
    _pad_524($f,32,$w$2,$add436,$xor452);
    $l$0$ph$be = $w$2;
   }
  } while(0);
  $cnt$0$ph = $cnt$1;$l$0$ph = $l$0$ph$be;$l10n$0$ph = $l10n$3;
 }
 L123: do {
  if ((label|0) == 92) {
   $tobool454 = ($f|0)==(0|0);
   if ($tobool454) {
    $tobool457 = ($l10n$0$ph|0)==(0);
    if ($tobool457) {
     $retval$0 = 0;
    } else {
     $i$2224 = 1;
     while(1) {
      $arrayidx464 = (($nl_type) + ($i$2224<<2)|0);
      $166 = HEAP32[$arrayidx464>>2]|0;
      $tobool465 = ($166|0)==(0);
      if ($tobool465) {
       break;
      }
      $add$ptr468 = (($nl_arg) + ($i$2224<<3)|0);
      _pop_arg($add$ptr468,$166,$ap,$pop_arg_long_double);
      $inc = (($i$2224) + 1)|0;
      $cmp461 = ($inc>>>0)<(10);
      if ($cmp461) {
       $i$2224 = $inc;
      } else {
       $retval$0 = 1;
       break L123;
      }
     }
     $i$3221 = $i$2224;
     while(1) {
      $arrayidx476 = (($nl_type) + ($i$3221<<2)|0);
      $167 = HEAP32[$arrayidx476>>2]|0;
      $tobool477 = ($167|0)==(0);
      $inc483 = (($i$3221) + 1)|0;
      if (!($tobool477)) {
       $retval$0 = -1;
       break L123;
      }
      $cmp473 = ($inc483>>>0)<(10);
      if ($cmp473) {
       $i$3221 = $inc483;
      } else {
       $retval$0 = 1;
       break;
      }
     }
    }
   } else {
    $retval$0 = $cnt$1;
   }
  }
 } while(0);
 STACKTOP = sp;return ($retval$0|0);
}
function ___lockfile($f) {
 $f = $f|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function ___unlockfile($f) {
 $f = $f|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _out($f,$s,$l) {
 $f = $f|0;
 $s = $s|0;
 $l = $l|0;
 var $0 = 0, $and = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$f>>2]|0;
 $and = $0 & 32;
 $tobool = ($and|0)==(0);
 if ($tobool) {
  (___fwritex($s,$l,$f)|0);
 }
 return;
}
function _isdigit($c) {
 $c = $c|0;
 var $cmp = 0, $conv = 0, $sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $sub = (($c) + -48)|0;
 $cmp = ($sub>>>0)<(10);
 $conv = $cmp&1;
 return ($conv|0);
}
function _getint($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $add = 0, $call = 0, $call5 = 0, $conv = 0, $conv1 = 0, $conv4 = 0, $i$0$lcssa = 0, $i$07 = 0, $incdec$ptr = 0, $mul = 0, $sub = 0, $tobool = 0, $tobool6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$s>>2]|0;
 $1 = HEAP8[$0>>0]|0;
 $conv4 = $1 << 24 >> 24;
 $call5 = (_isdigit($conv4)|0);
 $tobool6 = ($call5|0)==(0);
 if ($tobool6) {
  $i$0$lcssa = 0;
 } else {
  $i$07 = 0;
  while(1) {
   $mul = ($i$07*10)|0;
   $2 = HEAP32[$s>>2]|0;
   $3 = HEAP8[$2>>0]|0;
   $conv1 = $3 << 24 >> 24;
   $sub = (($mul) + -48)|0;
   $add = (($sub) + ($conv1))|0;
   $incdec$ptr = ((($2)) + 1|0);
   HEAP32[$s>>2] = $incdec$ptr;
   $4 = HEAP8[$incdec$ptr>>0]|0;
   $conv = $4 << 24 >> 24;
   $call = (_isdigit($conv)|0);
   $tobool = ($call|0)==(0);
   if ($tobool) {
    $i$0$lcssa = $add;
    break;
   } else {
    $i$07 = $add;
   }
  }
 }
 return ($i$0$lcssa|0);
}
function _pop_arg($arg,$type,$ap,$pop_arg_long_double) {
 $arg = $arg|0;
 $type = $type|0;
 $ap = $ap|0;
 $pop_arg_long_double = $pop_arg_long_double|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0, $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next3 = 0;
 var $arglist_next6 = 0, $arglist_next9 = 0, $cmp = 0, $conv16 = 0, $conv22$mask = 0, $conv28 = 0, $conv34$mask = 0, $expanded = 0, $expanded25 = 0, $expanded27 = 0, $expanded28 = 0, $expanded29 = 0, $expanded31 = 0, $expanded32 = 0, $expanded34 = 0, $expanded35 = 0, $expanded36 = 0, $expanded38 = 0, $expanded39 = 0, $expanded41 = 0;
 var $expanded42 = 0, $expanded43 = 0, $expanded45 = 0, $expanded46 = 0, $expanded48 = 0, $expanded49 = 0, $expanded50 = 0, $expanded52 = 0, $expanded53 = 0, $expanded55 = 0, $expanded56 = 0, $expanded57 = 0, $expanded59 = 0, $expanded60 = 0, $expanded62 = 0, $expanded63 = 0, $expanded64 = 0, $expanded66 = 0, $expanded67 = 0, $expanded69 = 0;
 var $expanded70 = 0, $expanded71 = 0, $expanded73 = 0, $expanded74 = 0, $expanded76 = 0, $expanded77 = 0, $expanded78 = 0, $expanded80 = 0, $expanded81 = 0, $expanded83 = 0, $expanded84 = 0, $expanded85 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($type>>>0)>(20);
 L1: do {
  if (!($cmp)) {
   do {
    switch ($type|0) {
    case 9:  {
     $arglist_current = HEAP32[$ap>>2]|0;
     $0 = $arglist_current;
     $1 = ((0) + 4|0);
     $expanded25 = $1;
     $expanded = (($expanded25) - 1)|0;
     $2 = (($0) + ($expanded))|0;
     $3 = ((0) + 4|0);
     $expanded29 = $3;
     $expanded28 = (($expanded29) - 1)|0;
     $expanded27 = $expanded28 ^ -1;
     $4 = $2 & $expanded27;
     $5 = $4;
     $6 = HEAP32[$5>>2]|0;
     $arglist_next = ((($5)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     HEAP32[$arg>>2] = $6;
     break L1;
     break;
    }
    case 10:  {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $7 = $arglist_current2;
     $8 = ((0) + 4|0);
     $expanded32 = $8;
     $expanded31 = (($expanded32) - 1)|0;
     $9 = (($7) + ($expanded31))|0;
     $10 = ((0) + 4|0);
     $expanded36 = $10;
     $expanded35 = (($expanded36) - 1)|0;
     $expanded34 = $expanded35 ^ -1;
     $11 = $9 & $expanded34;
     $12 = $11;
     $13 = HEAP32[$12>>2]|0;
     $arglist_next3 = ((($12)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $14 = ($13|0)<(0);
     $15 = $14 << 31 >> 31;
     $16 = $arg;
     $17 = $16;
     HEAP32[$17>>2] = $13;
     $18 = (($16) + 4)|0;
     $19 = $18;
     HEAP32[$19>>2] = $15;
     break L1;
     break;
    }
    case 11:  {
     $arglist_current5 = HEAP32[$ap>>2]|0;
     $20 = $arglist_current5;
     $21 = ((0) + 4|0);
     $expanded39 = $21;
     $expanded38 = (($expanded39) - 1)|0;
     $22 = (($20) + ($expanded38))|0;
     $23 = ((0) + 4|0);
     $expanded43 = $23;
     $expanded42 = (($expanded43) - 1)|0;
     $expanded41 = $expanded42 ^ -1;
     $24 = $22 & $expanded41;
     $25 = $24;
     $26 = HEAP32[$25>>2]|0;
     $arglist_next6 = ((($25)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next6;
     $27 = $arg;
     $28 = $27;
     HEAP32[$28>>2] = $26;
     $29 = (($27) + 4)|0;
     $30 = $29;
     HEAP32[$30>>2] = 0;
     break L1;
     break;
    }
    case 12:  {
     $arglist_current8 = HEAP32[$ap>>2]|0;
     $31 = $arglist_current8;
     $32 = ((0) + 8|0);
     $expanded46 = $32;
     $expanded45 = (($expanded46) - 1)|0;
     $33 = (($31) + ($expanded45))|0;
     $34 = ((0) + 8|0);
     $expanded50 = $34;
     $expanded49 = (($expanded50) - 1)|0;
     $expanded48 = $expanded49 ^ -1;
     $35 = $33 & $expanded48;
     $36 = $35;
     $37 = $36;
     $38 = $37;
     $39 = HEAP32[$38>>2]|0;
     $40 = (($37) + 4)|0;
     $41 = $40;
     $42 = HEAP32[$41>>2]|0;
     $arglist_next9 = ((($36)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next9;
     $43 = $arg;
     $44 = $43;
     HEAP32[$44>>2] = $39;
     $45 = (($43) + 4)|0;
     $46 = $45;
     HEAP32[$46>>2] = $42;
     break L1;
     break;
    }
    case 13:  {
     $arglist_current11 = HEAP32[$ap>>2]|0;
     $47 = $arglist_current11;
     $48 = ((0) + 4|0);
     $expanded53 = $48;
     $expanded52 = (($expanded53) - 1)|0;
     $49 = (($47) + ($expanded52))|0;
     $50 = ((0) + 4|0);
     $expanded57 = $50;
     $expanded56 = (($expanded57) - 1)|0;
     $expanded55 = $expanded56 ^ -1;
     $51 = $49 & $expanded55;
     $52 = $51;
     $53 = HEAP32[$52>>2]|0;
     $arglist_next12 = ((($52)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next12;
     $conv16 = $53&65535;
     $54 = $conv16 << 16 >> 16;
     $55 = ($54|0)<(0);
     $56 = $55 << 31 >> 31;
     $57 = $arg;
     $58 = $57;
     HEAP32[$58>>2] = $54;
     $59 = (($57) + 4)|0;
     $60 = $59;
     HEAP32[$60>>2] = $56;
     break L1;
     break;
    }
    case 14:  {
     $arglist_current14 = HEAP32[$ap>>2]|0;
     $61 = $arglist_current14;
     $62 = ((0) + 4|0);
     $expanded60 = $62;
     $expanded59 = (($expanded60) - 1)|0;
     $63 = (($61) + ($expanded59))|0;
     $64 = ((0) + 4|0);
     $expanded64 = $64;
     $expanded63 = (($expanded64) - 1)|0;
     $expanded62 = $expanded63 ^ -1;
     $65 = $63 & $expanded62;
     $66 = $65;
     $67 = HEAP32[$66>>2]|0;
     $arglist_next15 = ((($66)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next15;
     $conv22$mask = $67 & 65535;
     $68 = $arg;
     $69 = $68;
     HEAP32[$69>>2] = $conv22$mask;
     $70 = (($68) + 4)|0;
     $71 = $70;
     HEAP32[$71>>2] = 0;
     break L1;
     break;
    }
    case 15:  {
     $arglist_current17 = HEAP32[$ap>>2]|0;
     $72 = $arglist_current17;
     $73 = ((0) + 4|0);
     $expanded67 = $73;
     $expanded66 = (($expanded67) - 1)|0;
     $74 = (($72) + ($expanded66))|0;
     $75 = ((0) + 4|0);
     $expanded71 = $75;
     $expanded70 = (($expanded71) - 1)|0;
     $expanded69 = $expanded70 ^ -1;
     $76 = $74 & $expanded69;
     $77 = $76;
     $78 = HEAP32[$77>>2]|0;
     $arglist_next18 = ((($77)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next18;
     $conv28 = $78&255;
     $79 = $conv28 << 24 >> 24;
     $80 = ($79|0)<(0);
     $81 = $80 << 31 >> 31;
     $82 = $arg;
     $83 = $82;
     HEAP32[$83>>2] = $79;
     $84 = (($82) + 4)|0;
     $85 = $84;
     HEAP32[$85>>2] = $81;
     break L1;
     break;
    }
    case 16:  {
     $arglist_current20 = HEAP32[$ap>>2]|0;
     $86 = $arglist_current20;
     $87 = ((0) + 4|0);
     $expanded74 = $87;
     $expanded73 = (($expanded74) - 1)|0;
     $88 = (($86) + ($expanded73))|0;
     $89 = ((0) + 4|0);
     $expanded78 = $89;
     $expanded77 = (($expanded78) - 1)|0;
     $expanded76 = $expanded77 ^ -1;
     $90 = $88 & $expanded76;
     $91 = $90;
     $92 = HEAP32[$91>>2]|0;
     $arglist_next21 = ((($91)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next21;
     $conv34$mask = $92 & 255;
     $93 = $arg;
     $94 = $93;
     HEAP32[$94>>2] = $conv34$mask;
     $95 = (($93) + 4)|0;
     $96 = $95;
     HEAP32[$96>>2] = 0;
     break L1;
     break;
    }
    case 17:  {
     $arglist_current23 = HEAP32[$ap>>2]|0;
     $97 = $arglist_current23;
     $98 = ((0) + 8|0);
     $expanded81 = $98;
     $expanded80 = (($expanded81) - 1)|0;
     $99 = (($97) + ($expanded80))|0;
     $100 = ((0) + 8|0);
     $expanded85 = $100;
     $expanded84 = (($expanded85) - 1)|0;
     $expanded83 = $expanded84 ^ -1;
     $101 = $99 & $expanded83;
     $102 = $101;
     $103 = +HEAPF64[$102>>3];
     $arglist_next24 = ((($102)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next24;
     HEAPF64[$arg>>3] = $103;
     break L1;
     break;
    }
    case 18:  {
     FUNCTION_TABLE_vii[$pop_arg_long_double & 63]($arg,$ap);
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 return;
}
function _fmt_x($0,$1,$s,$lower) {
 $0 = $0|0;
 $1 = $1|0;
 $s = $s|0;
 $lower = $lower|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $conv1 = 0, $conv4 = 0, $idxprom = 0, $incdec$ptr = 0, $or = 0, $s$addr$0$lcssa = 0, $s$addr$06 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0);
 $3 = ($1|0)==(0);
 $4 = $2 & $3;
 if ($4) {
  $s$addr$0$lcssa = $s;
 } else {
  $5 = $0;$7 = $1;$s$addr$06 = $s;
  while(1) {
   $idxprom = $5 & 15;
   $arrayidx = (1552 + ($idxprom)|0);
   $6 = HEAP8[$arrayidx>>0]|0;
   $conv4 = $6&255;
   $or = $conv4 | $lower;
   $conv1 = $or&255;
   $incdec$ptr = ((($s$addr$06)) + -1|0);
   HEAP8[$incdec$ptr>>0] = $conv1;
   $8 = (_bitshift64Lshr(($5|0),($7|0),4)|0);
   $9 = (getTempRet0() | 0);
   $10 = ($8|0)==(0);
   $11 = ($9|0)==(0);
   $12 = $10 & $11;
   if ($12) {
    $s$addr$0$lcssa = $incdec$ptr;
    break;
   } else {
    $5 = $8;$7 = $9;$s$addr$06 = $incdec$ptr;
   }
  }
 }
 return ($s$addr$0$lcssa|0);
}
function _fmt_o($0,$1,$s) {
 $0 = $0|0;
 $1 = $1|0;
 $s = $s|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $conv = 0, $incdec$ptr = 0, $s$addr$0$lcssa = 0, $s$addr$06 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0);
 $3 = ($1|0)==(0);
 $4 = $2 & $3;
 if ($4) {
  $s$addr$0$lcssa = $s;
 } else {
  $6 = $0;$8 = $1;$s$addr$06 = $s;
  while(1) {
   $5 = $6&255;
   $7 = $5 & 7;
   $conv = $7 | 48;
   $incdec$ptr = ((($s$addr$06)) + -1|0);
   HEAP8[$incdec$ptr>>0] = $conv;
   $9 = (_bitshift64Lshr(($6|0),($8|0),3)|0);
   $10 = (getTempRet0() | 0);
   $11 = ($9|0)==(0);
   $12 = ($10|0)==(0);
   $13 = $11 & $12;
   if ($13) {
    $s$addr$0$lcssa = $incdec$ptr;
    break;
   } else {
    $6 = $9;$8 = $10;$s$addr$06 = $incdec$ptr;
   }
  }
 }
 return ($s$addr$0$lcssa|0);
}
function _fmt_u($0,$1,$s) {
 $0 = $0|0;
 $1 = $1|0;
 $s = $s|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $add5 = 0, $conv = 0, $conv6 = 0, $div9 = 0, $incdec$ptr = 0, $incdec$ptr7 = 0, $s$addr$0$lcssa = 0, $s$addr$013 = 0, $s$addr$1$lcssa = 0, $s$addr$19 = 0, $tobool8 = 0, $x$addr$0$lcssa$off0 = 0, $y$010 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1>>>0)>(0);
 $3 = ($0>>>0)>(4294967295);
 $4 = ($1|0)==(0);
 $5 = $4 & $3;
 $6 = $2 | $5;
 if ($6) {
  $7 = $0;$8 = $1;$s$addr$013 = $s;
  while(1) {
   $9 = (___udivdi3(($7|0),($8|0),10,0)|0);
   $10 = (getTempRet0() | 0);
   $11 = (___muldi3(($9|0),($10|0),10,0)|0);
   $12 = (getTempRet0() | 0);
   $13 = (_i64Subtract(($7|0),($8|0),($11|0),($12|0))|0);
   $14 = (getTempRet0() | 0);
   $15 = $13&255;
   $conv = $15 | 48;
   $incdec$ptr = ((($s$addr$013)) + -1|0);
   HEAP8[$incdec$ptr>>0] = $conv;
   $16 = ($8>>>0)>(9);
   $17 = ($7>>>0)>(4294967295);
   $18 = ($8|0)==(9);
   $19 = $18 & $17;
   $20 = $16 | $19;
   if ($20) {
    $7 = $9;$8 = $10;$s$addr$013 = $incdec$ptr;
   } else {
    break;
   }
  }
  $s$addr$0$lcssa = $incdec$ptr;$x$addr$0$lcssa$off0 = $9;
 } else {
  $s$addr$0$lcssa = $s;$x$addr$0$lcssa$off0 = $0;
 }
 $tobool8 = ($x$addr$0$lcssa$off0|0)==(0);
 if ($tobool8) {
  $s$addr$1$lcssa = $s$addr$0$lcssa;
 } else {
  $s$addr$19 = $s$addr$0$lcssa;$y$010 = $x$addr$0$lcssa$off0;
  while(1) {
   $div9 = (($y$010>>>0) / 10)&-1;
   $21 = ($div9*10)|0;
   $22 = (($y$010) - ($21))|0;
   $add5 = $22 | 48;
   $conv6 = $add5&255;
   $incdec$ptr7 = ((($s$addr$19)) + -1|0);
   HEAP8[$incdec$ptr7>>0] = $conv6;
   $23 = ($y$010>>>0)<(10);
   if ($23) {
    $s$addr$1$lcssa = $incdec$ptr7;
    break;
   } else {
    $s$addr$19 = $incdec$ptr7;$y$010 = $div9;
   }
  }
 }
 return ($s$addr$1$lcssa|0);
}
function _pad_524($f,$c,$w,$l,$fl) {
 $f = $f|0;
 $c = $c|0;
 $w = $w|0;
 $l = $l|0;
 $fl = $fl|0;
 var $0 = 0, $1 = 0, $2 = 0, $and = 0, $cmp = 0, $cmp3 = 0, $cmp38 = 0, $cond = 0, $conv = 0, $l$addr$0$lcssa = 0, $l$addr$09 = 0, $or$cond = 0, $pad = 0, $sub = 0, $sub6 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $pad = sp;
 $and = $fl & 73728;
 $tobool = ($and|0)==(0);
 $cmp = ($w|0)>($l|0);
 $or$cond = $cmp & $tobool;
 if ($or$cond) {
  $sub = (($w) - ($l))|0;
  $conv = $c << 24 >> 24;
  $0 = ($sub>>>0)<(256);
  $cond = $0 ? $sub : 256;
  (_memset(($pad|0),($conv|0),($cond|0))|0);
  $cmp38 = ($sub>>>0)>(255);
  if ($cmp38) {
   $1 = (($w) - ($l))|0;
   $l$addr$09 = $sub;
   while(1) {
    _out($f,$pad,256);
    $sub6 = (($l$addr$09) + -256)|0;
    $cmp3 = ($sub6>>>0)>(255);
    if ($cmp3) {
     $l$addr$09 = $sub6;
    } else {
     break;
    }
   }
   $2 = $1 & 255;
   $l$addr$0$lcssa = $2;
  } else {
   $l$addr$0$lcssa = $sub;
  }
  _out($f,$pad,$l$addr$0$lcssa);
 }
 STACKTOP = sp;return;
}
function _wctomb($s,$wc) {
 $s = $s|0;
 $wc = $wc|0;
 var $call = 0, $retval$0 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $tobool = ($s|0)==(0|0);
 if ($tobool) {
  $retval$0 = 0;
 } else {
  $call = (_wcrtomb($s,$wc,0)|0);
  $retval$0 = $call;
 }
 return ($retval$0|0);
}
function _wcrtomb($s,$wc,$st) {
 $s = $s|0;
 $wc = $wc|0;
 $st = $st|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $and = 0, $and32 = 0, $and36 = 0, $and49 = 0, $and54 = 0, $and58 = 0, $call = 0, $call10 = 0, $call66 = 0, $cmp = 0;
 var $cmp14 = 0, $cmp21 = 0, $cmp24 = 0, $cmp41 = 0, $cmp7 = 0, $conv = 0, $conv12 = 0, $conv17 = 0, $conv19 = 0, $conv29 = 0, $conv34 = 0, $conv38 = 0, $conv46 = 0, $conv51 = 0, $conv56 = 0, $conv60 = 0, $incdec$ptr = 0, $incdec$ptr30 = 0, $incdec$ptr35 = 0, $incdec$ptr47 = 0;
 var $incdec$ptr52 = 0, $incdec$ptr57 = 0, $locale = 0, $or = 0, $or$cond = 0, $or18 = 0, $or28 = 0, $or33 = 0, $or37 = 0, $or45 = 0, $or50 = 0, $or55 = 0, $or59 = 0, $retval$0 = 0, $sub40 = 0, $tobool = 0, $tobool2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $tobool = ($s|0)==(0|0);
 do {
  if ($tobool) {
   $retval$0 = 1;
  } else {
   $cmp = ($wc>>>0)<(128);
   if ($cmp) {
    $conv = $wc&255;
    HEAP8[$s>>0] = $conv;
    $retval$0 = 1;
    break;
   }
   $call = (___pthread_self_180()|0);
   $locale = ((($call)) + 188|0);
   $0 = HEAP32[$locale>>2]|0;
   $1 = HEAP32[$0>>2]|0;
   $tobool2 = ($1|0)==(0|0);
   if ($tobool2) {
    $2 = $wc & -128;
    $cmp7 = ($2|0)==(57216);
    if ($cmp7) {
     $conv12 = $wc&255;
     HEAP8[$s>>0] = $conv12;
     $retval$0 = 1;
     break;
    } else {
     $call10 = (___errno_location()|0);
     HEAP32[$call10>>2] = 84;
     $retval$0 = -1;
     break;
    }
   }
   $cmp14 = ($wc>>>0)<(2048);
   if ($cmp14) {
    $3 = $wc >>> 6;
    $or = $3 | 192;
    $conv17 = $or&255;
    $incdec$ptr = ((($s)) + 1|0);
    HEAP8[$s>>0] = $conv17;
    $and = $wc & 63;
    $or18 = $and | 128;
    $conv19 = $or18&255;
    HEAP8[$incdec$ptr>>0] = $conv19;
    $retval$0 = 2;
    break;
   }
   $cmp21 = ($wc>>>0)<(55296);
   $4 = $wc & -8192;
   $cmp24 = ($4|0)==(57344);
   $or$cond = $cmp21 | $cmp24;
   if ($or$cond) {
    $5 = $wc >>> 12;
    $or28 = $5 | 224;
    $conv29 = $or28&255;
    $incdec$ptr30 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $conv29;
    $6 = $wc >>> 6;
    $and32 = $6 & 63;
    $or33 = $and32 | 128;
    $conv34 = $or33&255;
    $incdec$ptr35 = ((($s)) + 2|0);
    HEAP8[$incdec$ptr30>>0] = $conv34;
    $and36 = $wc & 63;
    $or37 = $and36 | 128;
    $conv38 = $or37&255;
    HEAP8[$incdec$ptr35>>0] = $conv38;
    $retval$0 = 3;
    break;
   }
   $sub40 = (($wc) + -65536)|0;
   $cmp41 = ($sub40>>>0)<(1048576);
   if ($cmp41) {
    $7 = $wc >>> 18;
    $or45 = $7 | 240;
    $conv46 = $or45&255;
    $incdec$ptr47 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $conv46;
    $8 = $wc >>> 12;
    $and49 = $8 & 63;
    $or50 = $and49 | 128;
    $conv51 = $or50&255;
    $incdec$ptr52 = ((($s)) + 2|0);
    HEAP8[$incdec$ptr47>>0] = $conv51;
    $9 = $wc >>> 6;
    $and54 = $9 & 63;
    $or55 = $and54 | 128;
    $conv56 = $or55&255;
    $incdec$ptr57 = ((($s)) + 3|0);
    HEAP8[$incdec$ptr52>>0] = $conv56;
    $and58 = $wc & 63;
    $or59 = $and58 | 128;
    $conv60 = $or59&255;
    HEAP8[$incdec$ptr57>>0] = $conv60;
    $retval$0 = 4;
    break;
   } else {
    $call66 = (___errno_location()|0);
    HEAP32[$call66>>2] = 84;
    $retval$0 = -1;
    break;
   }
  }
 } while(0);
 return ($retval$0|0);
}
function ___pthread_self_180() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_pthread_self()|0);
 return ($call|0);
}
function ___fwritex($s,$l,$f) {
 $s = $s|0;
 $l = $l|0;
 $f = $f|0;
 var $$pre = 0, $$pre35 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0, $add$ptr27 = 0, $arrayidx = 0, $call = 0, $call16 = 0, $call4 = 0;
 var $cmp = 0, $cmp11 = 0, $cmp17 = 0, $cmp6 = 0, $i$033 = 0, $i$1 = 0, $l$addr$0 = 0, $l$addr$1 = 0, $lbf = 0, $or$cond = 0, $retval$1 = 0, $s$addr$1 = 0, $sub = 0, $sub$ptr$sub = 0, $tobool = 0, $tobool1 = 0, $tobool9 = 0, $tobool932 = 0, $wend = 0, $wpos = 0;
 var $write = 0, $write15 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $wend = ((($f)) + 16|0);
 $0 = HEAP32[$wend>>2]|0;
 $tobool = ($0|0)==(0|0);
 if ($tobool) {
  $call = (___towrite($f)|0);
  $tobool1 = ($call|0)==(0);
  if ($tobool1) {
   $$pre = HEAP32[$wend>>2]|0;
   $3 = $$pre;
   label = 5;
  } else {
   $retval$1 = 0;
  }
 } else {
  $1 = $0;
  $3 = $1;
  label = 5;
 }
 L5: do {
  if ((label|0) == 5) {
   $wpos = ((($f)) + 20|0);
   $2 = HEAP32[$wpos>>2]|0;
   $sub$ptr$sub = (($3) - ($2))|0;
   $cmp = ($sub$ptr$sub>>>0)<($l>>>0);
   $4 = $2;
   if ($cmp) {
    $write = ((($f)) + 36|0);
    $5 = HEAP32[$write>>2]|0;
    $call4 = (FUNCTION_TABLE_iiii[$5 & 63]($f,$s,$l)|0);
    $retval$1 = $call4;
    break;
   }
   $lbf = ((($f)) + 75|0);
   $6 = HEAP8[$lbf>>0]|0;
   $cmp6 = ($6<<24>>24)<(0);
   $tobool932 = ($l|0)==(0);
   $or$cond = $cmp6 | $tobool932;
   L10: do {
    if ($or$cond) {
     $9 = $4;$i$1 = 0;$l$addr$1 = $l;$s$addr$1 = $s;
    } else {
     $i$033 = $l;
     while(1) {
      $sub = (($i$033) + -1)|0;
      $arrayidx = (($s) + ($sub)|0);
      $7 = HEAP8[$arrayidx>>0]|0;
      $cmp11 = ($7<<24>>24)==(10);
      if ($cmp11) {
       break;
      }
      $tobool9 = ($sub|0)==(0);
      if ($tobool9) {
       $9 = $4;$i$1 = 0;$l$addr$1 = $l;$s$addr$1 = $s;
       break L10;
      } else {
       $i$033 = $sub;
      }
     }
     $write15 = ((($f)) + 36|0);
     $8 = HEAP32[$write15>>2]|0;
     $call16 = (FUNCTION_TABLE_iiii[$8 & 63]($f,$s,$i$033)|0);
     $cmp17 = ($call16>>>0)<($i$033>>>0);
     if ($cmp17) {
      $retval$1 = $call16;
      break L5;
     }
     $add$ptr = (($s) + ($i$033)|0);
     $l$addr$0 = (($l) - ($i$033))|0;
     $$pre35 = HEAP32[$wpos>>2]|0;
     $9 = $$pre35;$i$1 = $i$033;$l$addr$1 = $l$addr$0;$s$addr$1 = $add$ptr;
    }
   } while(0);
   (_memcpy(($9|0),($s$addr$1|0),($l$addr$1|0))|0);
   $10 = HEAP32[$wpos>>2]|0;
   $add$ptr27 = (($10) + ($l$addr$1)|0);
   HEAP32[$wpos>>2] = $add$ptr27;
   $add = (($i$1) + ($l$addr$1))|0;
   $retval$1 = $add;
  }
 } while(0);
 return ($retval$1|0);
}
function ___towrite($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $add$ptr = 0, $and = 0, $buf = 0, $buf_size = 0, $conv = 0, $conv3 = 0, $mode = 0, $or = 0, $or5 = 0, $rend = 0, $retval$0 = 0, $rpos = 0, $sub = 0, $tobool = 0, $wbase = 0;
 var $wend = 0, $wpos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $mode = ((($f)) + 74|0);
 $0 = HEAP8[$mode>>0]|0;
 $conv = $0 << 24 >> 24;
 $sub = (($conv) + 255)|0;
 $or = $sub | $conv;
 $conv3 = $or&255;
 HEAP8[$mode>>0] = $conv3;
 $1 = HEAP32[$f>>2]|0;
 $and = $1 & 8;
 $tobool = ($and|0)==(0);
 if ($tobool) {
  $rend = ((($f)) + 8|0);
  HEAP32[$rend>>2] = 0;
  $rpos = ((($f)) + 4|0);
  HEAP32[$rpos>>2] = 0;
  $buf = ((($f)) + 44|0);
  $2 = HEAP32[$buf>>2]|0;
  $wbase = ((($f)) + 28|0);
  HEAP32[$wbase>>2] = $2;
  $wpos = ((($f)) + 20|0);
  HEAP32[$wpos>>2] = $2;
  $3 = $2;
  $buf_size = ((($f)) + 48|0);
  $4 = HEAP32[$buf_size>>2]|0;
  $add$ptr = (($3) + ($4)|0);
  $wend = ((($f)) + 16|0);
  HEAP32[$wend>>2] = $add$ptr;
  $retval$0 = 0;
 } else {
  $or5 = $1 | 32;
  HEAP32[$f>>2] = $or5;
  $retval$0 = -1;
 }
 return ($retval$0|0);
}
function ___DOUBLE_BITS_527($__f) {
 $__f = +$__f;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $__f;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 setTempRet0(($1) | 0);
 return ($0|0);
}
function _sn_write($f,$s,$l) {
 $f = $f|0;
 $s = $s|0;
 $l = $l|0;
 var $$cast = 0, $0 = 0, $1 = 0, $2 = 0, $add$ptr = 0, $cmp = 0, $spec$select = 0, $sub$ptr$sub = 0, $wend = 0, $wpos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $wend = ((($f)) + 16|0);
 $0 = HEAP32[$wend>>2]|0;
 $wpos = ((($f)) + 20|0);
 $1 = HEAP32[$wpos>>2]|0;
 $sub$ptr$sub = (($0) - ($1))|0;
 $cmp = ($sub$ptr$sub>>>0)>($l>>>0);
 $spec$select = $cmp ? $l : $sub$ptr$sub;
 $$cast = $1;
 (_memcpy(($$cast|0),($s|0),($spec$select|0))|0);
 $2 = HEAP32[$wpos>>2]|0;
 $add$ptr = (($2) + ($spec$select)|0);
 HEAP32[$wpos>>2] = $add$ptr;
 return ($l|0);
}
function _isalpha($c) {
 $c = $c|0;
 var $cmp = 0, $conv = 0, $or = 0, $sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $or = $c | 32;
 $sub = (($or) + -97)|0;
 $cmp = ($sub>>>0)<(26);
 $conv = $cmp&1;
 return ($conv|0);
}
function ___floatscan($f,$prec,$pok) {
 $f = $f|0;
 $prec = $prec|0;
 $pok = $pok|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx95 = 0, $bits$0 = 0, $c$0 = 0, $c$1$lcssa = 0;
 var $c$197 = 0, $c$2 = 0, $c$395 = 0, $c$4 = 0, $c$5 = 0, $c$6 = 0, $call = 0, $call113 = 0, $call133 = 0, $call157 = 0, $call189 = 0, $call215 = 0, $call229 = 0, $call23 = 0, $call236 = 0.0, $call246 = 0.0, $call43 = 0, $call6 = 0, $cmp = 0, $cmp101 = 0;
 var $cmp106 = 0, $cmp126 = 0, $cmp136 = 0, $cmp150 = 0, $cmp16 = 0, $cmp161 = 0, $cmp165 = 0, $cmp169 = 0, $cmp172 = 0, $cmp176 = 0, $cmp217 = 0, $cmp222 = 0, $cmp233 = 0, $cmp26 = 0, $cmp29 = 0, $cmp31 = 0, $cmp36 = 0, $cmp53 = 0, $cmp57 = 0, $cmp70 = 0;
 var $cmp7089 = 0, $cmp9 = 0, $cmp91 = 0, $cmp97 = 0, $cond = 0, $cond135 = 0, $cond159 = 0, $cond231 = 0, $conv = 0, $conv111 = 0, $conv12 = 0, $conv131 = 0, $conv155 = 0, $conv21 = 0, $conv227 = 0, $conv28 = 0, $conv41 = 0, $conv84 = 0.0, $conv86 = 0.0, $conv96 = 0;
 var $dec = 0, $dec19293 = 0, $dec19293$in = 0, $emin$0 = 0, $i$096 = 0, $i$190 = 0, $i$294 = 0, $i$3 = 0, $i$4 = 0, $inc = 0, $inc118 = 0, $inc204 = 0, $incdec$ptr = 0, $incdec$ptr110 = 0, $incdec$ptr130 = 0, $incdec$ptr143 = 0, $incdec$ptr154 = 0, $incdec$ptr184 = 0, $incdec$ptr199 = 0, $incdec$ptr20 = 0;
 var $incdec$ptr212 = 0, $incdec$ptr226 = 0, $incdec$ptr242 = 0, $incdec$ptr40 = 0, $incdec$ptr64 = 0, $incdec$ptr77 = 0, $mul = 0, $mul85 = 0.0, $or = 0, $or$cond = 0, $or$cond2 = 0, $or$cond3 = 0, $or$cond98 = 0, $or232 = 0, $or94 = 0, $retval$0 = 0.0, $rpos = 0, $shend = 0, $sign$0 = 0, $sub13 = 0;
 var $sub160 = 0, $sub164 = 0, $sub168 = 0, $tobool = 0, $tobool140 = 0, $tobool181 = 0, $tobool193 = 0, $tobool19392 = 0, $tobool209 = 0, $tobool239 = 0, $tobool55 = 0, $tobool61 = 0, $tobool67 = 0, $tobool88 = 0, $trunc = 0, $trunc$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 switch ($prec|0) {
 case 0:  {
  $bits$0 = 24;$emin$0 = -149;
  label = 4;
  break;
 }
 case 1:  {
  $bits$0 = 53;$emin$0 = -1074;
  label = 4;
  break;
 }
 case 2:  {
  $bits$0 = 53;$emin$0 = -1074;
  label = 4;
  break;
 }
 default: {
  $retval$0 = 0.0;
 }
 }
 L4: do {
  if ((label|0) == 4) {
   $rpos = ((($f)) + 4|0);
   $shend = ((($f)) + 104|0);
   while(1) {
    $0 = HEAP32[$rpos>>2]|0;
    $1 = HEAP32[$shend>>2]|0;
    $cmp = ($0>>>0)<($1>>>0);
    if ($cmp) {
     $incdec$ptr = ((($0)) + 1|0);
     HEAP32[$rpos>>2] = $incdec$ptr;
     $2 = HEAP8[$0>>0]|0;
     $conv = $2&255;
     $cond = $conv;
    } else {
     $call = (___shgetc($f)|0);
     $cond = $call;
    }
    $call6 = (_isspace($cond)|0);
    $tobool = ($call6|0)==(0);
    if ($tobool) {
     break;
    }
   }
   L13: do {
    switch ($cond|0) {
    case 43: case 45:  {
     $cmp9 = ($cond|0)==(45);
     $conv12 = $cmp9&1;
     $mul = $conv12 << 1;
     $sub13 = (1 - ($mul))|0;
     $3 = HEAP32[$rpos>>2]|0;
     $4 = HEAP32[$shend>>2]|0;
     $cmp16 = ($3>>>0)<($4>>>0);
     if ($cmp16) {
      $incdec$ptr20 = ((($3)) + 1|0);
      HEAP32[$rpos>>2] = $incdec$ptr20;
      $5 = HEAP8[$3>>0]|0;
      $conv21 = $5&255;
      $c$0 = $conv21;$sign$0 = $sub13;
      break L13;
     } else {
      $call23 = (___shgetc($f)|0);
      $c$0 = $call23;$sign$0 = $sub13;
      break L13;
     }
     break;
    }
    default: {
     $c$0 = $cond;$sign$0 = 1;
    }
    }
   } while(0);
   $c$197 = $c$0;$i$096 = 0;
   while(1) {
    $or = $c$197 | 32;
    $arrayidx = (8855 + ($i$096)|0);
    $6 = HEAP8[$arrayidx>>0]|0;
    $conv28 = $6 << 24 >> 24;
    $cmp29 = ($or|0)==($conv28|0);
    if (!($cmp29)) {
     $c$1$lcssa = $c$197;$trunc = $i$096;
     break;
    }
    $cmp31 = ($i$096>>>0)<(7);
    do {
     if ($cmp31) {
      $7 = HEAP32[$rpos>>2]|0;
      $8 = HEAP32[$shend>>2]|0;
      $cmp36 = ($7>>>0)<($8>>>0);
      if ($cmp36) {
       $incdec$ptr40 = ((($7)) + 1|0);
       HEAP32[$rpos>>2] = $incdec$ptr40;
       $9 = HEAP8[$7>>0]|0;
       $conv41 = $9&255;
       $c$2 = $conv41;
       break;
      } else {
       $call43 = (___shgetc($f)|0);
       $c$2 = $call43;
       break;
      }
     } else {
      $c$2 = $c$197;
     }
    } while(0);
    $inc = (($i$096) + 1)|0;
    $cmp26 = ($inc>>>0)<(8);
    if ($cmp26) {
     $c$197 = $c$2;$i$096 = $inc;
    } else {
     $c$1$lcssa = $c$2;$trunc = 8;
     break;
    }
   }
   $trunc$clear = $trunc & 2147483647;
   L29: do {
    switch ($trunc$clear|0) {
    case 8:  {
     break;
    }
    case 3:  {
     label = 23;
     break;
    }
    default: {
     $cmp53 = ($trunc>>>0)>(3);
     $tobool55 = ($pok|0)!=(0);
     $or$cond2 = $tobool55 & $cmp53;
     if ($or$cond2) {
      $cmp57 = ($trunc|0)==(8);
      if ($cmp57) {
       break L29;
      } else {
       label = 23;
       break L29;
      }
     }
     $tobool88 = ($trunc|0)==(0);
     L34: do {
      if ($tobool88) {
       $c$395 = $c$1$lcssa;$i$294 = 0;
       while(1) {
        $or94 = $c$395 | 32;
        $arrayidx95 = (8864 + ($i$294)|0);
        $13 = HEAP8[$arrayidx95>>0]|0;
        $conv96 = $13 << 24 >> 24;
        $cmp97 = ($or94|0)==($conv96|0);
        if (!($cmp97)) {
         $c$5 = $c$395;$i$3 = $i$294;
         break L34;
        }
        $cmp101 = ($i$294>>>0)<(2);
        do {
         if ($cmp101) {
          $14 = HEAP32[$rpos>>2]|0;
          $15 = HEAP32[$shend>>2]|0;
          $cmp106 = ($14>>>0)<($15>>>0);
          if ($cmp106) {
           $incdec$ptr110 = ((($14)) + 1|0);
           HEAP32[$rpos>>2] = $incdec$ptr110;
           $16 = HEAP8[$14>>0]|0;
           $conv111 = $16&255;
           $c$4 = $conv111;
           break;
          } else {
           $call113 = (___shgetc($f)|0);
           $c$4 = $call113;
           break;
          }
         } else {
          $c$4 = $c$395;
         }
        } while(0);
        $inc118 = (($i$294) + 1)|0;
        $cmp91 = ($inc118>>>0)<(3);
        if ($cmp91) {
         $c$395 = $c$4;$i$294 = $inc118;
        } else {
         $c$5 = $c$4;$i$3 = 3;
         break;
        }
       }
      } else {
       $c$5 = $c$1$lcssa;$i$3 = $trunc;
      }
     } while(0);
     switch ($i$3|0) {
     case 3:  {
      $17 = HEAP32[$rpos>>2]|0;
      $18 = HEAP32[$shend>>2]|0;
      $cmp126 = ($17>>>0)<($18>>>0);
      if ($cmp126) {
       $incdec$ptr130 = ((($17)) + 1|0);
       HEAP32[$rpos>>2] = $incdec$ptr130;
       $19 = HEAP8[$17>>0]|0;
       $conv131 = $19&255;
       $cond135 = $conv131;
      } else {
       $call133 = (___shgetc($f)|0);
       $cond135 = $call133;
      }
      $cmp136 = ($cond135|0)==(40);
      if (!($cmp136)) {
       $20 = HEAP32[$shend>>2]|0;
       $tobool140 = ($20|0)==(0|0);
       if ($tobool140) {
        $retval$0 = nan;
        break L4;
       }
       $21 = HEAP32[$rpos>>2]|0;
       $incdec$ptr143 = ((($21)) + -1|0);
       HEAP32[$rpos>>2] = $incdec$ptr143;
       $retval$0 = nan;
       break L4;
      }
      $i$4 = 1;
      while(1) {
       $22 = HEAP32[$rpos>>2]|0;
       $23 = HEAP32[$shend>>2]|0;
       $cmp150 = ($22>>>0)<($23>>>0);
       if ($cmp150) {
        $incdec$ptr154 = ((($22)) + 1|0);
        HEAP32[$rpos>>2] = $incdec$ptr154;
        $24 = HEAP8[$22>>0]|0;
        $conv155 = $24&255;
        $cond159 = $conv155;
       } else {
        $call157 = (___shgetc($f)|0);
        $cond159 = $call157;
       }
       $sub160 = (($cond159) + -48)|0;
       $cmp161 = ($sub160>>>0)<(10);
       $sub164 = (($cond159) + -65)|0;
       $cmp165 = ($sub164>>>0)<(26);
       $or$cond = $cmp161 | $cmp165;
       if (!($or$cond)) {
        $sub168 = (($cond159) + -97)|0;
        $cmp169 = ($sub168>>>0)<(26);
        $cmp172 = ($cond159|0)==(95);
        $or$cond3 = $cmp172 | $cmp169;
        if (!($or$cond3)) {
         break;
        }
       }
       $inc204 = (($i$4) + 1)|0;
       $i$4 = $inc204;
      }
      $cmp176 = ($cond159|0)==(41);
      if ($cmp176) {
       $retval$0 = nan;
       break L4;
      }
      $25 = HEAP32[$shend>>2]|0;
      $tobool181 = ($25|0)==(0|0);
      if (!($tobool181)) {
       $26 = HEAP32[$rpos>>2]|0;
       $incdec$ptr184 = ((($26)) + -1|0);
       HEAP32[$rpos>>2] = $incdec$ptr184;
      }
      if (!($tobool55)) {
       $call189 = (___errno_location()|0);
       HEAP32[$call189>>2] = 22;
       ___shlim($f,0,0);
       $retval$0 = 0.0;
       break L4;
      }
      $tobool19392 = ($i$4|0)==(0);
      if ($tobool19392) {
       $retval$0 = nan;
       break L4;
      }
      $dec19293$in = $i$4;
      while(1) {
       $dec19293 = (($dec19293$in) + -1)|0;
       if (!($tobool181)) {
        $27 = HEAP32[$rpos>>2]|0;
        $incdec$ptr199 = ((($27)) + -1|0);
        HEAP32[$rpos>>2] = $incdec$ptr199;
       }
       $tobool193 = ($dec19293|0)==(0);
       if ($tobool193) {
        $retval$0 = nan;
        break L4;
       } else {
        $dec19293$in = $dec19293;
       }
      }
      break;
     }
     case 0:  {
      $cmp217 = ($c$5|0)==(48);
      if ($cmp217) {
       $30 = HEAP32[$rpos>>2]|0;
       $31 = HEAP32[$shend>>2]|0;
       $cmp222 = ($30>>>0)<($31>>>0);
       if ($cmp222) {
        $incdec$ptr226 = ((($30)) + 1|0);
        HEAP32[$rpos>>2] = $incdec$ptr226;
        $32 = HEAP8[$30>>0]|0;
        $conv227 = $32&255;
        $cond231 = $conv227;
       } else {
        $call229 = (___shgetc($f)|0);
        $cond231 = $call229;
       }
       $or232 = $cond231 | 32;
       $cmp233 = ($or232|0)==(120);
       if ($cmp233) {
        $call236 = (+_hexfloat($f,$bits$0,$emin$0,$sign$0,$pok));
        $retval$0 = $call236;
        break L4;
       }
       $33 = HEAP32[$shend>>2]|0;
       $tobool239 = ($33|0)==(0|0);
       if ($tobool239) {
        $c$6 = 48;
       } else {
        $34 = HEAP32[$rpos>>2]|0;
        $incdec$ptr242 = ((($34)) + -1|0);
        HEAP32[$rpos>>2] = $incdec$ptr242;
        $c$6 = 48;
       }
      } else {
       $c$6 = $c$5;
      }
      $call246 = (+_decfloat($f,$c$6,$bits$0,$emin$0,$sign$0,$pok));
      $retval$0 = $call246;
      break L4;
      break;
     }
     default: {
      $28 = HEAP32[$shend>>2]|0;
      $tobool209 = ($28|0)==(0|0);
      if (!($tobool209)) {
       $29 = HEAP32[$rpos>>2]|0;
       $incdec$ptr212 = ((($29)) + -1|0);
       HEAP32[$rpos>>2] = $incdec$ptr212;
      }
      $call215 = (___errno_location()|0);
      HEAP32[$call215>>2] = 22;
      ___shlim($f,0,0);
      $retval$0 = 0.0;
      break L4;
     }
     }
    }
    }
   } while(0);
   if ((label|0) == 23) {
    $10 = HEAP32[$shend>>2]|0;
    $tobool61 = ($10|0)==(0|0);
    if (!($tobool61)) {
     $11 = HEAP32[$rpos>>2]|0;
     $incdec$ptr64 = ((($11)) + -1|0);
     HEAP32[$rpos>>2] = $incdec$ptr64;
    }
    $tobool67 = ($pok|0)!=(0);
    $cmp7089 = ($trunc>>>0)>(3);
    $or$cond98 = $tobool67 & $cmp7089;
    if ($or$cond98) {
     $i$190 = $trunc;
     while(1) {
      if (!($tobool61)) {
       $12 = HEAP32[$rpos>>2]|0;
       $incdec$ptr77 = ((($12)) + -1|0);
       HEAP32[$rpos>>2] = $incdec$ptr77;
      }
      $dec = (($i$190) + -1)|0;
      $cmp70 = ($dec>>>0)>(3);
      if ($cmp70) {
       $i$190 = $dec;
      } else {
       break;
      }
     }
    }
   }
   $conv84 = (+($sign$0|0));
   $mul85 = $conv84 * inf;
   $conv86 = $mul85;
   $retval$0 = $conv86;
  }
 } while(0);
 return (+$retval$0);
}
function _hexfloat($f,$bits,$emin,$sign,$pok) {
 $f = $f|0;
 $bits = $bits|0;
 $emin = $emin|0;
 $sign = $sign|0;
 $pok = $pok|0;
 var $$pre = 0, $$pre136 = 0.0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $add210 = 0, $add214 = 0, $add256 = 0.0, $add259 = 0.0, $add73 = 0, $add80 = 0.0;
 var $add86 = 0.0, $and = 0, $bias$0 = 0.0, $bits$addr$0 = 0, $bits$addr$0109 = 0, $bits$addr$0110 = 0, $brmerge = 0, $c$0 = 0, $c$0$be = 0, $c$0$ph = 0, $c$3 = 0, $c$3$be = 0, $c$3$lcssa = 0, $c$3$ph = 0, $call = 0, $call101 = 0, $call13 = 0, $call187 = 0, $call197 = 0, $call240 = 0.0;
 var $call242 = 0.0, $call263 = 0, $call266 = 0.0, $call27 = 0, $call44 = 0, $cmp = 0, $cmp146 = 0, $cmp20 = 0, $cmp203 = 0, $cmp203118 = 0, $cmp206 = 0, $cmp235 = 0, $cmp244 = 0, $cmp31 = 0, $cmp31128 = 0, $cmp37 = 0, $cmp49 = 0, $cmp52 = 0, $cmp54 = 0, $cmp6 = 0;
 var $cmp62 = 0, $cmp94 = 0, $cond29 = 0, $cond46 = 0, $conv = 0, $conv11 = 0, $conv135 = 0.0, $conv179 = 0.0, $conv188 = 0.0, $conv198 = 0.0, $conv241112 = 0.0, $conv25 = 0, $conv253$pre$phiZ2D = 0.0, $conv254 = 0.0, $conv42 = 0, $conv78 = 0.0, $conv99 = 0, $d$0 = 0, $div = 0.0, $gotdig$0 = 0;
 var $gotdig$3 = 0, $gotdig$3$ph = 0, $gotdig$4 = 0, $gotrad$1 = 0, $gotrad$1$ph = 0, $gotrad$2 = 0, $gottail$0 = 0, $gottail$1 = 0, $gottail$2 = 0, $inc251 = 0, $incdec$ptr = 0, $incdec$ptr10 = 0, $incdec$ptr111 = 0, $incdec$ptr120 = 0, $incdec$ptr129 = 0, $incdec$ptr159 = 0, $incdec$ptr170 = 0, $incdec$ptr24 = 0, $incdec$ptr41 = 0, $incdec$ptr98 = 0;
 var $mul = 0, $mul136 = 0.0, $mul143 = 0, $mul180 = 0.0, $mul189 = 0.0, $mul190 = 0.0, $mul199 = 0.0, $mul200 = 0.0, $mul255 = 0.0, $mul258 = 0.0, $mul79 = 0.0, $mul85 = 0.0, $not$cmp206 = 0, $or$cond = 0, $or$cond103 = 0, $or$cond2 = 0, $or$cond3 = 0, $or145 = 0, $retval$0 = 0.0, $rpos = 0;
 var $scale$0 = 0.0, $scale$1 = 0.0, $scale$2 = 0.0, $shend = 0, $spec$select113 = 0.0, $spec$select114 = 0, $sub = 0, $sub182 = 0, $sub192 = 0, $sub211 = 0.0, $sub211$pn = 0.0, $sub239 = 0, $sub239111 = 0, $sub260 = 0.0, $sub51 = 0, $sub66 = 0, $tobool = 0, $tobool105 = 0, $tobool108 = 0, $tobool114 = 0;
 var $tobool123 = 0, $tobool138 = 0, $tobool153 = 0, $tobool156 = 0, $tobool167 = 0, $tobool177 = 0, $tobool247 = 0, $tobool249 = 0, $tobool261 = 0, $tobool82 = 0, $tobool83 = 0, $x$0 = 0, $x$1 = 0, $x$2 = 0, $x$3$lcssa = 0, $x$3125 = 0, $x$4$lcssa = 0, $x$4119 = 0, $x$5 = 0, $x$6 = 0;
 var $y$0 = 0.0, $y$1 = 0.0, $y$2 = 0.0, $y$3$lcssa = 0.0, $y$3120 = 0.0, $y$4 = 0.0, $y$5 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $rpos = ((($f)) + 4|0);
 $0 = HEAP32[$rpos>>2]|0;
 $shend = ((($f)) + 104|0);
 $1 = HEAP32[$shend>>2]|0;
 $cmp = ($0>>>0)<($1>>>0);
 if ($cmp) {
  $incdec$ptr = ((($0)) + 1|0);
  HEAP32[$rpos>>2] = $incdec$ptr;
  $2 = HEAP8[$0>>0]|0;
  $conv = $2&255;
  $c$0$ph = $conv;
 } else {
  $call = (___shgetc($f)|0);
  $c$0$ph = $call;
 }
 $c$0 = $c$0$ph;$gotdig$0 = 0;
 L5: while(1) {
  switch ($c$0|0) {
  case 46:  {
   label = 10;
   break L5;
   break;
  }
  case 48:  {
   break;
  }
  default: {
   $106 = 0;$107 = 0;$c$3$ph = $c$0;$gotdig$3$ph = $gotdig$0;$gotrad$1$ph = 0;
   break L5;
  }
  }
  $3 = HEAP32[$rpos>>2]|0;
  $4 = HEAP32[$shend>>2]|0;
  $cmp6 = ($3>>>0)<($4>>>0);
  if ($cmp6) {
   $incdec$ptr10 = ((($3)) + 1|0);
   HEAP32[$rpos>>2] = $incdec$ptr10;
   $5 = HEAP8[$3>>0]|0;
   $conv11 = $5&255;
   $c$0$be = $conv11;
  } else {
   $call13 = (___shgetc($f)|0);
   $c$0$be = $call13;
  }
  $c$0 = $c$0$be;$gotdig$0 = 1;
 }
 if ((label|0) == 10) {
  $6 = HEAP32[$rpos>>2]|0;
  $7 = HEAP32[$shend>>2]|0;
  $cmp20 = ($6>>>0)<($7>>>0);
  if ($cmp20) {
   $incdec$ptr24 = ((($6)) + 1|0);
   HEAP32[$rpos>>2] = $incdec$ptr24;
   $8 = HEAP8[$6>>0]|0;
   $conv25 = $8&255;
   $cond29 = $conv25;
  } else {
   $call27 = (___shgetc($f)|0);
   $cond29 = $call27;
  }
  $cmp31128 = ($cond29|0)==(48);
  if ($cmp31128) {
   $12 = 0;$13 = 0;
   while(1) {
    $9 = HEAP32[$rpos>>2]|0;
    $10 = HEAP32[$shend>>2]|0;
    $cmp37 = ($9>>>0)<($10>>>0);
    if ($cmp37) {
     $incdec$ptr41 = ((($9)) + 1|0);
     HEAP32[$rpos>>2] = $incdec$ptr41;
     $11 = HEAP8[$9>>0]|0;
     $conv42 = $11&255;
     $cond46 = $conv42;
    } else {
     $call44 = (___shgetc($f)|0);
     $cond46 = $call44;
    }
    $14 = (_i64Add(($12|0),($13|0),-1,-1)|0);
    $15 = (getTempRet0() | 0);
    $cmp31 = ($cond46|0)==(48);
    if ($cmp31) {
     $12 = $14;$13 = $15;
    } else {
     $106 = $14;$107 = $15;$c$3$ph = $cond46;$gotdig$3$ph = 1;$gotrad$1$ph = 1;
     break;
    }
   }
  } else {
   $106 = 0;$107 = 0;$c$3$ph = $cond29;$gotdig$3$ph = $gotdig$0;$gotrad$1$ph = 1;
  }
 }
 $17 = 0;$19 = 0;$37 = $106;$39 = $107;$c$3 = $c$3$ph;$gotdig$3 = $gotdig$3$ph;$gotrad$1 = $gotrad$1$ph;$gottail$0 = 0;$scale$0 = 1.0;$x$0 = 0;$y$0 = 0.0;
 while(1) {
  $sub = (($c$3) + -48)|0;
  $cmp49 = ($sub>>>0)<(10);
  $$pre = $c$3 | 32;
  if ($cmp49) {
   label = 24;
  } else {
   $sub51 = (($$pre) + -97)|0;
   $cmp52 = ($sub51>>>0)<(6);
   $cmp54 = ($c$3|0)==(46);
   $or$cond3 = $cmp54 | $cmp52;
   if (!($or$cond3)) {
    $c$3$lcssa = $c$3;
    break;
   }
   if ($cmp54) {
    $tobool = ($gotrad$1|0)==(0);
    if ($tobool) {
     $108 = $19;$109 = $17;$110 = $19;$111 = $17;$gotdig$4 = $gotdig$3;$gotrad$2 = 1;$gottail$2 = $gottail$0;$scale$2 = $scale$0;$x$2 = $x$0;$y$2 = $y$0;
    } else {
     $c$3$lcssa = 46;
     break;
    }
   } else {
    label = 24;
   }
  }
  if ((label|0) == 24) {
   label = 0;
   $cmp62 = ($c$3|0)>(57);
   $sub66 = (($$pre) + -87)|0;
   $d$0 = $cmp62 ? $sub66 : $sub;
   $16 = ($17|0)<(0);
   $18 = ($19>>>0)<(8);
   $20 = ($17|0)==(0);
   $21 = $20 & $18;
   $22 = $16 | $21;
   do {
    if ($22) {
     $mul = $x$0 << 4;
     $add73 = (($d$0) + ($mul))|0;
     $gottail$1 = $gottail$0;$scale$1 = $scale$0;$x$1 = $add73;$y$1 = $y$0;
    } else {
     $23 = ($17|0)<(0);
     $24 = ($19>>>0)<(14);
     $25 = ($17|0)==(0);
     $26 = $25 & $24;
     $27 = $23 | $26;
     if ($27) {
      $conv78 = (+($d$0|0));
      $div = $scale$0 * 0.0625;
      $mul79 = $div * $conv78;
      $add80 = $y$0 + $mul79;
      $gottail$1 = $gottail$0;$scale$1 = $div;$x$1 = $x$0;$y$1 = $add80;
      break;
     } else {
      $tobool82 = ($d$0|0)==(0);
      $tobool83 = ($gottail$0|0)!=(0);
      $or$cond = $tobool83 | $tobool82;
      $mul85 = $scale$0 * 0.5;
      $add86 = $y$0 + $mul85;
      $spec$select113 = $or$cond ? $y$0 : $add86;
      $spec$select114 = $or$cond ? $gottail$0 : 1;
      $gottail$1 = $spec$select114;$scale$1 = $scale$0;$x$1 = $x$0;$y$1 = $spec$select113;
      break;
     }
    }
   } while(0);
   $28 = (_i64Add(($19|0),($17|0),1,0)|0);
   $29 = (getTempRet0() | 0);
   $108 = $37;$109 = $39;$110 = $28;$111 = $29;$gotdig$4 = 1;$gotrad$2 = $gotrad$1;$gottail$2 = $gottail$1;$scale$2 = $scale$1;$x$2 = $x$1;$y$2 = $y$1;
  }
  $30 = HEAP32[$rpos>>2]|0;
  $31 = HEAP32[$shend>>2]|0;
  $cmp94 = ($30>>>0)<($31>>>0);
  if ($cmp94) {
   $incdec$ptr98 = ((($30)) + 1|0);
   HEAP32[$rpos>>2] = $incdec$ptr98;
   $32 = HEAP8[$30>>0]|0;
   $conv99 = $32&255;
   $c$3$be = $conv99;
  } else {
   $call101 = (___shgetc($f)|0);
   $c$3$be = $call101;
  }
  $17 = $111;$19 = $110;$37 = $108;$39 = $109;$c$3 = $c$3$be;$gotdig$3 = $gotdig$4;$gotrad$1 = $gotrad$2;$gottail$0 = $gottail$2;$scale$0 = $scale$2;$x$0 = $x$2;$y$0 = $y$2;
 }
 $tobool105 = ($gotdig$3|0)==(0);
 do {
  if ($tobool105) {
   $33 = HEAP32[$shend>>2]|0;
   $tobool108 = ($33|0)==(0|0);
   if (!($tobool108)) {
    $34 = HEAP32[$rpos>>2]|0;
    $incdec$ptr111 = ((($34)) + -1|0);
    HEAP32[$rpos>>2] = $incdec$ptr111;
   }
   $tobool114 = ($pok|0)==(0);
   if ($tobool114) {
    ___shlim($f,0,0);
   } else {
    if (!($tobool108)) {
     $35 = HEAP32[$rpos>>2]|0;
     $incdec$ptr120 = ((($35)) + -1|0);
     HEAP32[$rpos>>2] = $incdec$ptr120;
     $tobool123 = ($gotrad$1|0)==(0);
     $brmerge = $tobool123 | $tobool108;
     if (!($brmerge)) {
      $36 = HEAP32[$rpos>>2]|0;
      $incdec$ptr129 = ((($36)) + -1|0);
      HEAP32[$rpos>>2] = $incdec$ptr129;
     }
    }
   }
   $conv135 = (+($sign|0));
   $mul136 = $conv135 * 0.0;
   $retval$0 = $mul136;
  } else {
   $tobool138 = ($gotrad$1|0)==(0);
   $38 = $tobool138 ? $19 : $37;
   $40 = $tobool138 ? $17 : $39;
   $41 = ($17|0)<(0);
   $42 = ($19>>>0)<(8);
   $43 = ($17|0)==(0);
   $44 = $43 & $42;
   $45 = $41 | $44;
   if ($45) {
    $46 = $19;$47 = $17;$x$3125 = $x$0;
    while(1) {
     $mul143 = $x$3125 << 4;
     $48 = (_i64Add(($46|0),($47|0),1,0)|0);
     $49 = (getTempRet0() | 0);
     $50 = ($47|0)<(0);
     $51 = ($46>>>0)<(7);
     $52 = ($47|0)==(0);
     $53 = $52 & $51;
     $54 = $50 | $53;
     if ($54) {
      $46 = $48;$47 = $49;$x$3125 = $mul143;
     } else {
      $x$3$lcssa = $mul143;
      break;
     }
    }
   } else {
    $x$3$lcssa = $x$0;
   }
   $or145 = $c$3$lcssa | 32;
   $cmp146 = ($or145|0)==(112);
   if ($cmp146) {
    $55 = (_scanexp($f,$pok)|0);
    $56 = (getTempRet0() | 0);
    $57 = ($55|0)==(0);
    $58 = ($56|0)==(-2147483648);
    $59 = $57 & $58;
    if ($59) {
     $tobool153 = ($pok|0)==(0);
     if ($tobool153) {
      ___shlim($f,0,0);
      $retval$0 = 0.0;
      break;
     }
     $60 = HEAP32[$shend>>2]|0;
     $tobool156 = ($60|0)==(0|0);
     if ($tobool156) {
      $68 = 0;$69 = 0;
     } else {
      $61 = HEAP32[$rpos>>2]|0;
      $incdec$ptr159 = ((($61)) + -1|0);
      HEAP32[$rpos>>2] = $incdec$ptr159;
      $68 = 0;$69 = 0;
     }
    } else {
     $68 = $55;$69 = $56;
    }
   } else {
    $62 = HEAP32[$shend>>2]|0;
    $tobool167 = ($62|0)==(0|0);
    if ($tobool167) {
     $68 = 0;$69 = 0;
    } else {
     $63 = HEAP32[$rpos>>2]|0;
     $incdec$ptr170 = ((($63)) + -1|0);
     HEAP32[$rpos>>2] = $incdec$ptr170;
     $68 = 0;$69 = 0;
    }
   }
   $64 = (_bitshift64Shl(($38|0),($40|0),2)|0);
   $65 = (getTempRet0() | 0);
   $66 = (_i64Add(($64|0),($65|0),-32,-1)|0);
   $67 = (getTempRet0() | 0);
   $70 = (_i64Add(($66|0),($67|0),($68|0),($69|0))|0);
   $71 = (getTempRet0() | 0);
   $tobool177 = ($x$3$lcssa|0)==(0);
   if ($tobool177) {
    $conv179 = (+($sign|0));
    $mul180 = $conv179 * 0.0;
    $retval$0 = $mul180;
    break;
   }
   $sub182 = (0 - ($emin))|0;
   $72 = ($sub182|0)<(0);
   $73 = $72 << 31 >> 31;
   $74 = ($71|0)>($73|0);
   $75 = ($70>>>0)>($sub182>>>0);
   $76 = ($71|0)==($73|0);
   $77 = $76 & $75;
   $78 = $74 | $77;
   if ($78) {
    $call187 = (___errno_location()|0);
    HEAP32[$call187>>2] = 34;
    $conv188 = (+($sign|0));
    $mul189 = $conv188 * 1.7976931348623157E+308;
    $mul190 = $mul189 * 1.7976931348623157E+308;
    $retval$0 = $mul190;
    break;
   }
   $sub192 = (($emin) + -106)|0;
   $79 = ($sub192|0)<(0);
   $80 = $79 << 31 >> 31;
   $81 = ($71|0)<($80|0);
   $82 = ($70>>>0)<($sub192>>>0);
   $83 = ($71|0)==($80|0);
   $84 = $83 & $82;
   $85 = $81 | $84;
   if ($85) {
    $call197 = (___errno_location()|0);
    HEAP32[$call197>>2] = 34;
    $conv198 = (+($sign|0));
    $mul199 = $conv198 * 2.2250738585072014E-308;
    $mul200 = $mul199 * 2.2250738585072014E-308;
    $retval$0 = $mul200;
    break;
   }
   $cmp203118 = ($x$3$lcssa|0)>(-1);
   if ($cmp203118) {
    $86 = $70;$87 = $71;$x$4119 = $x$3$lcssa;$y$3120 = $y$0;
    while(1) {
     $cmp206 = !($y$3120 >= 0.5);
     $add214 = $x$4119 << 1;
     $sub211 = $y$3120 + -1.0;
     $not$cmp206 = $cmp206 ^ 1;
     $add210 = $not$cmp206&1;
     $x$5 = $add214 | $add210;
     $sub211$pn = $cmp206 ? $y$3120 : $sub211;
     $y$4 = $y$3120 + $sub211$pn;
     $88 = (_i64Add(($86|0),($87|0),-1,-1)|0);
     $89 = (getTempRet0() | 0);
     $cmp203 = ($x$5|0)>(-1);
     if ($cmp203) {
      $86 = $88;$87 = $89;$x$4119 = $x$5;$y$3120 = $y$4;
     } else {
      $96 = $88;$97 = $89;$x$4$lcssa = $x$5;$y$3$lcssa = $y$4;
      break;
     }
    }
   } else {
    $96 = $70;$97 = $71;$x$4$lcssa = $x$3$lcssa;$y$3$lcssa = $y$0;
   }
   $90 = ($bits|0)<(0);
   $91 = $90 << 31 >> 31;
   $92 = ($emin|0)<(0);
   $93 = $92 << 31 >> 31;
   $94 = (_i64Subtract(32,0,($emin|0),($93|0))|0);
   $95 = (getTempRet0() | 0);
   $98 = (_i64Add(($94|0),($95|0),($96|0),($97|0))|0);
   $99 = (getTempRet0() | 0);
   $100 = ($99|0)<($91|0);
   $101 = ($98>>>0)<($bits>>>0);
   $102 = ($99|0)==($91|0);
   $103 = $102 & $101;
   $104 = $100 | $103;
   if ($104) {
    $105 = ($98|0)>(0);
    if ($105) {
     $bits$addr$0 = $98;
     label = 65;
    } else {
     $bits$addr$0110 = 0;$sub239111 = 84;
     label = 67;
    }
   } else {
    $bits$addr$0 = $bits;
    label = 65;
   }
   if ((label|0) == 65) {
    $cmp235 = ($bits$addr$0|0)<(53);
    $sub239 = (84 - ($bits$addr$0))|0;
    if ($cmp235) {
     $bits$addr$0110 = $bits$addr$0;$sub239111 = $sub239;
     label = 67;
    } else {
     $$pre136 = (+($sign|0));
     $bias$0 = 0.0;$bits$addr$0109 = $bits$addr$0;$conv253$pre$phiZ2D = $$pre136;
    }
   }
   if ((label|0) == 67) {
    $conv241112 = (+($sign|0));
    $call240 = (+_scalbn(1.0,$sub239111));
    $call242 = (+_copysignl($call240,$conv241112));
    $bias$0 = $call242;$bits$addr$0109 = $bits$addr$0110;$conv253$pre$phiZ2D = $conv241112;
   }
   $cmp244 = ($bits$addr$0109|0)<(32);
   $tobool247 = $y$3$lcssa != 0.0;
   $or$cond2 = $tobool247 & $cmp244;
   $and = $x$4$lcssa & 1;
   $tobool249 = ($and|0)==(0);
   $or$cond103 = $tobool249 & $or$cond2;
   $inc251 = $or$cond103&1;
   $x$6 = (($x$4$lcssa) + ($inc251))|0;
   $y$5 = $or$cond103 ? 0.0 : $y$3$lcssa;
   $conv254 = (+($x$6>>>0));
   $mul255 = $conv253$pre$phiZ2D * $conv254;
   $add256 = $bias$0 + $mul255;
   $mul258 = $y$5 * $conv253$pre$phiZ2D;
   $add259 = $mul258 + $add256;
   $sub260 = $add259 - $bias$0;
   $tobool261 = $sub260 != 0.0;
   if (!($tobool261)) {
    $call263 = (___errno_location()|0);
    HEAP32[$call263>>2] = 34;
   }
   $call266 = (+_scalbnl($sub260,$96));
   $retval$0 = $call266;
  }
 } while(0);
 return (+$retval$0);
}
function _decfloat($f,$c,$bits,$emin,$sign,$pok) {
 $f = $f|0;
 $c = $c|0;
 $bits = $bits|0;
 $emin = $emin|0;
 $sign = $sign|0;
 $pok = $pok|0;
 var $$neg = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a$0$lcssa379 = 0, $a$0333 = 0, $a$3$ph = 0, $a$3$ph406 = 0, $a$5 = 0, $a$5$ph = 0, $a$5$ph$ph = 0, $a$6326 = 0, $add252 = 0, $add265 = 0, $add275 = 0, $add287 = 0, $add307$sink$off0 = 0, $add345 = 0, $add367 = 0, $add400 = 0;
 var $add412 = 0, $add422 = 0, $add428 = 0, $add433 = 0, $add457 = 0, $add462 = 0, $add472 = 0.0, $add478 = 0, $add501 = 0.0, $add503 = 0, $add517 = 0, $add524 = 0.0, $add531 = 0.0, $add537 = 0, $add544 = 0.0, $add548 = 0.0, $add563 = 0.0, $add59 = 0, $and = 0, $and321 = 0;
 var $and347 = 0, $and352 = 0, $and355 = 0, $and368 = 0, $and409 = 0, $and423 = 0, $and429 = 0, $and434 = 0, $and443 = 0, $and458 = 0, $and463 = 0, $and504 = 0, $and518 = 0, $and538 = 0, $and566 = 0, $arrayidx186 = 0, $arrayidx186$promoted = 0, $arrayidx219 = 0, $arrayidx239 = 0, $arrayidx256 = 0;
 var $arrayidx261 = 0, $arrayidx284 = 0, $arrayidx294 = 0, $arrayidx304 = 0, $arrayidx353 = 0, $arrayidx356 = 0, $arrayidx359 = 0, $arrayidx372 = 0, $arrayidx373 = 0, $arrayidx406 = 0, $arrayidx438 = 0, $arrayidx444 = 0, $arrayidx465 = 0, $arrayidx470 = 0, $arrayidx510 = 0, $arrayidx64 = 0, $arrayidx77 = 0, $bias$0 = 0.0, $bits$addr$0 = 0, $c$addr$0 = 0;
 var $c$addr$0$be = 0, $c$addr$2 = 0, $c$addr$3$lcssa = 0, $c$addr$3352 = 0, $call = 0, $call135 = 0, $call15 = 0, $call165 = 0, $call175 = 0, $call32 = 0, $call495 = 0.0, $call496 = 0.0, $call498 = 0.0, $call499 = 0.0, $call557 = 0.0, $call571 = 0.0, $call594 = 0, $call597 = 0.0, $call91 = 0, $carry$0335 = 0;
 var $carry298$0 = 0, $carry298$1 = 0, $carry362$0328 = 0, $cmp100 = 0, $cmp121 = 0, $cmp149 = 0, $cmp152 = 0, $cmp183 = 0, $cmp183339 = 0, $cmp19 = 0, $cmp19363 = 0, $cmp194 = 0, $cmp197 = 0, $cmp2 = 0, $cmp200 = 0, $cmp203 = 0, $cmp211 = 0, $cmp226 = 0, $cmp231 = 0, $cmp246 = 0;
 var $cmp25 = 0, $cmp258 = 0, $cmp258331 = 0, $cmp269 = 0, $cmp289 = 0, $cmp292 = 0, $cmp295 = 0, $cmp322 = 0, $cmp325 = 0, $cmp348 = 0, $cmp364 = 0, $cmp369 = 0, $cmp374 = 0, $cmp38 = 0, $cmp382 = 0, $cmp38343 = 0, $cmp392 = 0, $cmp396 = 0, $cmp40 = 0, $cmp402 = 0;
 var $cmp402324 = 0, $cmp40344 = 0, $cmp40354 = 0, $cmp416 = 0, $cmp435 = 0, $cmp459 = 0, $cmp48 = 0, $cmp480 = 0, $cmp490 = 0, $cmp505 = 0, $cmp51 = 0, $cmp511 = 0, $cmp519 = 0, $cmp526 = 0, $cmp539 = 0, $cmp554 = 0, $cmp568 = 0, $cmp572 = 0, $cmp579 = 0, $cmp587 = 0;
 var $cmp67 = 0, $cmp8 = 0, $cmp84 = 0, $cond17 = 0, $cond254 = 0, $cond268 = 0, $cond34 = 0, $cond93 = 0, $conv = 0, $conv13 = 0, $conv140 = 0.0, $conv155 = 0.0, $conv157 = 0.0, $conv166 = 0.0, $conv176 = 0.0, $conv206 = 0.0, $conv208 = 0.0, $conv214 = 0.0, $conv216 = 0.0, $conv220 = 0.0;
 var $conv234 = 0.0, $conv236 = 0.0, $conv240 = 0.0, $conv30 = 0, $conv471 = 0.0, $conv476 = 0.0, $conv89 = 0, $denormal$2$v = 0, $div = 0, $div221 = 0.0, $div264 = 0, $div267 = 0, $e2$0 = 0, $e2$0$ph = 0, $e2$1 = 0, $e2$1$ph = 0, $e2$1$ph$ph = 0, $e2$3 = 0, $e2$4 = 0, $exitcond = 0;
 var $frac$0 = 0.0, $frac$1 = 0.0, $frac$3 = 0.0, $gotdig$0 = 0, $gotdig$2 = 0, $gotdig$3$lcssa = 0, $gotdig$3348 = 0, $gotdig$4 = 0, $gotrad$0 = 0, $gotrad$1$lcssa = 0, $gotrad$1349 = 0, $gotrad$2 = 0, $i$0323 = 0, $i$4322 = 0, $inc189 = 0, $inc191 = 0, $inc279 = 0, $inc283 = 0, $inc387 = 0, $inc474 = 0;
 var $inc560 = 0.0, $inc584 = 0, $inc66 = 0, $inc70 = 0, $incdec$ptr = 0, $incdec$ptr113 = 0, $incdec$ptr12 = 0, $incdec$ptr128 = 0, $incdec$ptr29 = 0, $incdec$ptr88 = 0, $j$0$lcssa = 0, $j$0300 = 0, $j$0301 = 0, $j$0302 = 0, $j$0351 = 0, $j$2 = 0, $j$3340 = 0, $k$0$lcssa = 0, $k$0304 = 0, $k$0305 = 0;
 var $k$0306 = 0, $k$0350 = 0, $k$2 = 0, $k$3 = 0, $k$4334 = 0, $k$5 = 0, $k$5$in = 0, $k$6327 = 0, $lnz$0$lcssa = 0, $lnz$0310 = 0, $lnz$0311 = 0, $lnz$0312 = 0, $lnz$0347 = 0, $lnz$2 = 0, $mul = 0, $mul141 = 0.0, $mul158 = 0.0, $mul167 = 0.0, $mul168 = 0.0, $mul177 = 0.0;
 var $mul178 = 0.0, $mul187 = 0, $mul187341 = 0, $mul209 = 0.0, $mul217 = 0.0, $mul224$neg = 0, $mul237 = 0.0, $mul241 = 0.0, $mul268 = 0, $mul415 = 0, $mul467 = 0.0, $mul477 = 0.0, $mul523 = 0.0, $mul530 = 0.0, $mul543 = 0.0, $mul547 = 0.0, $mul583 = 0.0, $narrow = 0, $not$cmp572 = 0, $or = 0;
 var $or$cond = 0, $or$cond2 = 0, $or$cond260 = 0, $or$cond261 = 0, $or$cond262 = 0, $or$cond263 = 0, $or$cond266 = 0, $or$cond392 = 0, $or$cond5 = 0, $or357 = 0, $or445 = 0, $or99 = 0, $rem = 0, $retval$1 = 0.0, $rp$0$lcssa378 = 0, $rp$0332 = 0, $rp$3$ph = 0, $rp$3$ph404 = 0, $rp$5$ph = 0, $rp$5$ph403 = 0;
 var $rp$5$ph403$ph = 0, $rp$6325 = 0, $rpos = 0, $shend = 0, $shl407 = 0, $shr = 0, $shr230 = 0, $shr411 = 0, $shr414 = 0, $spec$select = 0, $spec$select257 = 0, $spec$select258 = 0, $spec$select264 = 0, $spec$select265 = 0, $spec$select290 = 0, $spec$select291 = 0, $spec$select292 = 0, $spec$select293 = 0, $spec$select294 = 0, $spec$store$select = 0;
 var $storemerge296 = 0, $sub1 = 0, $sub170 = 0, $sub218 = 0, $sub225 = 0, $sub238 = 0, $sub255 = 0, $sub276 = 0, $sub286 = 0, $sub299 = 0, $sub300 = 0, $sub320 = 0, $sub340 = 0, $sub346 = 0, $sub351 = 0, $sub354 = 0, $sub37 = 0, $sub37342 = 0, $sub37353 = 0, $sub408 = 0;
 var $sub425 = 0, $sub442 = 0, $sub464 = 0, $sub479 = 0, $sub494 = 0, $sub497 = 0, $sub500 = 0.0, $sub553 = 0, $sub564 = 0.0, $sub567 = 0, $sub60 = 0, $tobool107 = 0, $tobool110 = 0, $tobool125 = 0, $tobool138 = 0, $tobool180 = 0, $tobool244 = 0, $tobool273 = 0, $tobool281 = 0, $tobool329 = 0;
 var $tobool343 = 0, $tobool420 = 0, $tobool431 = 0, $tobool514 = 0, $tobool558 = 0, $tobool56 = 0, $tobool592 = 0, $tobool95 = 0, $tobool98 = 0, $tobool98269 = 0, $tobool98274 = 0, $tobool98275277 = 0, $x = 0, $y$0321 = 0.0, $y$1 = 0.0, $y$2 = 0.0, $y$3 = 0.0, $z$0 = 0, $z$10320 = 0, $z$11 = 0;
 var $z$2 = 0, $z$2$ph = 0, $z$2$ph405 = 0, $z$3 = 0, $z$5 = 0, $z$7$ph$ph = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(512|0);
 $x = sp;
 $0 = (($emin) + ($bits))|0;
 $sub1 = (0 - ($0))|0;
 $rpos = ((($f)) + 4|0);
 $shend = ((($f)) + 104|0);
 $c$addr$0 = $c;$gotdig$0 = 0;
 L1: while(1) {
  switch ($c$addr$0|0) {
  case 46:  {
   label = 7;
   break L1;
   break;
  }
  case 48:  {
   break;
  }
  default: {
   $106 = 0;$107 = 0;$c$addr$2 = $c$addr$0;$gotdig$2 = $gotdig$0;$gotrad$0 = 0;
   break L1;
  }
  }
  $1 = HEAP32[$rpos>>2]|0;
  $2 = HEAP32[$shend>>2]|0;
  $cmp2 = ($1>>>0)<($2>>>0);
  if ($cmp2) {
   $incdec$ptr = ((($1)) + 1|0);
   HEAP32[$rpos>>2] = $incdec$ptr;
   $3 = HEAP8[$1>>0]|0;
   $conv = $3&255;
   $c$addr$0$be = $conv;
  } else {
   $call = (___shgetc($f)|0);
   $c$addr$0$be = $call;
  }
  $c$addr$0 = $c$addr$0$be;$gotdig$0 = 1;
 }
 if ((label|0) == 7) {
  $4 = HEAP32[$rpos>>2]|0;
  $5 = HEAP32[$shend>>2]|0;
  $cmp8 = ($4>>>0)<($5>>>0);
  if ($cmp8) {
   $incdec$ptr12 = ((($4)) + 1|0);
   HEAP32[$rpos>>2] = $incdec$ptr12;
   $6 = HEAP8[$4>>0]|0;
   $conv13 = $6&255;
   $cond17 = $conv13;
  } else {
   $call15 = (___shgetc($f)|0);
   $cond17 = $call15;
  }
  $cmp19363 = ($cond17|0)==(48);
  if ($cmp19363) {
   $7 = 0;$8 = 0;
   while(1) {
    $9 = (_i64Add(($7|0),($8|0),-1,-1)|0);
    $10 = (getTempRet0() | 0);
    $11 = HEAP32[$rpos>>2]|0;
    $12 = HEAP32[$shend>>2]|0;
    $cmp25 = ($11>>>0)<($12>>>0);
    if ($cmp25) {
     $incdec$ptr29 = ((($11)) + 1|0);
     HEAP32[$rpos>>2] = $incdec$ptr29;
     $13 = HEAP8[$11>>0]|0;
     $conv30 = $13&255;
     $cond34 = $conv30;
    } else {
     $call32 = (___shgetc($f)|0);
     $cond34 = $call32;
    }
    $cmp19 = ($cond34|0)==(48);
    if ($cmp19) {
     $7 = $9;$8 = $10;
    } else {
     $106 = $9;$107 = $10;$c$addr$2 = $cond34;$gotdig$2 = 1;$gotrad$0 = 1;
     break;
    }
   }
  } else {
   $106 = 0;$107 = 0;$c$addr$2 = $cond17;$gotdig$2 = $gotdig$0;$gotrad$0 = 1;
  }
 }
 HEAP32[$x>>2] = 0;
 $sub37342 = (($c$addr$2) + -48)|0;
 $cmp38343 = ($sub37342>>>0)<(10);
 $cmp40344 = ($c$addr$2|0)==(46);
 $14 = $cmp40344 | $cmp38343;
 L22: do {
  if ($14) {
   $arrayidx77 = ((($x)) + 496|0);
   $108 = $106;$109 = $107;$15 = 0;$16 = 0;$c$addr$3352 = $c$addr$2;$cmp40354 = $cmp40344;$gotdig$3348 = $gotdig$2;$gotrad$1349 = $gotrad$0;$j$0351 = 0;$k$0350 = 0;$lnz$0347 = 0;$sub37353 = $sub37342;
   L24: while(1) {
    do {
     if ($cmp40354) {
      $cond268 = ($gotrad$1349|0)==(0);
      if ($cond268) {
       $110 = $15;$111 = $16;$112 = $15;$113 = $16;$gotdig$4 = $gotdig$3348;$gotrad$2 = 1;$j$2 = $j$0351;$k$2 = $k$0350;$lnz$2 = $lnz$0347;
      } else {
       break L24;
      }
     } else {
      $cmp48 = ($k$0350|0)<(125);
      $17 = (_i64Add(($15|0),($16|0),1,0)|0);
      $18 = (getTempRet0() | 0);
      $cmp51 = ($c$addr$3352|0)!=(48);
      if (!($cmp48)) {
       if (!($cmp51)) {
        $110 = $108;$111 = $109;$112 = $17;$113 = $18;$gotdig$4 = $gotdig$3348;$gotrad$2 = $gotrad$1349;$j$2 = $j$0351;$k$2 = $k$0350;$lnz$2 = $lnz$0347;
        break;
       }
       $20 = HEAP32[$arrayidx77>>2]|0;
       $or = $20 | 1;
       HEAP32[$arrayidx77>>2] = $or;
       $110 = $108;$111 = $109;$112 = $17;$113 = $18;$gotdig$4 = $gotdig$3348;$gotrad$2 = $gotrad$1349;$j$2 = $j$0351;$k$2 = $k$0350;$lnz$2 = $lnz$0347;
       break;
      }
      $spec$select = $cmp51 ? $17 : $lnz$0347;
      $tobool56 = ($j$0351|0)==(0);
      $arrayidx64 = (($x) + ($k$0350<<2)|0);
      if ($tobool56) {
       $storemerge296 = $sub37353;
      } else {
       $19 = HEAP32[$arrayidx64>>2]|0;
       $mul = ($19*10)|0;
       $add59 = (($c$addr$3352) + -48)|0;
       $sub60 = (($add59) + ($mul))|0;
       $storemerge296 = $sub60;
      }
      HEAP32[$arrayidx64>>2] = $storemerge296;
      $inc66 = (($j$0351) + 1)|0;
      $cmp67 = ($inc66|0)==(9);
      $inc70 = $cmp67&1;
      $spec$select257 = (($k$0350) + ($inc70))|0;
      $spec$select258 = $cmp67 ? 0 : $inc66;
      $110 = $108;$111 = $109;$112 = $17;$113 = $18;$gotdig$4 = 1;$gotrad$2 = $gotrad$1349;$j$2 = $spec$select258;$k$2 = $spec$select257;$lnz$2 = $spec$select;
     }
    } while(0);
    $21 = HEAP32[$rpos>>2]|0;
    $22 = HEAP32[$shend>>2]|0;
    $cmp84 = ($21>>>0)<($22>>>0);
    if ($cmp84) {
     $incdec$ptr88 = ((($21)) + 1|0);
     HEAP32[$rpos>>2] = $incdec$ptr88;
     $23 = HEAP8[$21>>0]|0;
     $conv89 = $23&255;
     $cond93 = $conv89;
    } else {
     $call91 = (___shgetc($f)|0);
     $cond93 = $call91;
    }
    $sub37 = (($cond93) + -48)|0;
    $cmp38 = ($sub37>>>0)<(10);
    $cmp40 = ($cond93|0)==(46);
    $24 = $cmp40 | $cmp38;
    if ($24) {
     $108 = $110;$109 = $111;$15 = $112;$16 = $113;$c$addr$3352 = $cond93;$cmp40354 = $cmp40;$gotdig$3348 = $gotdig$4;$gotrad$1349 = $gotrad$2;$j$0351 = $j$2;$k$0350 = $k$2;$lnz$0347 = $lnz$2;$sub37353 = $sub37;
    } else {
     $25 = $110;$26 = $112;$28 = $111;$29 = $113;$c$addr$3$lcssa = $cond93;$gotdig$3$lcssa = $gotdig$4;$gotrad$1$lcssa = $gotrad$2;$j$0$lcssa = $j$2;$k$0$lcssa = $k$2;$lnz$0$lcssa = $lnz$2;
     label = 31;
     break L22;
    }
   }
   $tobool98269 = ($gotdig$3348|0)!=(0);
   $114 = $15;$115 = $16;$116 = $108;$117 = $109;$j$0302 = $j$0351;$k$0306 = $k$0350;$lnz$0312 = $lnz$0347;$tobool98275277 = $tobool98269;
   label = 39;
  } else {
   $25 = $106;$26 = 0;$28 = $107;$29 = 0;$c$addr$3$lcssa = $c$addr$2;$gotdig$3$lcssa = $gotdig$2;$gotrad$1$lcssa = $gotrad$0;$j$0$lcssa = 0;$k$0$lcssa = 0;$lnz$0$lcssa = 0;
   label = 31;
  }
 } while(0);
 do {
  if ((label|0) == 31) {
   $tobool95 = ($gotrad$1$lcssa|0)==(0);
   $27 = $tobool95 ? $26 : $25;
   $30 = $tobool95 ? $29 : $28;
   $tobool98 = ($gotdig$3$lcssa|0)!=(0);
   $or99 = $c$addr$3$lcssa | 32;
   $cmp100 = ($or99|0)==(101);
   $or$cond260 = $tobool98 & $cmp100;
   if (!($or$cond260)) {
    $cmp121 = ($c$addr$3$lcssa|0)>(-1);
    if ($cmp121) {
     $114 = $26;$115 = $29;$116 = $27;$117 = $30;$j$0302 = $j$0$lcssa;$k$0306 = $k$0$lcssa;$lnz$0312 = $lnz$0$lcssa;$tobool98275277 = $tobool98;
     label = 39;
     break;
    } else {
     $118 = $26;$119 = $29;$120 = $27;$121 = $30;$j$0301 = $j$0$lcssa;$k$0305 = $k$0$lcssa;$lnz$0311 = $lnz$0$lcssa;$tobool98274 = $tobool98;
     label = 41;
     break;
    }
   }
   $31 = (_scanexp($f,$pok)|0);
   $32 = (getTempRet0() | 0);
   $33 = ($31|0)==(0);
   $34 = ($32|0)==(-2147483648);
   $35 = $33 & $34;
   if ($35) {
    $tobool107 = ($pok|0)==(0);
    if ($tobool107) {
     ___shlim($f,0,0);
     $retval$1 = 0.0;
     break;
    }
    $36 = HEAP32[$shend>>2]|0;
    $tobool110 = ($36|0)==(0|0);
    if ($tobool110) {
     $38 = 0;$39 = 0;
    } else {
     $37 = HEAP32[$rpos>>2]|0;
     $incdec$ptr113 = ((($37)) + -1|0);
     HEAP32[$rpos>>2] = $incdec$ptr113;
     $38 = 0;$39 = 0;
    }
   } else {
    $38 = $31;$39 = $32;
   }
   $40 = (_i64Add(($38|0),($39|0),($27|0),($30|0))|0);
   $41 = (getTempRet0() | 0);
   $46 = $40;$47 = $26;$49 = $41;$50 = $29;$j$0300 = $j$0$lcssa;$k$0304 = $k$0$lcssa;$lnz$0310 = $lnz$0$lcssa;
   label = 43;
  }
 } while(0);
 if ((label|0) == 39) {
  $42 = HEAP32[$shend>>2]|0;
  $tobool125 = ($42|0)==(0|0);
  if ($tobool125) {
   $118 = $114;$119 = $115;$120 = $116;$121 = $117;$j$0301 = $j$0302;$k$0305 = $k$0306;$lnz$0311 = $lnz$0312;$tobool98274 = $tobool98275277;
   label = 41;
  } else {
   $43 = HEAP32[$rpos>>2]|0;
   $incdec$ptr128 = ((($43)) + -1|0);
   HEAP32[$rpos>>2] = $incdec$ptr128;
   if ($tobool98275277) {
    $46 = $116;$47 = $114;$49 = $117;$50 = $115;$j$0300 = $j$0302;$k$0304 = $k$0306;$lnz$0310 = $lnz$0312;
    label = 43;
   } else {
    label = 42;
   }
  }
 }
 if ((label|0) == 41) {
  if ($tobool98274) {
   $46 = $120;$47 = $118;$49 = $121;$50 = $119;$j$0300 = $j$0301;$k$0304 = $k$0305;$lnz$0310 = $lnz$0311;
   label = 43;
  } else {
   label = 42;
  }
 }
 do {
  if ((label|0) == 42) {
   $call135 = (___errno_location()|0);
   HEAP32[$call135>>2] = 22;
   ___shlim($f,0,0);
   $retval$1 = 0.0;
  }
  else if ((label|0) == 43) {
   $44 = HEAP32[$x>>2]|0;
   $tobool138 = ($44|0)==(0);
   if ($tobool138) {
    $conv140 = (+($sign|0));
    $mul141 = $conv140 * 0.0;
    $retval$1 = $mul141;
    break;
   }
   $45 = ($46|0)==($47|0);
   $48 = ($49|0)==($50|0);
   $51 = $45 & $48;
   $52 = ($50|0)<(0);
   $53 = ($47>>>0)<(10);
   $54 = ($50|0)==(0);
   $55 = $54 & $53;
   $56 = $52 | $55;
   $or$cond = $56 & $51;
   if ($or$cond) {
    $cmp149 = ($bits|0)>(30);
    $shr = $44 >>> $bits;
    $cmp152 = ($shr|0)==(0);
    $or$cond261 = $cmp149 | $cmp152;
    if ($or$cond261) {
     $conv155 = (+($sign|0));
     $conv157 = (+($44>>>0));
     $mul158 = $conv155 * $conv157;
     $retval$1 = $mul158;
     break;
    }
   }
   $div = (($emin|0) / -2)&-1;
   $57 = ($div|0)<(0);
   $58 = $57 << 31 >> 31;
   $59 = ($49|0)>($58|0);
   $60 = ($46>>>0)>($div>>>0);
   $61 = ($49|0)==($58|0);
   $62 = $61 & $60;
   $63 = $59 | $62;
   if ($63) {
    $call165 = (___errno_location()|0);
    HEAP32[$call165>>2] = 34;
    $conv166 = (+($sign|0));
    $mul167 = $conv166 * 1.7976931348623157E+308;
    $mul168 = $mul167 * 1.7976931348623157E+308;
    $retval$1 = $mul168;
    break;
   }
   $sub170 = (($emin) + -106)|0;
   $64 = ($sub170|0)<(0);
   $65 = $64 << 31 >> 31;
   $66 = ($49|0)<($65|0);
   $67 = ($46>>>0)<($sub170>>>0);
   $68 = ($49|0)==($65|0);
   $69 = $68 & $67;
   $70 = $66 | $69;
   if ($70) {
    $call175 = (___errno_location()|0);
    HEAP32[$call175>>2] = 34;
    $conv176 = (+($sign|0));
    $mul177 = $conv176 * 2.2250738585072014E-308;
    $mul178 = $mul177 * 2.2250738585072014E-308;
    $retval$1 = $mul178;
    break;
   }
   $tobool180 = ($j$0300|0)==(0);
   if ($tobool180) {
    $k$3 = $k$0304;
   } else {
    $cmp183339 = ($j$0300|0)<(9);
    if ($cmp183339) {
     $arrayidx186 = (($x) + ($k$0304<<2)|0);
     $arrayidx186$promoted = HEAP32[$arrayidx186>>2]|0;
     $j$3340 = $j$0300;$mul187341 = $arrayidx186$promoted;
     while(1) {
      $mul187 = ($mul187341*10)|0;
      $inc189 = (($j$3340) + 1)|0;
      $cmp183 = ($j$3340|0)<(8);
      if ($cmp183) {
       $j$3340 = $inc189;$mul187341 = $mul187;
      } else {
       break;
      }
     }
     HEAP32[$arrayidx186>>2] = $mul187;
    }
    $inc191 = (($k$0304) + 1)|0;
    $k$3 = $inc191;
   }
   $cmp194 = ($lnz$0310|0)<(9);
   if ($cmp194) {
    $cmp197 = ($lnz$0310|0)<=($46|0);
    $cmp200 = ($46|0)<(18);
    $or$cond2 = $cmp197 & $cmp200;
    if ($or$cond2) {
     $cmp203 = ($46|0)==(9);
     if ($cmp203) {
      $conv206 = (+($sign|0));
      $71 = HEAP32[$x>>2]|0;
      $conv208 = (+($71>>>0));
      $mul209 = $conv206 * $conv208;
      $retval$1 = $mul209;
      break;
     }
     $cmp211 = ($46|0)<(9);
     if ($cmp211) {
      $conv214 = (+($sign|0));
      $72 = HEAP32[$x>>2]|0;
      $conv216 = (+($72>>>0));
      $mul217 = $conv214 * $conv216;
      $sub218 = (8 - ($46))|0;
      $arrayidx219 = (1568 + ($sub218<<2)|0);
      $73 = HEAP32[$arrayidx219>>2]|0;
      $conv220 = (+($73|0));
      $div221 = $mul217 / $conv220;
      $retval$1 = $div221;
      break;
     }
     $$neg = Math_imul($46, -3)|0;
     $mul224$neg = (($bits) + 27)|0;
     $sub225 = (($mul224$neg) + ($$neg))|0;
     $cmp226 = ($sub225|0)>(30);
     $$pre = HEAP32[$x>>2]|0;
     $shr230 = $$pre >>> $sub225;
     $cmp231 = ($shr230|0)==(0);
     $or$cond392 = $cmp226 | $cmp231;
     if ($or$cond392) {
      $conv234 = (+($sign|0));
      $conv236 = (+($$pre>>>0));
      $mul237 = $conv234 * $conv236;
      $sub238 = (($46) + -10)|0;
      $arrayidx239 = (1568 + ($sub238<<2)|0);
      $74 = HEAP32[$arrayidx239>>2]|0;
      $conv240 = (+($74|0));
      $mul241 = $mul237 * $conv240;
      $retval$1 = $mul241;
      break;
     }
    }
   }
   $rem = (($46|0) % 9)&-1;
   $tobool244 = ($rem|0)==(0);
   if ($tobool244) {
    $a$3$ph = 0;$rp$3$ph = $46;$z$2$ph = $k$3;
   } else {
    $cmp246 = ($46|0)>(-1);
    $add252 = (($rem) + 9)|0;
    $cond254 = $cmp246 ? $rem : $add252;
    $sub255 = (8 - ($cond254))|0;
    $arrayidx256 = (1568 + ($sub255<<2)|0);
    $75 = HEAP32[$arrayidx256>>2]|0;
    $cmp258331 = ($k$3|0)==(0);
    if ($cmp258331) {
     $a$0$lcssa379 = 0;$rp$0$lcssa378 = $46;$z$0 = 0;
    } else {
     $div267 = (1000000000 / ($75|0))&-1;
     $a$0333 = 0;$carry$0335 = 0;$k$4334 = 0;$rp$0332 = $46;
     while(1) {
      $arrayidx261 = (($x) + ($k$4334<<2)|0);
      $76 = HEAP32[$arrayidx261>>2]|0;
      $div264 = (($76>>>0) / ($75>>>0))&-1;
      $77 = Math_imul($div264, $75)|0;
      $78 = (($76) - ($77))|0;
      $add265 = (($div264) + ($carry$0335))|0;
      HEAP32[$arrayidx261>>2] = $add265;
      $mul268 = Math_imul($div267, $78)|0;
      $cmp269 = ($k$4334|0)==($a$0333|0);
      $tobool273 = ($add265|0)==(0);
      $or$cond262 = $cmp269 & $tobool273;
      $add275 = (($a$0333) + 1)|0;
      $and = $add275 & 127;
      $sub276 = (($rp$0332) + -9)|0;
      $spec$select290 = $or$cond262 ? $sub276 : $rp$0332;
      $spec$select291 = $or$cond262 ? $and : $a$0333;
      $inc279 = (($k$4334) + 1)|0;
      $cmp258 = ($inc279|0)==($k$3|0);
      if ($cmp258) {
       break;
      } else {
       $a$0333 = $spec$select291;$carry$0335 = $mul268;$k$4334 = $inc279;$rp$0332 = $spec$select290;
      }
     }
     $tobool281 = ($mul268|0)==(0);
     if ($tobool281) {
      $a$0$lcssa379 = $spec$select291;$rp$0$lcssa378 = $spec$select290;$z$0 = $k$3;
     } else {
      $arrayidx284 = (($x) + ($k$3<<2)|0);
      $inc283 = (($k$3) + 1)|0;
      HEAP32[$arrayidx284>>2] = $mul268;
      $a$0$lcssa379 = $spec$select291;$rp$0$lcssa378 = $spec$select290;$z$0 = $inc283;
     }
    }
    $sub286 = (9 - ($cond254))|0;
    $add287 = (($sub286) + ($rp$0$lcssa378))|0;
    $a$3$ph = $a$0$lcssa379;$rp$3$ph = $add287;$z$2$ph = $z$0;
   }
   $a$3$ph406 = $a$3$ph;$e2$0$ph = 0;$rp$3$ph404 = $rp$3$ph;$z$2$ph405 = $z$2$ph;
   L104: while(1) {
    $cmp289 = ($rp$3$ph404|0)<(18);
    $cmp292 = ($rp$3$ph404|0)==(18);
    $arrayidx294 = (($x) + ($a$3$ph406<<2)|0);
    $e2$0 = $e2$0$ph;$z$2 = $z$2$ph405;
    while(1) {
     if (!($cmp289)) {
      if (!($cmp292)) {
       $rp$5$ph = $rp$3$ph404;
       break L104;
      }
      $79 = HEAP32[$arrayidx294>>2]|0;
      $cmp295 = ($79>>>0)<(9007199);
      if (!($cmp295)) {
       $rp$5$ph = 18;
       break L104;
      }
     }
     $sub300 = (($z$2) + 127)|0;
     $carry298$0 = 0;$k$5$in = $sub300;$z$3 = $z$2;
     while(1) {
      $k$5 = $k$5$in & 127;
      $arrayidx304 = (($x) + ($k$5<<2)|0);
      $80 = HEAP32[$arrayidx304>>2]|0;
      $81 = (_bitshift64Shl(($80|0),0,29)|0);
      $82 = (getTempRet0() | 0);
      $83 = (_i64Add(($81|0),($82|0),($carry298$0|0),0)|0);
      $84 = (getTempRet0() | 0);
      $85 = ($84>>>0)>(0);
      $86 = ($83>>>0)>(1000000000);
      $87 = ($84|0)==(0);
      $88 = $87 & $86;
      $89 = $85 | $88;
      if ($89) {
       $90 = (___udivdi3(($83|0),($84|0),1000000000,0)|0);
       $91 = (getTempRet0() | 0);
       $92 = (___muldi3(($90|0),($91|0),1000000000,0)|0);
       $93 = (getTempRet0() | 0);
       $94 = (_i64Subtract(($83|0),($84|0),($92|0),($93|0))|0);
       $95 = (getTempRet0() | 0);
       $add307$sink$off0 = $94;$carry298$1 = $90;
      } else {
       $add307$sink$off0 = $83;$carry298$1 = 0;
      }
      HEAP32[$arrayidx304>>2] = $add307$sink$off0;
      $sub320 = (($z$3) + 127)|0;
      $and321 = $sub320 & 127;
      $cmp322 = ($k$5|0)!=($and321|0);
      $cmp325 = ($k$5|0)==($a$3$ph406|0);
      $or$cond263 = $cmp322 | $cmp325;
      $tobool329 = ($add307$sink$off0|0)==(0);
      $spec$select264 = $tobool329 ? $k$5 : $z$3;
      $spec$select292 = $or$cond263 ? $z$3 : $spec$select264;
      $sub340 = (($k$5) + -1)|0;
      if ($cmp325) {
       break;
      } else {
       $carry298$0 = $carry298$1;$k$5$in = $sub340;$z$3 = $spec$select292;
      }
     }
     $sub299 = (($e2$0) + -29)|0;
     $tobool343 = ($carry298$1|0)==(0);
     if ($tobool343) {
      $e2$0 = $sub299;$z$2 = $z$3;
     } else {
      break;
     }
    }
    $add345 = (($rp$3$ph404) + 9)|0;
    $sub346 = (($a$3$ph406) + 127)|0;
    $and347 = $sub346 & 127;
    $cmp348 = ($and347|0)==($spec$select292|0);
    $sub351 = (($spec$select292) + 127)|0;
    $and352 = $sub351 & 127;
    $sub354 = (($spec$select292) + 126)|0;
    $and355 = $sub354 & 127;
    $arrayidx356 = (($x) + ($and355<<2)|0);
    if ($cmp348) {
     $arrayidx353 = (($x) + ($and352<<2)|0);
     $96 = HEAP32[$arrayidx353>>2]|0;
     $97 = HEAP32[$arrayidx356>>2]|0;
     $or357 = $97 | $96;
     HEAP32[$arrayidx356>>2] = $or357;
     $z$5 = $and352;
    } else {
     $z$5 = $z$3;
    }
    $arrayidx359 = (($x) + ($and347<<2)|0);
    HEAP32[$arrayidx359>>2] = $carry298$1;
    $a$3$ph406 = $and347;$e2$0$ph = $sub299;$rp$3$ph404 = $add345;$z$2$ph405 = $z$5;
   }
   $a$5$ph$ph = $a$3$ph406;$e2$1$ph$ph = $e2$0;$rp$5$ph403$ph = $rp$5$ph;$z$7$ph$ph = $z$2;
   L123: while(1) {
    $add433 = (($z$7$ph$ph) + 1)|0;
    $and434 = $add433 & 127;
    $sub442 = (($z$7$ph$ph) + 127)|0;
    $and443 = $sub442 & 127;
    $arrayidx444 = (($x) + ($and443<<2)|0);
    $a$5$ph = $a$5$ph$ph;$e2$1$ph = $e2$1$ph$ph;$rp$5$ph403 = $rp$5$ph403$ph;
    while(1) {
     $cmp392 = ($rp$5$ph403|0)==(18);
     $cmp396 = ($rp$5$ph403|0)>(27);
     $spec$select265 = $cmp396 ? 9 : 1;
     $a$5 = $a$5$ph;$e2$1 = $e2$1$ph;
     while(1) {
      $i$0323 = 0;
      while(1) {
       $add367 = (($i$0323) + ($a$5))|0;
       $and368 = $add367 & 127;
       $cmp369 = ($and368|0)==($z$7$ph$ph|0);
       if ($cmp369) {
        label = 92;
        break;
       }
       $arrayidx372 = (($x) + ($and368<<2)|0);
       $98 = HEAP32[$arrayidx372>>2]|0;
       $arrayidx373 = (2244 + ($i$0323<<2)|0);
       $99 = HEAP32[$arrayidx373>>2]|0;
       $cmp374 = ($98>>>0)<($99>>>0);
       if ($cmp374) {
        label = 92;
        break;
       }
       $cmp382 = ($98>>>0)>($99>>>0);
       if ($cmp382) {
        break;
       }
       $inc387 = (($i$0323) + 1)|0;
       $cmp364 = ($inc387>>>0)<(2);
       if ($cmp364) {
        $i$0323 = 1;
       } else {
        label = 92;
        break;
       }
      }
      if ((label|0) == 92) {
       label = 0;
       if ($cmp392) {
        break L123;
       }
      }
      $add400 = (($spec$select265) + ($e2$1))|0;
      $cmp402324 = ($a$5|0)==($z$7$ph$ph|0);
      if ($cmp402324) {
       $a$5 = $z$7$ph$ph;$e2$1 = $add400;
      } else {
       break;
      }
     }
     $shl407 = 1 << $spec$select265;
     $sub408 = (($shl407) + -1)|0;
     $shr414 = 1000000000 >>> $spec$select265;
     $a$6326 = $a$5;$carry362$0328 = 0;$k$6327 = $a$5;$rp$6325 = $rp$5$ph403;
     while(1) {
      $arrayidx406 = (($x) + ($k$6327<<2)|0);
      $100 = HEAP32[$arrayidx406>>2]|0;
      $and409 = $100 & $sub408;
      $shr411 = $100 >>> $spec$select265;
      $add412 = (($shr411) + ($carry362$0328))|0;
      HEAP32[$arrayidx406>>2] = $add412;
      $mul415 = Math_imul($and409, $shr414)|0;
      $cmp416 = ($k$6327|0)==($a$6326|0);
      $tobool420 = ($add412|0)==(0);
      $or$cond266 = $cmp416 & $tobool420;
      $add422 = (($a$6326) + 1)|0;
      $and423 = $add422 & 127;
      $sub425 = (($rp$6325) + -9)|0;
      $spec$select293 = $or$cond266 ? $sub425 : $rp$6325;
      $spec$select294 = $or$cond266 ? $and423 : $a$6326;
      $add428 = (($k$6327) + 1)|0;
      $and429 = $add428 & 127;
      $cmp402 = ($and429|0)==($z$7$ph$ph|0);
      if ($cmp402) {
       break;
      } else {
       $a$6326 = $spec$select294;$carry362$0328 = $mul415;$k$6327 = $and429;$rp$6325 = $spec$select293;
      }
     }
     $tobool431 = ($mul415|0)==(0);
     if (!($tobool431)) {
      $cmp435 = ($and434|0)==($spec$select294|0);
      if (!($cmp435)) {
       break;
      }
      $101 = HEAP32[$arrayidx444>>2]|0;
      $or445 = $101 | 1;
      HEAP32[$arrayidx444>>2] = $or445;
     }
     $a$5$ph = $spec$select294;$e2$1$ph = $add400;$rp$5$ph403 = $spec$select293;
    }
    $arrayidx438 = (($x) + ($z$7$ph$ph<<2)|0);
    HEAP32[$arrayidx438>>2] = $mul415;
    $a$5$ph$ph = $spec$select294;$e2$1$ph$ph = $add400;$rp$5$ph403$ph = $spec$select293;$z$7$ph$ph = $and434;
   }
   $i$4322 = 0;$y$0321 = 0.0;$z$10320 = $z$7$ph$ph;
   while(1) {
    $add457 = (($i$4322) + ($a$5))|0;
    $and458 = $add457 & 127;
    $cmp459 = ($and458|0)==($z$10320|0);
    $add462 = (($z$10320) + 1)|0;
    $and463 = $add462 & 127;
    if ($cmp459) {
     $sub464 = (($and463) + -1)|0;
     $arrayidx465 = (($x) + ($sub464<<2)|0);
     HEAP32[$arrayidx465>>2] = 0;
     $z$11 = $and463;
    } else {
     $z$11 = $z$10320;
    }
    $mul467 = $y$0321 * 1.0E+9;
    $arrayidx470 = (($x) + ($and458<<2)|0);
    $102 = HEAP32[$arrayidx470>>2]|0;
    $conv471 = (+($102>>>0));
    $add472 = $mul467 + $conv471;
    $inc474 = (($i$4322) + 1)|0;
    $exitcond = ($inc474|0)==(2);
    if ($exitcond) {
     break;
    } else {
     $i$4322 = $inc474;$y$0321 = $add472;$z$10320 = $z$11;
    }
   }
   $conv476 = (+($sign|0));
   $mul477 = $add472 * $conv476;
   $add478 = (($e2$1) + 53)|0;
   $sub479 = (($add478) - ($emin))|0;
   $cmp480 = ($sub479|0)<($bits|0);
   $103 = ($sub479|0)>(0);
   $spec$store$select = $103 ? $sub479 : 0;
   $bits$addr$0 = $cmp480 ? $spec$store$select : $bits;
   $cmp490 = ($bits$addr$0|0)<(53);
   if ($cmp490) {
    $sub494 = (105 - ($bits$addr$0))|0;
    $call495 = (+_scalbn(1.0,$sub494));
    $call496 = (+_copysignl($call495,$mul477));
    $sub497 = (53 - ($bits$addr$0))|0;
    $call498 = (+_scalbn(1.0,$sub497));
    $call499 = (+_fmodl($mul477,$call498));
    $sub500 = $mul477 - $call499;
    $add501 = $call496 + $sub500;
    $bias$0 = $call496;$frac$0 = $call499;$y$1 = $add501;
   } else {
    $bias$0 = 0.0;$frac$0 = 0.0;$y$1 = $mul477;
   }
   $add503 = (($a$5) + 2)|0;
   $and504 = $add503 & 127;
   $cmp505 = ($and504|0)==($z$11|0);
   if ($cmp505) {
    $frac$3 = $frac$0;
   } else {
    $arrayidx510 = (($x) + ($and504<<2)|0);
    $104 = HEAP32[$arrayidx510>>2]|0;
    $cmp511 = ($104>>>0)<(500000000);
    do {
     if ($cmp511) {
      $tobool514 = ($104|0)==(0);
      if ($tobool514) {
       $add517 = (($a$5) + 3)|0;
       $and518 = $add517 & 127;
       $cmp519 = ($and518|0)==($z$11|0);
       if ($cmp519) {
        $frac$1 = $frac$0;
        break;
       }
      }
      $mul523 = $conv476 * 0.25;
      $add524 = $mul523 + $frac$0;
      $frac$1 = $add524;
     } else {
      $cmp526 = ($104|0)==(500000000);
      if (!($cmp526)) {
       $mul530 = $conv476 * 0.75;
       $add531 = $mul530 + $frac$0;
       $frac$1 = $add531;
       break;
      }
      $add537 = (($a$5) + 3)|0;
      $and538 = $add537 & 127;
      $cmp539 = ($and538|0)==($z$11|0);
      if ($cmp539) {
       $mul543 = $conv476 * 0.5;
       $add544 = $mul543 + $frac$0;
       $frac$1 = $add544;
       break;
      } else {
       $mul547 = $conv476 * 0.75;
       $add548 = $mul547 + $frac$0;
       $frac$1 = $add548;
       break;
      }
     }
    } while(0);
    $sub553 = (53 - ($bits$addr$0))|0;
    $cmp554 = ($sub553|0)>(1);
    if ($cmp554) {
     $call557 = (+_fmodl($frac$1,1.0));
     $tobool558 = $call557 != 0.0;
     if ($tobool558) {
      $frac$3 = $frac$1;
     } else {
      $inc560 = $frac$1 + 1.0;
      $frac$3 = $inc560;
     }
    } else {
     $frac$3 = $frac$1;
    }
   }
   $add563 = $y$1 + $frac$3;
   $sub564 = $add563 - $bias$0;
   $and566 = $add478 & 2147483647;
   $sub567 = (-2 - ($0))|0;
   $cmp568 = ($and566|0)>($sub567|0);
   do {
    if ($cmp568) {
     $call571 = (+Math_abs((+$sub564)));
     $cmp572 = !($call571 >= 9007199254740992.0);
     $mul583 = $sub564 * 0.5;
     $not$cmp572 = $cmp572 ^ 1;
     $inc584 = $not$cmp572&1;
     $e2$3 = (($e2$1) + ($inc584))|0;
     $y$2 = $cmp572 ? $sub564 : $mul583;
     $105 = (($e2$3) + 50)|0;
     $cmp587 = ($105|0)>($sub1|0);
     if (!($cmp587)) {
      $cmp579 = ($bits$addr$0|0)!=($sub479|0);
      $narrow = $cmp579 | $cmp572;
      $denormal$2$v = $cmp480 & $narrow;
      $tobool592 = $frac$3 != 0.0;
      $or$cond5 = $tobool592 & $denormal$2$v;
      if (!($or$cond5)) {
       $e2$4 = $e2$3;$y$3 = $y$2;
       break;
      }
     }
     $call594 = (___errno_location()|0);
     HEAP32[$call594>>2] = 34;
     $e2$4 = $e2$3;$y$3 = $y$2;
    } else {
     $e2$4 = $e2$1;$y$3 = $sub564;
    }
   } while(0);
   $call597 = (+_scalbnl($y$3,$e2$4));
   $retval$1 = $call597;
  }
 } while(0);
 STACKTOP = sp;return (+$retval$1);
}
function _scanexp($f,$pok) {
 $f = $f|0;
 $pok = $pok|0;
 var $$pr = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $c$0 = 0, $c$146 = 0, $c$241 = 0, $call = 0, $call104 = 0, $call17 = 0, $call58 = 0, $call85 = 0, $cmp = 0, $cmp10 = 0;
 var $cmp20 = 0, $cmp32 = 0, $cmp4 = 0, $cmp44 = 0, $cmp46 = 0, $cmp51 = 0, $cmp64 = 0, $cmp6440 = 0, $cmp78 = 0, $cmp91 = 0, $cmp9138 = 0, $cmp97 = 0, $cond = 0, $cond106 = 0, $cond19 = 0, $cond60 = 0, $cond87 = 0, $conv = 0, $conv102 = 0, $conv15 = 0;
 var $conv56 = 0, $conv7 = 0, $conv83 = 0, $incdec$ptr = 0, $incdec$ptr101 = 0, $incdec$ptr112 = 0, $incdec$ptr14 = 0, $incdec$ptr27 = 0, $incdec$ptr39 = 0, $incdec$ptr55 = 0, $incdec$ptr82 = 0, $mul = 0, $neg$0 = 0, $or$cond1 = 0, $rpos = 0, $shend = 0, $sub = 0, $sub31$pre$phiZ2D = 0, $sub43 = 0, $sub48 = 0;
 var $sub63 = 0, $sub90 = 0, $tobool = 0, $tobool109 = 0, $tobool115 = 0, $tobool24 = 0, $tobool36 = 0, $x$047 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $rpos = ((($f)) + 4|0);
 $0 = HEAP32[$rpos>>2]|0;
 $shend = ((($f)) + 104|0);
 $1 = HEAP32[$shend>>2]|0;
 $cmp = ($0>>>0)<($1>>>0);
 if ($cmp) {
  $incdec$ptr = ((($0)) + 1|0);
  HEAP32[$rpos>>2] = $incdec$ptr;
  $2 = HEAP8[$0>>0]|0;
  $conv = $2&255;
  $cond = $conv;
 } else {
  $call = (___shgetc($f)|0);
  $cond = $call;
 }
 switch ($cond|0) {
 case 43: case 45:  {
  $cmp4 = ($cond|0)==(45);
  $conv7 = $cmp4&1;
  $3 = HEAP32[$rpos>>2]|0;
  $4 = HEAP32[$shend>>2]|0;
  $cmp10 = ($3>>>0)<($4>>>0);
  if ($cmp10) {
   $incdec$ptr14 = ((($3)) + 1|0);
   HEAP32[$rpos>>2] = $incdec$ptr14;
   $5 = HEAP8[$3>>0]|0;
   $conv15 = $5&255;
   $cond19 = $conv15;
  } else {
   $call17 = (___shgetc($f)|0);
   $cond19 = $call17;
  }
  $sub = (($cond19) + -48)|0;
  $cmp20 = ($sub>>>0)>(9);
  $tobool = ($pok|0)!=(0);
  $or$cond1 = $tobool & $cmp20;
  if ($or$cond1) {
   $6 = HEAP32[$shend>>2]|0;
   $tobool24 = ($6|0)==(0|0);
   if ($tobool24) {
    $45 = -2147483648;$46 = 0;
   } else {
    $7 = HEAP32[$rpos>>2]|0;
    $incdec$ptr27 = ((($7)) + -1|0);
    HEAP32[$rpos>>2] = $incdec$ptr27;
    label = 14;
   }
  } else {
   $c$0 = $cond19;$neg$0 = $conv7;$sub31$pre$phiZ2D = $sub;
   label = 12;
  }
  break;
 }
 default: {
  $$pre = (($cond) + -48)|0;
  $c$0 = $cond;$neg$0 = 0;$sub31$pre$phiZ2D = $$pre;
  label = 12;
 }
 }
 if ((label|0) == 12) {
  $cmp32 = ($sub31$pre$phiZ2D>>>0)>(9);
  if ($cmp32) {
   label = 14;
  } else {
   $c$146 = $c$0;$x$047 = 0;
   while(1) {
    $mul = ($x$047*10)|0;
    $add = (($c$146) + -48)|0;
    $sub48 = (($add) + ($mul))|0;
    $9 = HEAP32[$rpos>>2]|0;
    $10 = HEAP32[$shend>>2]|0;
    $cmp51 = ($9>>>0)<($10>>>0);
    if ($cmp51) {
     $incdec$ptr55 = ((($9)) + 1|0);
     HEAP32[$rpos>>2] = $incdec$ptr55;
     $11 = HEAP8[$9>>0]|0;
     $conv56 = $11&255;
     $cond60 = $conv56;
    } else {
     $call58 = (___shgetc($f)|0);
     $cond60 = $call58;
    }
    $sub43 = (($cond60) + -48)|0;
    $cmp44 = ($sub43>>>0)<(10);
    $cmp46 = ($sub48|0)<(214748364);
    $12 = $cmp44 & $cmp46;
    if ($12) {
     $c$146 = $cond60;$x$047 = $sub48;
    } else {
     break;
    }
   }
   $13 = ($sub48|0)<(0);
   $14 = $13 << 31 >> 31;
   $cmp6440 = ($sub43>>>0)<(10);
   if ($cmp6440) {
    $15 = $sub48;$16 = $14;$c$241 = $cond60;
    while(1) {
     $17 = (___muldi3(($15|0),($16|0),10,0)|0);
     $18 = (getTempRet0() | 0);
     $19 = ($c$241|0)<(0);
     $20 = $19 << 31 >> 31;
     $21 = (_i64Add(($c$241|0),($20|0),-48,-1)|0);
     $22 = (getTempRet0() | 0);
     $23 = (_i64Add(($21|0),($22|0),($17|0),($18|0))|0);
     $24 = (getTempRet0() | 0);
     $25 = HEAP32[$rpos>>2]|0;
     $26 = HEAP32[$shend>>2]|0;
     $cmp78 = ($25>>>0)<($26>>>0);
     if ($cmp78) {
      $incdec$ptr82 = ((($25)) + 1|0);
      HEAP32[$rpos>>2] = $incdec$ptr82;
      $27 = HEAP8[$25>>0]|0;
      $conv83 = $27&255;
      $cond87 = $conv83;
     } else {
      $call85 = (___shgetc($f)|0);
      $cond87 = $call85;
     }
     $sub63 = (($cond87) + -48)|0;
     $cmp64 = ($sub63>>>0)<(10);
     $28 = ($24|0)<(21474836);
     $29 = ($23>>>0)<(2061584302);
     $30 = ($24|0)==(21474836);
     $31 = $30 & $29;
     $32 = $28 | $31;
     $33 = $cmp64 & $32;
     if ($33) {
      $15 = $23;$16 = $24;$c$241 = $cond87;
     } else {
      break;
     }
    }
    $cmp9138 = ($sub63>>>0)<(10);
    if ($cmp9138) {
     while(1) {
      $34 = HEAP32[$rpos>>2]|0;
      $35 = HEAP32[$shend>>2]|0;
      $cmp97 = ($34>>>0)<($35>>>0);
      if ($cmp97) {
       $incdec$ptr101 = ((($34)) + 1|0);
       HEAP32[$rpos>>2] = $incdec$ptr101;
       $36 = HEAP8[$34>>0]|0;
       $conv102 = $36&255;
       $cond106 = $conv102;
      } else {
       $call104 = (___shgetc($f)|0);
       $cond106 = $call104;
      }
      $sub90 = (($cond106) + -48)|0;
      $cmp91 = ($sub90>>>0)<(10);
      if (!($cmp91)) {
       $39 = $23;$40 = $24;
       break;
      }
     }
    } else {
     $39 = $23;$40 = $24;
    }
   } else {
    $39 = $sub48;$40 = $14;
   }
   $37 = HEAP32[$shend>>2]|0;
   $tobool109 = ($37|0)==(0|0);
   if (!($tobool109)) {
    $38 = HEAP32[$rpos>>2]|0;
    $incdec$ptr112 = ((($38)) + -1|0);
    HEAP32[$rpos>>2] = $incdec$ptr112;
   }
   $tobool115 = ($neg$0|0)==(0);
   $41 = (_i64Subtract(0,0,($39|0),($40|0))|0);
   $42 = (getTempRet0() | 0);
   $43 = $tobool115 ? $39 : $41;
   $44 = $tobool115 ? $40 : $42;
   $45 = $44;$46 = $43;
  }
 }
 if ((label|0) == 14) {
  $$pr = HEAP32[$shend>>2]|0;
  $tobool36 = ($$pr|0)==(0|0);
  if ($tobool36) {
   $45 = -2147483648;$46 = 0;
  } else {
   $8 = HEAP32[$rpos>>2]|0;
   $incdec$ptr39 = ((($8)) + -1|0);
   HEAP32[$rpos>>2] = $incdec$ptr39;
   $45 = -2147483648;$46 = 0;
  }
 }
 setTempRet0(($45) | 0);
 return ($46|0);
}
function _sprintf($s,$fmt,$varargs) {
 $s = $s|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $ap = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $call = (_vsprintf($s,$fmt,$ap)|0);
 STACKTOP = sp;return ($call|0);
}
function _vsprintf($s,$fmt,$ap) {
 $s = $s|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_vsnprintf($s,2147483647,$fmt,$ap)|0);
 return ($call|0);
}
function _strtox_317($s,$p,$prec) {
 $s = $s|0;
 $p = $p|0;
 $prec = $prec|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$ptr = 0, $buf = 0, $call = 0.0, $cond = 0, $f = 0;
 var $lock = 0, $rend = 0, $rpos = 0, $shcnt = 0, $sub$ptr$sub = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $f = sp;
 _memset(($f|0),0,144)|0;
 $rpos = ((($f)) + 4|0);
 HEAP32[$rpos>>2] = $s;
 $rend = ((($f)) + 8|0);
 HEAP32[$rend>>2] = (-1);
 $buf = ((($f)) + 44|0);
 HEAP32[$buf>>2] = $s;
 $lock = ((($f)) + 76|0);
 HEAP32[$lock>>2] = -1;
 ___shlim($f,0,0);
 $call = (+___floatscan($f,$prec,1));
 $shcnt = ((($f)) + 120|0);
 $0 = $shcnt;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$rpos>>2]|0;
 $7 = HEAP32[$rend>>2]|0;
 $sub$ptr$sub = (($6) - ($7))|0;
 $8 = ($sub$ptr$sub|0)<(0);
 $9 = $8 << 31 >> 31;
 $10 = (_i64Add(($2|0),($5|0),($sub$ptr$sub|0),($9|0))|0);
 $11 = (getTempRet0() | 0);
 $tobool = ($p|0)==(0|0);
 if (!($tobool)) {
  $12 = ($10|0)==(0);
  $13 = ($11|0)==(0);
  $14 = $12 & $13;
  $add$ptr = (($s) + ($10)|0);
  $cond = $14 ? $s : $add$ptr;
  HEAP32[$p>>2] = $cond;
 }
 STACKTOP = sp;return (+$call);
}
function _strtof($s,$p) {
 $s = $s|0;
 $p = $p|0;
 var $call = 0.0, $conv = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (+_strtox_317($s,$p,0));
 $conv = $call;
 return (+$conv);
}
function ___unlist_locked_file($f) {
 $f = $f|0;
 var $$pre = 0, $$sink = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $call = 0, $lockcount = 0, $next_locked = 0, $next_locked10 = 0, $prev_locked4 = 0, $stdio_locks = 0, $tobool = 0, $tobool1 = 0, $tobool6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $lockcount = ((($f)) + 68|0);
 $0 = HEAP32[$lockcount>>2]|0;
 $tobool = ($0|0)==(0);
 if (!($tobool)) {
  $next_locked = ((($f)) + 132|0);
  $1 = HEAP32[$next_locked>>2]|0;
  $tobool1 = ($1|0)==(0|0);
  $2 = $1;
  $$pre = ((($f)) + 128|0);
  if (!($tobool1)) {
   $3 = HEAP32[$$pre>>2]|0;
   $prev_locked4 = ((($1)) + 128|0);
   HEAP32[$prev_locked4>>2] = $3;
  }
  $4 = HEAP32[$$pre>>2]|0;
  $tobool6 = ($4|0)==(0|0);
  if ($tobool6) {
   $call = (___pthread_self_589()|0);
   $stdio_locks = ((($call)) + 232|0);
   $$sink = $stdio_locks;
  } else {
   $next_locked10 = ((($4)) + 132|0);
   $$sink = $next_locked10;
  }
  HEAP32[$$sink>>2] = $2;
 }
 return;
}
function ___pthread_self_589() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_pthread_self()|0);
 return ($call|0);
}
function _fopen($filename,$mode) {
 $filename = $filename|0;
 $mode = $mode|0;
 var $0 = 0, $1 = 0, $and = 0, $call = 0, $call1 = 0, $call12 = 0, $call2 = 0, $call3 = 0, $call4 = 0, $cmp = 0, $conv = 0, $or = 0, $retval$0 = 0, $tobool = 0, $tobool13 = 0, $tobool8 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0;
 var $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $0 = HEAP8[$mode>>0]|0;
 $conv = $0 << 24 >> 24;
 $call = (_strchr(8868,$conv)|0);
 $tobool = ($call|0)==(0|0);
 if ($tobool) {
  $call1 = (___errno_location()|0);
  HEAP32[$call1>>2] = 22;
  $retval$0 = 0;
 } else {
  $call2 = (___fmodeflags($mode)|0);
  $1 = $filename;
  $or = $call2 | 32768;
  HEAP32[$vararg_buffer>>2] = $1;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $or;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 438;
  $call3 = (___syscall5(5,($vararg_buffer|0))|0);
  $call4 = (___syscall_ret($call3)|0);
  $cmp = ($call4|0)<(0);
  if ($cmp) {
   $retval$0 = 0;
  } else {
   $and = $call2 & 524288;
   $tobool8 = ($and|0)==(0);
   if (!($tobool8)) {
    HEAP32[$vararg_buffer3>>2] = $call4;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = 2;
    $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
    HEAP32[$vararg_ptr7>>2] = 1;
    (___syscall221(221,($vararg_buffer3|0))|0);
   }
   $call12 = (___fdopen($call4,$mode)|0);
   $tobool13 = ($call12|0)==(0|0);
   if ($tobool13) {
    HEAP32[$vararg_buffer8>>2] = $call4;
    (___syscall6(6,($vararg_buffer8|0))|0);
    $retval$0 = 0;
   } else {
    $retval$0 = $call12;
   }
  }
 }
 STACKTOP = sp;return ($retval$0|0);
}
function ___fmodeflags($mode) {
 $mode = $mode|0;
 var $$ = 0, $0 = 0, $call = 0, $call5 = 0, $call9 = 0, $cmp = 0, $cmp15 = 0, $cmp21 = 0, $cmp27 = 0, $flags$0 = 0, $flags$2 = 0, $flags$4 = 0, $or = 0, $or12 = 0, $or18 = 0, $or24 = 0, $or30 = 0, $spec$select = 0, $spec$select13 = 0, $spec$select14 = 0;
 var $tobool = 0, $tobool10 = 0, $tobool6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_strchr($mode,43)|0);
 $tobool = ($call|0)==(0|0);
 $0 = HEAP8[$mode>>0]|0;
 $cmp = ($0<<24>>24)!=(114);
 $$ = $cmp&1;
 $flags$0 = $tobool ? $$ : 2;
 $call5 = (_strchr($mode,120)|0);
 $tobool6 = ($call5|0)==(0|0);
 $or = $flags$0 | 128;
 $spec$select = $tobool6 ? $flags$0 : $or;
 $call9 = (_strchr($mode,101)|0);
 $tobool10 = ($call9|0)==(0|0);
 $or12 = $spec$select | 524288;
 $flags$2 = $tobool10 ? $spec$select : $or12;
 $cmp15 = ($0<<24>>24)==(114);
 $or18 = $flags$2 | 64;
 $spec$select13 = $cmp15 ? $flags$2 : $or18;
 $cmp21 = ($0<<24>>24)==(119);
 $or24 = $spec$select13 | 512;
 $flags$4 = $cmp21 ? $or24 : $spec$select13;
 $cmp27 = ($0<<24>>24)==(97);
 $or30 = $flags$4 | 1024;
 $spec$select14 = $cmp27 ? $or30 : $flags$4;
 return ($spec$select14|0);
}
function ___fdopen($fd,$mode) {
 $fd = $fd|0;
 $mode = $mode|0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $add$ptr32 = 0, $and = 0, $and34 = 0, $buf = 0, $buf_size = 0, $call = 0, $call1 = 0, $call13 = 0, $call2 = 0, $call23 = 0, $call36 = 0;
 var $call44 = 0, $call7 = 0, $close = 0, $cmp = 0, $cmp19 = 0, $cond = 0, $conv = 0, $fd31 = 0, $lock = 0, $or = 0, $or29 = 0, $read = 0, $retval$0 = 0, $seek = 0, $tobool = 0, $tobool14 = 0, $tobool24 = 0, $tobool3 = 0, $tobool35 = 0, $tobool37 = 0;
 var $tobool41 = 0, $tobool8 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $write = 0, $wsz = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $wsz = sp + 56|0;
 $0 = HEAP8[$mode>>0]|0;
 $conv = $0 << 24 >> 24;
 $call = (_strchr(8868,$conv)|0);
 $tobool = ($call|0)==(0|0);
 if ($tobool) {
  $call1 = (___errno_location()|0);
  HEAP32[$call1>>2] = 22;
  $retval$0 = 0;
 } else {
  $call2 = (_malloc(1176)|0);
  $tobool3 = ($call2|0)==(0|0);
  if ($tobool3) {
   $retval$0 = 0;
  } else {
   (_memset(($call2|0),0,144)|0);
   $call7 = (_strchr($mode,43)|0);
   $tobool8 = ($call7|0)==(0|0);
   if ($tobool8) {
    $1 = HEAP8[$mode>>0]|0;
    $cmp = ($1<<24>>24)==(114);
    $cond = $cmp ? 8 : 4;
    HEAP32[$call2>>2] = $cond;
   }
   $call13 = (_strchr($mode,101)|0);
   $tobool14 = ($call13|0)==(0|0);
   if (!($tobool14)) {
    HEAP32[$vararg_buffer>>2] = $fd;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = 2;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = 1;
    (___syscall221(221,($vararg_buffer|0))|0);
   }
   $2 = HEAP8[$mode>>0]|0;
   $cmp19 = ($2<<24>>24)==(97);
   if ($cmp19) {
    HEAP32[$vararg_buffer3>>2] = $fd;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = 3;
    $call23 = (___syscall221(221,($vararg_buffer3|0))|0);
    $and = $call23 & 1024;
    $tobool24 = ($and|0)==(0);
    if ($tobool24) {
     $or = $call23 | 1024;
     HEAP32[$vararg_buffer7>>2] = $fd;
     $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
     HEAP32[$vararg_ptr10>>2] = 4;
     $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
     HEAP32[$vararg_ptr11>>2] = $or;
     (___syscall221(221,($vararg_buffer7|0))|0);
    }
    $3 = HEAP32[$call2>>2]|0;
    $or29 = $3 | 128;
    HEAP32[$call2>>2] = $or29;
    $5 = $or29;
   } else {
    $$pre = HEAP32[$call2>>2]|0;
    $5 = $$pre;
   }
   $fd31 = ((($call2)) + 60|0);
   HEAP32[$fd31>>2] = $fd;
   $add$ptr32 = ((($call2)) + 152|0);
   $buf = ((($call2)) + 44|0);
   HEAP32[$buf>>2] = $add$ptr32;
   $buf_size = ((($call2)) + 48|0);
   HEAP32[$buf_size>>2] = 1024;
   $4 = ((($call2)) + 75|0);
   HEAP8[$4>>0] = -1;
   $and34 = $5 & 8;
   $tobool35 = ($and34|0)==(0);
   if ($tobool35) {
    $6 = $wsz;
    HEAP32[$vararg_buffer12>>2] = $fd;
    $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
    HEAP32[$vararg_ptr15>>2] = 21523;
    $vararg_ptr16 = ((($vararg_buffer12)) + 8|0);
    HEAP32[$vararg_ptr16>>2] = $6;
    $call36 = (___syscall54(54,($vararg_buffer12|0))|0);
    $tobool37 = ($call36|0)==(0);
    if ($tobool37) {
     HEAP8[$4>>0] = 10;
    }
   }
   $read = ((($call2)) + 32|0);
   HEAP32[$read>>2] = 48;
   $write = ((($call2)) + 36|0);
   HEAP32[$write>>2] = 45;
   $seek = ((($call2)) + 40|0);
   HEAP32[$seek>>2] = 15;
   $close = ((($call2)) + 12|0);
   HEAP32[$close>>2] = 13;
   $7 = HEAP32[(10116)>>2]|0;
   $tobool41 = ($7|0)==(0);
   if ($tobool41) {
    $lock = ((($call2)) + 76|0);
    HEAP32[$lock>>2] = -1;
   }
   $call44 = (___ofl_add($call2)|0);
   $retval$0 = $call2;
  }
 }
 STACKTOP = sp;return ($retval$0|0);
}
function ___ofl_add($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $call = 0, $next = 0, $prev = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (___ofl_lock()|0);
 $0 = HEAP32[$call>>2]|0;
 $next = ((($f)) + 56|0);
 HEAP32[$next>>2] = $0;
 $1 = HEAP32[$call>>2]|0;
 $tobool = ($1|0)==(0|0);
 if (!($tobool)) {
  $prev = ((($1)) + 52|0);
  HEAP32[$prev>>2] = $f;
 }
 HEAP32[$call>>2] = $f;
 ___ofl_unlock();
 return ($f|0);
}
function ___ofl_lock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___lock((10180|0));
 return (10188|0);
}
function ___ofl_unlock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___unlock((10180|0));
 return;
}
function _fclose($f) {
 $f = $f|0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $and = 0, $call = 0, $call1 = 0, $call18 = 0, $call19 = 0, $close = 0, $cmp = 0, $cmp13 = 0, $cond = 0;
 var $getln_buf = 0, $lock = 0, $next5 = 0, $or = 0, $prev = 0, $prev11 = 0, $tobool = 0, $tobool2 = 0, $tobool20 = 0, $tobool26 = 0, $tobool7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $lock = ((($f)) + 76|0);
 $0 = HEAP32[$lock>>2]|0;
 $cmp = ($0|0)>(-1);
 if ($cmp) {
  $call = (___lockfile($f)|0);
  $cond = $call;
 } else {
  $cond = 0;
 }
 ___unlist_locked_file($f);
 $1 = HEAP32[$f>>2]|0;
 $and = $1 & 1;
 $tobool = ($and|0)!=(0);
 if (!($tobool)) {
  $call1 = (___ofl_lock()|0);
  $prev = ((($f)) + 52|0);
  $2 = HEAP32[$prev>>2]|0;
  $tobool2 = ($2|0)==(0|0);
  $3 = $2;
  $$pre = ((($f)) + 56|0);
  if (!($tobool2)) {
   $4 = HEAP32[$$pre>>2]|0;
   $next5 = ((($2)) + 56|0);
   HEAP32[$next5>>2] = $4;
  }
  $5 = HEAP32[$$pre>>2]|0;
  $tobool7 = ($5|0)==(0|0);
  $6 = $5;
  if (!($tobool7)) {
   $prev11 = ((($5)) + 52|0);
   HEAP32[$prev11>>2] = $3;
  }
  $7 = HEAP32[$call1>>2]|0;
  $cmp13 = ($7|0)==($f|0);
  if ($cmp13) {
   HEAP32[$call1>>2] = $6;
  }
  ___ofl_unlock();
 }
 $call18 = (_fflush($f)|0);
 $close = ((($f)) + 12|0);
 $8 = HEAP32[$close>>2]|0;
 $call19 = (FUNCTION_TABLE_ii[$8 & 63]($f)|0);
 $or = $call19 | $call18;
 $getln_buf = ((($f)) + 96|0);
 $9 = HEAP32[$getln_buf>>2]|0;
 $tobool20 = ($9|0)==(0|0);
 if (!($tobool20)) {
  _free($9);
 }
 if ($tobool) {
  $tobool26 = ($cond|0)==(0);
  if (!($tobool26)) {
   ___unlockfile($f);
  }
 } else {
  _free($f);
 }
 return ($or|0);
}
function _fflush($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $call = 0, $call1 = 0, $call11 = 0, $call118 = 0, $call17 = 0, $call23 = 0, $call7 = 0, $cmp = 0, $cmp15 = 0, $cmp21 = 0, $cond10 = 0, $cond20 = 0, $f$addr$0 = 0, $f$addr$019 = 0;
 var $f$addr$022 = 0, $lock = 0, $lock14 = 0, $next = 0, $or = 0, $phitmp = 0, $r$0$lcssa = 0, $r$021 = 0, $r$1 = 0, $retval$0 = 0, $tobool = 0, $tobool12 = 0, $tobool1220 = 0, $tobool25 = 0, $tobool5 = 0, $wbase = 0, $wpos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $tobool = ($f|0)==(0|0);
 do {
  if ($tobool) {
   $1 = HEAP32[499]|0;
   $tobool5 = ($1|0)==(0|0);
   if ($tobool5) {
    $cond10 = 0;
   } else {
    $2 = HEAP32[499]|0;
    $call7 = (_fflush($2)|0);
    $cond10 = $call7;
   }
   $call11 = (___ofl_lock()|0);
   $f$addr$019 = HEAP32[$call11>>2]|0;
   $tobool1220 = ($f$addr$019|0)==(0|0);
   if ($tobool1220) {
    $r$0$lcssa = $cond10;
   } else {
    $f$addr$022 = $f$addr$019;$r$021 = $cond10;
    while(1) {
     $lock14 = ((($f$addr$022)) + 76|0);
     $3 = HEAP32[$lock14>>2]|0;
     $cmp15 = ($3|0)>(-1);
     if ($cmp15) {
      $call17 = (___lockfile($f$addr$022)|0);
      $cond20 = $call17;
     } else {
      $cond20 = 0;
     }
     $wpos = ((($f$addr$022)) + 20|0);
     $4 = HEAP32[$wpos>>2]|0;
     $wbase = ((($f$addr$022)) + 28|0);
     $5 = HEAP32[$wbase>>2]|0;
     $cmp21 = ($4>>>0)>($5>>>0);
     if ($cmp21) {
      $call23 = (___fflush_unlocked($f$addr$022)|0);
      $or = $call23 | $r$021;
      $r$1 = $or;
     } else {
      $r$1 = $r$021;
     }
     $tobool25 = ($cond20|0)==(0);
     if (!($tobool25)) {
      ___unlockfile($f$addr$022);
     }
     $next = ((($f$addr$022)) + 56|0);
     $f$addr$0 = HEAP32[$next>>2]|0;
     $tobool12 = ($f$addr$0|0)==(0|0);
     if ($tobool12) {
      $r$0$lcssa = $r$1;
      break;
     } else {
      $f$addr$022 = $f$addr$0;$r$021 = $r$1;
     }
    }
   }
   ___ofl_unlock();
   $retval$0 = $r$0$lcssa;
  } else {
   $lock = ((($f)) + 76|0);
   $0 = HEAP32[$lock>>2]|0;
   $cmp = ($0|0)>(-1);
   if (!($cmp)) {
    $call118 = (___fflush_unlocked($f)|0);
    $retval$0 = $call118;
    break;
   }
   $call = (___lockfile($f)|0);
   $phitmp = ($call|0)==(0);
   $call1 = (___fflush_unlocked($f)|0);
   if ($phitmp) {
    $retval$0 = $call1;
   } else {
    ___unlockfile($f);
    $retval$0 = $call1;
   }
  }
 } while(0);
 return ($retval$0|0);
}
function ___fflush_unlocked($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cmp = 0, $cmp4 = 0, $rend = 0, $retval$0 = 0, $rpos = 0, $seek = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $tobool = 0;
 var $wbase = 0, $wend = 0, $wpos = 0, $write = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $wpos = ((($f)) + 20|0);
 $0 = HEAP32[$wpos>>2]|0;
 $wbase = ((($f)) + 28|0);
 $1 = HEAP32[$wbase>>2]|0;
 $cmp = ($0>>>0)>($1>>>0);
 if ($cmp) {
  $write = ((($f)) + 36|0);
  $2 = HEAP32[$write>>2]|0;
  (FUNCTION_TABLE_iiii[$2 & 63]($f,0,0)|0);
  $3 = HEAP32[$wpos>>2]|0;
  $tobool = ($3|0)==(0|0);
  if ($tobool) {
   $retval$0 = -1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $rpos = ((($f)) + 4|0);
  $4 = HEAP32[$rpos>>2]|0;
  $rend = ((($f)) + 8|0);
  $5 = HEAP32[$rend>>2]|0;
  $cmp4 = ($4>>>0)<($5>>>0);
  if ($cmp4) {
   $sub$ptr$lhs$cast = $4;
   $sub$ptr$rhs$cast = $5;
   $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
   $6 = ($sub$ptr$sub|0)<(0);
   $7 = $6 << 31 >> 31;
   $seek = ((($f)) + 40|0);
   $8 = HEAP32[$seek>>2]|0;
   (FUNCTION_TABLE_iiiii[$8 & 63]($f,$sub$ptr$sub,$7,1)|0);
   $9 = (getTempRet0() | 0);
  }
  $wend = ((($f)) + 16|0);
  HEAP32[$wend>>2] = 0;
  HEAP32[$wbase>>2] = 0;
  HEAP32[$wpos>>2] = 0;
  HEAP32[$rend>>2] = 0;
  HEAP32[$rpos>>2] = 0;
  $retval$0 = 0;
 }
 return ($retval$0|0);
}
function _fseek($f,$off,$whence) {
 $f = $f|0;
 $off = $off|0;
 $whence = $whence|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($off|0)<(0);
 $1 = $0 << 31 >> 31;
 $2 = (___fseeko($f,$off,$1,$whence)|0);
 return ($2|0);
}
function ___fseeko($f,$0,$1,$whence) {
 $f = $f|0;
 $0 = $0|0;
 $1 = $1|0;
 $whence = $whence|0;
 var $2 = 0, $3 = 0, $4 = 0, $call = 0, $call17 = 0, $cmp = 0, $lock = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $lock = ((($f)) + 76|0);
 $2 = HEAP32[$lock>>2]|0;
 $cmp = ($2|0)>(-1);
 if ($cmp) {
  $call = (___lockfile($f)|0);
  $phitmp = ($call|0)==(0);
  $4 = (___fseeko_unlocked($f,$0,$1,$whence)|0);
  if ($phitmp) {
   $call17 = $4;
  } else {
   ___unlockfile($f);
   $call17 = $4;
  }
 } else {
  $3 = (___fseeko_unlocked($f,$0,$1,$whence)|0);
  $call17 = $3;
 }
 return ($call17|0);
}
function ___fseeko_unlocked($f,$0,$1,$whence) {
 $f = $f|0;
 $0 = $0|0;
 $1 = $1|0;
 $whence = $whence|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $and = 0, $cmp = 0, $cmp1 = 0, $rend = 0;
 var $rend15 = 0, $retval$0 = 0, $rpos = 0, $rpos16 = 0, $seek = 0, $sub$ptr$sub = 0, $tobool = 0, $wbase = 0, $wend = 0, $wpos = 0, $write = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($whence|0)==(1);
 if ($cmp) {
  $rend = ((($f)) + 8|0);
  $2 = HEAP32[$rend>>2]|0;
  $rpos = ((($f)) + 4|0);
  $3 = HEAP32[$rpos>>2]|0;
  $sub$ptr$sub = (($2) - ($3))|0;
  $4 = ($sub$ptr$sub|0)<(0);
  $5 = $4 << 31 >> 31;
  $6 = (_i64Subtract(($0|0),($1|0),($sub$ptr$sub|0),($5|0))|0);
  $7 = (getTempRet0() | 0);
  $13 = $6;$14 = $7;
 } else {
  $13 = $0;$14 = $1;
 }
 $wpos = ((($f)) + 20|0);
 $8 = HEAP32[$wpos>>2]|0;
 $wbase = ((($f)) + 28|0);
 $9 = HEAP32[$wbase>>2]|0;
 $cmp1 = ($8>>>0)>($9>>>0);
 if ($cmp1) {
  $write = ((($f)) + 36|0);
  $10 = HEAP32[$write>>2]|0;
  (FUNCTION_TABLE_iiii[$10 & 63]($f,0,0)|0);
  $11 = HEAP32[$wpos>>2]|0;
  $tobool = ($11|0)==(0|0);
  if ($tobool) {
   $retval$0 = -1;
  } else {
   label = 5;
  }
 } else {
  label = 5;
 }
 if ((label|0) == 5) {
  $wend = ((($f)) + 16|0);
  HEAP32[$wend>>2] = 0;
  HEAP32[$wbase>>2] = 0;
  HEAP32[$wpos>>2] = 0;
  $seek = ((($f)) + 40|0);
  $12 = HEAP32[$seek>>2]|0;
  (FUNCTION_TABLE_iiiii[$12 & 63]($f,$13,$14,$whence)|0);
  $15 = (getTempRet0() | 0);
  $16 = ($15|0)<(0);
  if ($16) {
   $retval$0 = -1;
  } else {
   $rend15 = ((($f)) + 8|0);
   HEAP32[$rend15>>2] = 0;
   $rpos16 = ((($f)) + 4|0);
   HEAP32[$rpos16>>2] = 0;
   $17 = HEAP32[$f>>2]|0;
   $and = $17 & -17;
   HEAP32[$f>>2] = $and;
   $retval$0 = 0;
  }
 }
 return ($retval$0|0);
}
function _fread($destv,$size,$nmemb,$f) {
 $destv = $destv|0;
 $size = $size|0;
 $nmemb = $nmemb|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $add = 0, $add$ptr = 0, $add$ptr26 = 0, $add$ptr46 = 0, $call = 0, $call30 = 0, $call34 = 0, $cmp = 0, $cmp12 = 0, $cmp37 = 0, $cmp4 = 0, $cond = 0, $conv = 0;
 var $conv3 = 0, $dest$0 = 0, $dest$146 = 0, $div = 0, $l$0 = 0, $l$147 = 0, $lock = 0, $mode = 0, $mul = 0, $or = 0, $read = 0, $rend = 0, $retval$0 = 0, $rpos = 0, $spec$select = 0, $sub = 0, $sub$ptr$sub = 0, $sub$ptr$sub$mul = 0, $sub27 = 0, $sub43 = 0;
 var $sub45 = 0, $tobool = 0, $tobool29 = 0, $tobool2945 = 0, $tobool31 = 0, $tobool40 = 0, $tobool47 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $mul = Math_imul($nmemb, $size)|0;
 $tobool = ($size|0)==(0);
 $spec$select = $tobool ? 0 : $nmemb;
 $lock = ((($f)) + 76|0);
 $0 = HEAP32[$lock>>2]|0;
 $cmp = ($0|0)>(-1);
 if ($cmp) {
  $call = (___lockfile($f)|0);
  $cond = $call;
 } else {
  $cond = 0;
 }
 $mode = ((($f)) + 74|0);
 $1 = HEAP8[$mode>>0]|0;
 $conv = $1 << 24 >> 24;
 $sub = (($conv) + 255)|0;
 $or = $sub | $conv;
 $conv3 = $or&255;
 HEAP8[$mode>>0] = $conv3;
 $rend = ((($f)) + 8|0);
 $2 = HEAP32[$rend>>2]|0;
 $rpos = ((($f)) + 4|0);
 $3 = HEAP32[$rpos>>2]|0;
 $sub$ptr$sub = (($2) - ($3))|0;
 $cmp4 = ($sub$ptr$sub|0)>(0);
 if ($cmp4) {
  $4 = $3;
  $cmp12 = ($sub$ptr$sub>>>0)<($mul>>>0);
  $sub$ptr$sub$mul = $cmp12 ? $sub$ptr$sub : $mul;
  (_memcpy(($destv|0),($4|0),($sub$ptr$sub$mul|0))|0);
  $5 = HEAP32[$rpos>>2]|0;
  $add$ptr = (($5) + ($sub$ptr$sub$mul)|0);
  HEAP32[$rpos>>2] = $add$ptr;
  $add$ptr26 = (($destv) + ($sub$ptr$sub$mul)|0);
  $sub27 = (($mul) - ($sub$ptr$sub$mul))|0;
  $dest$0 = $add$ptr26;$l$0 = $sub27;
 } else {
  $dest$0 = $destv;$l$0 = $mul;
 }
 $tobool2945 = ($l$0|0)==(0);
 L7: do {
  if ($tobool2945) {
   label = 13;
  } else {
   $read = ((($f)) + 32|0);
   $dest$146 = $dest$0;$l$147 = $l$0;
   while(1) {
    $call30 = (___toread($f)|0);
    $tobool31 = ($call30|0)==(0);
    if (!($tobool31)) {
     break;
    }
    $6 = HEAP32[$read>>2]|0;
    $call34 = (FUNCTION_TABLE_iiii[$6 & 63]($f,$dest$146,$l$147)|0);
    $add = (($call34) + 1)|0;
    $cmp37 = ($add>>>0)<(2);
    if ($cmp37) {
     break;
    }
    $sub45 = (($l$147) - ($call34))|0;
    $add$ptr46 = (($dest$146) + ($call34)|0);
    $tobool29 = ($sub45|0)==(0);
    if ($tobool29) {
     label = 13;
     break L7;
    } else {
     $dest$146 = $add$ptr46;$l$147 = $sub45;
    }
   }
   $tobool40 = ($cond|0)==(0);
   if (!($tobool40)) {
    ___unlockfile($f);
   }
   $sub43 = (($mul) - ($l$147))|0;
   $div = (($sub43>>>0) / ($size>>>0))&-1;
   $retval$0 = $div;
  }
 } while(0);
 if ((label|0) == 13) {
  $tobool47 = ($cond|0)==(0);
  if ($tobool47) {
   $retval$0 = $spec$select;
  } else {
   ___unlockfile($f);
   $retval$0 = $spec$select;
  }
 }
 return ($retval$0|0);
}
function ___ftello_unlocked($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $and = 0, $cmp = 0, $phitmp = 0, $rend = 0, $rpos = 0, $seek = 0, $sub$ptr$sub = 0, $sub$ptr$sub6 = 0, $tobool = 0, $wbase = 0, $wbase3 = 0, $wpos = 0, $wpos2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $seek = ((($f)) + 40|0);
 $0 = HEAP32[$seek>>2]|0;
 $1 = HEAP32[$f>>2]|0;
 $and = $1 & 128;
 $tobool = ($and|0)==(0);
 if ($tobool) {
  $4 = 1;
 } else {
  $wpos = ((($f)) + 20|0);
  $2 = HEAP32[$wpos>>2]|0;
  $wbase = ((($f)) + 28|0);
  $3 = HEAP32[$wbase>>2]|0;
  $cmp = ($2>>>0)>($3>>>0);
  $phitmp = $cmp ? 2 : 1;
  $4 = $phitmp;
 }
 $5 = (FUNCTION_TABLE_iiiii[$0 & 63]($f,0,0,$4)|0);
 $6 = (getTempRet0() | 0);
 $7 = ($6|0)<(0);
 if ($7) {
  $20 = $6;$21 = $5;
 } else {
  $rend = ((($f)) + 8|0);
  $8 = HEAP32[$rend>>2]|0;
  $rpos = ((($f)) + 4|0);
  $9 = HEAP32[$rpos>>2]|0;
  $sub$ptr$sub = (($8) - ($9))|0;
  $10 = ($sub$ptr$sub|0)<(0);
  $11 = $10 << 31 >> 31;
  $12 = (_i64Subtract(($5|0),($6|0),($sub$ptr$sub|0),($11|0))|0);
  $13 = (getTempRet0() | 0);
  $wpos2 = ((($f)) + 20|0);
  $14 = HEAP32[$wpos2>>2]|0;
  $wbase3 = ((($f)) + 28|0);
  $15 = HEAP32[$wbase3>>2]|0;
  $sub$ptr$sub6 = (($14) - ($15))|0;
  $16 = ($sub$ptr$sub6|0)<(0);
  $17 = $16 << 31 >> 31;
  $18 = (_i64Add(($12|0),($13|0),($sub$ptr$sub6|0),($17|0))|0);
  $19 = (getTempRet0() | 0);
  $20 = $19;$21 = $18;
 }
 setTempRet0(($20) | 0);
 return ($21|0);
}
function ___ftello($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $call = 0, $cmp = 0, $lock = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $lock = ((($f)) + 76|0);
 $0 = HEAP32[$lock>>2]|0;
 $cmp = ($0|0)>(-1);
 if ($cmp) {
  $call = (___lockfile($f)|0);
  $phitmp = ($call|0)==(0);
  $3 = (___ftello_unlocked($f)|0);
  $4 = (getTempRet0() | 0);
  if ($phitmp) {
   $5 = $4;$6 = $3;
  } else {
   ___unlockfile($f);
   $5 = $4;$6 = $3;
  }
 } else {
  $1 = (___ftello_unlocked($f)|0);
  $2 = (getTempRet0() | 0);
  $5 = $2;$6 = $1;
 }
 setTempRet0(($5) | 0);
 return ($6|0);
}
function _ftell($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $call1 = 0, $retval$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___ftello($f)|0);
 $1 = (getTempRet0() | 0);
 $2 = ($1|0)>(0);
 $3 = ($0>>>0)>(2147483647);
 $4 = ($1|0)==(0);
 $5 = $4 & $3;
 $6 = $2 | $5;
 if ($6) {
  $call1 = (___errno_location()|0);
  HEAP32[$call1>>2] = 75;
  $retval$0 = -1;
 } else {
  $retval$0 = $0;
 }
 return ($retval$0|0);
}
function _printf($fmt,$varargs) {
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = HEAP32[498]|0;
 $call = (_vfprintf($0,$fmt,$ap)|0);
 STACKTOP = sp;return ($call|0);
}
function _malloc($bytes) {
 $bytes = $bytes|0;
 var $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i134 = 0, $$pre$i194 = 0, $$pre$i31$i = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i195Z2D = 0, $$pre$phi$i32$iZ2D = 0, $$pre$phi$iZ2D = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F$0$i$i = 0, $F104$0 = 0, $F197$0$i = 0, $F224$0$i$i = 0, $F290$0$i = 0, $I252$0$i$i = 0, $I316$0$i = 0, $I57$0$i$i = 0, $K105$010$i$i = 0;
 var $K305$08$i$i = 0, $K373$015$i = 0, $R$1$i = 0, $R$1$i$be = 0, $R$1$i$i = 0, $R$1$i$i$be = 0, $R$1$i$i$ph = 0, $R$1$i$ph = 0, $R$1$i183 = 0, $R$1$i183$be = 0, $R$1$i183$ph = 0, $R$3$i = 0, $R$3$i$i = 0, $R$3$i188 = 0, $RP$1$i = 0, $RP$1$i$be = 0, $RP$1$i$i = 0, $RP$1$i$i$be = 0, $RP$1$i$i$ph = 0, $RP$1$i$ph = 0;
 var $RP$1$i182 = 0, $RP$1$i182$be = 0, $RP$1$i182$ph = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i34$i = 0, $T$014$i = 0, $T$07$i$i = 0, $T$09$i$i = 0, $add$i = 0, $add$i$i = 0, $add$i135 = 0, $add$i155 = 0, $add$ptr = 0, $add$ptr$i = 0, $add$ptr$i$i = 0, $add$ptr$i$i$i = 0, $add$ptr$i141 = 0, $add$ptr$i174 = 0, $add$ptr$i2$i$i = 0;
 var $add$ptr$i35$i = 0, $add$ptr$i43$i = 0, $add$ptr$i57$i = 0, $add$ptr14$i$i = 0, $add$ptr15$i$i = 0, $add$ptr16$i$i = 0, $add$ptr166 = 0, $add$ptr169 = 0, $add$ptr17$i$i = 0, $add$ptr178 = 0, $add$ptr181$i = 0, $add$ptr182 = 0, $add$ptr189$i = 0, $add$ptr190$i = 0, $add$ptr193 = 0, $add$ptr199 = 0, $add$ptr2$i$i = 0, $add$ptr205$i$i = 0, $add$ptr212$i$i = 0, $add$ptr225$i = 0;
 var $add$ptr227$i = 0, $add$ptr24$i$i = 0, $add$ptr262$i = 0, $add$ptr269$i = 0, $add$ptr273$i = 0, $add$ptr282$i = 0, $add$ptr3$i$i = 0, $add$ptr30$i$i = 0, $add$ptr369$i$i = 0, $add$ptr4$i$i = 0, $add$ptr4$i$i$i = 0, $add$ptr4$i41$i = 0, $add$ptr4$i49$i = 0, $add$ptr441$i = 0, $add$ptr5$i$i = 0, $add$ptr6$i$i = 0, $add$ptr6$i$i$i = 0, $add$ptr6$i53$i = 0, $add$ptr7$i$i = 0, $add$ptr81$i$i = 0;
 var $add$ptr95 = 0, $add$ptr98 = 0, $add10$i = 0, $add101$i = 0, $add110$i = 0, $add13$i = 0, $add14$i = 0, $add140$i = 0, $add144 = 0, $add150$i = 0, $add17$i = 0, $add17$i158 = 0, $add177$i = 0, $add18$i = 0, $add19$i = 0, $add2 = 0, $add20$i = 0, $add206$i$i = 0, $add212$i = 0, $add215$i = 0;
 var $add22$i = 0, $add246$i = 0, $add26$i$i = 0, $add268$i = 0, $add269$i$i = 0, $add274$i$i = 0, $add278$i$i = 0, $add280$i$i = 0, $add283$i$i = 0, $add337$i = 0, $add342$i = 0, $add346$i = 0, $add348$i = 0, $add351$i = 0, $add46$i = 0, $add50 = 0, $add51$i = 0, $add54 = 0, $add54$i = 0, $add58 = 0;
 var $add62 = 0, $add64 = 0, $add74$i$i = 0, $add77$i = 0, $add78$i = 0, $add79$i$i = 0, $add8 = 0, $add82$i = 0, $add83$i$i = 0, $add85$i$i = 0, $add86$i = 0, $add88$i$i = 0, $add9$i = 0, $add90$i = 0, $add92$i = 0, $and = 0, $and$i = 0, $and$i$i = 0, $and$i$i$i = 0, $and$i14$i = 0;
 var $and$i152 = 0, $and$i36$i = 0, $and$i44$i = 0, $and100$i = 0, $and103$i = 0, $and104$i = 0, $and106 = 0, $and11$i = 0, $and119$i$i = 0, $and1197$i$i = 0, $and12$i = 0, $and13$i = 0, $and13$i$i = 0, $and133$i$i = 0, $and14 = 0, $and145 = 0, $and17$i = 0, $and194$i = 0, $and194$i191 = 0, $and199$i = 0;
 var $and209$i$i = 0, $and21$i = 0, $and21$i159 = 0, $and227$i$i = 0, $and236$i = 0, $and264$i$i = 0, $and268$i$i = 0, $and273$i$i = 0, $and282$i$i = 0, $and29$i = 0, $and292$i = 0, $and295$i$i = 0, $and3$i = 0, $and3$i$i = 0, $and3$i$i$i = 0, $and3$i39$i = 0, $and3$i47$i = 0, $and30$i = 0, $and318$i$i = 0, $and3185$i$i = 0;
 var $and32$i = 0, $and32$i$i = 0, $and33$i$i = 0, $and331$i = 0, $and336$i = 0, $and341$i = 0, $and350$i = 0, $and363$i = 0, $and37$i$i = 0, $and387$i = 0, $and38712$i = 0, $and4 = 0, $and40$i$i = 0, $and41 = 0, $and42$i = 0, $and43 = 0, $and46 = 0, $and49 = 0, $and49$i = 0, $and49$i$i = 0;
 var $and53 = 0, $and57 = 0, $and6$i = 0, $and6$i$i = 0, $and6$i13$i = 0, $and6$i18$i = 0, $and61 = 0, $and64$i = 0, $and68$i = 0, $and69$i$i = 0, $and7 = 0, $and73$i = 0, $and73$i$i = 0, $and74 = 0, $and77$i = 0, $and78$i$i = 0, $and8$i = 0, $and80$i = 0, $and81$i = 0, $and85$i = 0;
 var $and87$i$i = 0, $and89$i = 0, $and9$i = 0, $and96$i$i = 0, $arrayidx = 0, $arrayidx$i = 0, $arrayidx$i$i = 0, $arrayidx$i160 = 0, $arrayidx103 = 0, $arrayidx103$i$i = 0, $arrayidx106$i = 0, $arrayidx107$i$i = 0, $arrayidx113$i = 0, $arrayidx113$i173 = 0, $arrayidx121$i = 0, $arrayidx121$i$sink = 0, $arrayidx123$i$i = 0, $arrayidx126$i$i = 0, $arrayidx137$i = 0, $arrayidx143$i$i = 0;
 var $arrayidx148$i = 0, $arrayidx151$i = 0, $arrayidx151$i$i = 0, $arrayidx151$i$i$sink = 0, $arrayidx154$i = 0, $arrayidx155$i = 0, $arrayidx161$i = 0, $arrayidx165$i = 0, $arrayidx165$i185 = 0, $arrayidx178$i$i = 0, $arrayidx184$i = 0, $arrayidx184$i$i = 0, $arrayidx195$i$i = 0, $arrayidx196$i = 0, $arrayidx204$i = 0, $arrayidx212$i = 0, $arrayidx212$i$sink = 0, $arrayidx223$i$i = 0, $arrayidx228$i = 0, $arrayidx23$i = 0;
 var $arrayidx239$i = 0, $arrayidx245$i = 0, $arrayidx256$i = 0, $arrayidx27$i = 0, $arrayidx287$i$i = 0, $arrayidx289$i = 0, $arrayidx290$i$i = 0, $arrayidx325$i$i = 0, $arrayidx355$i = 0, $arrayidx358$i = 0, $arrayidx394$i = 0, $arrayidx40$i = 0, $arrayidx44$i = 0, $arrayidx61$i = 0, $arrayidx65$i = 0, $arrayidx66 = 0, $arrayidx71$i = 0, $arrayidx75$i = 0, $arrayidx91$i$i = 0, $arrayidx92$i$i = 0;
 var $arrayidx94$i = 0, $arrayidx94$i170 = 0, $arrayidx96$i$i = 0, $bk$i = 0, $bk$i$i = 0, $bk$i176 = 0, $bk$i26$i = 0, $bk102$i$i = 0, $bk122 = 0, $bk124 = 0, $bk139$i$i = 0, $bk145$i = 0, $bk158$i$i = 0, $bk161$i$i = 0, $bk18 = 0, $bk218$i = 0, $bk220$i = 0, $bk246$i$i = 0, $bk248$i$i = 0, $bk302$i$i = 0;
 var $bk311$i = 0, $bk313$i = 0, $bk338$i$i = 0, $bk357$i$i = 0, $bk360$i$i = 0, $bk370$i = 0, $bk407$i = 0, $bk429$i = 0, $bk432$i = 0, $bk55$i$i = 0, $bk56$i = 0, $bk67$i$i = 0, $bk74$i$i = 0, $bk85 = 0, $bk91$i$i = 0, $br$2$ph$i = 0, $call107$i = 0, $call131$i = 0, $call132$i = 0, $call275$i = 0;
 var $call37$i = 0, $call68$i = 0, $call83$i = 0, $child$i$i = 0, $child166$i$i = 0, $child289$i$i = 0, $child357$i = 0, $cmp = 0, $cmp$i = 0, $cmp$i$i$i = 0, $cmp$i12$i = 0, $cmp$i133 = 0, $cmp$i149 = 0, $cmp$i15$i = 0, $cmp$i3$i$i = 0, $cmp$i37$i = 0, $cmp$i45$i = 0, $cmp$i55$i = 0, $cmp1 = 0, $cmp1$i = 0;
 var $cmp10 = 0, $cmp100$i$i = 0, $cmp102$i = 0, $cmp104$i$i = 0, $cmp105$i = 0, $cmp106$i$i = 0, $cmp107$i = 0, $cmp108$i = 0, $cmp108$i$i = 0, $cmp114$i = 0, $cmp116$i = 0, $cmp118$i = 0, $cmp119$i = 0, $cmp12$i = 0, $cmp120$i$i = 0, $cmp120$i28$i = 0, $cmp1208$i$i = 0, $cmp123$i = 0, $cmp124$i$i = 0, $cmp126$i = 0;
 var $cmp127$i = 0, $cmp128 = 0, $cmp128$i = 0, $cmp128$i$i = 0, $cmp133$i = 0, $cmp135$i = 0, $cmp137$i = 0, $cmp138$i = 0, $cmp139 = 0, $cmp141$i = 0, $cmp144$i$i = 0, $cmp146 = 0, $cmp147$i = 0, $cmp14799$i = 0, $cmp15$i = 0, $cmp151$i = 0, $cmp152$i = 0, $cmp155$i = 0, $cmp156 = 0, $cmp156$i = 0;
 var $cmp156$i$i = 0, $cmp157$i = 0, $cmp159$i = 0, $cmp162 = 0, $cmp162$i = 0, $cmp162$i184 = 0, $cmp166$i = 0, $cmp168$i$i = 0, $cmp174$i = 0, $cmp180$i = 0, $cmp185$i = 0, $cmp185$i$i = 0, $cmp186 = 0, $cmp186$i = 0, $cmp19$i = 0, $cmp190$i = 0, $cmp191$i = 0, $cmp2$i$i = 0, $cmp2$i$i$i = 0, $cmp20$i$i = 0;
 var $cmp203$i = 0, $cmp205$i = 0, $cmp209$i = 0, $cmp21$i = 0, $cmp215$i$i = 0, $cmp217$i = 0, $cmp218$i = 0, $cmp224$i = 0, $cmp228$i = 0, $cmp229$i = 0, $cmp24$i = 0, $cmp24$i$i = 0, $cmp246$i = 0, $cmp254$i$i = 0, $cmp257$i = 0, $cmp258$i$i = 0, $cmp26$i = 0, $cmp265$i = 0, $cmp27$i$i = 0, $cmp28$i = 0;
 var $cmp28$i$i = 0, $cmp284$i = 0, $cmp29 = 0, $cmp3$i$i = 0, $cmp306$i$i = 0, $cmp31 = 0, $cmp319$i = 0, $cmp319$i$i = 0, $cmp3196$i$i = 0, $cmp32$i = 0, $cmp32$i138 = 0, $cmp323$i = 0, $cmp327$i$i = 0, $cmp34$i = 0, $cmp34$i$i = 0, $cmp35$i = 0, $cmp36$i = 0, $cmp36$i$i = 0, $cmp374$i = 0, $cmp38$i = 0;
 var $cmp38$i$i = 0, $cmp388$i = 0, $cmp38813$i = 0, $cmp396$i = 0, $cmp40$i = 0, $cmp43$i = 0, $cmp45$i = 0, $cmp46$i = 0, $cmp46$i$i = 0, $cmp49$i = 0, $cmp5 = 0, $cmp55$i = 0, $cmp55$i166 = 0, $cmp57$i = 0, $cmp57$i167 = 0, $cmp59$i$i = 0, $cmp60$i = 0, $cmp62$i = 0, $cmp63$i = 0, $cmp63$i$i = 0;
 var $cmp65$i = 0, $cmp66$i = 0, $cmp66$i140 = 0, $cmp69$i = 0, $cmp7$i$i = 0, $cmp70 = 0, $cmp72$i = 0, $cmp75$i$i = 0, $cmp76$i = 0, $cmp81$i = 0, $cmp85$i = 0, $cmp89$i = 0, $cmp9$i$i = 0, $cmp90$i = 0, $cmp91$i = 0, $cmp93$i = 0, $cmp95$i = 0, $cmp96$i = 0, $cmp97$i = 0, $cmp97$i$i = 0;
 var $cmp9716$i = 0, $cmp99 = 0, $cond = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i$i = 0, $cond$i17$i = 0, $cond$i40$i = 0, $cond$i48$i = 0, $cond1$i$i = 0, $cond115$i = 0, $cond115$i$i = 0, $cond13$i$i = 0, $cond15$i$i = 0, $cond2$i = 0, $cond3$i = 0, $cond315$i$i = 0, $cond383$i = 0, $cond4$i = 0, $fd$i = 0;
 var $fd$i$i = 0, $fd$i177 = 0, $fd103$i$i = 0, $fd123 = 0, $fd140$i$i = 0, $fd146$i = 0, $fd148$i$i = 0, $fd160$i$i = 0, $fd219$i = 0, $fd247$i$i = 0, $fd303$i$i = 0, $fd312$i = 0, $fd339$i$i = 0, $fd344$i$i = 0, $fd359$i$i = 0, $fd371$i = 0, $fd408$i = 0, $fd416$i = 0, $fd431$i = 0, $fd54$i$i = 0;
 var $fd57$i = 0, $fd68$i$i = 0, $fd69 = 0, $fd78$i$i = 0, $fd9 = 0, $fd92$i$i = 0, $head = 0, $head$i = 0, $head$i$i = 0, $head$i$i$i = 0, $head$i164 = 0, $head$i22$i = 0, $head$i42$i = 0, $head$i52$i = 0, $head118$i$i = 0, $head1186$i$i = 0, $head168 = 0, $head173 = 0, $head177 = 0, $head179 = 0;
 var $head179$i = 0, $head182$i = 0, $head187$i = 0, $head189$i = 0, $head195 = 0, $head198 = 0, $head208$i$i = 0, $head211$i$i = 0, $head23$i$i = 0, $head25 = 0, $head26$i$i = 0, $head265$i = 0, $head268$i = 0, $head271$i = 0, $head274$i = 0, $head279$i = 0, $head281$i = 0, $head29$i = 0, $head29$i$i = 0, $head317$i$i = 0;
 var $head3174$i$i = 0, $head32$i$i = 0, $head34$i$i = 0, $head386$i = 0, $head38611$i = 0, $head7$i$i = 0, $head7$i$i$i = 0, $head7$i54$i = 0, $head94 = 0, $head97 = 0, $head99$i = 0, $idx$0$i = 0, $index$i = 0, $index$i$i = 0, $index$i189 = 0, $index$i29$i = 0, $index288$i$i = 0, $index356$i = 0, $magic$i$i = 0, $nb$0 = 0;
 var $neg = 0, $neg$i = 0, $neg$i$i = 0, $neg$i137 = 0, $neg$i190 = 0, $neg103$i = 0, $neg13 = 0, $neg132$i$i = 0, $neg48$i = 0, $neg73 = 0, $next$i = 0, $next$i$i = 0, $next$i$i$i = 0, $next231$i = 0, $not$cmp141$i = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0, $or$cond$i168 = 0, $or$cond1$i = 0, $or$cond1$i165 = 0;
 var $or$cond11$i = 0, $or$cond2$i = 0, $or$cond4$i = 0, $or$cond5$i = 0, $or$cond7$i = 0, $or$cond8$i = 0, $or$cond8$not$i = 0, $or$cond97$i = 0, $or$cond98$i = 0, $or$i = 0, $or$i$i = 0, $or$i$i$i = 0, $or$i169 = 0, $or$i51$i = 0, $or101$i$i = 0, $or110 = 0, $or167 = 0, $or172 = 0, $or176 = 0, $or178$i = 0;
 var $or180 = 0, $or183$i = 0, $or186$i = 0, $or188$i = 0, $or19$i$i = 0, $or194 = 0, $or197 = 0, $or204$i = 0, $or210$i$i = 0, $or22$i$i = 0, $or23 = 0, $or232$i$i = 0, $or26 = 0, $or264$i = 0, $or267$i = 0, $or270$i = 0, $or275$i = 0, $or278$i = 0, $or28$i$i = 0, $or280$i = 0;
 var $or297$i = 0, $or300$i$i = 0, $or33$i$i = 0, $or368$i = 0, $or40 = 0, $or44$i$i = 0, $or93 = 0, $or96 = 0, $parent$i = 0, $parent$i$i = 0, $parent$i175 = 0, $parent$i27$i = 0, $parent135$i = 0, $parent138$i$i = 0, $parent149$i = 0, $parent162$i$i = 0, $parent165$i$i = 0, $parent166$i = 0, $parent179$i$i = 0, $parent196$i$i = 0;
 var $parent226$i = 0, $parent240$i = 0, $parent257$i = 0, $parent301$i$i = 0, $parent337$i$i = 0, $parent361$i$i = 0, $parent369$i = 0, $parent406$i = 0, $parent433$i = 0, $qsize$0$i$i = 0, $retval$0 = 0, $rsize$0$i = 0, $rsize$0$i162 = 0, $rsize$1$i = 0, $rsize$3$i = 0, $rsize$4$lcssa$i = 0, $rsize$418$i = 0, $rsize$418$i$ph = 0, $rst$0$i = 0, $rst$1$i = 0;
 var $sflags193$i = 0, $sflags235$i = 0, $shl = 0, $shl$i = 0, $shl$i$i = 0, $shl$i153 = 0, $shl102 = 0, $shl105 = 0, $shl116$i$i = 0, $shl12 = 0, $shl127$i$i = 0, $shl131$i$i = 0, $shl15$i = 0, $shl18$i = 0, $shl192$i = 0, $shl195$i = 0, $shl198$i = 0, $shl22 = 0, $shl222$i$i = 0, $shl226$i$i = 0;
 var $shl265$i$i = 0, $shl270$i$i = 0, $shl276$i$i = 0, $shl279$i$i = 0, $shl288$i = 0, $shl291$i = 0, $shl294$i$i = 0, $shl31$i = 0, $shl316$i$i = 0, $shl326$i$i = 0, $shl333$i = 0, $shl338$i = 0, $shl344$i = 0, $shl347$i = 0, $shl35 = 0, $shl362$i = 0, $shl37 = 0, $shl384$i = 0, $shl39$i$i = 0, $shl395$i = 0;
 var $shl48$i$i = 0, $shl60$i = 0, $shl65 = 0, $shl70$i$i = 0, $shl72 = 0, $shl75$i$i = 0, $shl81$i$i = 0, $shl84$i$i = 0, $shl9$i = 0, $shl90 = 0, $shl95$i$i = 0, $shr = 0, $shr$i = 0, $shr$i$i = 0, $shr$i148 = 0, $shr$i25$i = 0, $shr101 = 0, $shr11$i = 0, $shr11$i156 = 0, $shr110$i$i = 0;
 var $shr12$i = 0, $shr124$i$i = 0, $shr15$i = 0, $shr16$i = 0, $shr16$i157 = 0, $shr19$i = 0, $shr194$i = 0, $shr20$i = 0, $shr214$i$i = 0, $shr253$i$i = 0, $shr263$i$i = 0, $shr267$i$i = 0, $shr27$i = 0, $shr272$i$i = 0, $shr277$i$i = 0, $shr281$i$i = 0, $shr283$i = 0, $shr3 = 0, $shr310$i$i = 0, $shr318$i = 0;
 var $shr323$i$i = 0, $shr330$i = 0, $shr335$i = 0, $shr340$i = 0, $shr345$i = 0, $shr349$i = 0, $shr378$i = 0, $shr392$i = 0, $shr4$i = 0, $shr42$i = 0, $shr45 = 0, $shr47 = 0, $shr48 = 0, $shr5$i = 0, $shr5$i151 = 0, $shr51 = 0, $shr52 = 0, $shr55 = 0, $shr56 = 0, $shr58$i$i = 0;
 var $shr59 = 0, $shr60 = 0, $shr63 = 0, $shr68$i$i = 0, $shr7$i = 0, $shr7$i154 = 0, $shr72$i = 0, $shr72$i$i = 0, $shr75$i = 0, $shr76$i = 0, $shr77$i$i = 0, $shr79$i = 0, $shr8$i = 0, $shr80$i = 0, $shr82$i$i = 0, $shr83$i = 0, $shr84$i = 0, $shr86$i$i = 0, $shr87$i = 0, $shr88$i = 0;
 var $shr91$i = 0, $size$i$i = 0, $size$i$i$i = 0, $size$i$i$le = 0, $size188$i = 0, $size188$i$le = 0, $size245$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$0112$i = 0, $sp$1111$i = 0, $spec$select$i = 0, $spec$select$i171 = 0, $spec$select1$i = 0, $spec$select2$i = 0, $spec$select5$i = 0, $spec$select9$i = 0, $spec$select96$i = 0, $ssize$2$ph$i = 0;
 var $sub = 0, $sub$i = 0, $sub$i$i = 0, $sub$i$i$i = 0, $sub$i136 = 0, $sub$i147 = 0, $sub$i16$i = 0, $sub$i38$i = 0, $sub$i46$i = 0, $sub$ptr$lhs$cast$i = 0, $sub$ptr$lhs$cast$i$i = 0, $sub$ptr$lhs$cast$i19$i = 0, $sub$ptr$rhs$cast$i = 0, $sub$ptr$rhs$cast$i$i = 0, $sub$ptr$rhs$cast$i20$i = 0, $sub$ptr$sub$i = 0, $sub$ptr$sub$i$i = 0, $sub$ptr$sub$i21$i = 0, $sub10$i = 0, $sub101$i = 0;
 var $sub112$i = 0, $sub113$i$i = 0, $sub118$i = 0, $sub12$i$i = 0, $sub14$i = 0, $sub16$i$i = 0, $sub160 = 0, $sub172$i = 0, $sub18$i$i = 0, $sub190 = 0, $sub2$i = 0, $sub22$i = 0, $sub260$i = 0, $sub262$i$i = 0, $sub266$i$i = 0, $sub271$i$i = 0, $sub275$i$i = 0, $sub30$i = 0, $sub31$i = 0, $sub313$i$i = 0;
 var $sub329$i = 0, $sub33$i = 0, $sub334$i = 0, $sub339$i = 0, $sub343$i = 0, $sub381$i = 0, $sub4$i = 0, $sub41$i = 0, $sub42 = 0, $sub44 = 0, $sub5$i$i = 0, $sub5$i$i$i = 0, $sub5$i50$i = 0, $sub50$i = 0, $sub6$i = 0, $sub63$i = 0, $sub67$i = 0, $sub67$i$i = 0, $sub70$i = 0, $sub71$i$i = 0;
 var $sub76$i$i = 0, $sub80$i$i = 0, $sub91 = 0, $sub99$i = 0, $t$0$i = 0, $t$0$i161 = 0, $t$2$i = 0, $t$4$i = 0, $t$517$i = 0, $t$517$i$ph = 0, $tbase$795$i = 0, $tobool$i$i = 0, $tobool107 = 0, $tobool195$i = 0, $tobool200$i = 0, $tobool228$i$i = 0, $tobool237$i = 0, $tobool293$i = 0, $tobool296$i$i = 0, $tobool30$i = 0;
 var $tobool364$i = 0, $tobool97$i$i = 0, $tsize$2647482$i = 0, $tsize$4$i = 0, $tsize$794$i = 0, $v$0$i = 0, $v$0$i163 = 0, $v$1$i = 0, $v$3$i = 0, $v$3$i204 = 0, $v$4$lcssa$i = 0, $v$419$i = 0, $v$419$i$ph = 0, $xor$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $magic$i$i = sp;
 $cmp = ($bytes>>>0)<(245);
 do {
  if ($cmp) {
   $cmp1 = ($bytes>>>0)<(11);
   $add2 = (($bytes) + 11)|0;
   $and = $add2 & -8;
   $cond = $cmp1 ? 16 : $and;
   $shr = $cond >>> 3;
   $0 = HEAP32[2548]|0;
   $shr3 = $0 >>> $shr;
   $and4 = $shr3 & 3;
   $cmp5 = ($and4|0)==(0);
   if (!($cmp5)) {
    $neg = $shr3 & 1;
    $and7 = $neg ^ 1;
    $add8 = (($and7) + ($shr))|0;
    $shl = $add8 << 1;
    $arrayidx = (10232 + ($shl<<2)|0);
    $1 = ((($arrayidx)) + 8|0);
    $2 = HEAP32[$1>>2]|0;
    $fd9 = ((($2)) + 8|0);
    $3 = HEAP32[$fd9>>2]|0;
    $cmp10 = ($3|0)==($arrayidx|0);
    if ($cmp10) {
     $shl12 = 1 << $add8;
     $neg13 = $shl12 ^ -1;
     $and14 = $0 & $neg13;
     HEAP32[2548] = $and14;
    } else {
     $bk18 = ((($3)) + 12|0);
     HEAP32[$bk18>>2] = $arrayidx;
     HEAP32[$1>>2] = $3;
    }
    $shl22 = $add8 << 3;
    $or23 = $shl22 | 3;
    $head = ((($2)) + 4|0);
    HEAP32[$head>>2] = $or23;
    $add$ptr = (($2) + ($shl22)|0);
    $head25 = ((($add$ptr)) + 4|0);
    $4 = HEAP32[$head25>>2]|0;
    $or26 = $4 | 1;
    HEAP32[$head25>>2] = $or26;
    $retval$0 = $fd9;
    STACKTOP = sp;return ($retval$0|0);
   }
   $5 = HEAP32[(10200)>>2]|0;
   $cmp29 = ($cond>>>0)>($5>>>0);
   if ($cmp29) {
    $cmp31 = ($shr3|0)==(0);
    if (!($cmp31)) {
     $shl35 = $shr3 << $shr;
     $shl37 = 2 << $shr;
     $sub = (0 - ($shl37))|0;
     $or40 = $shl37 | $sub;
     $and41 = $shl35 & $or40;
     $sub42 = (0 - ($and41))|0;
     $and43 = $and41 & $sub42;
     $sub44 = (($and43) + -1)|0;
     $shr45 = $sub44 >>> 12;
     $and46 = $shr45 & 16;
     $shr47 = $sub44 >>> $and46;
     $shr48 = $shr47 >>> 5;
     $and49 = $shr48 & 8;
     $add50 = $and49 | $and46;
     $shr51 = $shr47 >>> $and49;
     $shr52 = $shr51 >>> 2;
     $and53 = $shr52 & 4;
     $add54 = $add50 | $and53;
     $shr55 = $shr51 >>> $and53;
     $shr56 = $shr55 >>> 1;
     $and57 = $shr56 & 2;
     $add58 = $add54 | $and57;
     $shr59 = $shr55 >>> $and57;
     $shr60 = $shr59 >>> 1;
     $and61 = $shr60 & 1;
     $add62 = $add58 | $and61;
     $shr63 = $shr59 >>> $and61;
     $add64 = (($add62) + ($shr63))|0;
     $shl65 = $add64 << 1;
     $arrayidx66 = (10232 + ($shl65<<2)|0);
     $6 = ((($arrayidx66)) + 8|0);
     $7 = HEAP32[$6>>2]|0;
     $fd69 = ((($7)) + 8|0);
     $8 = HEAP32[$fd69>>2]|0;
     $cmp70 = ($8|0)==($arrayidx66|0);
     if ($cmp70) {
      $shl72 = 1 << $add64;
      $neg73 = $shl72 ^ -1;
      $and74 = $0 & $neg73;
      HEAP32[2548] = $and74;
      $10 = $and74;
     } else {
      $bk85 = ((($8)) + 12|0);
      HEAP32[$bk85>>2] = $arrayidx66;
      HEAP32[$6>>2] = $8;
      $10 = $0;
     }
     $shl90 = $add64 << 3;
     $sub91 = (($shl90) - ($cond))|0;
     $or93 = $cond | 3;
     $head94 = ((($7)) + 4|0);
     HEAP32[$head94>>2] = $or93;
     $add$ptr95 = (($7) + ($cond)|0);
     $or96 = $sub91 | 1;
     $head97 = ((($add$ptr95)) + 4|0);
     HEAP32[$head97>>2] = $or96;
     $add$ptr98 = (($7) + ($shl90)|0);
     HEAP32[$add$ptr98>>2] = $sub91;
     $cmp99 = ($5|0)==(0);
     if (!($cmp99)) {
      $9 = HEAP32[(10212)>>2]|0;
      $shr101 = $5 >>> 3;
      $shl102 = $shr101 << 1;
      $arrayidx103 = (10232 + ($shl102<<2)|0);
      $shl105 = 1 << $shr101;
      $and106 = $10 & $shl105;
      $tobool107 = ($and106|0)==(0);
      if ($tobool107) {
       $or110 = $10 | $shl105;
       HEAP32[2548] = $or110;
       $$pre = ((($arrayidx103)) + 8|0);
       $$pre$phiZ2D = $$pre;$F104$0 = $arrayidx103;
      } else {
       $11 = ((($arrayidx103)) + 8|0);
       $12 = HEAP32[$11>>2]|0;
       $$pre$phiZ2D = $11;$F104$0 = $12;
      }
      HEAP32[$$pre$phiZ2D>>2] = $9;
      $bk122 = ((($F104$0)) + 12|0);
      HEAP32[$bk122>>2] = $9;
      $fd123 = ((($9)) + 8|0);
      HEAP32[$fd123>>2] = $F104$0;
      $bk124 = ((($9)) + 12|0);
      HEAP32[$bk124>>2] = $arrayidx103;
     }
     HEAP32[(10200)>>2] = $sub91;
     HEAP32[(10212)>>2] = $add$ptr95;
     $retval$0 = $fd69;
     STACKTOP = sp;return ($retval$0|0);
    }
    $13 = HEAP32[(10196)>>2]|0;
    $cmp128 = ($13|0)==(0);
    if ($cmp128) {
     $nb$0 = $cond;
    } else {
     $sub$i = (0 - ($13))|0;
     $and$i = $13 & $sub$i;
     $sub2$i = (($and$i) + -1)|0;
     $shr$i = $sub2$i >>> 12;
     $and3$i = $shr$i & 16;
     $shr4$i = $sub2$i >>> $and3$i;
     $shr5$i = $shr4$i >>> 5;
     $and6$i = $shr5$i & 8;
     $add$i = $and6$i | $and3$i;
     $shr7$i = $shr4$i >>> $and6$i;
     $shr8$i = $shr7$i >>> 2;
     $and9$i = $shr8$i & 4;
     $add10$i = $add$i | $and9$i;
     $shr11$i = $shr7$i >>> $and9$i;
     $shr12$i = $shr11$i >>> 1;
     $and13$i = $shr12$i & 2;
     $add14$i = $add10$i | $and13$i;
     $shr15$i = $shr11$i >>> $and13$i;
     $shr16$i = $shr15$i >>> 1;
     $and17$i = $shr16$i & 1;
     $add18$i = $add14$i | $and17$i;
     $shr19$i = $shr15$i >>> $and17$i;
     $add20$i = (($add18$i) + ($shr19$i))|0;
     $arrayidx$i = (10496 + ($add20$i<<2)|0);
     $14 = HEAP32[$arrayidx$i>>2]|0;
     $head$i = ((($14)) + 4|0);
     $15 = HEAP32[$head$i>>2]|0;
     $and21$i = $15 & -8;
     $sub22$i = (($and21$i) - ($cond))|0;
     $rsize$0$i = $sub22$i;$t$0$i = $14;$v$0$i = $14;
     while(1) {
      $arrayidx23$i = ((($t$0$i)) + 16|0);
      $16 = HEAP32[$arrayidx23$i>>2]|0;
      $cmp$i = ($16|0)==(0|0);
      if ($cmp$i) {
       $arrayidx27$i = ((($t$0$i)) + 20|0);
       $17 = HEAP32[$arrayidx27$i>>2]|0;
       $cmp28$i = ($17|0)==(0|0);
       if ($cmp28$i) {
        break;
       } else {
        $cond4$i = $17;
       }
      } else {
       $cond4$i = $16;
      }
      $head29$i = ((($cond4$i)) + 4|0);
      $18 = HEAP32[$head29$i>>2]|0;
      $and30$i = $18 & -8;
      $sub31$i = (($and30$i) - ($cond))|0;
      $cmp32$i = ($sub31$i>>>0)<($rsize$0$i>>>0);
      $spec$select$i = $cmp32$i ? $sub31$i : $rsize$0$i;
      $spec$select1$i = $cmp32$i ? $cond4$i : $v$0$i;
      $rsize$0$i = $spec$select$i;$t$0$i = $cond4$i;$v$0$i = $spec$select1$i;
     }
     $add$ptr$i = (($v$0$i) + ($cond)|0);
     $cmp35$i = ($add$ptr$i>>>0)>($v$0$i>>>0);
     if ($cmp35$i) {
      $parent$i = ((($v$0$i)) + 24|0);
      $19 = HEAP32[$parent$i>>2]|0;
      $bk$i = ((($v$0$i)) + 12|0);
      $20 = HEAP32[$bk$i>>2]|0;
      $cmp40$i = ($20|0)==($v$0$i|0);
      do {
       if ($cmp40$i) {
        $arrayidx61$i = ((($v$0$i)) + 20|0);
        $22 = HEAP32[$arrayidx61$i>>2]|0;
        $cmp62$i = ($22|0)==(0|0);
        if ($cmp62$i) {
         $arrayidx65$i = ((($v$0$i)) + 16|0);
         $23 = HEAP32[$arrayidx65$i>>2]|0;
         $cmp66$i = ($23|0)==(0|0);
         if ($cmp66$i) {
          $R$3$i = 0;
          break;
         } else {
          $R$1$i$ph = $23;$RP$1$i$ph = $arrayidx65$i;
         }
        } else {
         $R$1$i$ph = $22;$RP$1$i$ph = $arrayidx61$i;
        }
        $R$1$i = $R$1$i$ph;$RP$1$i = $RP$1$i$ph;
        while(1) {
         $arrayidx71$i = ((($R$1$i)) + 20|0);
         $24 = HEAP32[$arrayidx71$i>>2]|0;
         $cmp72$i = ($24|0)==(0|0);
         if ($cmp72$i) {
          $arrayidx75$i = ((($R$1$i)) + 16|0);
          $25 = HEAP32[$arrayidx75$i>>2]|0;
          $cmp76$i = ($25|0)==(0|0);
          if ($cmp76$i) {
           break;
          } else {
           $R$1$i$be = $25;$RP$1$i$be = $arrayidx75$i;
          }
         } else {
          $R$1$i$be = $24;$RP$1$i$be = $arrayidx71$i;
         }
         $R$1$i = $R$1$i$be;$RP$1$i = $RP$1$i$be;
        }
        HEAP32[$RP$1$i>>2] = 0;
        $R$3$i = $R$1$i;
       } else {
        $fd$i = ((($v$0$i)) + 8|0);
        $21 = HEAP32[$fd$i>>2]|0;
        $bk56$i = ((($21)) + 12|0);
        HEAP32[$bk56$i>>2] = $20;
        $fd57$i = ((($20)) + 8|0);
        HEAP32[$fd57$i>>2] = $21;
        $R$3$i = $20;
       }
      } while(0);
      $cmp90$i = ($19|0)==(0|0);
      do {
       if (!($cmp90$i)) {
        $index$i = ((($v$0$i)) + 28|0);
        $26 = HEAP32[$index$i>>2]|0;
        $arrayidx94$i = (10496 + ($26<<2)|0);
        $27 = HEAP32[$arrayidx94$i>>2]|0;
        $cmp95$i = ($v$0$i|0)==($27|0);
        if ($cmp95$i) {
         HEAP32[$arrayidx94$i>>2] = $R$3$i;
         $cond2$i = ($R$3$i|0)==(0|0);
         if ($cond2$i) {
          $shl$i = 1 << $26;
          $neg$i = $shl$i ^ -1;
          $and103$i = $13 & $neg$i;
          HEAP32[(10196)>>2] = $and103$i;
          break;
         }
        } else {
         $arrayidx113$i = ((($19)) + 16|0);
         $28 = HEAP32[$arrayidx113$i>>2]|0;
         $cmp114$i = ($28|0)==($v$0$i|0);
         $arrayidx121$i = ((($19)) + 20|0);
         $arrayidx121$i$sink = $cmp114$i ? $arrayidx113$i : $arrayidx121$i;
         HEAP32[$arrayidx121$i$sink>>2] = $R$3$i;
         $cmp126$i = ($R$3$i|0)==(0|0);
         if ($cmp126$i) {
          break;
         }
        }
        $parent135$i = ((($R$3$i)) + 24|0);
        HEAP32[$parent135$i>>2] = $19;
        $arrayidx137$i = ((($v$0$i)) + 16|0);
        $29 = HEAP32[$arrayidx137$i>>2]|0;
        $cmp138$i = ($29|0)==(0|0);
        if (!($cmp138$i)) {
         $arrayidx148$i = ((($R$3$i)) + 16|0);
         HEAP32[$arrayidx148$i>>2] = $29;
         $parent149$i = ((($29)) + 24|0);
         HEAP32[$parent149$i>>2] = $R$3$i;
        }
        $arrayidx154$i = ((($v$0$i)) + 20|0);
        $30 = HEAP32[$arrayidx154$i>>2]|0;
        $cmp155$i = ($30|0)==(0|0);
        if (!($cmp155$i)) {
         $arrayidx165$i = ((($R$3$i)) + 20|0);
         HEAP32[$arrayidx165$i>>2] = $30;
         $parent166$i = ((($30)) + 24|0);
         HEAP32[$parent166$i>>2] = $R$3$i;
        }
       }
      } while(0);
      $cmp174$i = ($rsize$0$i>>>0)<(16);
      if ($cmp174$i) {
       $add177$i = (($rsize$0$i) + ($cond))|0;
       $or178$i = $add177$i | 3;
       $head179$i = ((($v$0$i)) + 4|0);
       HEAP32[$head179$i>>2] = $or178$i;
       $add$ptr181$i = (($v$0$i) + ($add177$i)|0);
       $head182$i = ((($add$ptr181$i)) + 4|0);
       $31 = HEAP32[$head182$i>>2]|0;
       $or183$i = $31 | 1;
       HEAP32[$head182$i>>2] = $or183$i;
      } else {
       $or186$i = $cond | 3;
       $head187$i = ((($v$0$i)) + 4|0);
       HEAP32[$head187$i>>2] = $or186$i;
       $or188$i = $rsize$0$i | 1;
       $head189$i = ((($add$ptr$i)) + 4|0);
       HEAP32[$head189$i>>2] = $or188$i;
       $add$ptr190$i = (($add$ptr$i) + ($rsize$0$i)|0);
       HEAP32[$add$ptr190$i>>2] = $rsize$0$i;
       $cmp191$i = ($5|0)==(0);
       if (!($cmp191$i)) {
        $32 = HEAP32[(10212)>>2]|0;
        $shr194$i = $5 >>> 3;
        $shl195$i = $shr194$i << 1;
        $arrayidx196$i = (10232 + ($shl195$i<<2)|0);
        $shl198$i = 1 << $shr194$i;
        $and199$i = $shl198$i & $0;
        $tobool200$i = ($and199$i|0)==(0);
        if ($tobool200$i) {
         $or204$i = $shl198$i | $0;
         HEAP32[2548] = $or204$i;
         $$pre$i = ((($arrayidx196$i)) + 8|0);
         $$pre$phi$iZ2D = $$pre$i;$F197$0$i = $arrayidx196$i;
        } else {
         $33 = ((($arrayidx196$i)) + 8|0);
         $34 = HEAP32[$33>>2]|0;
         $$pre$phi$iZ2D = $33;$F197$0$i = $34;
        }
        HEAP32[$$pre$phi$iZ2D>>2] = $32;
        $bk218$i = ((($F197$0$i)) + 12|0);
        HEAP32[$bk218$i>>2] = $32;
        $fd219$i = ((($32)) + 8|0);
        HEAP32[$fd219$i>>2] = $F197$0$i;
        $bk220$i = ((($32)) + 12|0);
        HEAP32[$bk220$i>>2] = $arrayidx196$i;
       }
       HEAP32[(10200)>>2] = $rsize$0$i;
       HEAP32[(10212)>>2] = $add$ptr$i;
      }
      $add$ptr225$i = ((($v$0$i)) + 8|0);
      $retval$0 = $add$ptr225$i;
      STACKTOP = sp;return ($retval$0|0);
     } else {
      $nb$0 = $cond;
     }
    }
   } else {
    $nb$0 = $cond;
   }
  } else {
   $cmp139 = ($bytes>>>0)>(4294967231);
   if ($cmp139) {
    $nb$0 = -1;
   } else {
    $add144 = (($bytes) + 11)|0;
    $and145 = $add144 & -8;
    $35 = HEAP32[(10196)>>2]|0;
    $cmp146 = ($35|0)==(0);
    if ($cmp146) {
     $nb$0 = $and145;
    } else {
     $sub$i147 = (0 - ($and145))|0;
     $shr$i148 = $add144 >>> 8;
     $cmp$i149 = ($shr$i148|0)==(0);
     if ($cmp$i149) {
      $idx$0$i = 0;
     } else {
      $cmp1$i = ($and145>>>0)>(16777215);
      if ($cmp1$i) {
       $idx$0$i = 31;
      } else {
       $sub4$i = (($shr$i148) + 1048320)|0;
       $shr5$i151 = $sub4$i >>> 16;
       $and$i152 = $shr5$i151 & 8;
       $shl$i153 = $shr$i148 << $and$i152;
       $sub6$i = (($shl$i153) + 520192)|0;
       $shr7$i154 = $sub6$i >>> 16;
       $and8$i = $shr7$i154 & 4;
       $add$i155 = $and8$i | $and$i152;
       $shl9$i = $shl$i153 << $and8$i;
       $sub10$i = (($shl9$i) + 245760)|0;
       $shr11$i156 = $sub10$i >>> 16;
       $and12$i = $shr11$i156 & 2;
       $add13$i = $add$i155 | $and12$i;
       $sub14$i = (14 - ($add13$i))|0;
       $shl15$i = $shl9$i << $and12$i;
       $shr16$i157 = $shl15$i >>> 15;
       $add17$i158 = (($sub14$i) + ($shr16$i157))|0;
       $shl18$i = $add17$i158 << 1;
       $add19$i = (($add17$i158) + 7)|0;
       $shr20$i = $and145 >>> $add19$i;
       $and21$i159 = $shr20$i & 1;
       $add22$i = $and21$i159 | $shl18$i;
       $idx$0$i = $add22$i;
      }
     }
     $arrayidx$i160 = (10496 + ($idx$0$i<<2)|0);
     $36 = HEAP32[$arrayidx$i160>>2]|0;
     $cmp24$i = ($36|0)==(0|0);
     L79: do {
      if ($cmp24$i) {
       $rsize$3$i = $sub$i147;$t$2$i = 0;$v$3$i = 0;
       label = 61;
      } else {
       $cmp26$i = ($idx$0$i|0)==(31);
       $shr27$i = $idx$0$i >>> 1;
       $sub30$i = (25 - ($shr27$i))|0;
       $cond$i = $cmp26$i ? 0 : $sub30$i;
       $shl31$i = $and145 << $cond$i;
       $rsize$0$i162 = $sub$i147;$rst$0$i = 0;$sizebits$0$i = $shl31$i;$t$0$i161 = $36;$v$0$i163 = 0;
       while(1) {
        $head$i164 = ((($t$0$i161)) + 4|0);
        $37 = HEAP32[$head$i164>>2]|0;
        $and32$i = $37 & -8;
        $sub33$i = (($and32$i) - ($and145))|0;
        $cmp34$i = ($sub33$i>>>0)<($rsize$0$i162>>>0);
        if ($cmp34$i) {
         $cmp36$i = ($sub33$i|0)==(0);
         if ($cmp36$i) {
          $rsize$418$i$ph = 0;$t$517$i$ph = $t$0$i161;$v$419$i$ph = $t$0$i161;
          label = 65;
          break L79;
         } else {
          $rsize$1$i = $sub33$i;$v$1$i = $t$0$i161;
         }
        } else {
         $rsize$1$i = $rsize$0$i162;$v$1$i = $v$0$i163;
        }
        $arrayidx40$i = ((($t$0$i161)) + 20|0);
        $38 = HEAP32[$arrayidx40$i>>2]|0;
        $shr42$i = $sizebits$0$i >>> 31;
        $arrayidx44$i = (((($t$0$i161)) + 16|0) + ($shr42$i<<2)|0);
        $39 = HEAP32[$arrayidx44$i>>2]|0;
        $cmp45$i = ($38|0)==(0|0);
        $cmp46$i = ($38|0)==($39|0);
        $or$cond1$i165 = $cmp45$i | $cmp46$i;
        $rst$1$i = $or$cond1$i165 ? $rst$0$i : $38;
        $cmp49$i = ($39|0)==(0|0);
        $spec$select5$i = $sizebits$0$i << 1;
        if ($cmp49$i) {
         $rsize$3$i = $rsize$1$i;$t$2$i = $rst$1$i;$v$3$i = $v$1$i;
         label = 61;
         break;
        } else {
         $rsize$0$i162 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $spec$select5$i;$t$0$i161 = $39;$v$0$i163 = $v$1$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 61) {
      $cmp55$i166 = ($t$2$i|0)==(0|0);
      $cmp57$i167 = ($v$3$i|0)==(0|0);
      $or$cond$i168 = $cmp55$i166 & $cmp57$i167;
      if ($or$cond$i168) {
       $shl60$i = 2 << $idx$0$i;
       $sub63$i = (0 - ($shl60$i))|0;
       $or$i169 = $shl60$i | $sub63$i;
       $and64$i = $or$i169 & $35;
       $cmp65$i = ($and64$i|0)==(0);
       if ($cmp65$i) {
        $nb$0 = $and145;
        break;
       }
       $sub67$i = (0 - ($and64$i))|0;
       $and68$i = $and64$i & $sub67$i;
       $sub70$i = (($and68$i) + -1)|0;
       $shr72$i = $sub70$i >>> 12;
       $and73$i = $shr72$i & 16;
       $shr75$i = $sub70$i >>> $and73$i;
       $shr76$i = $shr75$i >>> 5;
       $and77$i = $shr76$i & 8;
       $add78$i = $and77$i | $and73$i;
       $shr79$i = $shr75$i >>> $and77$i;
       $shr80$i = $shr79$i >>> 2;
       $and81$i = $shr80$i & 4;
       $add82$i = $add78$i | $and81$i;
       $shr83$i = $shr79$i >>> $and81$i;
       $shr84$i = $shr83$i >>> 1;
       $and85$i = $shr84$i & 2;
       $add86$i = $add82$i | $and85$i;
       $shr87$i = $shr83$i >>> $and85$i;
       $shr88$i = $shr87$i >>> 1;
       $and89$i = $shr88$i & 1;
       $add90$i = $add86$i | $and89$i;
       $shr91$i = $shr87$i >>> $and89$i;
       $add92$i = (($add90$i) + ($shr91$i))|0;
       $arrayidx94$i170 = (10496 + ($add92$i<<2)|0);
       $40 = HEAP32[$arrayidx94$i170>>2]|0;
       $t$4$i = $40;$v$3$i204 = 0;
      } else {
       $t$4$i = $t$2$i;$v$3$i204 = $v$3$i;
      }
      $cmp9716$i = ($t$4$i|0)==(0|0);
      if ($cmp9716$i) {
       $rsize$4$lcssa$i = $rsize$3$i;$v$4$lcssa$i = $v$3$i204;
      } else {
       $rsize$418$i$ph = $rsize$3$i;$t$517$i$ph = $t$4$i;$v$419$i$ph = $v$3$i204;
       label = 65;
      }
     }
     if ((label|0) == 65) {
      $rsize$418$i = $rsize$418$i$ph;$t$517$i = $t$517$i$ph;$v$419$i = $v$419$i$ph;
      while(1) {
       $head99$i = ((($t$517$i)) + 4|0);
       $41 = HEAP32[$head99$i>>2]|0;
       $and100$i = $41 & -8;
       $sub101$i = (($and100$i) - ($and145))|0;
       $cmp102$i = ($sub101$i>>>0)<($rsize$418$i>>>0);
       $spec$select$i171 = $cmp102$i ? $sub101$i : $rsize$418$i;
       $spec$select2$i = $cmp102$i ? $t$517$i : $v$419$i;
       $arrayidx106$i = ((($t$517$i)) + 16|0);
       $42 = HEAP32[$arrayidx106$i>>2]|0;
       $cmp107$i = ($42|0)==(0|0);
       if ($cmp107$i) {
        $arrayidx113$i173 = ((($t$517$i)) + 20|0);
        $43 = HEAP32[$arrayidx113$i173>>2]|0;
        $cond115$i = $43;
       } else {
        $cond115$i = $42;
       }
       $cmp97$i = ($cond115$i|0)==(0|0);
       if ($cmp97$i) {
        $rsize$4$lcssa$i = $spec$select$i171;$v$4$lcssa$i = $spec$select2$i;
        break;
       } else {
        $rsize$418$i = $spec$select$i171;$t$517$i = $cond115$i;$v$419$i = $spec$select2$i;
       }
      }
     }
     $cmp116$i = ($v$4$lcssa$i|0)==(0|0);
     if ($cmp116$i) {
      $nb$0 = $and145;
     } else {
      $44 = HEAP32[(10200)>>2]|0;
      $sub118$i = (($44) - ($and145))|0;
      $cmp119$i = ($rsize$4$lcssa$i>>>0)<($sub118$i>>>0);
      if ($cmp119$i) {
       $add$ptr$i174 = (($v$4$lcssa$i) + ($and145)|0);
       $cmp123$i = ($add$ptr$i174>>>0)>($v$4$lcssa$i>>>0);
       if ($cmp123$i) {
        $parent$i175 = ((($v$4$lcssa$i)) + 24|0);
        $45 = HEAP32[$parent$i175>>2]|0;
        $bk$i176 = ((($v$4$lcssa$i)) + 12|0);
        $46 = HEAP32[$bk$i176>>2]|0;
        $cmp128$i = ($46|0)==($v$4$lcssa$i|0);
        do {
         if ($cmp128$i) {
          $arrayidx151$i = ((($v$4$lcssa$i)) + 20|0);
          $48 = HEAP32[$arrayidx151$i>>2]|0;
          $cmp152$i = ($48|0)==(0|0);
          if ($cmp152$i) {
           $arrayidx155$i = ((($v$4$lcssa$i)) + 16|0);
           $49 = HEAP32[$arrayidx155$i>>2]|0;
           $cmp156$i = ($49|0)==(0|0);
           if ($cmp156$i) {
            $R$3$i188 = 0;
            break;
           } else {
            $R$1$i183$ph = $49;$RP$1$i182$ph = $arrayidx155$i;
           }
          } else {
           $R$1$i183$ph = $48;$RP$1$i182$ph = $arrayidx151$i;
          }
          $R$1$i183 = $R$1$i183$ph;$RP$1$i182 = $RP$1$i182$ph;
          while(1) {
           $arrayidx161$i = ((($R$1$i183)) + 20|0);
           $50 = HEAP32[$arrayidx161$i>>2]|0;
           $cmp162$i184 = ($50|0)==(0|0);
           if ($cmp162$i184) {
            $arrayidx165$i185 = ((($R$1$i183)) + 16|0);
            $51 = HEAP32[$arrayidx165$i185>>2]|0;
            $cmp166$i = ($51|0)==(0|0);
            if ($cmp166$i) {
             break;
            } else {
             $R$1$i183$be = $51;$RP$1$i182$be = $arrayidx165$i185;
            }
           } else {
            $R$1$i183$be = $50;$RP$1$i182$be = $arrayidx161$i;
           }
           $R$1$i183 = $R$1$i183$be;$RP$1$i182 = $RP$1$i182$be;
          }
          HEAP32[$RP$1$i182>>2] = 0;
          $R$3$i188 = $R$1$i183;
         } else {
          $fd$i177 = ((($v$4$lcssa$i)) + 8|0);
          $47 = HEAP32[$fd$i177>>2]|0;
          $bk145$i = ((($47)) + 12|0);
          HEAP32[$bk145$i>>2] = $46;
          $fd146$i = ((($46)) + 8|0);
          HEAP32[$fd146$i>>2] = $47;
          $R$3$i188 = $46;
         }
        } while(0);
        $cmp180$i = ($45|0)==(0|0);
        do {
         if ($cmp180$i) {
          $61 = $35;
         } else {
          $index$i189 = ((($v$4$lcssa$i)) + 28|0);
          $52 = HEAP32[$index$i189>>2]|0;
          $arrayidx184$i = (10496 + ($52<<2)|0);
          $53 = HEAP32[$arrayidx184$i>>2]|0;
          $cmp185$i = ($v$4$lcssa$i|0)==($53|0);
          if ($cmp185$i) {
           HEAP32[$arrayidx184$i>>2] = $R$3$i188;
           $cond3$i = ($R$3$i188|0)==(0|0);
           if ($cond3$i) {
            $shl192$i = 1 << $52;
            $neg$i190 = $shl192$i ^ -1;
            $and194$i191 = $35 & $neg$i190;
            HEAP32[(10196)>>2] = $and194$i191;
            $61 = $and194$i191;
            break;
           }
          } else {
           $arrayidx204$i = ((($45)) + 16|0);
           $54 = HEAP32[$arrayidx204$i>>2]|0;
           $cmp205$i = ($54|0)==($v$4$lcssa$i|0);
           $arrayidx212$i = ((($45)) + 20|0);
           $arrayidx212$i$sink = $cmp205$i ? $arrayidx204$i : $arrayidx212$i;
           HEAP32[$arrayidx212$i$sink>>2] = $R$3$i188;
           $cmp217$i = ($R$3$i188|0)==(0|0);
           if ($cmp217$i) {
            $61 = $35;
            break;
           }
          }
          $parent226$i = ((($R$3$i188)) + 24|0);
          HEAP32[$parent226$i>>2] = $45;
          $arrayidx228$i = ((($v$4$lcssa$i)) + 16|0);
          $55 = HEAP32[$arrayidx228$i>>2]|0;
          $cmp229$i = ($55|0)==(0|0);
          if (!($cmp229$i)) {
           $arrayidx239$i = ((($R$3$i188)) + 16|0);
           HEAP32[$arrayidx239$i>>2] = $55;
           $parent240$i = ((($55)) + 24|0);
           HEAP32[$parent240$i>>2] = $R$3$i188;
          }
          $arrayidx245$i = ((($v$4$lcssa$i)) + 20|0);
          $56 = HEAP32[$arrayidx245$i>>2]|0;
          $cmp246$i = ($56|0)==(0|0);
          if ($cmp246$i) {
           $61 = $35;
          } else {
           $arrayidx256$i = ((($R$3$i188)) + 20|0);
           HEAP32[$arrayidx256$i>>2] = $56;
           $parent257$i = ((($56)) + 24|0);
           HEAP32[$parent257$i>>2] = $R$3$i188;
           $61 = $35;
          }
         }
        } while(0);
        $cmp265$i = ($rsize$4$lcssa$i>>>0)<(16);
        L128: do {
         if ($cmp265$i) {
          $add268$i = (($rsize$4$lcssa$i) + ($and145))|0;
          $or270$i = $add268$i | 3;
          $head271$i = ((($v$4$lcssa$i)) + 4|0);
          HEAP32[$head271$i>>2] = $or270$i;
          $add$ptr273$i = (($v$4$lcssa$i) + ($add268$i)|0);
          $head274$i = ((($add$ptr273$i)) + 4|0);
          $57 = HEAP32[$head274$i>>2]|0;
          $or275$i = $57 | 1;
          HEAP32[$head274$i>>2] = $or275$i;
         } else {
          $or278$i = $and145 | 3;
          $head279$i = ((($v$4$lcssa$i)) + 4|0);
          HEAP32[$head279$i>>2] = $or278$i;
          $or280$i = $rsize$4$lcssa$i | 1;
          $head281$i = ((($add$ptr$i174)) + 4|0);
          HEAP32[$head281$i>>2] = $or280$i;
          $add$ptr282$i = (($add$ptr$i174) + ($rsize$4$lcssa$i)|0);
          HEAP32[$add$ptr282$i>>2] = $rsize$4$lcssa$i;
          $shr283$i = $rsize$4$lcssa$i >>> 3;
          $cmp284$i = ($rsize$4$lcssa$i>>>0)<(256);
          if ($cmp284$i) {
           $shl288$i = $shr283$i << 1;
           $arrayidx289$i = (10232 + ($shl288$i<<2)|0);
           $58 = HEAP32[2548]|0;
           $shl291$i = 1 << $shr283$i;
           $and292$i = $58 & $shl291$i;
           $tobool293$i = ($and292$i|0)==(0);
           if ($tobool293$i) {
            $or297$i = $58 | $shl291$i;
            HEAP32[2548] = $or297$i;
            $$pre$i194 = ((($arrayidx289$i)) + 8|0);
            $$pre$phi$i195Z2D = $$pre$i194;$F290$0$i = $arrayidx289$i;
           } else {
            $59 = ((($arrayidx289$i)) + 8|0);
            $60 = HEAP32[$59>>2]|0;
            $$pre$phi$i195Z2D = $59;$F290$0$i = $60;
           }
           HEAP32[$$pre$phi$i195Z2D>>2] = $add$ptr$i174;
           $bk311$i = ((($F290$0$i)) + 12|0);
           HEAP32[$bk311$i>>2] = $add$ptr$i174;
           $fd312$i = ((($add$ptr$i174)) + 8|0);
           HEAP32[$fd312$i>>2] = $F290$0$i;
           $bk313$i = ((($add$ptr$i174)) + 12|0);
           HEAP32[$bk313$i>>2] = $arrayidx289$i;
           break;
          }
          $shr318$i = $rsize$4$lcssa$i >>> 8;
          $cmp319$i = ($shr318$i|0)==(0);
          if ($cmp319$i) {
           $I316$0$i = 0;
          } else {
           $cmp323$i = ($rsize$4$lcssa$i>>>0)>(16777215);
           if ($cmp323$i) {
            $I316$0$i = 31;
           } else {
            $sub329$i = (($shr318$i) + 1048320)|0;
            $shr330$i = $sub329$i >>> 16;
            $and331$i = $shr330$i & 8;
            $shl333$i = $shr318$i << $and331$i;
            $sub334$i = (($shl333$i) + 520192)|0;
            $shr335$i = $sub334$i >>> 16;
            $and336$i = $shr335$i & 4;
            $add337$i = $and336$i | $and331$i;
            $shl338$i = $shl333$i << $and336$i;
            $sub339$i = (($shl338$i) + 245760)|0;
            $shr340$i = $sub339$i >>> 16;
            $and341$i = $shr340$i & 2;
            $add342$i = $add337$i | $and341$i;
            $sub343$i = (14 - ($add342$i))|0;
            $shl344$i = $shl338$i << $and341$i;
            $shr345$i = $shl344$i >>> 15;
            $add346$i = (($sub343$i) + ($shr345$i))|0;
            $shl347$i = $add346$i << 1;
            $add348$i = (($add346$i) + 7)|0;
            $shr349$i = $rsize$4$lcssa$i >>> $add348$i;
            $and350$i = $shr349$i & 1;
            $add351$i = $and350$i | $shl347$i;
            $I316$0$i = $add351$i;
           }
          }
          $arrayidx355$i = (10496 + ($I316$0$i<<2)|0);
          $index356$i = ((($add$ptr$i174)) + 28|0);
          HEAP32[$index356$i>>2] = $I316$0$i;
          $child357$i = ((($add$ptr$i174)) + 16|0);
          $arrayidx358$i = ((($child357$i)) + 4|0);
          HEAP32[$arrayidx358$i>>2] = 0;
          HEAP32[$child357$i>>2] = 0;
          $shl362$i = 1 << $I316$0$i;
          $and363$i = $61 & $shl362$i;
          $tobool364$i = ($and363$i|0)==(0);
          if ($tobool364$i) {
           $or368$i = $61 | $shl362$i;
           HEAP32[(10196)>>2] = $or368$i;
           HEAP32[$arrayidx355$i>>2] = $add$ptr$i174;
           $parent369$i = ((($add$ptr$i174)) + 24|0);
           HEAP32[$parent369$i>>2] = $arrayidx355$i;
           $bk370$i = ((($add$ptr$i174)) + 12|0);
           HEAP32[$bk370$i>>2] = $add$ptr$i174;
           $fd371$i = ((($add$ptr$i174)) + 8|0);
           HEAP32[$fd371$i>>2] = $add$ptr$i174;
           break;
          }
          $62 = HEAP32[$arrayidx355$i>>2]|0;
          $head38611$i = ((($62)) + 4|0);
          $63 = HEAP32[$head38611$i>>2]|0;
          $and38712$i = $63 & -8;
          $cmp38813$i = ($and38712$i|0)==($rsize$4$lcssa$i|0);
          L145: do {
           if ($cmp38813$i) {
            $T$0$lcssa$i = $62;
           } else {
            $cmp374$i = ($I316$0$i|0)==(31);
            $shr378$i = $I316$0$i >>> 1;
            $sub381$i = (25 - ($shr378$i))|0;
            $cond383$i = $cmp374$i ? 0 : $sub381$i;
            $shl384$i = $rsize$4$lcssa$i << $cond383$i;
            $K373$015$i = $shl384$i;$T$014$i = $62;
            while(1) {
             $shr392$i = $K373$015$i >>> 31;
             $arrayidx394$i = (((($T$014$i)) + 16|0) + ($shr392$i<<2)|0);
             $64 = HEAP32[$arrayidx394$i>>2]|0;
             $cmp396$i = ($64|0)==(0|0);
             if ($cmp396$i) {
              break;
             }
             $shl395$i = $K373$015$i << 1;
             $head386$i = ((($64)) + 4|0);
             $65 = HEAP32[$head386$i>>2]|0;
             $and387$i = $65 & -8;
             $cmp388$i = ($and387$i|0)==($rsize$4$lcssa$i|0);
             if ($cmp388$i) {
              $T$0$lcssa$i = $64;
              break L145;
             } else {
              $K373$015$i = $shl395$i;$T$014$i = $64;
             }
            }
            HEAP32[$arrayidx394$i>>2] = $add$ptr$i174;
            $parent406$i = ((($add$ptr$i174)) + 24|0);
            HEAP32[$parent406$i>>2] = $T$014$i;
            $bk407$i = ((($add$ptr$i174)) + 12|0);
            HEAP32[$bk407$i>>2] = $add$ptr$i174;
            $fd408$i = ((($add$ptr$i174)) + 8|0);
            HEAP32[$fd408$i>>2] = $add$ptr$i174;
            break L128;
           }
          } while(0);
          $fd416$i = ((($T$0$lcssa$i)) + 8|0);
          $66 = HEAP32[$fd416$i>>2]|0;
          $bk429$i = ((($66)) + 12|0);
          HEAP32[$bk429$i>>2] = $add$ptr$i174;
          HEAP32[$fd416$i>>2] = $add$ptr$i174;
          $fd431$i = ((($add$ptr$i174)) + 8|0);
          HEAP32[$fd431$i>>2] = $66;
          $bk432$i = ((($add$ptr$i174)) + 12|0);
          HEAP32[$bk432$i>>2] = $T$0$lcssa$i;
          $parent433$i = ((($add$ptr$i174)) + 24|0);
          HEAP32[$parent433$i>>2] = 0;
         }
        } while(0);
        $add$ptr441$i = ((($v$4$lcssa$i)) + 8|0);
        $retval$0 = $add$ptr441$i;
        STACKTOP = sp;return ($retval$0|0);
       } else {
        $nb$0 = $and145;
       }
      } else {
       $nb$0 = $and145;
      }
     }
    }
   }
  }
 } while(0);
 $67 = HEAP32[(10200)>>2]|0;
 $cmp156 = ($67>>>0)<($nb$0>>>0);
 if (!($cmp156)) {
  $sub160 = (($67) - ($nb$0))|0;
  $68 = HEAP32[(10212)>>2]|0;
  $cmp162 = ($sub160>>>0)>(15);
  if ($cmp162) {
   $add$ptr166 = (($68) + ($nb$0)|0);
   HEAP32[(10212)>>2] = $add$ptr166;
   HEAP32[(10200)>>2] = $sub160;
   $or167 = $sub160 | 1;
   $head168 = ((($add$ptr166)) + 4|0);
   HEAP32[$head168>>2] = $or167;
   $add$ptr169 = (($68) + ($67)|0);
   HEAP32[$add$ptr169>>2] = $sub160;
   $or172 = $nb$0 | 3;
   $head173 = ((($68)) + 4|0);
   HEAP32[$head173>>2] = $or172;
  } else {
   HEAP32[(10200)>>2] = 0;
   HEAP32[(10212)>>2] = 0;
   $or176 = $67 | 3;
   $head177 = ((($68)) + 4|0);
   HEAP32[$head177>>2] = $or176;
   $add$ptr178 = (($68) + ($67)|0);
   $head179 = ((($add$ptr178)) + 4|0);
   $69 = HEAP32[$head179>>2]|0;
   $or180 = $69 | 1;
   HEAP32[$head179>>2] = $or180;
  }
  $add$ptr182 = ((($68)) + 8|0);
  $retval$0 = $add$ptr182;
  STACKTOP = sp;return ($retval$0|0);
 }
 $70 = HEAP32[(10204)>>2]|0;
 $cmp186 = ($70>>>0)>($nb$0>>>0);
 if ($cmp186) {
  $sub190 = (($70) - ($nb$0))|0;
  HEAP32[(10204)>>2] = $sub190;
  $71 = HEAP32[(10216)>>2]|0;
  $add$ptr193 = (($71) + ($nb$0)|0);
  HEAP32[(10216)>>2] = $add$ptr193;
  $or194 = $sub190 | 1;
  $head195 = ((($add$ptr193)) + 4|0);
  HEAP32[$head195>>2] = $or194;
  $or197 = $nb$0 | 3;
  $head198 = ((($71)) + 4|0);
  HEAP32[$head198>>2] = $or197;
  $add$ptr199 = ((($71)) + 8|0);
  $retval$0 = $add$ptr199;
  STACKTOP = sp;return ($retval$0|0);
 }
 $72 = HEAP32[2666]|0;
 $cmp$i133 = ($72|0)==(0);
 if ($cmp$i133) {
  HEAP32[(10672)>>2] = 4096;
  HEAP32[(10668)>>2] = 4096;
  HEAP32[(10676)>>2] = -1;
  HEAP32[(10680)>>2] = -1;
  HEAP32[(10684)>>2] = 0;
  HEAP32[(10636)>>2] = 0;
  $73 = $magic$i$i;
  $xor$i$i = $73 & -16;
  $and6$i$i = $xor$i$i ^ 1431655768;
  HEAP32[2666] = $and6$i$i;
  $74 = 4096;
 } else {
  $$pre$i134 = HEAP32[(10672)>>2]|0;
  $74 = $$pre$i134;
 }
 $add$i135 = (($nb$0) + 48)|0;
 $sub$i136 = (($nb$0) + 47)|0;
 $add9$i = (($74) + ($sub$i136))|0;
 $neg$i137 = (0 - ($74))|0;
 $and11$i = $add9$i & $neg$i137;
 $cmp12$i = ($and11$i>>>0)>($nb$0>>>0);
 if (!($cmp12$i)) {
  $retval$0 = 0;
  STACKTOP = sp;return ($retval$0|0);
 }
 $75 = HEAP32[(10632)>>2]|0;
 $cmp15$i = ($75|0)==(0);
 if (!($cmp15$i)) {
  $76 = HEAP32[(10624)>>2]|0;
  $add17$i = (($76) + ($and11$i))|0;
  $cmp19$i = ($add17$i>>>0)<=($76>>>0);
  $cmp21$i = ($add17$i>>>0)>($75>>>0);
  $or$cond1$i = $cmp19$i | $cmp21$i;
  if ($or$cond1$i) {
   $retval$0 = 0;
   STACKTOP = sp;return ($retval$0|0);
  }
 }
 $77 = HEAP32[(10636)>>2]|0;
 $and29$i = $77 & 4;
 $tobool30$i = ($and29$i|0)==(0);
 L178: do {
  if ($tobool30$i) {
   $78 = HEAP32[(10216)>>2]|0;
   $cmp32$i138 = ($78|0)==(0|0);
   L180: do {
    if ($cmp32$i138) {
     label = 128;
    } else {
     $sp$0$i$i = (10640);
     while(1) {
      $79 = HEAP32[$sp$0$i$i>>2]|0;
      $cmp$i55$i = ($79>>>0)>($78>>>0);
      if (!($cmp$i55$i)) {
       $size$i$i = ((($sp$0$i$i)) + 4|0);
       $80 = HEAP32[$size$i$i>>2]|0;
       $add$ptr$i57$i = (($79) + ($80)|0);
       $cmp2$i$i = ($add$ptr$i57$i>>>0)>($78>>>0);
       if ($cmp2$i$i) {
        break;
       }
      }
      $next$i$i = ((($sp$0$i$i)) + 8|0);
      $81 = HEAP32[$next$i$i>>2]|0;
      $cmp3$i$i = ($81|0)==(0|0);
      if ($cmp3$i$i) {
       label = 128;
       break L180;
      } else {
       $sp$0$i$i = $81;
      }
     }
     $add77$i = (($add9$i) - ($70))|0;
     $and80$i = $add77$i & $neg$i137;
     $cmp81$i = ($and80$i>>>0)<(2147483647);
     if ($cmp81$i) {
      $size$i$i$le = ((($sp$0$i$i)) + 4|0);
      $call83$i = (_sbrk(($and80$i|0))|0);
      $86 = HEAP32[$sp$0$i$i>>2]|0;
      $87 = HEAP32[$size$i$i$le>>2]|0;
      $add$ptr$i141 = (($86) + ($87)|0);
      $cmp85$i = ($call83$i|0)==($add$ptr$i141|0);
      if ($cmp85$i) {
       $cmp89$i = ($call83$i|0)==((-1)|0);
       if ($cmp89$i) {
        $tsize$2647482$i = $and80$i;
       } else {
        $tbase$795$i = $call83$i;$tsize$794$i = $and80$i;
        label = 145;
        break L178;
       }
      } else {
       $br$2$ph$i = $call83$i;$ssize$2$ph$i = $and80$i;
       label = 136;
      }
     } else {
      $tsize$2647482$i = 0;
     }
    }
   } while(0);
   do {
    if ((label|0) == 128) {
     $call37$i = (_sbrk(0)|0);
     $cmp38$i = ($call37$i|0)==((-1)|0);
     if ($cmp38$i) {
      $tsize$2647482$i = 0;
     } else {
      $82 = $call37$i;
      $83 = HEAP32[(10668)>>2]|0;
      $sub41$i = (($83) + -1)|0;
      $and42$i = $sub41$i & $82;
      $cmp43$i = ($and42$i|0)==(0);
      $add46$i = (($sub41$i) + ($82))|0;
      $neg48$i = (0 - ($83))|0;
      $and49$i = $add46$i & $neg48$i;
      $sub50$i = (($and49$i) - ($82))|0;
      $add51$i = $cmp43$i ? 0 : $sub50$i;
      $spec$select96$i = (($add51$i) + ($and11$i))|0;
      $84 = HEAP32[(10624)>>2]|0;
      $add54$i = (($spec$select96$i) + ($84))|0;
      $cmp55$i = ($spec$select96$i>>>0)>($nb$0>>>0);
      $cmp57$i = ($spec$select96$i>>>0)<(2147483647);
      $or$cond$i = $cmp55$i & $cmp57$i;
      if ($or$cond$i) {
       $85 = HEAP32[(10632)>>2]|0;
       $cmp60$i = ($85|0)==(0);
       if (!($cmp60$i)) {
        $cmp63$i = ($add54$i>>>0)<=($84>>>0);
        $cmp66$i140 = ($add54$i>>>0)>($85>>>0);
        $or$cond2$i = $cmp63$i | $cmp66$i140;
        if ($or$cond2$i) {
         $tsize$2647482$i = 0;
         break;
        }
       }
       $call68$i = (_sbrk(($spec$select96$i|0))|0);
       $cmp69$i = ($call68$i|0)==($call37$i|0);
       if ($cmp69$i) {
        $tbase$795$i = $call37$i;$tsize$794$i = $spec$select96$i;
        label = 145;
        break L178;
       } else {
        $br$2$ph$i = $call68$i;$ssize$2$ph$i = $spec$select96$i;
        label = 136;
       }
      } else {
       $tsize$2647482$i = 0;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 136) {
     $sub112$i = (0 - ($ssize$2$ph$i))|0;
     $cmp91$i = ($br$2$ph$i|0)!=((-1)|0);
     $cmp93$i = ($ssize$2$ph$i>>>0)<(2147483647);
     $or$cond5$i = $cmp93$i & $cmp91$i;
     $cmp96$i = ($add$i135>>>0)>($ssize$2$ph$i>>>0);
     $or$cond7$i = $cmp96$i & $or$cond5$i;
     if (!($or$cond7$i)) {
      $cmp118$i = ($br$2$ph$i|0)==((-1)|0);
      if ($cmp118$i) {
       $tsize$2647482$i = 0;
       break;
      } else {
       $tbase$795$i = $br$2$ph$i;$tsize$794$i = $ssize$2$ph$i;
       label = 145;
       break L178;
      }
     }
     $88 = HEAP32[(10672)>>2]|0;
     $sub99$i = (($sub$i136) - ($ssize$2$ph$i))|0;
     $add101$i = (($sub99$i) + ($88))|0;
     $neg103$i = (0 - ($88))|0;
     $and104$i = $add101$i & $neg103$i;
     $cmp105$i = ($and104$i>>>0)<(2147483647);
     if (!($cmp105$i)) {
      $tbase$795$i = $br$2$ph$i;$tsize$794$i = $ssize$2$ph$i;
      label = 145;
      break L178;
     }
     $call107$i = (_sbrk(($and104$i|0))|0);
     $cmp108$i = ($call107$i|0)==((-1)|0);
     if ($cmp108$i) {
      (_sbrk(($sub112$i|0))|0);
      $tsize$2647482$i = 0;
      break;
     } else {
      $add110$i = (($and104$i) + ($ssize$2$ph$i))|0;
      $tbase$795$i = $br$2$ph$i;$tsize$794$i = $add110$i;
      label = 145;
      break L178;
     }
    }
   } while(0);
   $89 = HEAP32[(10636)>>2]|0;
   $or$i = $89 | 4;
   HEAP32[(10636)>>2] = $or$i;
   $tsize$4$i = $tsize$2647482$i;
   label = 143;
  } else {
   $tsize$4$i = 0;
   label = 143;
  }
 } while(0);
 if ((label|0) == 143) {
  $cmp127$i = ($and11$i>>>0)<(2147483647);
  if ($cmp127$i) {
   $call131$i = (_sbrk(($and11$i|0))|0);
   $call132$i = (_sbrk(0)|0);
   $cmp133$i = ($call131$i|0)!=((-1)|0);
   $cmp135$i = ($call132$i|0)!=((-1)|0);
   $or$cond4$i = $cmp133$i & $cmp135$i;
   $cmp137$i = ($call131$i>>>0)<($call132$i>>>0);
   $or$cond8$i = $cmp137$i & $or$cond4$i;
   $sub$ptr$lhs$cast$i = $call132$i;
   $sub$ptr$rhs$cast$i = $call131$i;
   $sub$ptr$sub$i = (($sub$ptr$lhs$cast$i) - ($sub$ptr$rhs$cast$i))|0;
   $add140$i = (($nb$0) + 40)|0;
   $cmp141$i = ($sub$ptr$sub$i>>>0)>($add140$i>>>0);
   $spec$select9$i = $cmp141$i ? $sub$ptr$sub$i : $tsize$4$i;
   $or$cond8$not$i = $or$cond8$i ^ 1;
   $cmp14799$i = ($call131$i|0)==((-1)|0);
   $not$cmp141$i = $cmp141$i ^ 1;
   $cmp147$i = $cmp14799$i | $not$cmp141$i;
   $or$cond97$i = $cmp147$i | $or$cond8$not$i;
   if (!($or$cond97$i)) {
    $tbase$795$i = $call131$i;$tsize$794$i = $spec$select9$i;
    label = 145;
   }
  }
 }
 if ((label|0) == 145) {
  $90 = HEAP32[(10624)>>2]|0;
  $add150$i = (($90) + ($tsize$794$i))|0;
  HEAP32[(10624)>>2] = $add150$i;
  $91 = HEAP32[(10628)>>2]|0;
  $cmp151$i = ($add150$i>>>0)>($91>>>0);
  if ($cmp151$i) {
   HEAP32[(10628)>>2] = $add150$i;
  }
  $92 = HEAP32[(10216)>>2]|0;
  $cmp157$i = ($92|0)==(0|0);
  L215: do {
   if ($cmp157$i) {
    $93 = HEAP32[(10208)>>2]|0;
    $cmp159$i = ($93|0)==(0|0);
    $cmp162$i = ($tbase$795$i>>>0)<($93>>>0);
    $or$cond11$i = $cmp159$i | $cmp162$i;
    if ($or$cond11$i) {
     HEAP32[(10208)>>2] = $tbase$795$i;
    }
    HEAP32[(10640)>>2] = $tbase$795$i;
    HEAP32[(10644)>>2] = $tsize$794$i;
    HEAP32[(10652)>>2] = 0;
    $94 = HEAP32[2666]|0;
    HEAP32[(10228)>>2] = $94;
    HEAP32[(10224)>>2] = -1;
    HEAP32[(10244)>>2] = (10232);
    HEAP32[(10240)>>2] = (10232);
    HEAP32[(10252)>>2] = (10240);
    HEAP32[(10248)>>2] = (10240);
    HEAP32[(10260)>>2] = (10248);
    HEAP32[(10256)>>2] = (10248);
    HEAP32[(10268)>>2] = (10256);
    HEAP32[(10264)>>2] = (10256);
    HEAP32[(10276)>>2] = (10264);
    HEAP32[(10272)>>2] = (10264);
    HEAP32[(10284)>>2] = (10272);
    HEAP32[(10280)>>2] = (10272);
    HEAP32[(10292)>>2] = (10280);
    HEAP32[(10288)>>2] = (10280);
    HEAP32[(10300)>>2] = (10288);
    HEAP32[(10296)>>2] = (10288);
    HEAP32[(10308)>>2] = (10296);
    HEAP32[(10304)>>2] = (10296);
    HEAP32[(10316)>>2] = (10304);
    HEAP32[(10312)>>2] = (10304);
    HEAP32[(10324)>>2] = (10312);
    HEAP32[(10320)>>2] = (10312);
    HEAP32[(10332)>>2] = (10320);
    HEAP32[(10328)>>2] = (10320);
    HEAP32[(10340)>>2] = (10328);
    HEAP32[(10336)>>2] = (10328);
    HEAP32[(10348)>>2] = (10336);
    HEAP32[(10344)>>2] = (10336);
    HEAP32[(10356)>>2] = (10344);
    HEAP32[(10352)>>2] = (10344);
    HEAP32[(10364)>>2] = (10352);
    HEAP32[(10360)>>2] = (10352);
    HEAP32[(10372)>>2] = (10360);
    HEAP32[(10368)>>2] = (10360);
    HEAP32[(10380)>>2] = (10368);
    HEAP32[(10376)>>2] = (10368);
    HEAP32[(10388)>>2] = (10376);
    HEAP32[(10384)>>2] = (10376);
    HEAP32[(10396)>>2] = (10384);
    HEAP32[(10392)>>2] = (10384);
    HEAP32[(10404)>>2] = (10392);
    HEAP32[(10400)>>2] = (10392);
    HEAP32[(10412)>>2] = (10400);
    HEAP32[(10408)>>2] = (10400);
    HEAP32[(10420)>>2] = (10408);
    HEAP32[(10416)>>2] = (10408);
    HEAP32[(10428)>>2] = (10416);
    HEAP32[(10424)>>2] = (10416);
    HEAP32[(10436)>>2] = (10424);
    HEAP32[(10432)>>2] = (10424);
    HEAP32[(10444)>>2] = (10432);
    HEAP32[(10440)>>2] = (10432);
    HEAP32[(10452)>>2] = (10440);
    HEAP32[(10448)>>2] = (10440);
    HEAP32[(10460)>>2] = (10448);
    HEAP32[(10456)>>2] = (10448);
    HEAP32[(10468)>>2] = (10456);
    HEAP32[(10464)>>2] = (10456);
    HEAP32[(10476)>>2] = (10464);
    HEAP32[(10472)>>2] = (10464);
    HEAP32[(10484)>>2] = (10472);
    HEAP32[(10480)>>2] = (10472);
    HEAP32[(10492)>>2] = (10480);
    HEAP32[(10488)>>2] = (10480);
    $sub172$i = (($tsize$794$i) + -40)|0;
    $add$ptr$i43$i = ((($tbase$795$i)) + 8|0);
    $95 = $add$ptr$i43$i;
    $and$i44$i = $95 & 7;
    $cmp$i45$i = ($and$i44$i|0)==(0);
    $sub$i46$i = (0 - ($95))|0;
    $and3$i47$i = $sub$i46$i & 7;
    $cond$i48$i = $cmp$i45$i ? 0 : $and3$i47$i;
    $add$ptr4$i49$i = (($tbase$795$i) + ($cond$i48$i)|0);
    $sub5$i50$i = (($sub172$i) - ($cond$i48$i))|0;
    HEAP32[(10216)>>2] = $add$ptr4$i49$i;
    HEAP32[(10204)>>2] = $sub5$i50$i;
    $or$i51$i = $sub5$i50$i | 1;
    $head$i52$i = ((($add$ptr4$i49$i)) + 4|0);
    HEAP32[$head$i52$i>>2] = $or$i51$i;
    $add$ptr6$i53$i = (($tbase$795$i) + ($sub172$i)|0);
    $head7$i54$i = ((($add$ptr6$i53$i)) + 4|0);
    HEAP32[$head7$i54$i>>2] = 40;
    $96 = HEAP32[(10680)>>2]|0;
    HEAP32[(10220)>>2] = $96;
   } else {
    $sp$0112$i = (10640);
    while(1) {
     $97 = HEAP32[$sp$0112$i>>2]|0;
     $size188$i = ((($sp$0112$i)) + 4|0);
     $98 = HEAP32[$size188$i>>2]|0;
     $add$ptr189$i = (($97) + ($98)|0);
     $cmp190$i = ($tbase$795$i|0)==($add$ptr189$i|0);
     if ($cmp190$i) {
      label = 154;
      break;
     }
     $next$i = ((($sp$0112$i)) + 8|0);
     $99 = HEAP32[$next$i>>2]|0;
     $cmp186$i = ($99|0)==(0|0);
     if ($cmp186$i) {
      break;
     } else {
      $sp$0112$i = $99;
     }
    }
    if ((label|0) == 154) {
     $size188$i$le = ((($sp$0112$i)) + 4|0);
     $sflags193$i = ((($sp$0112$i)) + 12|0);
     $100 = HEAP32[$sflags193$i>>2]|0;
     $and194$i = $100 & 8;
     $tobool195$i = ($and194$i|0)==(0);
     if ($tobool195$i) {
      $cmp203$i = ($97>>>0)<=($92>>>0);
      $cmp209$i = ($tbase$795$i>>>0)>($92>>>0);
      $or$cond98$i = $cmp209$i & $cmp203$i;
      if ($or$cond98$i) {
       $add212$i = (($98) + ($tsize$794$i))|0;
       HEAP32[$size188$i$le>>2] = $add212$i;
       $101 = HEAP32[(10204)>>2]|0;
       $add215$i = (($101) + ($tsize$794$i))|0;
       $add$ptr$i35$i = ((($92)) + 8|0);
       $102 = $add$ptr$i35$i;
       $and$i36$i = $102 & 7;
       $cmp$i37$i = ($and$i36$i|0)==(0);
       $sub$i38$i = (0 - ($102))|0;
       $and3$i39$i = $sub$i38$i & 7;
       $cond$i40$i = $cmp$i37$i ? 0 : $and3$i39$i;
       $add$ptr4$i41$i = (($92) + ($cond$i40$i)|0);
       $sub5$i$i = (($add215$i) - ($cond$i40$i))|0;
       HEAP32[(10216)>>2] = $add$ptr4$i41$i;
       HEAP32[(10204)>>2] = $sub5$i$i;
       $or$i$i = $sub5$i$i | 1;
       $head$i42$i = ((($add$ptr4$i41$i)) + 4|0);
       HEAP32[$head$i42$i>>2] = $or$i$i;
       $add$ptr6$i$i = (($92) + ($add215$i)|0);
       $head7$i$i = ((($add$ptr6$i$i)) + 4|0);
       HEAP32[$head7$i$i>>2] = 40;
       $103 = HEAP32[(10680)>>2]|0;
       HEAP32[(10220)>>2] = $103;
       break;
      }
     }
    }
    $104 = HEAP32[(10208)>>2]|0;
    $cmp218$i = ($tbase$795$i>>>0)<($104>>>0);
    if ($cmp218$i) {
     HEAP32[(10208)>>2] = $tbase$795$i;
    }
    $add$ptr227$i = (($tbase$795$i) + ($tsize$794$i)|0);
    $sp$1111$i = (10640);
    while(1) {
     $105 = HEAP32[$sp$1111$i>>2]|0;
     $cmp228$i = ($105|0)==($add$ptr227$i|0);
     if ($cmp228$i) {
      label = 162;
      break;
     }
     $next231$i = ((($sp$1111$i)) + 8|0);
     $106 = HEAP32[$next231$i>>2]|0;
     $cmp224$i = ($106|0)==(0|0);
     if ($cmp224$i) {
      break;
     } else {
      $sp$1111$i = $106;
     }
    }
    if ((label|0) == 162) {
     $sflags235$i = ((($sp$1111$i)) + 12|0);
     $107 = HEAP32[$sflags235$i>>2]|0;
     $and236$i = $107 & 8;
     $tobool237$i = ($and236$i|0)==(0);
     if ($tobool237$i) {
      HEAP32[$sp$1111$i>>2] = $tbase$795$i;
      $size245$i = ((($sp$1111$i)) + 4|0);
      $108 = HEAP32[$size245$i>>2]|0;
      $add246$i = (($108) + ($tsize$794$i))|0;
      HEAP32[$size245$i>>2] = $add246$i;
      $add$ptr$i$i = ((($tbase$795$i)) + 8|0);
      $109 = $add$ptr$i$i;
      $and$i14$i = $109 & 7;
      $cmp$i15$i = ($and$i14$i|0)==(0);
      $sub$i16$i = (0 - ($109))|0;
      $and3$i$i = $sub$i16$i & 7;
      $cond$i17$i = $cmp$i15$i ? 0 : $and3$i$i;
      $add$ptr4$i$i = (($tbase$795$i) + ($cond$i17$i)|0);
      $add$ptr5$i$i = ((($add$ptr227$i)) + 8|0);
      $110 = $add$ptr5$i$i;
      $and6$i18$i = $110 & 7;
      $cmp7$i$i = ($and6$i18$i|0)==(0);
      $sub12$i$i = (0 - ($110))|0;
      $and13$i$i = $sub12$i$i & 7;
      $cond15$i$i = $cmp7$i$i ? 0 : $and13$i$i;
      $add$ptr16$i$i = (($add$ptr227$i) + ($cond15$i$i)|0);
      $sub$ptr$lhs$cast$i19$i = $add$ptr16$i$i;
      $sub$ptr$rhs$cast$i20$i = $add$ptr4$i$i;
      $sub$ptr$sub$i21$i = (($sub$ptr$lhs$cast$i19$i) - ($sub$ptr$rhs$cast$i20$i))|0;
      $add$ptr17$i$i = (($add$ptr4$i$i) + ($nb$0)|0);
      $sub18$i$i = (($sub$ptr$sub$i21$i) - ($nb$0))|0;
      $or19$i$i = $nb$0 | 3;
      $head$i22$i = ((($add$ptr4$i$i)) + 4|0);
      HEAP32[$head$i22$i>>2] = $or19$i$i;
      $cmp20$i$i = ($92|0)==($add$ptr16$i$i|0);
      L238: do {
       if ($cmp20$i$i) {
        $111 = HEAP32[(10204)>>2]|0;
        $add$i$i = (($111) + ($sub18$i$i))|0;
        HEAP32[(10204)>>2] = $add$i$i;
        HEAP32[(10216)>>2] = $add$ptr17$i$i;
        $or22$i$i = $add$i$i | 1;
        $head23$i$i = ((($add$ptr17$i$i)) + 4|0);
        HEAP32[$head23$i$i>>2] = $or22$i$i;
       } else {
        $112 = HEAP32[(10212)>>2]|0;
        $cmp24$i$i = ($112|0)==($add$ptr16$i$i|0);
        if ($cmp24$i$i) {
         $113 = HEAP32[(10200)>>2]|0;
         $add26$i$i = (($113) + ($sub18$i$i))|0;
         HEAP32[(10200)>>2] = $add26$i$i;
         HEAP32[(10212)>>2] = $add$ptr17$i$i;
         $or28$i$i = $add26$i$i | 1;
         $head29$i$i = ((($add$ptr17$i$i)) + 4|0);
         HEAP32[$head29$i$i>>2] = $or28$i$i;
         $add$ptr30$i$i = (($add$ptr17$i$i) + ($add26$i$i)|0);
         HEAP32[$add$ptr30$i$i>>2] = $add26$i$i;
         break;
        }
        $head32$i$i = ((($add$ptr16$i$i)) + 4|0);
        $114 = HEAP32[$head32$i$i>>2]|0;
        $and33$i$i = $114 & 3;
        $cmp34$i$i = ($and33$i$i|0)==(1);
        if ($cmp34$i$i) {
         $and37$i$i = $114 & -8;
         $shr$i25$i = $114 >>> 3;
         $cmp38$i$i = ($114>>>0)<(256);
         L246: do {
          if ($cmp38$i$i) {
           $fd$i$i = ((($add$ptr16$i$i)) + 8|0);
           $115 = HEAP32[$fd$i$i>>2]|0;
           $bk$i26$i = ((($add$ptr16$i$i)) + 12|0);
           $116 = HEAP32[$bk$i26$i>>2]|0;
           $cmp46$i$i = ($116|0)==($115|0);
           if ($cmp46$i$i) {
            $shl48$i$i = 1 << $shr$i25$i;
            $neg$i$i = $shl48$i$i ^ -1;
            $117 = HEAP32[2548]|0;
            $and49$i$i = $117 & $neg$i$i;
            HEAP32[2548] = $and49$i$i;
            break;
           } else {
            $bk67$i$i = ((($115)) + 12|0);
            HEAP32[$bk67$i$i>>2] = $116;
            $fd68$i$i = ((($116)) + 8|0);
            HEAP32[$fd68$i$i>>2] = $115;
            break;
           }
          } else {
           $parent$i27$i = ((($add$ptr16$i$i)) + 24|0);
           $118 = HEAP32[$parent$i27$i>>2]|0;
           $bk74$i$i = ((($add$ptr16$i$i)) + 12|0);
           $119 = HEAP32[$bk74$i$i>>2]|0;
           $cmp75$i$i = ($119|0)==($add$ptr16$i$i|0);
           do {
            if ($cmp75$i$i) {
             $child$i$i = ((($add$ptr16$i$i)) + 16|0);
             $arrayidx96$i$i = ((($child$i$i)) + 4|0);
             $121 = HEAP32[$arrayidx96$i$i>>2]|0;
             $cmp97$i$i = ($121|0)==(0|0);
             if ($cmp97$i$i) {
              $122 = HEAP32[$child$i$i>>2]|0;
              $cmp100$i$i = ($122|0)==(0|0);
              if ($cmp100$i$i) {
               $R$3$i$i = 0;
               break;
              } else {
               $R$1$i$i$ph = $122;$RP$1$i$i$ph = $child$i$i;
              }
             } else {
              $R$1$i$i$ph = $121;$RP$1$i$i$ph = $arrayidx96$i$i;
             }
             $R$1$i$i = $R$1$i$i$ph;$RP$1$i$i = $RP$1$i$i$ph;
             while(1) {
              $arrayidx103$i$i = ((($R$1$i$i)) + 20|0);
              $123 = HEAP32[$arrayidx103$i$i>>2]|0;
              $cmp104$i$i = ($123|0)==(0|0);
              if ($cmp104$i$i) {
               $arrayidx107$i$i = ((($R$1$i$i)) + 16|0);
               $124 = HEAP32[$arrayidx107$i$i>>2]|0;
               $cmp108$i$i = ($124|0)==(0|0);
               if ($cmp108$i$i) {
                break;
               } else {
                $R$1$i$i$be = $124;$RP$1$i$i$be = $arrayidx107$i$i;
               }
              } else {
               $R$1$i$i$be = $123;$RP$1$i$i$be = $arrayidx103$i$i;
              }
              $R$1$i$i = $R$1$i$i$be;$RP$1$i$i = $RP$1$i$i$be;
             }
             HEAP32[$RP$1$i$i>>2] = 0;
             $R$3$i$i = $R$1$i$i;
            } else {
             $fd78$i$i = ((($add$ptr16$i$i)) + 8|0);
             $120 = HEAP32[$fd78$i$i>>2]|0;
             $bk91$i$i = ((($120)) + 12|0);
             HEAP32[$bk91$i$i>>2] = $119;
             $fd92$i$i = ((($119)) + 8|0);
             HEAP32[$fd92$i$i>>2] = $120;
             $R$3$i$i = $119;
            }
           } while(0);
           $cmp120$i28$i = ($118|0)==(0|0);
           if ($cmp120$i28$i) {
            break;
           }
           $index$i29$i = ((($add$ptr16$i$i)) + 28|0);
           $125 = HEAP32[$index$i29$i>>2]|0;
           $arrayidx123$i$i = (10496 + ($125<<2)|0);
           $126 = HEAP32[$arrayidx123$i$i>>2]|0;
           $cmp124$i$i = ($126|0)==($add$ptr16$i$i|0);
           do {
            if ($cmp124$i$i) {
             HEAP32[$arrayidx123$i$i>>2] = $R$3$i$i;
             $cond1$i$i = ($R$3$i$i|0)==(0|0);
             if (!($cond1$i$i)) {
              break;
             }
             $shl131$i$i = 1 << $125;
             $neg132$i$i = $shl131$i$i ^ -1;
             $127 = HEAP32[(10196)>>2]|0;
             $and133$i$i = $127 & $neg132$i$i;
             HEAP32[(10196)>>2] = $and133$i$i;
             break L246;
            } else {
             $arrayidx143$i$i = ((($118)) + 16|0);
             $128 = HEAP32[$arrayidx143$i$i>>2]|0;
             $cmp144$i$i = ($128|0)==($add$ptr16$i$i|0);
             $arrayidx151$i$i = ((($118)) + 20|0);
             $arrayidx151$i$i$sink = $cmp144$i$i ? $arrayidx143$i$i : $arrayidx151$i$i;
             HEAP32[$arrayidx151$i$i$sink>>2] = $R$3$i$i;
             $cmp156$i$i = ($R$3$i$i|0)==(0|0);
             if ($cmp156$i$i) {
              break L246;
             }
            }
           } while(0);
           $parent165$i$i = ((($R$3$i$i)) + 24|0);
           HEAP32[$parent165$i$i>>2] = $118;
           $child166$i$i = ((($add$ptr16$i$i)) + 16|0);
           $129 = HEAP32[$child166$i$i>>2]|0;
           $cmp168$i$i = ($129|0)==(0|0);
           if (!($cmp168$i$i)) {
            $arrayidx178$i$i = ((($R$3$i$i)) + 16|0);
            HEAP32[$arrayidx178$i$i>>2] = $129;
            $parent179$i$i = ((($129)) + 24|0);
            HEAP32[$parent179$i$i>>2] = $R$3$i$i;
           }
           $arrayidx184$i$i = ((($child166$i$i)) + 4|0);
           $130 = HEAP32[$arrayidx184$i$i>>2]|0;
           $cmp185$i$i = ($130|0)==(0|0);
           if ($cmp185$i$i) {
            break;
           }
           $arrayidx195$i$i = ((($R$3$i$i)) + 20|0);
           HEAP32[$arrayidx195$i$i>>2] = $130;
           $parent196$i$i = ((($130)) + 24|0);
           HEAP32[$parent196$i$i>>2] = $R$3$i$i;
          }
         } while(0);
         $add$ptr205$i$i = (($add$ptr16$i$i) + ($and37$i$i)|0);
         $add206$i$i = (($and37$i$i) + ($sub18$i$i))|0;
         $oldfirst$0$i$i = $add$ptr205$i$i;$qsize$0$i$i = $add206$i$i;
        } else {
         $oldfirst$0$i$i = $add$ptr16$i$i;$qsize$0$i$i = $sub18$i$i;
        }
        $head208$i$i = ((($oldfirst$0$i$i)) + 4|0);
        $131 = HEAP32[$head208$i$i>>2]|0;
        $and209$i$i = $131 & -2;
        HEAP32[$head208$i$i>>2] = $and209$i$i;
        $or210$i$i = $qsize$0$i$i | 1;
        $head211$i$i = ((($add$ptr17$i$i)) + 4|0);
        HEAP32[$head211$i$i>>2] = $or210$i$i;
        $add$ptr212$i$i = (($add$ptr17$i$i) + ($qsize$0$i$i)|0);
        HEAP32[$add$ptr212$i$i>>2] = $qsize$0$i$i;
        $shr214$i$i = $qsize$0$i$i >>> 3;
        $cmp215$i$i = ($qsize$0$i$i>>>0)<(256);
        if ($cmp215$i$i) {
         $shl222$i$i = $shr214$i$i << 1;
         $arrayidx223$i$i = (10232 + ($shl222$i$i<<2)|0);
         $132 = HEAP32[2548]|0;
         $shl226$i$i = 1 << $shr214$i$i;
         $and227$i$i = $132 & $shl226$i$i;
         $tobool228$i$i = ($and227$i$i|0)==(0);
         if ($tobool228$i$i) {
          $or232$i$i = $132 | $shl226$i$i;
          HEAP32[2548] = $or232$i$i;
          $$pre$i31$i = ((($arrayidx223$i$i)) + 8|0);
          $$pre$phi$i32$iZ2D = $$pre$i31$i;$F224$0$i$i = $arrayidx223$i$i;
         } else {
          $133 = ((($arrayidx223$i$i)) + 8|0);
          $134 = HEAP32[$133>>2]|0;
          $$pre$phi$i32$iZ2D = $133;$F224$0$i$i = $134;
         }
         HEAP32[$$pre$phi$i32$iZ2D>>2] = $add$ptr17$i$i;
         $bk246$i$i = ((($F224$0$i$i)) + 12|0);
         HEAP32[$bk246$i$i>>2] = $add$ptr17$i$i;
         $fd247$i$i = ((($add$ptr17$i$i)) + 8|0);
         HEAP32[$fd247$i$i>>2] = $F224$0$i$i;
         $bk248$i$i = ((($add$ptr17$i$i)) + 12|0);
         HEAP32[$bk248$i$i>>2] = $arrayidx223$i$i;
         break;
        }
        $shr253$i$i = $qsize$0$i$i >>> 8;
        $cmp254$i$i = ($shr253$i$i|0)==(0);
        do {
         if ($cmp254$i$i) {
          $I252$0$i$i = 0;
         } else {
          $cmp258$i$i = ($qsize$0$i$i>>>0)>(16777215);
          if ($cmp258$i$i) {
           $I252$0$i$i = 31;
           break;
          }
          $sub262$i$i = (($shr253$i$i) + 1048320)|0;
          $shr263$i$i = $sub262$i$i >>> 16;
          $and264$i$i = $shr263$i$i & 8;
          $shl265$i$i = $shr253$i$i << $and264$i$i;
          $sub266$i$i = (($shl265$i$i) + 520192)|0;
          $shr267$i$i = $sub266$i$i >>> 16;
          $and268$i$i = $shr267$i$i & 4;
          $add269$i$i = $and268$i$i | $and264$i$i;
          $shl270$i$i = $shl265$i$i << $and268$i$i;
          $sub271$i$i = (($shl270$i$i) + 245760)|0;
          $shr272$i$i = $sub271$i$i >>> 16;
          $and273$i$i = $shr272$i$i & 2;
          $add274$i$i = $add269$i$i | $and273$i$i;
          $sub275$i$i = (14 - ($add274$i$i))|0;
          $shl276$i$i = $shl270$i$i << $and273$i$i;
          $shr277$i$i = $shl276$i$i >>> 15;
          $add278$i$i = (($sub275$i$i) + ($shr277$i$i))|0;
          $shl279$i$i = $add278$i$i << 1;
          $add280$i$i = (($add278$i$i) + 7)|0;
          $shr281$i$i = $qsize$0$i$i >>> $add280$i$i;
          $and282$i$i = $shr281$i$i & 1;
          $add283$i$i = $and282$i$i | $shl279$i$i;
          $I252$0$i$i = $add283$i$i;
         }
        } while(0);
        $arrayidx287$i$i = (10496 + ($I252$0$i$i<<2)|0);
        $index288$i$i = ((($add$ptr17$i$i)) + 28|0);
        HEAP32[$index288$i$i>>2] = $I252$0$i$i;
        $child289$i$i = ((($add$ptr17$i$i)) + 16|0);
        $arrayidx290$i$i = ((($child289$i$i)) + 4|0);
        HEAP32[$arrayidx290$i$i>>2] = 0;
        HEAP32[$child289$i$i>>2] = 0;
        $135 = HEAP32[(10196)>>2]|0;
        $shl294$i$i = 1 << $I252$0$i$i;
        $and295$i$i = $135 & $shl294$i$i;
        $tobool296$i$i = ($and295$i$i|0)==(0);
        if ($tobool296$i$i) {
         $or300$i$i = $135 | $shl294$i$i;
         HEAP32[(10196)>>2] = $or300$i$i;
         HEAP32[$arrayidx287$i$i>>2] = $add$ptr17$i$i;
         $parent301$i$i = ((($add$ptr17$i$i)) + 24|0);
         HEAP32[$parent301$i$i>>2] = $arrayidx287$i$i;
         $bk302$i$i = ((($add$ptr17$i$i)) + 12|0);
         HEAP32[$bk302$i$i>>2] = $add$ptr17$i$i;
         $fd303$i$i = ((($add$ptr17$i$i)) + 8|0);
         HEAP32[$fd303$i$i>>2] = $add$ptr17$i$i;
         break;
        }
        $136 = HEAP32[$arrayidx287$i$i>>2]|0;
        $head3174$i$i = ((($136)) + 4|0);
        $137 = HEAP32[$head3174$i$i>>2]|0;
        $and3185$i$i = $137 & -8;
        $cmp3196$i$i = ($and3185$i$i|0)==($qsize$0$i$i|0);
        L291: do {
         if ($cmp3196$i$i) {
          $T$0$lcssa$i34$i = $136;
         } else {
          $cmp306$i$i = ($I252$0$i$i|0)==(31);
          $shr310$i$i = $I252$0$i$i >>> 1;
          $sub313$i$i = (25 - ($shr310$i$i))|0;
          $cond315$i$i = $cmp306$i$i ? 0 : $sub313$i$i;
          $shl316$i$i = $qsize$0$i$i << $cond315$i$i;
          $K305$08$i$i = $shl316$i$i;$T$07$i$i = $136;
          while(1) {
           $shr323$i$i = $K305$08$i$i >>> 31;
           $arrayidx325$i$i = (((($T$07$i$i)) + 16|0) + ($shr323$i$i<<2)|0);
           $138 = HEAP32[$arrayidx325$i$i>>2]|0;
           $cmp327$i$i = ($138|0)==(0|0);
           if ($cmp327$i$i) {
            break;
           }
           $shl326$i$i = $K305$08$i$i << 1;
           $head317$i$i = ((($138)) + 4|0);
           $139 = HEAP32[$head317$i$i>>2]|0;
           $and318$i$i = $139 & -8;
           $cmp319$i$i = ($and318$i$i|0)==($qsize$0$i$i|0);
           if ($cmp319$i$i) {
            $T$0$lcssa$i34$i = $138;
            break L291;
           } else {
            $K305$08$i$i = $shl326$i$i;$T$07$i$i = $138;
           }
          }
          HEAP32[$arrayidx325$i$i>>2] = $add$ptr17$i$i;
          $parent337$i$i = ((($add$ptr17$i$i)) + 24|0);
          HEAP32[$parent337$i$i>>2] = $T$07$i$i;
          $bk338$i$i = ((($add$ptr17$i$i)) + 12|0);
          HEAP32[$bk338$i$i>>2] = $add$ptr17$i$i;
          $fd339$i$i = ((($add$ptr17$i$i)) + 8|0);
          HEAP32[$fd339$i$i>>2] = $add$ptr17$i$i;
          break L238;
         }
        } while(0);
        $fd344$i$i = ((($T$0$lcssa$i34$i)) + 8|0);
        $140 = HEAP32[$fd344$i$i>>2]|0;
        $bk357$i$i = ((($140)) + 12|0);
        HEAP32[$bk357$i$i>>2] = $add$ptr17$i$i;
        HEAP32[$fd344$i$i>>2] = $add$ptr17$i$i;
        $fd359$i$i = ((($add$ptr17$i$i)) + 8|0);
        HEAP32[$fd359$i$i>>2] = $140;
        $bk360$i$i = ((($add$ptr17$i$i)) + 12|0);
        HEAP32[$bk360$i$i>>2] = $T$0$lcssa$i34$i;
        $parent361$i$i = ((($add$ptr17$i$i)) + 24|0);
        HEAP32[$parent361$i$i>>2] = 0;
       }
      } while(0);
      $add$ptr369$i$i = ((($add$ptr4$i$i)) + 8|0);
      $retval$0 = $add$ptr369$i$i;
      STACKTOP = sp;return ($retval$0|0);
     }
    }
    $sp$0$i$i$i = (10640);
    while(1) {
     $141 = HEAP32[$sp$0$i$i$i>>2]|0;
     $cmp$i$i$i = ($141>>>0)>($92>>>0);
     if (!($cmp$i$i$i)) {
      $size$i$i$i = ((($sp$0$i$i$i)) + 4|0);
      $142 = HEAP32[$size$i$i$i>>2]|0;
      $add$ptr$i$i$i = (($141) + ($142)|0);
      $cmp2$i$i$i = ($add$ptr$i$i$i>>>0)>($92>>>0);
      if ($cmp2$i$i$i) {
       break;
      }
     }
     $next$i$i$i = ((($sp$0$i$i$i)) + 8|0);
     $143 = HEAP32[$next$i$i$i>>2]|0;
     $sp$0$i$i$i = $143;
    }
    $add$ptr2$i$i = ((($add$ptr$i$i$i)) + -47|0);
    $add$ptr3$i$i = ((($add$ptr2$i$i)) + 8|0);
    $144 = $add$ptr3$i$i;
    $and$i$i = $144 & 7;
    $cmp$i12$i = ($and$i$i|0)==(0);
    $sub$i$i = (0 - ($144))|0;
    $and6$i13$i = $sub$i$i & 7;
    $cond$i$i = $cmp$i12$i ? 0 : $and6$i13$i;
    $add$ptr7$i$i = (($add$ptr2$i$i) + ($cond$i$i)|0);
    $add$ptr81$i$i = ((($92)) + 16|0);
    $cmp9$i$i = ($add$ptr7$i$i>>>0)<($add$ptr81$i$i>>>0);
    $cond13$i$i = $cmp9$i$i ? $92 : $add$ptr7$i$i;
    $add$ptr14$i$i = ((($cond13$i$i)) + 8|0);
    $add$ptr15$i$i = ((($cond13$i$i)) + 24|0);
    $sub16$i$i = (($tsize$794$i) + -40)|0;
    $add$ptr$i2$i$i = ((($tbase$795$i)) + 8|0);
    $145 = $add$ptr$i2$i$i;
    $and$i$i$i = $145 & 7;
    $cmp$i3$i$i = ($and$i$i$i|0)==(0);
    $sub$i$i$i = (0 - ($145))|0;
    $and3$i$i$i = $sub$i$i$i & 7;
    $cond$i$i$i = $cmp$i3$i$i ? 0 : $and3$i$i$i;
    $add$ptr4$i$i$i = (($tbase$795$i) + ($cond$i$i$i)|0);
    $sub5$i$i$i = (($sub16$i$i) - ($cond$i$i$i))|0;
    HEAP32[(10216)>>2] = $add$ptr4$i$i$i;
    HEAP32[(10204)>>2] = $sub5$i$i$i;
    $or$i$i$i = $sub5$i$i$i | 1;
    $head$i$i$i = ((($add$ptr4$i$i$i)) + 4|0);
    HEAP32[$head$i$i$i>>2] = $or$i$i$i;
    $add$ptr6$i$i$i = (($tbase$795$i) + ($sub16$i$i)|0);
    $head7$i$i$i = ((($add$ptr6$i$i$i)) + 4|0);
    HEAP32[$head7$i$i$i>>2] = 40;
    $146 = HEAP32[(10680)>>2]|0;
    HEAP32[(10220)>>2] = $146;
    $head$i$i = ((($cond13$i$i)) + 4|0);
    HEAP32[$head$i$i>>2] = 27;
    ;HEAP32[$add$ptr14$i$i>>2]=HEAP32[(10640)>>2]|0;HEAP32[$add$ptr14$i$i+4>>2]=HEAP32[(10640)+4>>2]|0;HEAP32[$add$ptr14$i$i+8>>2]=HEAP32[(10640)+8>>2]|0;HEAP32[$add$ptr14$i$i+12>>2]=HEAP32[(10640)+12>>2]|0;
    HEAP32[(10640)>>2] = $tbase$795$i;
    HEAP32[(10644)>>2] = $tsize$794$i;
    HEAP32[(10652)>>2] = 0;
    HEAP32[(10648)>>2] = $add$ptr14$i$i;
    $147 = $add$ptr15$i$i;
    while(1) {
     $add$ptr24$i$i = ((($147)) + 4|0);
     HEAP32[$add$ptr24$i$i>>2] = 7;
     $head26$i$i = ((($147)) + 8|0);
     $cmp27$i$i = ($head26$i$i>>>0)<($add$ptr$i$i$i>>>0);
     if ($cmp27$i$i) {
      $147 = $add$ptr24$i$i;
     } else {
      break;
     }
    }
    $cmp28$i$i = ($cond13$i$i|0)==($92|0);
    if (!($cmp28$i$i)) {
     $sub$ptr$lhs$cast$i$i = $cond13$i$i;
     $sub$ptr$rhs$cast$i$i = $92;
     $sub$ptr$sub$i$i = (($sub$ptr$lhs$cast$i$i) - ($sub$ptr$rhs$cast$i$i))|0;
     $148 = HEAP32[$head$i$i>>2]|0;
     $and32$i$i = $148 & -2;
     HEAP32[$head$i$i>>2] = $and32$i$i;
     $or33$i$i = $sub$ptr$sub$i$i | 1;
     $head34$i$i = ((($92)) + 4|0);
     HEAP32[$head34$i$i>>2] = $or33$i$i;
     HEAP32[$cond13$i$i>>2] = $sub$ptr$sub$i$i;
     $shr$i$i = $sub$ptr$sub$i$i >>> 3;
     $cmp36$i$i = ($sub$ptr$sub$i$i>>>0)<(256);
     if ($cmp36$i$i) {
      $shl$i$i = $shr$i$i << 1;
      $arrayidx$i$i = (10232 + ($shl$i$i<<2)|0);
      $149 = HEAP32[2548]|0;
      $shl39$i$i = 1 << $shr$i$i;
      $and40$i$i = $149 & $shl39$i$i;
      $tobool$i$i = ($and40$i$i|0)==(0);
      if ($tobool$i$i) {
       $or44$i$i = $149 | $shl39$i$i;
       HEAP32[2548] = $or44$i$i;
       $$pre$i$i = ((($arrayidx$i$i)) + 8|0);
       $$pre$phi$i$iZ2D = $$pre$i$i;$F$0$i$i = $arrayidx$i$i;
      } else {
       $150 = ((($arrayidx$i$i)) + 8|0);
       $151 = HEAP32[$150>>2]|0;
       $$pre$phi$i$iZ2D = $150;$F$0$i$i = $151;
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $92;
      $bk$i$i = ((($F$0$i$i)) + 12|0);
      HEAP32[$bk$i$i>>2] = $92;
      $fd54$i$i = ((($92)) + 8|0);
      HEAP32[$fd54$i$i>>2] = $F$0$i$i;
      $bk55$i$i = ((($92)) + 12|0);
      HEAP32[$bk55$i$i>>2] = $arrayidx$i$i;
      break;
     }
     $shr58$i$i = $sub$ptr$sub$i$i >>> 8;
     $cmp59$i$i = ($shr58$i$i|0)==(0);
     if ($cmp59$i$i) {
      $I57$0$i$i = 0;
     } else {
      $cmp63$i$i = ($sub$ptr$sub$i$i>>>0)>(16777215);
      if ($cmp63$i$i) {
       $I57$0$i$i = 31;
      } else {
       $sub67$i$i = (($shr58$i$i) + 1048320)|0;
       $shr68$i$i = $sub67$i$i >>> 16;
       $and69$i$i = $shr68$i$i & 8;
       $shl70$i$i = $shr58$i$i << $and69$i$i;
       $sub71$i$i = (($shl70$i$i) + 520192)|0;
       $shr72$i$i = $sub71$i$i >>> 16;
       $and73$i$i = $shr72$i$i & 4;
       $add74$i$i = $and73$i$i | $and69$i$i;
       $shl75$i$i = $shl70$i$i << $and73$i$i;
       $sub76$i$i = (($shl75$i$i) + 245760)|0;
       $shr77$i$i = $sub76$i$i >>> 16;
       $and78$i$i = $shr77$i$i & 2;
       $add79$i$i = $add74$i$i | $and78$i$i;
       $sub80$i$i = (14 - ($add79$i$i))|0;
       $shl81$i$i = $shl75$i$i << $and78$i$i;
       $shr82$i$i = $shl81$i$i >>> 15;
       $add83$i$i = (($sub80$i$i) + ($shr82$i$i))|0;
       $shl84$i$i = $add83$i$i << 1;
       $add85$i$i = (($add83$i$i) + 7)|0;
       $shr86$i$i = $sub$ptr$sub$i$i >>> $add85$i$i;
       $and87$i$i = $shr86$i$i & 1;
       $add88$i$i = $and87$i$i | $shl84$i$i;
       $I57$0$i$i = $add88$i$i;
      }
     }
     $arrayidx91$i$i = (10496 + ($I57$0$i$i<<2)|0);
     $index$i$i = ((($92)) + 28|0);
     HEAP32[$index$i$i>>2] = $I57$0$i$i;
     $arrayidx92$i$i = ((($92)) + 20|0);
     HEAP32[$arrayidx92$i$i>>2] = 0;
     HEAP32[$add$ptr81$i$i>>2] = 0;
     $152 = HEAP32[(10196)>>2]|0;
     $shl95$i$i = 1 << $I57$0$i$i;
     $and96$i$i = $152 & $shl95$i$i;
     $tobool97$i$i = ($and96$i$i|0)==(0);
     if ($tobool97$i$i) {
      $or101$i$i = $152 | $shl95$i$i;
      HEAP32[(10196)>>2] = $or101$i$i;
      HEAP32[$arrayidx91$i$i>>2] = $92;
      $parent$i$i = ((($92)) + 24|0);
      HEAP32[$parent$i$i>>2] = $arrayidx91$i$i;
      $bk102$i$i = ((($92)) + 12|0);
      HEAP32[$bk102$i$i>>2] = $92;
      $fd103$i$i = ((($92)) + 8|0);
      HEAP32[$fd103$i$i>>2] = $92;
      break;
     }
     $153 = HEAP32[$arrayidx91$i$i>>2]|0;
     $head1186$i$i = ((($153)) + 4|0);
     $154 = HEAP32[$head1186$i$i>>2]|0;
     $and1197$i$i = $154 & -8;
     $cmp1208$i$i = ($and1197$i$i|0)==($sub$ptr$sub$i$i|0);
     L325: do {
      if ($cmp1208$i$i) {
       $T$0$lcssa$i$i = $153;
      } else {
       $cmp106$i$i = ($I57$0$i$i|0)==(31);
       $shr110$i$i = $I57$0$i$i >>> 1;
       $sub113$i$i = (25 - ($shr110$i$i))|0;
       $cond115$i$i = $cmp106$i$i ? 0 : $sub113$i$i;
       $shl116$i$i = $sub$ptr$sub$i$i << $cond115$i$i;
       $K105$010$i$i = $shl116$i$i;$T$09$i$i = $153;
       while(1) {
        $shr124$i$i = $K105$010$i$i >>> 31;
        $arrayidx126$i$i = (((($T$09$i$i)) + 16|0) + ($shr124$i$i<<2)|0);
        $155 = HEAP32[$arrayidx126$i$i>>2]|0;
        $cmp128$i$i = ($155|0)==(0|0);
        if ($cmp128$i$i) {
         break;
        }
        $shl127$i$i = $K105$010$i$i << 1;
        $head118$i$i = ((($155)) + 4|0);
        $156 = HEAP32[$head118$i$i>>2]|0;
        $and119$i$i = $156 & -8;
        $cmp120$i$i = ($and119$i$i|0)==($sub$ptr$sub$i$i|0);
        if ($cmp120$i$i) {
         $T$0$lcssa$i$i = $155;
         break L325;
        } else {
         $K105$010$i$i = $shl127$i$i;$T$09$i$i = $155;
        }
       }
       HEAP32[$arrayidx126$i$i>>2] = $92;
       $parent138$i$i = ((($92)) + 24|0);
       HEAP32[$parent138$i$i>>2] = $T$09$i$i;
       $bk139$i$i = ((($92)) + 12|0);
       HEAP32[$bk139$i$i>>2] = $92;
       $fd140$i$i = ((($92)) + 8|0);
       HEAP32[$fd140$i$i>>2] = $92;
       break L215;
      }
     } while(0);
     $fd148$i$i = ((($T$0$lcssa$i$i)) + 8|0);
     $157 = HEAP32[$fd148$i$i>>2]|0;
     $bk158$i$i = ((($157)) + 12|0);
     HEAP32[$bk158$i$i>>2] = $92;
     HEAP32[$fd148$i$i>>2] = $92;
     $fd160$i$i = ((($92)) + 8|0);
     HEAP32[$fd160$i$i>>2] = $157;
     $bk161$i$i = ((($92)) + 12|0);
     HEAP32[$bk161$i$i>>2] = $T$0$lcssa$i$i;
     $parent162$i$i = ((($92)) + 24|0);
     HEAP32[$parent162$i$i>>2] = 0;
    }
   }
  } while(0);
  $158 = HEAP32[(10204)>>2]|0;
  $cmp257$i = ($158>>>0)>($nb$0>>>0);
  if ($cmp257$i) {
   $sub260$i = (($158) - ($nb$0))|0;
   HEAP32[(10204)>>2] = $sub260$i;
   $159 = HEAP32[(10216)>>2]|0;
   $add$ptr262$i = (($159) + ($nb$0)|0);
   HEAP32[(10216)>>2] = $add$ptr262$i;
   $or264$i = $sub260$i | 1;
   $head265$i = ((($add$ptr262$i)) + 4|0);
   HEAP32[$head265$i>>2] = $or264$i;
   $or267$i = $nb$0 | 3;
   $head268$i = ((($159)) + 4|0);
   HEAP32[$head268$i>>2] = $or267$i;
   $add$ptr269$i = ((($159)) + 8|0);
   $retval$0 = $add$ptr269$i;
   STACKTOP = sp;return ($retval$0|0);
  }
 }
 $call275$i = (___errno_location()|0);
 HEAP32[$call275$i>>2] = 12;
 $retval$0 = 0;
 STACKTOP = sp;return ($retval$0|0);
}
function _free($mem) {
 $mem = $mem|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $F510$0 = 0, $I534$0 = 0, $K583$0266 = 0;
 var $R$1 = 0, $R$1$be = 0, $R$1$ph = 0, $R$3 = 0, $R332$1 = 0, $R332$1$be = 0, $R332$1$ph = 0, $R332$3 = 0, $RP$1 = 0, $RP$1$be = 0, $RP$1$ph = 0, $RP360$1 = 0, $RP360$1$be = 0, $RP360$1$ph = 0, $T$0$lcssa = 0, $T$0265 = 0, $add$ptr = 0, $add$ptr16 = 0, $add$ptr217 = 0, $add$ptr261 = 0;
 var $add$ptr482 = 0, $add$ptr498 = 0, $add$ptr6 = 0, $add17 = 0, $add246 = 0, $add258 = 0, $add267 = 0, $add550 = 0, $add555 = 0, $add559 = 0, $add561 = 0, $add564 = 0, $and12 = 0, $and140 = 0, $and210 = 0, $and215 = 0, $and232 = 0, $and240 = 0, $and266 = 0, $and301 = 0;
 var $and410 = 0, $and46 = 0, $and495 = 0, $and5 = 0, $and512 = 0, $and545 = 0, $and549 = 0, $and554 = 0, $and563 = 0, $and574 = 0, $and592 = 0, $and592263 = 0, $and8 = 0, $arrayidx108 = 0, $arrayidx113 = 0, $arrayidx130 = 0, $arrayidx149 = 0, $arrayidx157 = 0, $arrayidx157$sink = 0, $arrayidx182 = 0;
 var $arrayidx188 = 0, $arrayidx198 = 0, $arrayidx362 = 0, $arrayidx374 = 0, $arrayidx379 = 0, $arrayidx400 = 0, $arrayidx419 = 0, $arrayidx427 = 0, $arrayidx427$sink = 0, $arrayidx454 = 0, $arrayidx460 = 0, $arrayidx470 = 0, $arrayidx509 = 0, $arrayidx567 = 0, $arrayidx570 = 0, $arrayidx599 = 0, $arrayidx99 = 0, $bk = 0, $bk275 = 0, $bk321 = 0;
 var $bk333 = 0, $bk355 = 0, $bk529 = 0, $bk531 = 0, $bk580 = 0, $bk611 = 0, $bk631 = 0, $bk634 = 0, $bk66 = 0, $bk73 = 0, $bk94 = 0, $child = 0, $child171 = 0, $child361 = 0, $child443 = 0, $child569 = 0, $cmp = 0, $cmp$i = 0, $cmp100 = 0, $cmp104 = 0;
 var $cmp109 = 0, $cmp114 = 0, $cmp127 = 0, $cmp13 = 0, $cmp131 = 0, $cmp150 = 0, $cmp162 = 0, $cmp173 = 0, $cmp18 = 0, $cmp189 = 0, $cmp211 = 0, $cmp22 = 0, $cmp228 = 0, $cmp243 = 0, $cmp249 = 0, $cmp25 = 0, $cmp255 = 0, $cmp269 = 0, $cmp296 = 0, $cmp334 = 0;
 var $cmp363 = 0, $cmp368 = 0, $cmp375 = 0, $cmp380 = 0, $cmp395 = 0, $cmp401 = 0, $cmp42 = 0, $cmp420 = 0, $cmp432 = 0, $cmp445 = 0, $cmp461 = 0, $cmp484 = 0, $cmp502 = 0, $cmp536 = 0, $cmp540 = 0, $cmp584 = 0, $cmp593 = 0, $cmp593264 = 0, $cmp601 = 0, $cmp640 = 0;
 var $cmp74 = 0, $cond = 0, $cond254 = 0, $cond255 = 0, $dec = 0, $fd = 0, $fd273 = 0, $fd322 = 0, $fd338 = 0, $fd356 = 0, $fd530 = 0, $fd581 = 0, $fd612 = 0, $fd620 = 0, $fd633 = 0, $fd67 = 0, $fd78 = 0, $fd95 = 0, $head209 = 0, $head216 = 0;
 var $head231 = 0, $head248 = 0, $head260 = 0, $head4 = 0, $head481 = 0, $head497 = 0, $head591 = 0, $head591262 = 0, $idx$neg = 0, $index = 0, $index399 = 0, $index568 = 0, $neg = 0, $neg139 = 0, $neg300 = 0, $neg409 = 0, $next4$i = 0, $or = 0, $or247 = 0, $or259 = 0;
 var $or480 = 0, $or496 = 0, $or516 = 0, $or578 = 0, $p$1 = 0, $parent = 0, $parent170 = 0, $parent183 = 0, $parent199 = 0, $parent331 = 0, $parent442 = 0, $parent455 = 0, $parent471 = 0, $parent579 = 0, $parent610 = 0, $parent635 = 0, $psize$1 = 0, $psize$2 = 0, $shl138 = 0, $shl299 = 0;
 var $shl408 = 0, $shl45 = 0, $shl508 = 0, $shl511 = 0, $shl546 = 0, $shl551 = 0, $shl557 = 0, $shl560 = 0, $shl573 = 0, $shl590 = 0, $shl600 = 0, $shr = 0, $shr268 = 0, $shr501 = 0, $shr535 = 0, $shr544 = 0, $shr548 = 0, $shr553 = 0, $shr558 = 0, $shr562 = 0;
 var $shr586 = 0, $shr597 = 0, $sp$0$i = 0, $sp$0$in$i = 0, $sub = 0, $sub547 = 0, $sub552 = 0, $sub556 = 0, $sub589 = 0, $tobool233 = 0, $tobool241 = 0, $tobool513 = 0, $tobool575 = 0, $tobool9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($mem|0)==(0|0);
 if ($cmp) {
  return;
 }
 $add$ptr = ((($mem)) + -8|0);
 $0 = HEAP32[(10208)>>2]|0;
 $head4 = ((($mem)) + -4|0);
 $1 = HEAP32[$head4>>2]|0;
 $and5 = $1 & -8;
 $add$ptr6 = (($add$ptr) + ($and5)|0);
 $and8 = $1 & 1;
 $tobool9 = ($and8|0)==(0);
 do {
  if ($tobool9) {
   $2 = HEAP32[$add$ptr>>2]|0;
   $and12 = $1 & 3;
   $cmp13 = ($and12|0)==(0);
   if ($cmp13) {
    return;
   }
   $idx$neg = (0 - ($2))|0;
   $add$ptr16 = (($add$ptr) + ($idx$neg)|0);
   $add17 = (($2) + ($and5))|0;
   $cmp18 = ($add$ptr16>>>0)<($0>>>0);
   if ($cmp18) {
    return;
   }
   $3 = HEAP32[(10212)>>2]|0;
   $cmp22 = ($3|0)==($add$ptr16|0);
   if ($cmp22) {
    $head209 = ((($add$ptr6)) + 4|0);
    $20 = HEAP32[$head209>>2]|0;
    $and210 = $20 & 3;
    $cmp211 = ($and210|0)==(3);
    if (!($cmp211)) {
     $21 = $add$ptr16;$p$1 = $add$ptr16;$psize$1 = $add17;
     break;
    }
    $add$ptr217 = (($add$ptr16) + ($add17)|0);
    $head216 = ((($add$ptr16)) + 4|0);
    $or = $add17 | 1;
    $and215 = $20 & -2;
    HEAP32[(10200)>>2] = $add17;
    HEAP32[$head209>>2] = $and215;
    HEAP32[$head216>>2] = $or;
    HEAP32[$add$ptr217>>2] = $add17;
    return;
   }
   $shr = $2 >>> 3;
   $cmp25 = ($2>>>0)<(256);
   if ($cmp25) {
    $fd = ((($add$ptr16)) + 8|0);
    $4 = HEAP32[$fd>>2]|0;
    $bk = ((($add$ptr16)) + 12|0);
    $5 = HEAP32[$bk>>2]|0;
    $cmp42 = ($5|0)==($4|0);
    if ($cmp42) {
     $shl45 = 1 << $shr;
     $neg = $shl45 ^ -1;
     $6 = HEAP32[2548]|0;
     $and46 = $6 & $neg;
     HEAP32[2548] = $and46;
     $21 = $add$ptr16;$p$1 = $add$ptr16;$psize$1 = $add17;
     break;
    } else {
     $bk66 = ((($4)) + 12|0);
     HEAP32[$bk66>>2] = $5;
     $fd67 = ((($5)) + 8|0);
     HEAP32[$fd67>>2] = $4;
     $21 = $add$ptr16;$p$1 = $add$ptr16;$psize$1 = $add17;
     break;
    }
   }
   $parent = ((($add$ptr16)) + 24|0);
   $7 = HEAP32[$parent>>2]|0;
   $bk73 = ((($add$ptr16)) + 12|0);
   $8 = HEAP32[$bk73>>2]|0;
   $cmp74 = ($8|0)==($add$ptr16|0);
   do {
    if ($cmp74) {
     $child = ((($add$ptr16)) + 16|0);
     $arrayidx99 = ((($child)) + 4|0);
     $10 = HEAP32[$arrayidx99>>2]|0;
     $cmp100 = ($10|0)==(0|0);
     if ($cmp100) {
      $11 = HEAP32[$child>>2]|0;
      $cmp104 = ($11|0)==(0|0);
      if ($cmp104) {
       $R$3 = 0;
       break;
      } else {
       $R$1$ph = $11;$RP$1$ph = $child;
      }
     } else {
      $R$1$ph = $10;$RP$1$ph = $arrayidx99;
     }
     $R$1 = $R$1$ph;$RP$1 = $RP$1$ph;
     while(1) {
      $arrayidx108 = ((($R$1)) + 20|0);
      $12 = HEAP32[$arrayidx108>>2]|0;
      $cmp109 = ($12|0)==(0|0);
      if ($cmp109) {
       $arrayidx113 = ((($R$1)) + 16|0);
       $13 = HEAP32[$arrayidx113>>2]|0;
       $cmp114 = ($13|0)==(0|0);
       if ($cmp114) {
        break;
       } else {
        $R$1$be = $13;$RP$1$be = $arrayidx113;
       }
      } else {
       $R$1$be = $12;$RP$1$be = $arrayidx108;
      }
      $R$1 = $R$1$be;$RP$1 = $RP$1$be;
     }
     HEAP32[$RP$1>>2] = 0;
     $R$3 = $R$1;
    } else {
     $fd78 = ((($add$ptr16)) + 8|0);
     $9 = HEAP32[$fd78>>2]|0;
     $bk94 = ((($9)) + 12|0);
     HEAP32[$bk94>>2] = $8;
     $fd95 = ((($8)) + 8|0);
     HEAP32[$fd95>>2] = $9;
     $R$3 = $8;
    }
   } while(0);
   $cmp127 = ($7|0)==(0|0);
   if ($cmp127) {
    $21 = $add$ptr16;$p$1 = $add$ptr16;$psize$1 = $add17;
   } else {
    $index = ((($add$ptr16)) + 28|0);
    $14 = HEAP32[$index>>2]|0;
    $arrayidx130 = (10496 + ($14<<2)|0);
    $15 = HEAP32[$arrayidx130>>2]|0;
    $cmp131 = ($15|0)==($add$ptr16|0);
    if ($cmp131) {
     HEAP32[$arrayidx130>>2] = $R$3;
     $cond254 = ($R$3|0)==(0|0);
     if ($cond254) {
      $shl138 = 1 << $14;
      $neg139 = $shl138 ^ -1;
      $16 = HEAP32[(10196)>>2]|0;
      $and140 = $16 & $neg139;
      HEAP32[(10196)>>2] = $and140;
      $21 = $add$ptr16;$p$1 = $add$ptr16;$psize$1 = $add17;
      break;
     }
    } else {
     $arrayidx149 = ((($7)) + 16|0);
     $17 = HEAP32[$arrayidx149>>2]|0;
     $cmp150 = ($17|0)==($add$ptr16|0);
     $arrayidx157 = ((($7)) + 20|0);
     $arrayidx157$sink = $cmp150 ? $arrayidx149 : $arrayidx157;
     HEAP32[$arrayidx157$sink>>2] = $R$3;
     $cmp162 = ($R$3|0)==(0|0);
     if ($cmp162) {
      $21 = $add$ptr16;$p$1 = $add$ptr16;$psize$1 = $add17;
      break;
     }
    }
    $parent170 = ((($R$3)) + 24|0);
    HEAP32[$parent170>>2] = $7;
    $child171 = ((($add$ptr16)) + 16|0);
    $18 = HEAP32[$child171>>2]|0;
    $cmp173 = ($18|0)==(0|0);
    if (!($cmp173)) {
     $arrayidx182 = ((($R$3)) + 16|0);
     HEAP32[$arrayidx182>>2] = $18;
     $parent183 = ((($18)) + 24|0);
     HEAP32[$parent183>>2] = $R$3;
    }
    $arrayidx188 = ((($child171)) + 4|0);
    $19 = HEAP32[$arrayidx188>>2]|0;
    $cmp189 = ($19|0)==(0|0);
    if ($cmp189) {
     $21 = $add$ptr16;$p$1 = $add$ptr16;$psize$1 = $add17;
    } else {
     $arrayidx198 = ((($R$3)) + 20|0);
     HEAP32[$arrayidx198>>2] = $19;
     $parent199 = ((($19)) + 24|0);
     HEAP32[$parent199>>2] = $R$3;
     $21 = $add$ptr16;$p$1 = $add$ptr16;$psize$1 = $add17;
    }
   }
  } else {
   $21 = $add$ptr;$p$1 = $add$ptr;$psize$1 = $and5;
  }
 } while(0);
 $cmp228 = ($21>>>0)<($add$ptr6>>>0);
 if (!($cmp228)) {
  return;
 }
 $head231 = ((($add$ptr6)) + 4|0);
 $22 = HEAP32[$head231>>2]|0;
 $and232 = $22 & 1;
 $tobool233 = ($and232|0)==(0);
 if ($tobool233) {
  return;
 }
 $and240 = $22 & 2;
 $tobool241 = ($and240|0)==(0);
 if ($tobool241) {
  $23 = HEAP32[(10216)>>2]|0;
  $cmp243 = ($23|0)==($add$ptr6|0);
  if ($cmp243) {
   $24 = HEAP32[(10204)>>2]|0;
   $add246 = (($24) + ($psize$1))|0;
   HEAP32[(10204)>>2] = $add246;
   HEAP32[(10216)>>2] = $p$1;
   $or247 = $add246 | 1;
   $head248 = ((($p$1)) + 4|0);
   HEAP32[$head248>>2] = $or247;
   $25 = HEAP32[(10212)>>2]|0;
   $cmp249 = ($p$1|0)==($25|0);
   if (!($cmp249)) {
    return;
   }
   HEAP32[(10212)>>2] = 0;
   HEAP32[(10200)>>2] = 0;
   return;
  }
  $26 = HEAP32[(10212)>>2]|0;
  $cmp255 = ($26|0)==($add$ptr6|0);
  if ($cmp255) {
   $27 = HEAP32[(10200)>>2]|0;
   $add258 = (($27) + ($psize$1))|0;
   HEAP32[(10200)>>2] = $add258;
   HEAP32[(10212)>>2] = $21;
   $or259 = $add258 | 1;
   $head260 = ((($p$1)) + 4|0);
   HEAP32[$head260>>2] = $or259;
   $add$ptr261 = (($21) + ($add258)|0);
   HEAP32[$add$ptr261>>2] = $add258;
   return;
  }
  $and266 = $22 & -8;
  $add267 = (($and266) + ($psize$1))|0;
  $shr268 = $22 >>> 3;
  $cmp269 = ($22>>>0)<(256);
  do {
   if ($cmp269) {
    $fd273 = ((($add$ptr6)) + 8|0);
    $28 = HEAP32[$fd273>>2]|0;
    $bk275 = ((($add$ptr6)) + 12|0);
    $29 = HEAP32[$bk275>>2]|0;
    $cmp296 = ($29|0)==($28|0);
    if ($cmp296) {
     $shl299 = 1 << $shr268;
     $neg300 = $shl299 ^ -1;
     $30 = HEAP32[2548]|0;
     $and301 = $30 & $neg300;
     HEAP32[2548] = $and301;
     break;
    } else {
     $bk321 = ((($28)) + 12|0);
     HEAP32[$bk321>>2] = $29;
     $fd322 = ((($29)) + 8|0);
     HEAP32[$fd322>>2] = $28;
     break;
    }
   } else {
    $parent331 = ((($add$ptr6)) + 24|0);
    $31 = HEAP32[$parent331>>2]|0;
    $bk333 = ((($add$ptr6)) + 12|0);
    $32 = HEAP32[$bk333>>2]|0;
    $cmp334 = ($32|0)==($add$ptr6|0);
    do {
     if ($cmp334) {
      $child361 = ((($add$ptr6)) + 16|0);
      $arrayidx362 = ((($child361)) + 4|0);
      $34 = HEAP32[$arrayidx362>>2]|0;
      $cmp363 = ($34|0)==(0|0);
      if ($cmp363) {
       $35 = HEAP32[$child361>>2]|0;
       $cmp368 = ($35|0)==(0|0);
       if ($cmp368) {
        $R332$3 = 0;
        break;
       } else {
        $R332$1$ph = $35;$RP360$1$ph = $child361;
       }
      } else {
       $R332$1$ph = $34;$RP360$1$ph = $arrayidx362;
      }
      $R332$1 = $R332$1$ph;$RP360$1 = $RP360$1$ph;
      while(1) {
       $arrayidx374 = ((($R332$1)) + 20|0);
       $36 = HEAP32[$arrayidx374>>2]|0;
       $cmp375 = ($36|0)==(0|0);
       if ($cmp375) {
        $arrayidx379 = ((($R332$1)) + 16|0);
        $37 = HEAP32[$arrayidx379>>2]|0;
        $cmp380 = ($37|0)==(0|0);
        if ($cmp380) {
         break;
        } else {
         $R332$1$be = $37;$RP360$1$be = $arrayidx379;
        }
       } else {
        $R332$1$be = $36;$RP360$1$be = $arrayidx374;
       }
       $R332$1 = $R332$1$be;$RP360$1 = $RP360$1$be;
      }
      HEAP32[$RP360$1>>2] = 0;
      $R332$3 = $R332$1;
     } else {
      $fd338 = ((($add$ptr6)) + 8|0);
      $33 = HEAP32[$fd338>>2]|0;
      $bk355 = ((($33)) + 12|0);
      HEAP32[$bk355>>2] = $32;
      $fd356 = ((($32)) + 8|0);
      HEAP32[$fd356>>2] = $33;
      $R332$3 = $32;
     }
    } while(0);
    $cmp395 = ($31|0)==(0|0);
    if (!($cmp395)) {
     $index399 = ((($add$ptr6)) + 28|0);
     $38 = HEAP32[$index399>>2]|0;
     $arrayidx400 = (10496 + ($38<<2)|0);
     $39 = HEAP32[$arrayidx400>>2]|0;
     $cmp401 = ($39|0)==($add$ptr6|0);
     if ($cmp401) {
      HEAP32[$arrayidx400>>2] = $R332$3;
      $cond255 = ($R332$3|0)==(0|0);
      if ($cond255) {
       $shl408 = 1 << $38;
       $neg409 = $shl408 ^ -1;
       $40 = HEAP32[(10196)>>2]|0;
       $and410 = $40 & $neg409;
       HEAP32[(10196)>>2] = $and410;
       break;
      }
     } else {
      $arrayidx419 = ((($31)) + 16|0);
      $41 = HEAP32[$arrayidx419>>2]|0;
      $cmp420 = ($41|0)==($add$ptr6|0);
      $arrayidx427 = ((($31)) + 20|0);
      $arrayidx427$sink = $cmp420 ? $arrayidx419 : $arrayidx427;
      HEAP32[$arrayidx427$sink>>2] = $R332$3;
      $cmp432 = ($R332$3|0)==(0|0);
      if ($cmp432) {
       break;
      }
     }
     $parent442 = ((($R332$3)) + 24|0);
     HEAP32[$parent442>>2] = $31;
     $child443 = ((($add$ptr6)) + 16|0);
     $42 = HEAP32[$child443>>2]|0;
     $cmp445 = ($42|0)==(0|0);
     if (!($cmp445)) {
      $arrayidx454 = ((($R332$3)) + 16|0);
      HEAP32[$arrayidx454>>2] = $42;
      $parent455 = ((($42)) + 24|0);
      HEAP32[$parent455>>2] = $R332$3;
     }
     $arrayidx460 = ((($child443)) + 4|0);
     $43 = HEAP32[$arrayidx460>>2]|0;
     $cmp461 = ($43|0)==(0|0);
     if (!($cmp461)) {
      $arrayidx470 = ((($R332$3)) + 20|0);
      HEAP32[$arrayidx470>>2] = $43;
      $parent471 = ((($43)) + 24|0);
      HEAP32[$parent471>>2] = $R332$3;
     }
    }
   }
  } while(0);
  $or480 = $add267 | 1;
  $head481 = ((($p$1)) + 4|0);
  HEAP32[$head481>>2] = $or480;
  $add$ptr482 = (($21) + ($add267)|0);
  HEAP32[$add$ptr482>>2] = $add267;
  $44 = HEAP32[(10212)>>2]|0;
  $cmp484 = ($p$1|0)==($44|0);
  if ($cmp484) {
   HEAP32[(10200)>>2] = $add267;
   return;
  } else {
   $psize$2 = $add267;
  }
 } else {
  $and495 = $22 & -2;
  HEAP32[$head231>>2] = $and495;
  $or496 = $psize$1 | 1;
  $head497 = ((($p$1)) + 4|0);
  HEAP32[$head497>>2] = $or496;
  $add$ptr498 = (($21) + ($psize$1)|0);
  HEAP32[$add$ptr498>>2] = $psize$1;
  $psize$2 = $psize$1;
 }
 $shr501 = $psize$2 >>> 3;
 $cmp502 = ($psize$2>>>0)<(256);
 if ($cmp502) {
  $shl508 = $shr501 << 1;
  $arrayidx509 = (10232 + ($shl508<<2)|0);
  $45 = HEAP32[2548]|0;
  $shl511 = 1 << $shr501;
  $and512 = $45 & $shl511;
  $tobool513 = ($and512|0)==(0);
  if ($tobool513) {
   $or516 = $45 | $shl511;
   HEAP32[2548] = $or516;
   $$pre = ((($arrayidx509)) + 8|0);
   $$pre$phiZ2D = $$pre;$F510$0 = $arrayidx509;
  } else {
   $46 = ((($arrayidx509)) + 8|0);
   $47 = HEAP32[$46>>2]|0;
   $$pre$phiZ2D = $46;$F510$0 = $47;
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$1;
  $bk529 = ((($F510$0)) + 12|0);
  HEAP32[$bk529>>2] = $p$1;
  $fd530 = ((($p$1)) + 8|0);
  HEAP32[$fd530>>2] = $F510$0;
  $bk531 = ((($p$1)) + 12|0);
  HEAP32[$bk531>>2] = $arrayidx509;
  return;
 }
 $shr535 = $psize$2 >>> 8;
 $cmp536 = ($shr535|0)==(0);
 if ($cmp536) {
  $I534$0 = 0;
 } else {
  $cmp540 = ($psize$2>>>0)>(16777215);
  if ($cmp540) {
   $I534$0 = 31;
  } else {
   $sub = (($shr535) + 1048320)|0;
   $shr544 = $sub >>> 16;
   $and545 = $shr544 & 8;
   $shl546 = $shr535 << $and545;
   $sub547 = (($shl546) + 520192)|0;
   $shr548 = $sub547 >>> 16;
   $and549 = $shr548 & 4;
   $add550 = $and549 | $and545;
   $shl551 = $shl546 << $and549;
   $sub552 = (($shl551) + 245760)|0;
   $shr553 = $sub552 >>> 16;
   $and554 = $shr553 & 2;
   $add555 = $add550 | $and554;
   $sub556 = (14 - ($add555))|0;
   $shl557 = $shl551 << $and554;
   $shr558 = $shl557 >>> 15;
   $add559 = (($sub556) + ($shr558))|0;
   $shl560 = $add559 << 1;
   $add561 = (($add559) + 7)|0;
   $shr562 = $psize$2 >>> $add561;
   $and563 = $shr562 & 1;
   $add564 = $and563 | $shl560;
   $I534$0 = $add564;
  }
 }
 $arrayidx567 = (10496 + ($I534$0<<2)|0);
 $index568 = ((($p$1)) + 28|0);
 HEAP32[$index568>>2] = $I534$0;
 $child569 = ((($p$1)) + 16|0);
 $arrayidx570 = ((($p$1)) + 20|0);
 HEAP32[$arrayidx570>>2] = 0;
 HEAP32[$child569>>2] = 0;
 $48 = HEAP32[(10196)>>2]|0;
 $shl573 = 1 << $I534$0;
 $and574 = $48 & $shl573;
 $tobool575 = ($and574|0)==(0);
 L112: do {
  if ($tobool575) {
   $or578 = $48 | $shl573;
   HEAP32[(10196)>>2] = $or578;
   HEAP32[$arrayidx567>>2] = $p$1;
   $parent579 = ((($p$1)) + 24|0);
   HEAP32[$parent579>>2] = $arrayidx567;
   $bk580 = ((($p$1)) + 12|0);
   HEAP32[$bk580>>2] = $p$1;
   $fd581 = ((($p$1)) + 8|0);
   HEAP32[$fd581>>2] = $p$1;
  } else {
   $49 = HEAP32[$arrayidx567>>2]|0;
   $head591262 = ((($49)) + 4|0);
   $50 = HEAP32[$head591262>>2]|0;
   $and592263 = $50 & -8;
   $cmp593264 = ($and592263|0)==($psize$2|0);
   L115: do {
    if ($cmp593264) {
     $T$0$lcssa = $49;
    } else {
     $cmp584 = ($I534$0|0)==(31);
     $shr586 = $I534$0 >>> 1;
     $sub589 = (25 - ($shr586))|0;
     $cond = $cmp584 ? 0 : $sub589;
     $shl590 = $psize$2 << $cond;
     $K583$0266 = $shl590;$T$0265 = $49;
     while(1) {
      $shr597 = $K583$0266 >>> 31;
      $arrayidx599 = (((($T$0265)) + 16|0) + ($shr597<<2)|0);
      $51 = HEAP32[$arrayidx599>>2]|0;
      $cmp601 = ($51|0)==(0|0);
      if ($cmp601) {
       break;
      }
      $shl600 = $K583$0266 << 1;
      $head591 = ((($51)) + 4|0);
      $52 = HEAP32[$head591>>2]|0;
      $and592 = $52 & -8;
      $cmp593 = ($and592|0)==($psize$2|0);
      if ($cmp593) {
       $T$0$lcssa = $51;
       break L115;
      } else {
       $K583$0266 = $shl600;$T$0265 = $51;
      }
     }
     HEAP32[$arrayidx599>>2] = $p$1;
     $parent610 = ((($p$1)) + 24|0);
     HEAP32[$parent610>>2] = $T$0265;
     $bk611 = ((($p$1)) + 12|0);
     HEAP32[$bk611>>2] = $p$1;
     $fd612 = ((($p$1)) + 8|0);
     HEAP32[$fd612>>2] = $p$1;
     break L112;
    }
   } while(0);
   $fd620 = ((($T$0$lcssa)) + 8|0);
   $53 = HEAP32[$fd620>>2]|0;
   $bk631 = ((($53)) + 12|0);
   HEAP32[$bk631>>2] = $p$1;
   HEAP32[$fd620>>2] = $p$1;
   $fd633 = ((($p$1)) + 8|0);
   HEAP32[$fd633>>2] = $53;
   $bk634 = ((($p$1)) + 12|0);
   HEAP32[$bk634>>2] = $T$0$lcssa;
   $parent635 = ((($p$1)) + 24|0);
   HEAP32[$parent635>>2] = 0;
  }
 } while(0);
 $54 = HEAP32[(10224)>>2]|0;
 $dec = (($54) + -1)|0;
 HEAP32[(10224)>>2] = $dec;
 $cmp640 = ($dec|0)==(0);
 if (!($cmp640)) {
  return;
 }
 $sp$0$in$i = (10648);
 while(1) {
  $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
  $cmp$i = ($sp$0$i|0)==(0|0);
  $next4$i = ((($sp$0$i)) + 8|0);
  if ($cmp$i) {
   break;
  } else {
   $sp$0$in$i = $next4$i;
  }
 }
 HEAP32[(10224)>>2] = -1;
 return;
}
function _realloc($oldmem,$bytes) {
 $oldmem = $oldmem|0;
 $bytes = $bytes|0;
 var $0 = 0, $add$ptr = 0, $add$ptr10 = 0, $add6 = 0, $and = 0, $and15 = 0, $and17 = 0, $call = 0, $call12 = 0, $call3 = 0, $call7 = 0, $cmp = 0, $cmp1 = 0, $cmp13 = 0, $cmp18 = 0, $cmp20 = 0, $cmp5 = 0, $cmp8 = 0, $cond = 0, $cond19 = 0;
 var $cond24 = 0, $head = 0, $mem$1 = 0, $sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($oldmem|0)==(0|0);
 if ($cmp) {
  $call = (_malloc($bytes)|0);
  $mem$1 = $call;
  return ($mem$1|0);
 }
 $cmp1 = ($bytes>>>0)>(4294967231);
 if ($cmp1) {
  $call3 = (___errno_location()|0);
  HEAP32[$call3>>2] = 12;
  $mem$1 = 0;
  return ($mem$1|0);
 }
 $cmp5 = ($bytes>>>0)<(11);
 $add6 = (($bytes) + 11)|0;
 $and = $add6 & -8;
 $cond = $cmp5 ? 16 : $and;
 $add$ptr = ((($oldmem)) + -8|0);
 $call7 = (_try_realloc_chunk($add$ptr,$cond)|0);
 $cmp8 = ($call7|0)==(0|0);
 if (!($cmp8)) {
  $add$ptr10 = ((($call7)) + 8|0);
  $mem$1 = $add$ptr10;
  return ($mem$1|0);
 }
 $call12 = (_malloc($bytes)|0);
 $cmp13 = ($call12|0)==(0|0);
 if ($cmp13) {
  $mem$1 = 0;
  return ($mem$1|0);
 }
 $head = ((($oldmem)) + -4|0);
 $0 = HEAP32[$head>>2]|0;
 $and15 = $0 & -8;
 $and17 = $0 & 3;
 $cmp18 = ($and17|0)==(0);
 $cond19 = $cmp18 ? 8 : 4;
 $sub = (($and15) - ($cond19))|0;
 $cmp20 = ($sub>>>0)<($bytes>>>0);
 $cond24 = $cmp20 ? $sub : $bytes;
 (_memcpy(($call12|0),($oldmem|0),($cond24|0))|0);
 _free($oldmem);
 $mem$1 = $call12;
 return ($mem$1|0);
}
function _try_realloc_chunk($p,$nb) {
 $p = $p|0;
 $nb = $nb|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $R$1 = 0, $R$1$be = 0, $R$1$ph = 0, $R$3 = 0, $RP$1 = 0, $RP$1$be = 0, $RP$1$ph = 0, $add = 0, $add$i = 0, $add$ptr = 0, $add$ptr17 = 0, $add$ptr298 = 0;
 var $add$ptr303 = 0, $add$ptr317 = 0, $add$ptr41 = 0, $add$ptr66 = 0, $add$ptr67 = 0, $add$ptr91 = 0, $add105 = 0, $add58 = 0, $and = 0, $and10 = 0, $and100 = 0, $and104 = 0, $and128 = 0, $and19 = 0, $and216 = 0, $and294 = 0, $and305 = 0, $and43 = 0, $and69 = 0, $and80 = 0;
 var $and87 = 0, $arrayidx179 = 0, $arrayidx186 = 0, $arrayidx190 = 0, $arrayidx206 = 0, $arrayidx226 = 0, $arrayidx234 = 0, $arrayidx234$sink = 0, $arrayidx261 = 0, $arrayidx267 = 0, $arrayidx278 = 0, $bk = 0, $bk147 = 0, $bk155 = 0, $bk174 = 0, $child = 0, $child249 = 0, $cmp$i = 0, $cmp1$i = 0, $cmp106 = 0;
 var $cmp11 = 0, $cmp111 = 0, $cmp125 = 0, $cmp13 = 0, $cmp15 = 0, $cmp156 = 0, $cmp180 = 0, $cmp183 = 0, $cmp187 = 0, $cmp191 = 0, $cmp2$i = 0, $cmp203 = 0, $cmp207 = 0, $cmp227 = 0, $cmp239 = 0, $cmp251 = 0, $cmp268 = 0, $cmp288 = 0, $cmp34 = 0, $cmp36 = 0;
 var $cmp56 = 0, $cmp59 = 0, $cmp63 = 0, $cond = 0, $fd = 0, $fd148 = 0, $fd159 = 0, $fd175 = 0, $head = 0, $head23 = 0, $head299 = 0, $head31 = 0, $head310 = 0, $head318 = 0, $head48 = 0, $head74 = 0, $head79 = 0, $head92 = 0, $head99 = 0, $index = 0;
 var $neg = 0, $neg215 = 0, $newp$2 = 0, $or = 0, $or20 = 0, $or28 = 0, $or295 = 0, $or296 = 0, $or300 = 0, $or306 = 0, $or307 = 0, $or315 = 0, $or319 = 0, $or32 = 0, $or44 = 0, $or45 = 0, $or50 = 0, $or70 = 0, $or71 = 0, $or76 = 0;
 var $or88 = 0, $or89 = 0, $or93 = 0, $parent = 0, $parent248 = 0, $parent262 = 0, $parent279 = 0, $shl$i = 0, $shl127 = 0, $shl214 = 0, $shr = 0, $storemerge = 0, $storemerge1 = 0, $sub = 0, $sub$i = 0, $sub110 = 0, $sub40 = 0, $sub62 = 0, $tobool101 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $head = ((($p)) + 4|0);
 $0 = HEAP32[$head>>2]|0;
 $and = $0 & -8;
 $add$ptr = (($p) + ($and)|0);
 $and10 = $0 & 3;
 $cmp11 = ($and10|0)==(0);
 if ($cmp11) {
  $cmp$i = ($nb>>>0)<(256);
  if ($cmp$i) {
   $newp$2 = 0;
   return ($newp$2|0);
  }
  $add$i = (($nb) + 4)|0;
  $cmp1$i = ($and>>>0)<($add$i>>>0);
  if (!($cmp1$i)) {
   $sub$i = (($and) - ($nb))|0;
   $1 = HEAP32[(10672)>>2]|0;
   $shl$i = $1 << 1;
   $cmp2$i = ($sub$i>>>0)>($shl$i>>>0);
   if (!($cmp2$i)) {
    $newp$2 = $p;
    return ($newp$2|0);
   }
  }
  $newp$2 = 0;
  return ($newp$2|0);
 }
 $cmp13 = ($and>>>0)<($nb>>>0);
 if (!($cmp13)) {
  $sub = (($and) - ($nb))|0;
  $cmp15 = ($sub>>>0)>(15);
  if (!($cmp15)) {
   $newp$2 = $p;
   return ($newp$2|0);
  }
  $add$ptr17 = (($p) + ($nb)|0);
  $and19 = $0 & 1;
  $or = $and19 | $nb;
  $or20 = $or | 2;
  HEAP32[$head>>2] = $or20;
  $head23 = ((($add$ptr17)) + 4|0);
  $or28 = $sub | 3;
  HEAP32[$head23>>2] = $or28;
  $head31 = ((($add$ptr)) + 4|0);
  $2 = HEAP32[$head31>>2]|0;
  $or32 = $2 | 1;
  HEAP32[$head31>>2] = $or32;
  _dispose_chunk($add$ptr17,$sub);
  $newp$2 = $p;
  return ($newp$2|0);
 }
 $3 = HEAP32[(10216)>>2]|0;
 $cmp34 = ($3|0)==($add$ptr|0);
 if ($cmp34) {
  $4 = HEAP32[(10204)>>2]|0;
  $add = (($4) + ($and))|0;
  $cmp36 = ($add>>>0)>($nb>>>0);
  $sub40 = (($add) - ($nb))|0;
  $add$ptr41 = (($p) + ($nb)|0);
  if (!($cmp36)) {
   $newp$2 = 0;
   return ($newp$2|0);
  }
  $or50 = $sub40 | 1;
  $head48 = ((($add$ptr41)) + 4|0);
  $and43 = $0 & 1;
  $or44 = $and43 | $nb;
  $or45 = $or44 | 2;
  HEAP32[$head>>2] = $or45;
  HEAP32[$head48>>2] = $or50;
  HEAP32[(10216)>>2] = $add$ptr41;
  HEAP32[(10204)>>2] = $sub40;
  $newp$2 = $p;
  return ($newp$2|0);
 }
 $5 = HEAP32[(10212)>>2]|0;
 $cmp56 = ($5|0)==($add$ptr|0);
 if ($cmp56) {
  $6 = HEAP32[(10200)>>2]|0;
  $add58 = (($6) + ($and))|0;
  $cmp59 = ($add58>>>0)<($nb>>>0);
  if ($cmp59) {
   $newp$2 = 0;
   return ($newp$2|0);
  }
  $sub62 = (($add58) - ($nb))|0;
  $cmp63 = ($sub62>>>0)>(15);
  if ($cmp63) {
   $add$ptr66 = (($p) + ($nb)|0);
   $add$ptr67 = (($p) + ($add58)|0);
   $and69 = $0 & 1;
   $or70 = $and69 | $nb;
   $or71 = $or70 | 2;
   HEAP32[$head>>2] = $or71;
   $head74 = ((($add$ptr66)) + 4|0);
   $or76 = $sub62 | 1;
   HEAP32[$head74>>2] = $or76;
   HEAP32[$add$ptr67>>2] = $sub62;
   $head79 = ((($add$ptr67)) + 4|0);
   $7 = HEAP32[$head79>>2]|0;
   $and80 = $7 & -2;
   HEAP32[$head79>>2] = $and80;
   $storemerge = $add$ptr66;$storemerge1 = $sub62;
  } else {
   $and87 = $0 & 1;
   $or88 = $and87 | $add58;
   $or89 = $or88 | 2;
   HEAP32[$head>>2] = $or89;
   $add$ptr91 = (($p) + ($add58)|0);
   $head92 = ((($add$ptr91)) + 4|0);
   $8 = HEAP32[$head92>>2]|0;
   $or93 = $8 | 1;
   HEAP32[$head92>>2] = $or93;
   $storemerge = 0;$storemerge1 = 0;
  }
  HEAP32[(10200)>>2] = $storemerge1;
  HEAP32[(10212)>>2] = $storemerge;
  $newp$2 = $p;
  return ($newp$2|0);
 }
 $head99 = ((($add$ptr)) + 4|0);
 $9 = HEAP32[$head99>>2]|0;
 $and100 = $9 & 2;
 $tobool101 = ($and100|0)==(0);
 if (!($tobool101)) {
  $newp$2 = 0;
  return ($newp$2|0);
 }
 $and104 = $9 & -8;
 $add105 = (($and104) + ($and))|0;
 $cmp106 = ($add105>>>0)<($nb>>>0);
 if ($cmp106) {
  $newp$2 = 0;
  return ($newp$2|0);
 }
 $sub110 = (($add105) - ($nb))|0;
 $shr = $9 >>> 3;
 $cmp111 = ($9>>>0)<(256);
 do {
  if ($cmp111) {
   $fd = ((($add$ptr)) + 8|0);
   $10 = HEAP32[$fd>>2]|0;
   $bk = ((($add$ptr)) + 12|0);
   $11 = HEAP32[$bk>>2]|0;
   $cmp125 = ($11|0)==($10|0);
   if ($cmp125) {
    $shl127 = 1 << $shr;
    $neg = $shl127 ^ -1;
    $12 = HEAP32[2548]|0;
    $and128 = $12 & $neg;
    HEAP32[2548] = $and128;
    break;
   } else {
    $bk147 = ((($10)) + 12|0);
    HEAP32[$bk147>>2] = $11;
    $fd148 = ((($11)) + 8|0);
    HEAP32[$fd148>>2] = $10;
    break;
   }
  } else {
   $parent = ((($add$ptr)) + 24|0);
   $13 = HEAP32[$parent>>2]|0;
   $bk155 = ((($add$ptr)) + 12|0);
   $14 = HEAP32[$bk155>>2]|0;
   $cmp156 = ($14|0)==($add$ptr|0);
   do {
    if ($cmp156) {
     $child = ((($add$ptr)) + 16|0);
     $arrayidx179 = ((($child)) + 4|0);
     $16 = HEAP32[$arrayidx179>>2]|0;
     $cmp180 = ($16|0)==(0|0);
     if ($cmp180) {
      $17 = HEAP32[$child>>2]|0;
      $cmp183 = ($17|0)==(0|0);
      if ($cmp183) {
       $R$3 = 0;
       break;
      } else {
       $R$1$ph = $17;$RP$1$ph = $child;
      }
     } else {
      $R$1$ph = $16;$RP$1$ph = $arrayidx179;
     }
     $R$1 = $R$1$ph;$RP$1 = $RP$1$ph;
     while(1) {
      $arrayidx186 = ((($R$1)) + 20|0);
      $18 = HEAP32[$arrayidx186>>2]|0;
      $cmp187 = ($18|0)==(0|0);
      if ($cmp187) {
       $arrayidx190 = ((($R$1)) + 16|0);
       $19 = HEAP32[$arrayidx190>>2]|0;
       $cmp191 = ($19|0)==(0|0);
       if ($cmp191) {
        break;
       } else {
        $R$1$be = $19;$RP$1$be = $arrayidx190;
       }
      } else {
       $R$1$be = $18;$RP$1$be = $arrayidx186;
      }
      $R$1 = $R$1$be;$RP$1 = $RP$1$be;
     }
     HEAP32[$RP$1>>2] = 0;
     $R$3 = $R$1;
    } else {
     $fd159 = ((($add$ptr)) + 8|0);
     $15 = HEAP32[$fd159>>2]|0;
     $bk174 = ((($15)) + 12|0);
     HEAP32[$bk174>>2] = $14;
     $fd175 = ((($14)) + 8|0);
     HEAP32[$fd175>>2] = $15;
     $R$3 = $14;
    }
   } while(0);
   $cmp203 = ($13|0)==(0|0);
   if (!($cmp203)) {
    $index = ((($add$ptr)) + 28|0);
    $20 = HEAP32[$index>>2]|0;
    $arrayidx206 = (10496 + ($20<<2)|0);
    $21 = HEAP32[$arrayidx206>>2]|0;
    $cmp207 = ($21|0)==($add$ptr|0);
    if ($cmp207) {
     HEAP32[$arrayidx206>>2] = $R$3;
     $cond = ($R$3|0)==(0|0);
     if ($cond) {
      $shl214 = 1 << $20;
      $neg215 = $shl214 ^ -1;
      $22 = HEAP32[(10196)>>2]|0;
      $and216 = $22 & $neg215;
      HEAP32[(10196)>>2] = $and216;
      break;
     }
    } else {
     $arrayidx226 = ((($13)) + 16|0);
     $23 = HEAP32[$arrayidx226>>2]|0;
     $cmp227 = ($23|0)==($add$ptr|0);
     $arrayidx234 = ((($13)) + 20|0);
     $arrayidx234$sink = $cmp227 ? $arrayidx226 : $arrayidx234;
     HEAP32[$arrayidx234$sink>>2] = $R$3;
     $cmp239 = ($R$3|0)==(0|0);
     if ($cmp239) {
      break;
     }
    }
    $parent248 = ((($R$3)) + 24|0);
    HEAP32[$parent248>>2] = $13;
    $child249 = ((($add$ptr)) + 16|0);
    $24 = HEAP32[$child249>>2]|0;
    $cmp251 = ($24|0)==(0|0);
    if (!($cmp251)) {
     $arrayidx261 = ((($R$3)) + 16|0);
     HEAP32[$arrayidx261>>2] = $24;
     $parent262 = ((($24)) + 24|0);
     HEAP32[$parent262>>2] = $R$3;
    }
    $arrayidx267 = ((($child249)) + 4|0);
    $25 = HEAP32[$arrayidx267>>2]|0;
    $cmp268 = ($25|0)==(0|0);
    if (!($cmp268)) {
     $arrayidx278 = ((($R$3)) + 20|0);
     HEAP32[$arrayidx278>>2] = $25;
     $parent279 = ((($25)) + 24|0);
     HEAP32[$parent279>>2] = $R$3;
    }
   }
  }
 } while(0);
 $cmp288 = ($sub110>>>0)<(16);
 if ($cmp288) {
  $and294 = $0 & 1;
  $or295 = $and294 | $add105;
  $or296 = $or295 | 2;
  HEAP32[$head>>2] = $or296;
  $add$ptr298 = (($p) + ($add105)|0);
  $head299 = ((($add$ptr298)) + 4|0);
  $26 = HEAP32[$head299>>2]|0;
  $or300 = $26 | 1;
  HEAP32[$head299>>2] = $or300;
  $newp$2 = $p;
  return ($newp$2|0);
 } else {
  $add$ptr303 = (($p) + ($nb)|0);
  $and305 = $0 & 1;
  $or306 = $and305 | $nb;
  $or307 = $or306 | 2;
  HEAP32[$head>>2] = $or307;
  $head310 = ((($add$ptr303)) + 4|0);
  $or315 = $sub110 | 3;
  HEAP32[$head310>>2] = $or315;
  $add$ptr317 = (($p) + ($add105)|0);
  $head318 = ((($add$ptr317)) + 4|0);
  $27 = HEAP32[$head318>>2]|0;
  $or319 = $27 | 1;
  HEAP32[$head318>>2] = $or319;
  _dispose_chunk($add$ptr303,$sub110);
  $newp$2 = $p;
  return ($newp$2|0);
 }
 return (0)|0;
}
function _dispose_chunk($p,$psize) {
 $p = $p|0;
 $psize = $psize|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $F517$0 = 0, $I545$0 = 0, $K597$010 = 0, $R$1 = 0, $R$1$be = 0, $R$1$ph = 0;
 var $R$3 = 0, $R328$1 = 0, $R328$1$be = 0, $R328$1$ph = 0, $R328$3 = 0, $RP$1 = 0, $RP$1$be = 0, $RP$1$ph = 0, $RP357$1 = 0, $RP357$1$be = 0, $RP357$1$ph = 0, $T$0$lcssa = 0, $T$09 = 0, $add$ptr = 0, $add$ptr252 = 0, $add$ptr486 = 0, $add$ptr5 = 0, $add$ptr504 = 0, $add230 = 0, $add248 = 0;
 var $add258 = 0, $add561 = 0, $add566 = 0, $add570 = 0, $add572 = 0, $add575 = 0, $add6 = 0, $and = 0, $and128 = 0, $and2 = 0, $and202 = 0, $and207 = 0, $and224 = 0, $and257 = 0, $and295 = 0, $and32 = 0, $and410 = 0, $and501 = 0, $and520 = 0, $and556 = 0;
 var $and560 = 0, $and565 = 0, $and574 = 0, $and587 = 0, $and606 = 0, $and6067 = 0, $arrayidx100 = 0, $arrayidx118 = 0, $arrayidx138 = 0, $arrayidx146 = 0, $arrayidx146$sink = 0, $arrayidx173 = 0, $arrayidx179 = 0, $arrayidx190 = 0, $arrayidx359 = 0, $arrayidx371 = 0, $arrayidx376 = 0, $arrayidx399 = 0, $arrayidx420 = 0, $arrayidx428 = 0;
 var $arrayidx428$sink = 0, $arrayidx457 = 0, $arrayidx463 = 0, $arrayidx474 = 0, $arrayidx516 = 0, $arrayidx579 = 0, $arrayidx582 = 0, $arrayidx613 = 0, $arrayidx86 = 0, $arrayidx95 = 0, $bk = 0, $bk266 = 0, $bk317 = 0, $bk329 = 0, $bk352 = 0, $bk52 = 0, $bk539 = 0, $bk541 = 0, $bk594 = 0, $bk60 = 0;
 var $bk626 = 0, $bk648 = 0, $bk651 = 0, $bk81 = 0, $child = 0, $child161 = 0, $child358 = 0, $child445 = 0, $child581 = 0, $cmp = 0, $cmp10 = 0, $cmp101 = 0, $cmp115 = 0, $cmp119 = 0, $cmp13 = 0, $cmp139 = 0, $cmp151 = 0, $cmp163 = 0, $cmp180 = 0, $cmp203 = 0;
 var $cmp227 = 0, $cmp235 = 0, $cmp244 = 0, $cmp260 = 0, $cmp28 = 0, $cmp289 = 0, $cmp330 = 0, $cmp360 = 0, $cmp365 = 0, $cmp372 = 0, $cmp377 = 0, $cmp393 = 0, $cmp400 = 0, $cmp421 = 0, $cmp433 = 0, $cmp447 = 0, $cmp464 = 0, $cmp489 = 0, $cmp508 = 0, $cmp547 = 0;
 var $cmp551 = 0, $cmp598 = 0, $cmp607 = 0, $cmp6078 = 0, $cmp61 = 0, $cmp615 = 0, $cmp87 = 0, $cmp91 = 0, $cmp96 = 0, $cond = 0, $cond2 = 0, $cond3 = 0, $fd = 0, $fd264 = 0, $fd318 = 0, $fd334 = 0, $fd353 = 0, $fd53 = 0, $fd540 = 0, $fd595 = 0;
 var $fd627 = 0, $fd635 = 0, $fd65 = 0, $fd650 = 0, $fd82 = 0, $head = 0, $head201 = 0, $head208 = 0, $head223 = 0, $head233 = 0, $head251 = 0, $head485 = 0, $head503 = 0, $head605 = 0, $head6056 = 0, $idx$neg = 0, $index = 0, $index398 = 0, $index580 = 0, $neg = 0;
 var $neg127 = 0, $neg293 = 0, $neg408 = 0, $or = 0, $or232 = 0, $or250 = 0, $or484 = 0, $or502 = 0, $or525 = 0, $or592 = 0, $p$addr$1 = 0, $parent = 0, $parent160 = 0, $parent174 = 0, $parent191 = 0, $parent327 = 0, $parent444 = 0, $parent458 = 0, $parent475 = 0, $parent593 = 0;
 var $parent625 = 0, $parent652 = 0, $psize$addr$1 = 0, $psize$addr$2 = 0, $shl126 = 0, $shl292 = 0, $shl31 = 0, $shl407 = 0, $shl515 = 0, $shl519 = 0, $shl557 = 0, $shl562 = 0, $shl568 = 0, $shl571 = 0, $shl586 = 0, $shl604 = 0, $shl614 = 0, $shr = 0, $shr259 = 0, $shr507 = 0;
 var $shr546 = 0, $shr555 = 0, $shr559 = 0, $shr564 = 0, $shr569 = 0, $shr573 = 0, $shr600 = 0, $shr611 = 0, $sub = 0, $sub558 = 0, $sub563 = 0, $sub567 = 0, $sub603 = 0, $tobool = 0, $tobool225 = 0, $tobool521 = 0, $tobool588 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $add$ptr = (($p) + ($psize)|0);
 $head = ((($p)) + 4|0);
 $0 = HEAP32[$head>>2]|0;
 $and = $0 & 1;
 $tobool = ($and|0)==(0);
 do {
  if ($tobool) {
   $1 = HEAP32[$p>>2]|0;
   $and2 = $0 & 3;
   $cmp = ($and2|0)==(0);
   if ($cmp) {
    return;
   }
   $idx$neg = (0 - ($1))|0;
   $add$ptr5 = (($p) + ($idx$neg)|0);
   $add6 = (($1) + ($psize))|0;
   $2 = HEAP32[(10212)>>2]|0;
   $cmp10 = ($2|0)==($add$ptr5|0);
   if ($cmp10) {
    $head201 = ((($add$ptr)) + 4|0);
    $19 = HEAP32[$head201>>2]|0;
    $and202 = $19 & 3;
    $cmp203 = ($and202|0)==(3);
    if (!($cmp203)) {
     $p$addr$1 = $add$ptr5;$psize$addr$1 = $add6;
     break;
    }
    $head208 = ((($add$ptr5)) + 4|0);
    $or = $add6 | 1;
    $and207 = $19 & -2;
    HEAP32[(10200)>>2] = $add6;
    HEAP32[$head201>>2] = $and207;
    HEAP32[$head208>>2] = $or;
    HEAP32[$add$ptr>>2] = $add6;
    return;
   }
   $shr = $1 >>> 3;
   $cmp13 = ($1>>>0)<(256);
   if ($cmp13) {
    $fd = ((($add$ptr5)) + 8|0);
    $3 = HEAP32[$fd>>2]|0;
    $bk = ((($add$ptr5)) + 12|0);
    $4 = HEAP32[$bk>>2]|0;
    $cmp28 = ($4|0)==($3|0);
    if ($cmp28) {
     $shl31 = 1 << $shr;
     $neg = $shl31 ^ -1;
     $5 = HEAP32[2548]|0;
     $and32 = $5 & $neg;
     HEAP32[2548] = $and32;
     $p$addr$1 = $add$ptr5;$psize$addr$1 = $add6;
     break;
    } else {
     $bk52 = ((($3)) + 12|0);
     HEAP32[$bk52>>2] = $4;
     $fd53 = ((($4)) + 8|0);
     HEAP32[$fd53>>2] = $3;
     $p$addr$1 = $add$ptr5;$psize$addr$1 = $add6;
     break;
    }
   }
   $parent = ((($add$ptr5)) + 24|0);
   $6 = HEAP32[$parent>>2]|0;
   $bk60 = ((($add$ptr5)) + 12|0);
   $7 = HEAP32[$bk60>>2]|0;
   $cmp61 = ($7|0)==($add$ptr5|0);
   do {
    if ($cmp61) {
     $child = ((($add$ptr5)) + 16|0);
     $arrayidx86 = ((($child)) + 4|0);
     $9 = HEAP32[$arrayidx86>>2]|0;
     $cmp87 = ($9|0)==(0|0);
     if ($cmp87) {
      $10 = HEAP32[$child>>2]|0;
      $cmp91 = ($10|0)==(0|0);
      if ($cmp91) {
       $R$3 = 0;
       break;
      } else {
       $R$1$ph = $10;$RP$1$ph = $child;
      }
     } else {
      $R$1$ph = $9;$RP$1$ph = $arrayidx86;
     }
     $R$1 = $R$1$ph;$RP$1 = $RP$1$ph;
     while(1) {
      $arrayidx95 = ((($R$1)) + 20|0);
      $11 = HEAP32[$arrayidx95>>2]|0;
      $cmp96 = ($11|0)==(0|0);
      if ($cmp96) {
       $arrayidx100 = ((($R$1)) + 16|0);
       $12 = HEAP32[$arrayidx100>>2]|0;
       $cmp101 = ($12|0)==(0|0);
       if ($cmp101) {
        break;
       } else {
        $R$1$be = $12;$RP$1$be = $arrayidx100;
       }
      } else {
       $R$1$be = $11;$RP$1$be = $arrayidx95;
      }
      $R$1 = $R$1$be;$RP$1 = $RP$1$be;
     }
     HEAP32[$RP$1>>2] = 0;
     $R$3 = $R$1;
    } else {
     $fd65 = ((($add$ptr5)) + 8|0);
     $8 = HEAP32[$fd65>>2]|0;
     $bk81 = ((($8)) + 12|0);
     HEAP32[$bk81>>2] = $7;
     $fd82 = ((($7)) + 8|0);
     HEAP32[$fd82>>2] = $8;
     $R$3 = $7;
    }
   } while(0);
   $cmp115 = ($6|0)==(0|0);
   if ($cmp115) {
    $p$addr$1 = $add$ptr5;$psize$addr$1 = $add6;
   } else {
    $index = ((($add$ptr5)) + 28|0);
    $13 = HEAP32[$index>>2]|0;
    $arrayidx118 = (10496 + ($13<<2)|0);
    $14 = HEAP32[$arrayidx118>>2]|0;
    $cmp119 = ($14|0)==($add$ptr5|0);
    if ($cmp119) {
     HEAP32[$arrayidx118>>2] = $R$3;
     $cond2 = ($R$3|0)==(0|0);
     if ($cond2) {
      $shl126 = 1 << $13;
      $neg127 = $shl126 ^ -1;
      $15 = HEAP32[(10196)>>2]|0;
      $and128 = $15 & $neg127;
      HEAP32[(10196)>>2] = $and128;
      $p$addr$1 = $add$ptr5;$psize$addr$1 = $add6;
      break;
     }
    } else {
     $arrayidx138 = ((($6)) + 16|0);
     $16 = HEAP32[$arrayidx138>>2]|0;
     $cmp139 = ($16|0)==($add$ptr5|0);
     $arrayidx146 = ((($6)) + 20|0);
     $arrayidx146$sink = $cmp139 ? $arrayidx138 : $arrayidx146;
     HEAP32[$arrayidx146$sink>>2] = $R$3;
     $cmp151 = ($R$3|0)==(0|0);
     if ($cmp151) {
      $p$addr$1 = $add$ptr5;$psize$addr$1 = $add6;
      break;
     }
    }
    $parent160 = ((($R$3)) + 24|0);
    HEAP32[$parent160>>2] = $6;
    $child161 = ((($add$ptr5)) + 16|0);
    $17 = HEAP32[$child161>>2]|0;
    $cmp163 = ($17|0)==(0|0);
    if (!($cmp163)) {
     $arrayidx173 = ((($R$3)) + 16|0);
     HEAP32[$arrayidx173>>2] = $17;
     $parent174 = ((($17)) + 24|0);
     HEAP32[$parent174>>2] = $R$3;
    }
    $arrayidx179 = ((($child161)) + 4|0);
    $18 = HEAP32[$arrayidx179>>2]|0;
    $cmp180 = ($18|0)==(0|0);
    if ($cmp180) {
     $p$addr$1 = $add$ptr5;$psize$addr$1 = $add6;
    } else {
     $arrayidx190 = ((($R$3)) + 20|0);
     HEAP32[$arrayidx190>>2] = $18;
     $parent191 = ((($18)) + 24|0);
     HEAP32[$parent191>>2] = $R$3;
     $p$addr$1 = $add$ptr5;$psize$addr$1 = $add6;
    }
   }
  } else {
   $p$addr$1 = $p;$psize$addr$1 = $psize;
  }
 } while(0);
 $head223 = ((($add$ptr)) + 4|0);
 $20 = HEAP32[$head223>>2]|0;
 $and224 = $20 & 2;
 $tobool225 = ($and224|0)==(0);
 if ($tobool225) {
  $21 = HEAP32[(10216)>>2]|0;
  $cmp227 = ($21|0)==($add$ptr|0);
  if ($cmp227) {
   $22 = HEAP32[(10204)>>2]|0;
   $add230 = (($22) + ($psize$addr$1))|0;
   HEAP32[(10204)>>2] = $add230;
   HEAP32[(10216)>>2] = $p$addr$1;
   $or232 = $add230 | 1;
   $head233 = ((($p$addr$1)) + 4|0);
   HEAP32[$head233>>2] = $or232;
   $23 = HEAP32[(10212)>>2]|0;
   $cmp235 = ($p$addr$1|0)==($23|0);
   if (!($cmp235)) {
    return;
   }
   HEAP32[(10212)>>2] = 0;
   HEAP32[(10200)>>2] = 0;
   return;
  }
  $24 = HEAP32[(10212)>>2]|0;
  $cmp244 = ($24|0)==($add$ptr|0);
  if ($cmp244) {
   $25 = HEAP32[(10200)>>2]|0;
   $add248 = (($25) + ($psize$addr$1))|0;
   HEAP32[(10200)>>2] = $add248;
   HEAP32[(10212)>>2] = $p$addr$1;
   $or250 = $add248 | 1;
   $head251 = ((($p$addr$1)) + 4|0);
   HEAP32[$head251>>2] = $or250;
   $add$ptr252 = (($p$addr$1) + ($add248)|0);
   HEAP32[$add$ptr252>>2] = $add248;
   return;
  }
  $and257 = $20 & -8;
  $add258 = (($and257) + ($psize$addr$1))|0;
  $shr259 = $20 >>> 3;
  $cmp260 = ($20>>>0)<(256);
  do {
   if ($cmp260) {
    $fd264 = ((($add$ptr)) + 8|0);
    $26 = HEAP32[$fd264>>2]|0;
    $bk266 = ((($add$ptr)) + 12|0);
    $27 = HEAP32[$bk266>>2]|0;
    $cmp289 = ($27|0)==($26|0);
    if ($cmp289) {
     $shl292 = 1 << $shr259;
     $neg293 = $shl292 ^ -1;
     $28 = HEAP32[2548]|0;
     $and295 = $28 & $neg293;
     HEAP32[2548] = $and295;
     break;
    } else {
     $bk317 = ((($26)) + 12|0);
     HEAP32[$bk317>>2] = $27;
     $fd318 = ((($27)) + 8|0);
     HEAP32[$fd318>>2] = $26;
     break;
    }
   } else {
    $parent327 = ((($add$ptr)) + 24|0);
    $29 = HEAP32[$parent327>>2]|0;
    $bk329 = ((($add$ptr)) + 12|0);
    $30 = HEAP32[$bk329>>2]|0;
    $cmp330 = ($30|0)==($add$ptr|0);
    do {
     if ($cmp330) {
      $child358 = ((($add$ptr)) + 16|0);
      $arrayidx359 = ((($child358)) + 4|0);
      $32 = HEAP32[$arrayidx359>>2]|0;
      $cmp360 = ($32|0)==(0|0);
      if ($cmp360) {
       $33 = HEAP32[$child358>>2]|0;
       $cmp365 = ($33|0)==(0|0);
       if ($cmp365) {
        $R328$3 = 0;
        break;
       } else {
        $R328$1$ph = $33;$RP357$1$ph = $child358;
       }
      } else {
       $R328$1$ph = $32;$RP357$1$ph = $arrayidx359;
      }
      $R328$1 = $R328$1$ph;$RP357$1 = $RP357$1$ph;
      while(1) {
       $arrayidx371 = ((($R328$1)) + 20|0);
       $34 = HEAP32[$arrayidx371>>2]|0;
       $cmp372 = ($34|0)==(0|0);
       if ($cmp372) {
        $arrayidx376 = ((($R328$1)) + 16|0);
        $35 = HEAP32[$arrayidx376>>2]|0;
        $cmp377 = ($35|0)==(0|0);
        if ($cmp377) {
         break;
        } else {
         $R328$1$be = $35;$RP357$1$be = $arrayidx376;
        }
       } else {
        $R328$1$be = $34;$RP357$1$be = $arrayidx371;
       }
       $R328$1 = $R328$1$be;$RP357$1 = $RP357$1$be;
      }
      HEAP32[$RP357$1>>2] = 0;
      $R328$3 = $R328$1;
     } else {
      $fd334 = ((($add$ptr)) + 8|0);
      $31 = HEAP32[$fd334>>2]|0;
      $bk352 = ((($31)) + 12|0);
      HEAP32[$bk352>>2] = $30;
      $fd353 = ((($30)) + 8|0);
      HEAP32[$fd353>>2] = $31;
      $R328$3 = $30;
     }
    } while(0);
    $cmp393 = ($29|0)==(0|0);
    if (!($cmp393)) {
     $index398 = ((($add$ptr)) + 28|0);
     $36 = HEAP32[$index398>>2]|0;
     $arrayidx399 = (10496 + ($36<<2)|0);
     $37 = HEAP32[$arrayidx399>>2]|0;
     $cmp400 = ($37|0)==($add$ptr|0);
     if ($cmp400) {
      HEAP32[$arrayidx399>>2] = $R328$3;
      $cond3 = ($R328$3|0)==(0|0);
      if ($cond3) {
       $shl407 = 1 << $36;
       $neg408 = $shl407 ^ -1;
       $38 = HEAP32[(10196)>>2]|0;
       $and410 = $38 & $neg408;
       HEAP32[(10196)>>2] = $and410;
       break;
      }
     } else {
      $arrayidx420 = ((($29)) + 16|0);
      $39 = HEAP32[$arrayidx420>>2]|0;
      $cmp421 = ($39|0)==($add$ptr|0);
      $arrayidx428 = ((($29)) + 20|0);
      $arrayidx428$sink = $cmp421 ? $arrayidx420 : $arrayidx428;
      HEAP32[$arrayidx428$sink>>2] = $R328$3;
      $cmp433 = ($R328$3|0)==(0|0);
      if ($cmp433) {
       break;
      }
     }
     $parent444 = ((($R328$3)) + 24|0);
     HEAP32[$parent444>>2] = $29;
     $child445 = ((($add$ptr)) + 16|0);
     $40 = HEAP32[$child445>>2]|0;
     $cmp447 = ($40|0)==(0|0);
     if (!($cmp447)) {
      $arrayidx457 = ((($R328$3)) + 16|0);
      HEAP32[$arrayidx457>>2] = $40;
      $parent458 = ((($40)) + 24|0);
      HEAP32[$parent458>>2] = $R328$3;
     }
     $arrayidx463 = ((($child445)) + 4|0);
     $41 = HEAP32[$arrayidx463>>2]|0;
     $cmp464 = ($41|0)==(0|0);
     if (!($cmp464)) {
      $arrayidx474 = ((($R328$3)) + 20|0);
      HEAP32[$arrayidx474>>2] = $41;
      $parent475 = ((($41)) + 24|0);
      HEAP32[$parent475>>2] = $R328$3;
     }
    }
   }
  } while(0);
  $or484 = $add258 | 1;
  $head485 = ((($p$addr$1)) + 4|0);
  HEAP32[$head485>>2] = $or484;
  $add$ptr486 = (($p$addr$1) + ($add258)|0);
  HEAP32[$add$ptr486>>2] = $add258;
  $42 = HEAP32[(10212)>>2]|0;
  $cmp489 = ($p$addr$1|0)==($42|0);
  if ($cmp489) {
   HEAP32[(10200)>>2] = $add258;
   return;
  } else {
   $psize$addr$2 = $add258;
  }
 } else {
  $and501 = $20 & -2;
  HEAP32[$head223>>2] = $and501;
  $or502 = $psize$addr$1 | 1;
  $head503 = ((($p$addr$1)) + 4|0);
  HEAP32[$head503>>2] = $or502;
  $add$ptr504 = (($p$addr$1) + ($psize$addr$1)|0);
  HEAP32[$add$ptr504>>2] = $psize$addr$1;
  $psize$addr$2 = $psize$addr$1;
 }
 $shr507 = $psize$addr$2 >>> 3;
 $cmp508 = ($psize$addr$2>>>0)<(256);
 if ($cmp508) {
  $shl515 = $shr507 << 1;
  $arrayidx516 = (10232 + ($shl515<<2)|0);
  $43 = HEAP32[2548]|0;
  $shl519 = 1 << $shr507;
  $and520 = $43 & $shl519;
  $tobool521 = ($and520|0)==(0);
  if ($tobool521) {
   $or525 = $43 | $shl519;
   HEAP32[2548] = $or525;
   $$pre = ((($arrayidx516)) + 8|0);
   $$pre$phiZ2D = $$pre;$F517$0 = $arrayidx516;
  } else {
   $44 = ((($arrayidx516)) + 8|0);
   $45 = HEAP32[$44>>2]|0;
   $$pre$phiZ2D = $44;$F517$0 = $45;
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$addr$1;
  $bk539 = ((($F517$0)) + 12|0);
  HEAP32[$bk539>>2] = $p$addr$1;
  $fd540 = ((($p$addr$1)) + 8|0);
  HEAP32[$fd540>>2] = $F517$0;
  $bk541 = ((($p$addr$1)) + 12|0);
  HEAP32[$bk541>>2] = $arrayidx516;
  return;
 }
 $shr546 = $psize$addr$2 >>> 8;
 $cmp547 = ($shr546|0)==(0);
 if ($cmp547) {
  $I545$0 = 0;
 } else {
  $cmp551 = ($psize$addr$2>>>0)>(16777215);
  if ($cmp551) {
   $I545$0 = 31;
  } else {
   $sub = (($shr546) + 1048320)|0;
   $shr555 = $sub >>> 16;
   $and556 = $shr555 & 8;
   $shl557 = $shr546 << $and556;
   $sub558 = (($shl557) + 520192)|0;
   $shr559 = $sub558 >>> 16;
   $and560 = $shr559 & 4;
   $add561 = $and560 | $and556;
   $shl562 = $shl557 << $and560;
   $sub563 = (($shl562) + 245760)|0;
   $shr564 = $sub563 >>> 16;
   $and565 = $shr564 & 2;
   $add566 = $add561 | $and565;
   $sub567 = (14 - ($add566))|0;
   $shl568 = $shl562 << $and565;
   $shr569 = $shl568 >>> 15;
   $add570 = (($sub567) + ($shr569))|0;
   $shl571 = $add570 << 1;
   $add572 = (($add570) + 7)|0;
   $shr573 = $psize$addr$2 >>> $add572;
   $and574 = $shr573 & 1;
   $add575 = $and574 | $shl571;
   $I545$0 = $add575;
  }
 }
 $arrayidx579 = (10496 + ($I545$0<<2)|0);
 $index580 = ((($p$addr$1)) + 28|0);
 HEAP32[$index580>>2] = $I545$0;
 $child581 = ((($p$addr$1)) + 16|0);
 $arrayidx582 = ((($p$addr$1)) + 20|0);
 HEAP32[$arrayidx582>>2] = 0;
 HEAP32[$child581>>2] = 0;
 $46 = HEAP32[(10196)>>2]|0;
 $shl586 = 1 << $I545$0;
 $and587 = $46 & $shl586;
 $tobool588 = ($and587|0)==(0);
 if ($tobool588) {
  $or592 = $46 | $shl586;
  HEAP32[(10196)>>2] = $or592;
  HEAP32[$arrayidx579>>2] = $p$addr$1;
  $parent593 = ((($p$addr$1)) + 24|0);
  HEAP32[$parent593>>2] = $arrayidx579;
  $bk594 = ((($p$addr$1)) + 12|0);
  HEAP32[$bk594>>2] = $p$addr$1;
  $fd595 = ((($p$addr$1)) + 8|0);
  HEAP32[$fd595>>2] = $p$addr$1;
  return;
 }
 $47 = HEAP32[$arrayidx579>>2]|0;
 $head6056 = ((($47)) + 4|0);
 $48 = HEAP32[$head6056>>2]|0;
 $and6067 = $48 & -8;
 $cmp6078 = ($and6067|0)==($psize$addr$2|0);
 L104: do {
  if ($cmp6078) {
   $T$0$lcssa = $47;
  } else {
   $cmp598 = ($I545$0|0)==(31);
   $shr600 = $I545$0 >>> 1;
   $sub603 = (25 - ($shr600))|0;
   $cond = $cmp598 ? 0 : $sub603;
   $shl604 = $psize$addr$2 << $cond;
   $K597$010 = $shl604;$T$09 = $47;
   while(1) {
    $shr611 = $K597$010 >>> 31;
    $arrayidx613 = (((($T$09)) + 16|0) + ($shr611<<2)|0);
    $49 = HEAP32[$arrayidx613>>2]|0;
    $cmp615 = ($49|0)==(0|0);
    if ($cmp615) {
     break;
    }
    $shl614 = $K597$010 << 1;
    $head605 = ((($49)) + 4|0);
    $50 = HEAP32[$head605>>2]|0;
    $and606 = $50 & -8;
    $cmp607 = ($and606|0)==($psize$addr$2|0);
    if ($cmp607) {
     $T$0$lcssa = $49;
     break L104;
    } else {
     $K597$010 = $shl614;$T$09 = $49;
    }
   }
   HEAP32[$arrayidx613>>2] = $p$addr$1;
   $parent625 = ((($p$addr$1)) + 24|0);
   HEAP32[$parent625>>2] = $T$09;
   $bk626 = ((($p$addr$1)) + 12|0);
   HEAP32[$bk626>>2] = $p$addr$1;
   $fd627 = ((($p$addr$1)) + 8|0);
   HEAP32[$fd627>>2] = $p$addr$1;
   return;
  }
 } while(0);
 $fd635 = ((($T$0$lcssa)) + 8|0);
 $51 = HEAP32[$fd635>>2]|0;
 $bk648 = ((($51)) + 12|0);
 HEAP32[$bk648>>2] = $p$addr$1;
 HEAP32[$fd635>>2] = $p$addr$1;
 $fd650 = ((($p$addr$1)) + 8|0);
 HEAP32[$fd650>>2] = $51;
 $bk651 = ((($p$addr$1)) + 12|0);
 HEAP32[$bk651>>2] = $T$0$lcssa;
 $parent652 = ((($p$addr$1)) + 24|0);
 HEAP32[$parent652>>2] = 0;
 return;
}
function __ZSt18uncaught_exceptionv() {
 var $call = 0, $cmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZSt19uncaught_exceptionsv()|0);
 $cmp = ($call|0)>(0);
 return ($cmp|0);
}
function __ZSt19uncaught_exceptionsv() {
 var $call = 0, $cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (___cxa_uncaught_exception()|0);
 $cond = $call&1;
 return ($cond|0);
}
function __ZdlPv($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($ptr);
 return;
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($this,$thrown_type,$adjustedPtr) {
 $this = $this|0;
 $thrown_type = $thrown_type|0;
 $adjustedPtr = $adjustedPtr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $call = 0, $cmp = 0, $cmp4 = 0, $dst_ptr_leading_to_static_ptr = 0, $info = 0, $number_of_dst_type = 0, $path_dst_ptr_to_static_ptr = 0, $retval$0 = 0, $retval$2 = 0, $src2dst_offset = 0, $static_type = 0, $vfn = 0, $vtable = 0;
 var dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $info = sp;
 $call = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($this,$thrown_type,0)|0);
 if ($call) {
  $retval$2 = 1;
 } else {
  $0 = ($thrown_type|0)==(0|0);
  if ($0) {
   $retval$2 = 0;
  } else {
   $1 = (___dynamic_cast($thrown_type,1904,1888,0)|0);
   $cmp = ($1|0)==(0|0);
   if ($cmp) {
    $retval$2 = 0;
   } else {
    $2 = ((($info)) + 4|0);
    dest=$2; stop=dest+52|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
    HEAP32[$info>>2] = $1;
    $static_type = ((($info)) + 8|0);
    HEAP32[$static_type>>2] = $this;
    $src2dst_offset = ((($info)) + 12|0);
    HEAP32[$src2dst_offset>>2] = -1;
    $number_of_dst_type = ((($info)) + 48|0);
    HEAP32[$number_of_dst_type>>2] = 1;
    $vtable = HEAP32[$1>>2]|0;
    $vfn = ((($vtable)) + 28|0);
    $3 = HEAP32[$vfn>>2]|0;
    $4 = HEAP32[$adjustedPtr>>2]|0;
    FUNCTION_TABLE_viiii[$3 & 31]($1,$info,$4,1);
    $path_dst_ptr_to_static_ptr = ((($info)) + 24|0);
    $5 = HEAP32[$path_dst_ptr_to_static_ptr>>2]|0;
    $cmp4 = ($5|0)==(1);
    if ($cmp4) {
     $dst_ptr_leading_to_static_ptr = ((($info)) + 16|0);
     $6 = HEAP32[$dst_ptr_leading_to_static_ptr>>2]|0;
     HEAP32[$adjustedPtr>>2] = $6;
     $retval$0 = 1;
    } else {
     $retval$0 = 0;
    }
    $retval$2 = $retval$0;
   }
  }
 }
 STACKTOP = sp;return ($retval$2|0);
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $call = 0, $static_type = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $static_type = ((($info)) + 8|0);
 $0 = HEAP32[$static_type>>2]|0;
 $call = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($this,$0,$use_strcmp)|0);
 if ($call) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$info,$dst_ptr,$current_ptr,$path_below);
 }
 return;
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $add = 0, $call = 0, $call3 = 0, $cmp = 0, $cmp12 = 0, $cmp13 = 0, $cmp5 = 0, $cmp7 = 0, $dst_ptr_leading_to_static_ptr = 0, $dst_ptr_not_leading_to_static_ptr = 0, $is_dst_type_derived_from_static_type = 0, $number_to_dst_ptr = 0, $number_to_static_ptr = 0;
 var $path_dst_ptr_to_static_ptr = 0, $path_dynamic_ptr_to_dst_ptr = 0, $path_dynamic_ptr_to_dst_ptr10 = 0, $search_done = 0, $static_type = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $static_type = ((($info)) + 8|0);
 $0 = HEAP32[$static_type>>2]|0;
 $call = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($this,$0,$use_strcmp)|0);
 do {
  if ($call) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0,$info,$current_ptr,$path_below);
  } else {
   $1 = HEAP32[$info>>2]|0;
   $call3 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($this,$1,$use_strcmp)|0);
   if ($call3) {
    $dst_ptr_leading_to_static_ptr = ((($info)) + 16|0);
    $2 = HEAP32[$dst_ptr_leading_to_static_ptr>>2]|0;
    $cmp = ($2|0)==($current_ptr|0);
    if (!($cmp)) {
     $dst_ptr_not_leading_to_static_ptr = ((($info)) + 20|0);
     $3 = HEAP32[$dst_ptr_not_leading_to_static_ptr>>2]|0;
     $cmp5 = ($3|0)==($current_ptr|0);
     if (!($cmp5)) {
      $path_dynamic_ptr_to_dst_ptr10 = ((($info)) + 32|0);
      HEAP32[$path_dynamic_ptr_to_dst_ptr10>>2] = $path_below;
      HEAP32[$dst_ptr_not_leading_to_static_ptr>>2] = $current_ptr;
      $number_to_dst_ptr = ((($info)) + 40|0);
      $4 = HEAP32[$number_to_dst_ptr>>2]|0;
      $add = (($4) + 1)|0;
      HEAP32[$number_to_dst_ptr>>2] = $add;
      $number_to_static_ptr = ((($info)) + 36|0);
      $5 = HEAP32[$number_to_static_ptr>>2]|0;
      $cmp12 = ($5|0)==(1);
      if ($cmp12) {
       $path_dst_ptr_to_static_ptr = ((($info)) + 24|0);
       $6 = HEAP32[$path_dst_ptr_to_static_ptr>>2]|0;
       $cmp13 = ($6|0)==(2);
       if ($cmp13) {
        $search_done = ((($info)) + 54|0);
        HEAP8[$search_done>>0] = 1;
       }
      }
      $is_dst_type_derived_from_static_type = ((($info)) + 44|0);
      HEAP32[$is_dst_type_derived_from_static_type>>2] = 4;
      break;
     }
    }
    $cmp7 = ($path_below|0)==(1);
    if ($cmp7) {
     $path_dynamic_ptr_to_dst_ptr = ((($info)) + 32|0);
     HEAP32[$path_dynamic_ptr_to_dst_ptr>>2] = 1;
    }
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $call = 0, $static_type = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $static_type = ((($info)) + 8|0);
 $0 = HEAP32[$static_type>>2]|0;
 $call = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($this,$0,0)|0);
 if ($call) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$info,$adjustedPtr,$path_below);
 }
 return;
}
function __ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($x,$y,$0) {
 $x = $x|0;
 $y = $y|0;
 $0 = $0|0;
 var $cmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($x|0)==($y|0);
 return ($cmp|0);
}
function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $2 = 0, $add = 0, $cmp = 0, $cmp4 = 0, $cmp7 = 0, $dst_ptr_leading_to_static_ptr = 0, $number_to_static_ptr = 0, $number_to_static_ptr11 = 0, $path_dst_ptr_to_static_ptr = 0, $path_dst_ptr_to_static_ptr12 = 0, $path_dst_ptr_to_static_ptr6 = 0, $search_done = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $dst_ptr_leading_to_static_ptr = ((($info)) + 16|0);
 $0 = HEAP32[$dst_ptr_leading_to_static_ptr>>2]|0;
 $cmp = ($0|0)==(0|0);
 do {
  if ($cmp) {
   HEAP32[$dst_ptr_leading_to_static_ptr>>2] = $adjustedPtr;
   $path_dst_ptr_to_static_ptr = ((($info)) + 24|0);
   HEAP32[$path_dst_ptr_to_static_ptr>>2] = $path_below;
   $number_to_static_ptr = ((($info)) + 36|0);
   HEAP32[$number_to_static_ptr>>2] = 1;
  } else {
   $cmp4 = ($0|0)==($adjustedPtr|0);
   if (!($cmp4)) {
    $number_to_static_ptr11 = ((($info)) + 36|0);
    $2 = HEAP32[$number_to_static_ptr11>>2]|0;
    $add = (($2) + 1)|0;
    HEAP32[$number_to_static_ptr11>>2] = $add;
    $path_dst_ptr_to_static_ptr12 = ((($info)) + 24|0);
    HEAP32[$path_dst_ptr_to_static_ptr12>>2] = 2;
    $search_done = ((($info)) + 54|0);
    HEAP8[$search_done>>0] = 1;
    break;
   }
   $path_dst_ptr_to_static_ptr6 = ((($info)) + 24|0);
   $1 = HEAP32[$path_dst_ptr_to_static_ptr6>>2]|0;
   $cmp7 = ($1|0)==(2);
   if ($cmp7) {
    HEAP32[$path_dst_ptr_to_static_ptr6>>2] = $path_below;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi($this,$info,$current_ptr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $cmp = 0, $cmp2 = 0, $path_dynamic_ptr_to_static_ptr = 0, $static_ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $static_ptr = ((($info)) + 4|0);
 $0 = HEAP32[$static_ptr>>2]|0;
 $cmp = ($0|0)==($current_ptr|0);
 if ($cmp) {
  $path_dynamic_ptr_to_static_ptr = ((($info)) + 28|0);
  $1 = HEAP32[$path_dynamic_ptr_to_static_ptr>>2]|0;
  $cmp2 = ($1|0)==(1);
  if (!($cmp2)) {
   HEAP32[$path_dynamic_ptr_to_static_ptr>>2] = $path_below;
  }
 }
 return;
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($this,$info,$dst_ptr,$current_ptr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $add = 0, $cmp = 0, $cmp10 = 0, $cmp13 = 0, $cmp18 = 0, $cmp2 = 0, $cmp21 = 0, $cmp5 = 0, $cmp7 = 0, $dst_ptr_leading_to_static_ptr = 0, $found_any_static_type = 0, $found_our_static_ptr = 0, $number_of_dst_type = 0;
 var $number_of_dst_type17 = 0, $number_to_static_ptr = 0, $number_to_static_ptr26 = 0, $or$cond = 0, $or$cond19 = 0, $path_dst_ptr_to_static_ptr = 0, $path_dst_ptr_to_static_ptr12 = 0, $search_done = 0, $search_done23 = 0, $search_done27 = 0, $static_ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $found_any_static_type = ((($info)) + 53|0);
 HEAP8[$found_any_static_type>>0] = 1;
 $static_ptr = ((($info)) + 4|0);
 $0 = HEAP32[$static_ptr>>2]|0;
 $cmp = ($0|0)==($current_ptr|0);
 do {
  if ($cmp) {
   $found_our_static_ptr = ((($info)) + 52|0);
   HEAP8[$found_our_static_ptr>>0] = 1;
   $dst_ptr_leading_to_static_ptr = ((($info)) + 16|0);
   $1 = HEAP32[$dst_ptr_leading_to_static_ptr>>2]|0;
   $cmp2 = ($1|0)==(0|0);
   if ($cmp2) {
    HEAP32[$dst_ptr_leading_to_static_ptr>>2] = $dst_ptr;
    $path_dst_ptr_to_static_ptr = ((($info)) + 24|0);
    HEAP32[$path_dst_ptr_to_static_ptr>>2] = $path_below;
    $number_to_static_ptr = ((($info)) + 36|0);
    HEAP32[$number_to_static_ptr>>2] = 1;
    $number_of_dst_type = ((($info)) + 48|0);
    $2 = HEAP32[$number_of_dst_type>>2]|0;
    $cmp5 = ($2|0)==(1);
    $cmp7 = ($path_below|0)==(1);
    $or$cond = $cmp7 & $cmp5;
    if (!($or$cond)) {
     break;
    }
    $search_done = ((($info)) + 54|0);
    HEAP8[$search_done>>0] = 1;
    break;
   }
   $cmp10 = ($1|0)==($dst_ptr|0);
   if (!($cmp10)) {
    $number_to_static_ptr26 = ((($info)) + 36|0);
    $6 = HEAP32[$number_to_static_ptr26>>2]|0;
    $add = (($6) + 1)|0;
    HEAP32[$number_to_static_ptr26>>2] = $add;
    $search_done27 = ((($info)) + 54|0);
    HEAP8[$search_done27>>0] = 1;
    break;
   }
   $path_dst_ptr_to_static_ptr12 = ((($info)) + 24|0);
   $3 = HEAP32[$path_dst_ptr_to_static_ptr12>>2]|0;
   $cmp13 = ($3|0)==(2);
   if ($cmp13) {
    HEAP32[$path_dst_ptr_to_static_ptr12>>2] = $path_below;
    $5 = $path_below;
   } else {
    $5 = $3;
   }
   $number_of_dst_type17 = ((($info)) + 48|0);
   $4 = HEAP32[$number_of_dst_type17>>2]|0;
   $cmp18 = ($4|0)==(1);
   $cmp21 = ($5|0)==(1);
   $or$cond19 = $cmp18 & $cmp21;
   if ($or$cond19) {
    $search_done23 = ((($info)) + 54|0);
    HEAP8[$search_done23>>0] = 1;
   }
  }
 } while(0);
 return;
}
function ___dynamic_cast($static_ptr,$static_type,$dst_type,$src2dst_offset) {
 $static_ptr = $static_ptr|0;
 $static_type = $static_type|0;
 $dst_type = $dst_type|0;
 $src2dst_offset = $src2dst_offset|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$ptr = 0, $arrayidx = 0, $arrayidx1 = 0, $call = 0;
 var $cmp = 0, $cmp14 = 0, $cmp16 = 0, $cmp19 = 0, $cmp25 = 0, $cmp27 = 0, $cmp30 = 0, $cmp33 = 0, $dst_ptr$0 = 0, $dst_ptr_leading_to_static_ptr = 0, $dst_ptr_not_leading_to_static_ptr = 0, $info = 0, $number_of_dst_type = 0, $number_to_dst_ptr = 0, $number_to_static_ptr = 0, $or$cond = 0, $or$cond15 = 0, $or$cond16 = 0, $or$cond17 = 0, $path_dst_ptr_to_static_ptr = 0;
 var $path_dynamic_ptr_to_dst_ptr = 0, $path_dynamic_ptr_to_static_ptr = 0, $spec$select = 0, $spec$select18 = 0, $src2dst_offset5 = 0, $static_ptr3 = 0, $static_type4 = 0, $vfn = 0, $vfn11 = 0, $vtable10 = 0, $vtable7 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $info = sp;
 $0 = HEAP32[$static_ptr>>2]|0;
 $arrayidx = ((($0)) + -8|0);
 $1 = HEAP32[$arrayidx>>2]|0;
 $add$ptr = (($static_ptr) + ($1)|0);
 $arrayidx1 = ((($0)) + -4|0);
 $2 = HEAP32[$arrayidx1>>2]|0;
 HEAP32[$info>>2] = $dst_type;
 $static_ptr3 = ((($info)) + 4|0);
 HEAP32[$static_ptr3>>2] = $static_ptr;
 $static_type4 = ((($info)) + 8|0);
 HEAP32[$static_type4>>2] = $static_type;
 $src2dst_offset5 = ((($info)) + 12|0);
 HEAP32[$src2dst_offset5>>2] = $src2dst_offset;
 $dst_ptr_leading_to_static_ptr = ((($info)) + 16|0);
 $dst_ptr_not_leading_to_static_ptr = ((($info)) + 20|0);
 $path_dst_ptr_to_static_ptr = ((($info)) + 24|0);
 $path_dynamic_ptr_to_static_ptr = ((($info)) + 28|0);
 $path_dynamic_ptr_to_dst_ptr = ((($info)) + 32|0);
 $number_to_dst_ptr = ((($info)) + 40|0);
 dest=$dst_ptr_leading_to_static_ptr; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));HEAP16[$dst_ptr_leading_to_static_ptr+36>>1]=0|0;HEAP8[$dst_ptr_leading_to_static_ptr+38>>0]=0|0;
 $call = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($2,$dst_type,0)|0);
 L1: do {
  if ($call) {
   $number_of_dst_type = ((($info)) + 48|0);
   HEAP32[$number_of_dst_type>>2] = 1;
   $vtable7 = HEAP32[$2>>2]|0;
   $vfn = ((($vtable7)) + 20|0);
   $3 = HEAP32[$vfn>>2]|0;
   FUNCTION_TABLE_viiiiii[$3 & 31]($2,$info,$add$ptr,$add$ptr,1,0);
   $4 = HEAP32[$path_dst_ptr_to_static_ptr>>2]|0;
   $cmp = ($4|0)==(1);
   $spec$select = $cmp ? $add$ptr : 0;
   $dst_ptr$0 = $spec$select;
  } else {
   $number_to_static_ptr = ((($info)) + 36|0);
   $vtable10 = HEAP32[$2>>2]|0;
   $vfn11 = ((($vtable10)) + 24|0);
   $5 = HEAP32[$vfn11>>2]|0;
   FUNCTION_TABLE_viiiii[$5 & 31]($2,$info,$add$ptr,1,0);
   $6 = HEAP32[$number_to_static_ptr>>2]|0;
   switch ($6|0) {
   case 0:  {
    $7 = HEAP32[$number_to_dst_ptr>>2]|0;
    $cmp14 = ($7|0)==(1);
    $8 = HEAP32[$path_dynamic_ptr_to_static_ptr>>2]|0;
    $cmp16 = ($8|0)==(1);
    $or$cond = $cmp14 & $cmp16;
    $9 = HEAP32[$path_dynamic_ptr_to_dst_ptr>>2]|0;
    $cmp19 = ($9|0)==(1);
    $or$cond15 = $or$cond & $cmp19;
    $10 = HEAP32[$dst_ptr_not_leading_to_static_ptr>>2]|0;
    $spec$select18 = $or$cond15 ? $10 : 0;
    $dst_ptr$0 = $spec$select18;
    break L1;
    break;
   }
   case 1:  {
    break;
   }
   default: {
    $dst_ptr$0 = 0;
    break L1;
   }
   }
   $11 = HEAP32[$path_dst_ptr_to_static_ptr>>2]|0;
   $cmp25 = ($11|0)==(1);
   if (!($cmp25)) {
    $12 = HEAP32[$number_to_dst_ptr>>2]|0;
    $cmp27 = ($12|0)==(0);
    $13 = HEAP32[$path_dynamic_ptr_to_static_ptr>>2]|0;
    $cmp30 = ($13|0)==(1);
    $or$cond16 = $cmp27 & $cmp30;
    $14 = HEAP32[$path_dynamic_ptr_to_dst_ptr>>2]|0;
    $cmp33 = ($14|0)==(1);
    $or$cond17 = $or$cond16 & $cmp33;
    if (!($or$cond17)) {
     $dst_ptr$0 = 0;
     break;
    }
   }
   $15 = HEAP32[$dst_ptr_leading_to_static_ptr>>2]|0;
   $dst_ptr$0 = $15;
  }
 } while(0);
 STACKTOP = sp;return ($dst_ptr$0|0);
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $2 = 0, $__base_type = 0, $call = 0, $static_type = 0, $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $static_type = ((($info)) + 8|0);
 $0 = HEAP32[$static_type>>2]|0;
 $call = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($this,$0,$use_strcmp)|0);
 if ($call) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$info,$dst_ptr,$current_ptr,$path_below);
 } else {
  $__base_type = ((($this)) + 8|0);
  $1 = HEAP32[$__base_type>>2]|0;
  $vtable = HEAP32[$1>>2]|0;
  $vfn = ((($vtable)) + 20|0);
  $2 = HEAP32[$vfn>>2]|0;
  FUNCTION_TABLE_viiiiii[$2 & 31]($1,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
 }
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__base_type = 0, $__base_type40 = 0, $add = 0, $call = 0, $call3 = 0;
 var $cmp = 0, $cmp11 = 0, $cmp26 = 0, $cmp27 = 0, $cmp5 = 0, $cmp7 = 0, $dst_ptr_leading_to_static_ptr = 0, $dst_ptr_not_leading_to_static_ptr = 0, $found_any_static_type = 0, $found_our_static_ptr = 0, $is_dst_type_derived_from_static_type = 0, $is_dst_type_derived_from_static_type13$0$off032 = 0, $number_to_dst_ptr = 0, $number_to_static_ptr = 0, $path_dst_ptr_to_static_ptr = 0, $path_dynamic_ptr_to_dst_ptr = 0, $path_dynamic_ptr_to_dst_ptr10 = 0, $search_done = 0, $static_type = 0, $tobool16 = 0;
 var $tobool19 = 0, $vfn = 0, $vfn42 = 0, $vtable = 0, $vtable41 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $static_type = ((($info)) + 8|0);
 $0 = HEAP32[$static_type>>2]|0;
 $call = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($this,$0,$use_strcmp)|0);
 do {
  if ($call) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0,$info,$current_ptr,$path_below);
  } else {
   $1 = HEAP32[$info>>2]|0;
   $call3 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($this,$1,$use_strcmp)|0);
   if (!($call3)) {
    $__base_type40 = ((($this)) + 8|0);
    $13 = HEAP32[$__base_type40>>2]|0;
    $vtable41 = HEAP32[$13>>2]|0;
    $vfn42 = ((($vtable41)) + 24|0);
    $14 = HEAP32[$vfn42>>2]|0;
    FUNCTION_TABLE_viiiii[$14 & 31]($13,$info,$current_ptr,$path_below,$use_strcmp);
    break;
   }
   $dst_ptr_leading_to_static_ptr = ((($info)) + 16|0);
   $2 = HEAP32[$dst_ptr_leading_to_static_ptr>>2]|0;
   $cmp = ($2|0)==($current_ptr|0);
   if (!($cmp)) {
    $dst_ptr_not_leading_to_static_ptr = ((($info)) + 20|0);
    $3 = HEAP32[$dst_ptr_not_leading_to_static_ptr>>2]|0;
    $cmp5 = ($3|0)==($current_ptr|0);
    if (!($cmp5)) {
     $path_dynamic_ptr_to_dst_ptr10 = ((($info)) + 32|0);
     HEAP32[$path_dynamic_ptr_to_dst_ptr10>>2] = $path_below;
     $is_dst_type_derived_from_static_type = ((($info)) + 44|0);
     $4 = HEAP32[$is_dst_type_derived_from_static_type>>2]|0;
     $cmp11 = ($4|0)==(4);
     if ($cmp11) {
      break;
     }
     $found_our_static_ptr = ((($info)) + 52|0);
     HEAP8[$found_our_static_ptr>>0] = 0;
     $found_any_static_type = ((($info)) + 53|0);
     HEAP8[$found_any_static_type>>0] = 0;
     $__base_type = ((($this)) + 8|0);
     $5 = HEAP32[$__base_type>>2]|0;
     $vtable = HEAP32[$5>>2]|0;
     $vfn = ((($vtable)) + 20|0);
     $6 = HEAP32[$vfn>>2]|0;
     FUNCTION_TABLE_viiiiii[$6 & 31]($5,$info,$current_ptr,$current_ptr,1,$use_strcmp);
     $7 = HEAP8[$found_any_static_type>>0]|0;
     $tobool16 = ($7<<24>>24)==(0);
     if ($tobool16) {
      $is_dst_type_derived_from_static_type13$0$off032 = 0;
      label = 11;
     } else {
      $8 = HEAP8[$found_our_static_ptr>>0]|0;
      $tobool19 = ($8<<24>>24)==(0);
      if ($tobool19) {
       $is_dst_type_derived_from_static_type13$0$off032 = 1;
       label = 11;
      } else {
       label = 15;
      }
     }
     do {
      if ((label|0) == 11) {
       HEAP32[$dst_ptr_not_leading_to_static_ptr>>2] = $current_ptr;
       $number_to_dst_ptr = ((($info)) + 40|0);
       $9 = HEAP32[$number_to_dst_ptr>>2]|0;
       $add = (($9) + 1)|0;
       HEAP32[$number_to_dst_ptr>>2] = $add;
       $number_to_static_ptr = ((($info)) + 36|0);
       $10 = HEAP32[$number_to_static_ptr>>2]|0;
       $cmp26 = ($10|0)==(1);
       if ($cmp26) {
        $path_dst_ptr_to_static_ptr = ((($info)) + 24|0);
        $11 = HEAP32[$path_dst_ptr_to_static_ptr>>2]|0;
        $cmp27 = ($11|0)==(2);
        if ($cmp27) {
         $search_done = ((($info)) + 54|0);
         HEAP8[$search_done>>0] = 1;
         if ($is_dst_type_derived_from_static_type13$0$off032) {
          label = 15;
          break;
         } else {
          $12 = 4;
          break;
         }
        }
       }
       if ($is_dst_type_derived_from_static_type13$0$off032) {
        label = 15;
       } else {
        $12 = 4;
       }
      }
     } while(0);
     if ((label|0) == 15) {
      $12 = 3;
     }
     HEAP32[$is_dst_type_derived_from_static_type>>2] = $12;
     break;
    }
   }
   $cmp7 = ($path_below|0)==(1);
   if ($cmp7) {
    $path_dynamic_ptr_to_dst_ptr = ((($info)) + 32|0);
    HEAP32[$path_dynamic_ptr_to_dst_ptr>>2] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $2 = 0, $__base_type = 0, $call = 0, $static_type = 0, $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $static_type = ((($info)) + 8|0);
 $0 = HEAP32[$static_type>>2]|0;
 $call = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($this,$0,0)|0);
 if ($call) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$info,$adjustedPtr,$path_below);
 } else {
  $__base_type = ((($this)) + 8|0);
  $1 = HEAP32[$__base_type>>2]|0;
  $vtable = HEAP32[$1>>2]|0;
  $vfn = ((($vtable)) + 28|0);
  $2 = HEAP32[$vfn>>2]|0;
  FUNCTION_TABLE_viiii[$2 & 31]($1,$info,$adjustedPtr,$path_below);
 }
 return;
}
function __ZNSt9type_infoD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function ___cxa_can_catch($catchType,$excpType,$thrown) {
 $catchType = $catchType|0;
 $excpType = $excpType|0;
 $thrown = $thrown|0;
 var $0 = 0, $1 = 0, $2 = 0, $call = 0, $conv = 0, $temp = 0, $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $temp = sp;
 $0 = HEAP32[$thrown>>2]|0;
 HEAP32[$temp>>2] = $0;
 $vtable = HEAP32[$catchType>>2]|0;
 $vfn = ((($vtable)) + 16|0);
 $1 = HEAP32[$vfn>>2]|0;
 $call = (FUNCTION_TABLE_iiii[$1 & 63]($catchType,$excpType,$temp)|0);
 $conv = $call&1;
 if ($call) {
  $2 = HEAP32[$temp>>2]|0;
  HEAP32[$thrown>>2] = $2;
 }
 STACKTOP = sp;return ($conv|0);
}
function ___cxa_is_pointer_type($type) {
 $type = $type|0;
 var $0 = 0, $1 = 0, $2 = 0, $phitmp = 0, $phitmp1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($type|0)==(0|0);
 if ($0) {
  $2 = 0;
 } else {
  $1 = (___dynamic_cast($type,1904,1960,0)|0);
  $phitmp = ($1|0)!=(0|0);
  $phitmp1 = $phitmp&1;
  $2 = $phitmp1;
 }
 return ($2|0);
}
function ___muldsi3($a, $b) {
    $a = $a | 0;
    $b = $b | 0;
    var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
    $1 = $a & 65535;
    $2 = $b & 65535;
    $3 = Math_imul($2, $1) | 0;
    $6 = $a >>> 16;
    $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
    $11 = $b >>> 16;
    $12 = Math_imul($11, $1) | 0;
    return (setTempRet0(((($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0) | 0), 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
    $x_sroa_0_0_extract_trunc = $a$0;
    $y_sroa_0_0_extract_trunc = $b$0;
    $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
    $1$1 = (getTempRet0() | 0);
    $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
    return (setTempRet0((((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0) | 0), 0 | $1$0 & -1) | 0;
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((setTempRet0((h) | 0),l|0)|0);
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((setTempRet0((h) | 0),l|0)|0);
}
function _llvm_cttz_i32(x) { // Note: Currently doesn't take isZeroUndef()
    x = x | 0;
    return (x ? (31 - (Math_clz32((x ^ (x - 1))) | 0) | 0) : 32) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    $rem = $rem | 0;
    var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
    $n_sroa_0_0_extract_trunc = $a$0;
    $n_sroa_1_4_extract_shift$0 = $a$1;
    $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
    $d_sroa_0_0_extract_trunc = $b$0;
    $d_sroa_1_4_extract_shift$0 = $b$1;
    $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
    if (($n_sroa_1_4_extract_trunc | 0) == 0) {
      $4 = ($rem | 0) != 0;
      if (($d_sroa_1_4_extract_trunc | 0) == 0) {
        if ($4) {
          HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
      } else {
        if (!$4) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
      }
    }
    $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
    do {
      if (($d_sroa_0_0_extract_trunc | 0) == 0) {
        if ($17) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
            HEAP32[$rem + 4 >> 2] = 0;
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        if (($n_sroa_0_0_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0;
            HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
        if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0 | $a$0 & -1;
            HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
          }
          $_0$1 = 0;
          $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($51 >>> 0 <= 30) {
          $57 = $51 + 1 | 0;
          $58 = 31 - $51 | 0;
          $sr_1_ph = $57;
          $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
      } else {
        if (!$17) {
          $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
          $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          if ($119 >>> 0 <= 31) {
            $125 = $119 + 1 | 0;
            $126 = 31 - $119 | 0;
            $130 = $119 - 31 >> 31;
            $sr_1_ph = $125;
            $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
            $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
            $q_sroa_0_1_ph = 0;
            $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
            break;
          }
          if (($rem | 0) == 0) {
            $_0$1 = 0;
            $_0$0 = 0;
            return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
          }
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$1 = 0;
          $_0$0 = 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
        if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
          $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
          $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          $89 = 64 - $88 | 0;
          $91 = 32 - $88 | 0;
          $92 = $91 >> 31;
          $95 = $88 - 32 | 0;
          $105 = $95 >> 31;
          $sr_1_ph = $88;
          $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
          $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
          $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
          $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
          break;
        }
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
          HEAP32[$rem + 4 >> 2] = 0;
        }
        if (($d_sroa_0_0_extract_trunc | 0) == 1) {
          $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$0 = 0 | $a$0 & -1;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        } else {
          $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
          $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
          $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
      }
    } while (0);
    if (($sr_1_ph | 0) == 0) {
      $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
      $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
      $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
      $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = 0;
    } else {
      $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
      $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
      $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
      $137$1 = (getTempRet0() | 0);
      $q_sroa_1_1198 = $q_sroa_1_1_ph;
      $q_sroa_0_1199 = $q_sroa_0_1_ph;
      $r_sroa_1_1200 = $r_sroa_1_1_ph;
      $r_sroa_0_1201 = $r_sroa_0_1_ph;
      $sr_1202 = $sr_1_ph;
      $carry_0203 = 0;
      while (1) {
        $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
        $149 = $carry_0203 | $q_sroa_0_1199 << 1;
        $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
        $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
        _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0;
        $150$1 = (getTempRet0() | 0);
        $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
        $152 = $151$0 & 1;
        $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0;
        $r_sroa_0_0_extract_trunc = $154$0;
        $r_sroa_1_4_extract_trunc = (getTempRet0() | 0);
        $155 = $sr_1202 - 1 | 0;
        if (($155 | 0) == 0) {
          break;
        } else {
          $q_sroa_1_1198 = $147;
          $q_sroa_0_1199 = $149;
          $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
          $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
          $sr_1202 = $155;
          $carry_0203 = $152;
        }
      }
      $q_sroa_1_1_lcssa = $147;
      $q_sroa_0_1_lcssa = $149;
      $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
      $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = $152;
    }
    $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
    $q_sroa_0_0_insert_ext75$1 = 0;
    $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
    if (($rem | 0) != 0) {
      HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
      HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
    }
    $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
    $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
    return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $1$0 = 0;
    $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
    return $1$0 | 0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      setTempRet0((high >>> bits) | 0);
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    setTempRet0((0) | 0);
    return (high >>> (bits - 32))|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      setTempRet0(((high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits))) | 0);
      return low << bits;
    }
    setTempRet0((low << (bits - 32)) | 0);
    return 0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    var aligned_dest_end = 0;
    var block_aligned_dest_end = 0;
    var dest_end = 0;
    // Test against a benchmarked cutoff limit for when HEAPU8.set() becomes faster to use.
    if ((num|0) >= 8192) {
      _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
      return dest|0;
    }

    ret = dest|0;
    dest_end = (dest + num)|0;
    if ((dest&3) == (src&3)) {
      // The initial unaligned < 4-byte front.
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      aligned_dest_end = (dest_end & -4)|0;
      block_aligned_dest_end = (aligned_dest_end - 64)|0;
      while ((dest|0) <= (block_aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        HEAP32[(((dest)+(4))>>2)]=((HEAP32[(((src)+(4))>>2)])|0);
        HEAP32[(((dest)+(8))>>2)]=((HEAP32[(((src)+(8))>>2)])|0);
        HEAP32[(((dest)+(12))>>2)]=((HEAP32[(((src)+(12))>>2)])|0);
        HEAP32[(((dest)+(16))>>2)]=((HEAP32[(((src)+(16))>>2)])|0);
        HEAP32[(((dest)+(20))>>2)]=((HEAP32[(((src)+(20))>>2)])|0);
        HEAP32[(((dest)+(24))>>2)]=((HEAP32[(((src)+(24))>>2)])|0);
        HEAP32[(((dest)+(28))>>2)]=((HEAP32[(((src)+(28))>>2)])|0);
        HEAP32[(((dest)+(32))>>2)]=((HEAP32[(((src)+(32))>>2)])|0);
        HEAP32[(((dest)+(36))>>2)]=((HEAP32[(((src)+(36))>>2)])|0);
        HEAP32[(((dest)+(40))>>2)]=((HEAP32[(((src)+(40))>>2)])|0);
        HEAP32[(((dest)+(44))>>2)]=((HEAP32[(((src)+(44))>>2)])|0);
        HEAP32[(((dest)+(48))>>2)]=((HEAP32[(((src)+(48))>>2)])|0);
        HEAP32[(((dest)+(52))>>2)]=((HEAP32[(((src)+(52))>>2)])|0);
        HEAP32[(((dest)+(56))>>2)]=((HEAP32[(((src)+(56))>>2)])|0);
        HEAP32[(((dest)+(60))>>2)]=((HEAP32[(((src)+(60))>>2)])|0);
        dest = (dest+64)|0;
        src = (src+64)|0;
      }
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    } else {
      // In the unaligned copy case, unroll a bit as well.
      aligned_dest_end = (dest_end - 4)|0;
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        HEAP8[(((dest)+(1))>>0)]=((HEAP8[(((src)+(1))>>0)])|0);
        HEAP8[(((dest)+(2))>>0)]=((HEAP8[(((src)+(2))>>0)])|0);
        HEAP8[(((dest)+(3))>>0)]=((HEAP8[(((src)+(3))>>0)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    }
    // The remaining unaligned < 4 byte tail.
    while ((dest|0) < (dest_end|0)) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
    }
    return ret|0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
    end = (ptr + num)|0;

    value = value & 0xff;
    if ((num|0) >= 67 /* 64 bytes for an unrolled loop + 3 bytes for unaligned head*/) {
      while ((ptr&3) != 0) {
        HEAP8[((ptr)>>0)]=value;
        ptr = (ptr+1)|0;
      }

      aligned_end = (end & -4)|0;
      value4 = value | (value << 8) | (value << 16) | (value << 24);

      block_aligned_end = (aligned_end - 64)|0;

      while((ptr|0) <= (block_aligned_end|0)) {
        HEAP32[((ptr)>>2)]=value4;
        HEAP32[(((ptr)+(4))>>2)]=value4;
        HEAP32[(((ptr)+(8))>>2)]=value4;
        HEAP32[(((ptr)+(12))>>2)]=value4;
        HEAP32[(((ptr)+(16))>>2)]=value4;
        HEAP32[(((ptr)+(20))>>2)]=value4;
        HEAP32[(((ptr)+(24))>>2)]=value4;
        HEAP32[(((ptr)+(28))>>2)]=value4;
        HEAP32[(((ptr)+(32))>>2)]=value4;
        HEAP32[(((ptr)+(36))>>2)]=value4;
        HEAP32[(((ptr)+(40))>>2)]=value4;
        HEAP32[(((ptr)+(44))>>2)]=value4;
        HEAP32[(((ptr)+(48))>>2)]=value4;
        HEAP32[(((ptr)+(52))>>2)]=value4;
        HEAP32[(((ptr)+(56))>>2)]=value4;
        HEAP32[(((ptr)+(60))>>2)]=value4;
        ptr = (ptr + 64)|0;
      }

      while ((ptr|0) < (aligned_end|0) ) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    // The remaining bytes.
    while ((ptr|0) < (end|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (end-num)|0;
}
function _sbrk(increment) {
    increment = increment|0;
    var oldDynamicTop = 0;
    var oldDynamicTopOnChange = 0;
    var newDynamicTop = 0;
    var totalMemory = 0;
    totalMemory = _emscripten_get_heap_size()|0;

      oldDynamicTop = HEAP32[DYNAMICTOP_PTR>>2]|0;
      newDynamicTop = oldDynamicTop + increment | 0;

      if (((increment|0) > 0 & (newDynamicTop|0) < (oldDynamicTop|0)) // Detect and fail if we would wrap around signed 32-bit int.
        | (newDynamicTop|0) < 0) { // Also underflow, sbrk() should be able to be used to subtract.
        abortOnCannotGrowMemory(newDynamicTop|0)|0;
        ___setErrNo(12);
        return -1;
      }

      if ((newDynamicTop|0) > (totalMemory|0)) {
        if (_emscripten_resize_heap(newDynamicTop|0)|0) {
          // We resized the heap. Start another loop iteration if we need to.
        } else {
          // We failed to resize the heap.
          ___setErrNo(12);
          return -1;
        }
      }

      HEAP32[DYNAMICTOP_PTR>>2] = newDynamicTop|0;

    return oldDynamicTop|0;
}

  
function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&63](a1|0)|0;
}


function dynCall_iidiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=+a2; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  return FUNCTION_TABLE_iidiiii[index&63](a1|0,+a2,a3|0,a4|0,a5|0,a6|0)|0;
}


function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&63](a1|0,a2|0)|0;
}


function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&63](a1|0,a2|0,a3|0)|0;
}


function dynCall_iiiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return FUNCTION_TABLE_iiiii[index&63](a1|0,a2|0,a3|0,a4|0)|0;
}


function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&31](a1|0);
}


function dynCall_vii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  FUNCTION_TABLE_vii[index&63](a1|0,a2|0);
}


function dynCall_viii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  FUNCTION_TABLE_viii[index&15](a1|0,a2|0,a3|0);
}


function dynCall_viiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  FUNCTION_TABLE_viiii[index&31](a1|0,a2|0,a3|0,a4|0);
}


function dynCall_viiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  FUNCTION_TABLE_viiiii[index&31](a1|0,a2|0,a3|0,a4|0,a5|0);
}


function dynCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  FUNCTION_TABLE_viiiiii[index&31](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}

function b1(p0) {
 p0 = p0|0; nullFunc_ii(0);return 0;
}
function b2(p0) {
 p0 = p0|0; nullFunc_ii(1);return 0;
}
function b3(p0) {
 p0 = p0|0; nullFunc_ii(2);return 0;
}
function b4(p0) {
 p0 = p0|0; nullFunc_ii(3);return 0;
}
function b5(p0) {
 p0 = p0|0; nullFunc_ii(4);return 0;
}
function b6(p0) {
 p0 = p0|0; nullFunc_ii(5);return 0;
}
function b7(p0) {
 p0 = p0|0; nullFunc_ii(6);return 0;
}
function b8(p0) {
 p0 = p0|0; nullFunc_ii(7);return 0;
}
function b9(p0) {
 p0 = p0|0; nullFunc_ii(8);return 0;
}
function b10(p0) {
 p0 = p0|0; nullFunc_ii(9);return 0;
}
function b11(p0) {
 p0 = p0|0; nullFunc_ii(10);return 0;
}
function b12(p0) {
 p0 = p0|0; nullFunc_ii(11);return 0;
}
function b13(p0) {
 p0 = p0|0; nullFunc_ii(12);return 0;
}
function b14(p0) {
 p0 = p0|0; nullFunc_ii(14);return 0;
}
function b15(p0) {
 p0 = p0|0; nullFunc_ii(15);return 0;
}
function b16(p0) {
 p0 = p0|0; nullFunc_ii(16);return 0;
}
function b17(p0) {
 p0 = p0|0; nullFunc_ii(17);return 0;
}
function b18(p0) {
 p0 = p0|0; nullFunc_ii(18);return 0;
}
function b19(p0) {
 p0 = p0|0; nullFunc_ii(19);return 0;
}
function b20(p0) {
 p0 = p0|0; nullFunc_ii(20);return 0;
}
function b21(p0) {
 p0 = p0|0; nullFunc_ii(21);return 0;
}
function b22(p0) {
 p0 = p0|0; nullFunc_ii(22);return 0;
}
function b23(p0) {
 p0 = p0|0; nullFunc_ii(23);return 0;
}
function b24(p0) {
 p0 = p0|0; nullFunc_ii(24);return 0;
}
function b25(p0) {
 p0 = p0|0; nullFunc_ii(25);return 0;
}
function b26(p0) {
 p0 = p0|0; nullFunc_ii(26);return 0;
}
function b27(p0) {
 p0 = p0|0; nullFunc_ii(27);return 0;
}
function b28(p0) {
 p0 = p0|0; nullFunc_ii(28);return 0;
}
function b29(p0) {
 p0 = p0|0; nullFunc_ii(29);return 0;
}
function b30(p0) {
 p0 = p0|0; nullFunc_ii(30);return 0;
}
function b31(p0) {
 p0 = p0|0; nullFunc_ii(31);return 0;
}
function b32(p0) {
 p0 = p0|0; nullFunc_ii(32);return 0;
}
function b33(p0) {
 p0 = p0|0; nullFunc_ii(33);return 0;
}
function b34(p0) {
 p0 = p0|0; nullFunc_ii(38);return 0;
}
function b35(p0) {
 p0 = p0|0; nullFunc_ii(40);return 0;
}
function b36(p0) {
 p0 = p0|0; nullFunc_ii(41);return 0;
}
function b37(p0) {
 p0 = p0|0; nullFunc_ii(43);return 0;
}
function b38(p0) {
 p0 = p0|0; nullFunc_ii(44);return 0;
}
function b39(p0) {
 p0 = p0|0; nullFunc_ii(45);return 0;
}
function b40(p0) {
 p0 = p0|0; nullFunc_ii(46);return 0;
}
function b41(p0) {
 p0 = p0|0; nullFunc_ii(47);return 0;
}
function b42(p0) {
 p0 = p0|0; nullFunc_ii(48);return 0;
}
function b43(p0) {
 p0 = p0|0; nullFunc_ii(49);return 0;
}
function b44(p0) {
 p0 = p0|0; nullFunc_ii(50);return 0;
}
function b45(p0) {
 p0 = p0|0; nullFunc_ii(51);return 0;
}
function b46(p0) {
 p0 = p0|0; nullFunc_ii(52);return 0;
}
function b47(p0) {
 p0 = p0|0; nullFunc_ii(53);return 0;
}
function b48(p0) {
 p0 = p0|0; nullFunc_ii(54);return 0;
}
function b49(p0) {
 p0 = p0|0; nullFunc_ii(55);return 0;
}
function b50(p0) {
 p0 = p0|0; nullFunc_ii(56);return 0;
}
function b51(p0) {
 p0 = p0|0; nullFunc_ii(57);return 0;
}
function b52(p0) {
 p0 = p0|0; nullFunc_ii(58);return 0;
}
function b53(p0) {
 p0 = p0|0; nullFunc_ii(59);return 0;
}
function b54(p0) {
 p0 = p0|0; nullFunc_ii(60);return 0;
}
function b55(p0) {
 p0 = p0|0; nullFunc_ii(61);return 0;
}
function b56(p0) {
 p0 = p0|0; nullFunc_ii(62);return 0;
}
function b57(p0) {
 p0 = p0|0; nullFunc_ii(63);return 0;
}
function b59(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(0);return 0;
}
function b60(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(1);return 0;
}
function b61(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(2);return 0;
}
function b62(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(3);return 0;
}
function b63(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(4);return 0;
}
function b64(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(5);return 0;
}
function b65(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(6);return 0;
}
function b66(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(7);return 0;
}
function b67(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(8);return 0;
}
function b68(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(9);return 0;
}
function b69(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(10);return 0;
}
function b70(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(11);return 0;
}
function b71(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(12);return 0;
}
function b72(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(13);return 0;
}
function b73(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(14);return 0;
}
function b74(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(15);return 0;
}
function b75(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(16);return 0;
}
function b76(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(17);return 0;
}
function b77(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(18);return 0;
}
function b78(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(19);return 0;
}
function b79(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(20);return 0;
}
function b80(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(21);return 0;
}
function b81(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(22);return 0;
}
function b82(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(23);return 0;
}
function b83(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(24);return 0;
}
function b84(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(25);return 0;
}
function b85(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(26);return 0;
}
function b86(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(27);return 0;
}
function b87(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(28);return 0;
}
function b88(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(29);return 0;
}
function b89(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(30);return 0;
}
function b90(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(31);return 0;
}
function b91(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(32);return 0;
}
function b92(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(33);return 0;
}
function b93(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(34);return 0;
}
function b94(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(35);return 0;
}
function b95(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(36);return 0;
}
function b96(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(37);return 0;
}
function b97(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(38);return 0;
}
function b98(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(39);return 0;
}
function b99(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(40);return 0;
}
function b100(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(41);return 0;
}
function b101(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(42);return 0;
}
function b102(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(43);return 0;
}
function b103(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(44);return 0;
}
function b104(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(45);return 0;
}
function b105(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(47);return 0;
}
function b106(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(48);return 0;
}
function b107(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(49);return 0;
}
function b108(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(50);return 0;
}
function b109(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(51);return 0;
}
function b110(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(52);return 0;
}
function b111(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(53);return 0;
}
function b112(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(54);return 0;
}
function b113(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(55);return 0;
}
function b114(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(56);return 0;
}
function b115(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(57);return 0;
}
function b116(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(58);return 0;
}
function b117(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(59);return 0;
}
function b118(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(60);return 0;
}
function b119(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(61);return 0;
}
function b120(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(62);return 0;
}
function b121(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(63);return 0;
}
function b123(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(0);return 0;
}
function b124(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(1);return 0;
}
function b125(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(2);return 0;
}
function b126(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(3);return 0;
}
function b127(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(4);return 0;
}
function b128(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(5);return 0;
}
function b129(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(6);return 0;
}
function b130(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(7);return 0;
}
function b131(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(8);return 0;
}
function b132(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(9);return 0;
}
function b133(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(10);return 0;
}
function b134(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(11);return 0;
}
function b135(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(12);return 0;
}
function b136(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(13);return 0;
}
function b137(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(14);return 0;
}
function b138(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(15);return 0;
}
function b139(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(16);return 0;
}
function b140(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(17);return 0;
}
function b141(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(18);return 0;
}
function b142(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(19);return 0;
}
function b143(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(20);return 0;
}
function b144(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(21);return 0;
}
function b145(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(22);return 0;
}
function b146(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(23);return 0;
}
function b147(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(24);return 0;
}
function b148(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(25);return 0;
}
function b149(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(26);return 0;
}
function b150(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(27);return 0;
}
function b151(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(28);return 0;
}
function b152(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(29);return 0;
}
function b153(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(30);return 0;
}
function b154(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(31);return 0;
}
function b155(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(32);return 0;
}
function b156(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(34);return 0;
}
function b157(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(35);return 0;
}
function b158(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(36);return 0;
}
function b159(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(37);return 0;
}
function b160(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(38);return 0;
}
function b161(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(39);return 0;
}
function b162(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(41);return 0;
}
function b163(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(42);return 0;
}
function b164(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(44);return 0;
}
function b165(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(45);return 0;
}
function b166(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(46);return 0;
}
function b167(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(47);return 0;
}
function b168(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(48);return 0;
}
function b169(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(49);return 0;
}
function b170(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(50);return 0;
}
function b171(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(51);return 0;
}
function b172(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(52);return 0;
}
function b173(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(53);return 0;
}
function b174(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(54);return 0;
}
function b175(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(55);return 0;
}
function b176(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(56);return 0;
}
function b177(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(57);return 0;
}
function b178(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(58);return 0;
}
function b179(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(59);return 0;
}
function b180(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(60);return 0;
}
function b181(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(61);return 0;
}
function b182(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(62);return 0;
}
function b183(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(63);return 0;
}
function b185(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(0);return 0;
}
function b186(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(1);return 0;
}
function b187(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(2);return 0;
}
function b188(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(3);return 0;
}
function b189(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(4);return 0;
}
function b190(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(5);return 0;
}
function b191(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(6);return 0;
}
function b192(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(7);return 0;
}
function b193(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(8);return 0;
}
function b194(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(9);return 0;
}
function b195(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(10);return 0;
}
function b196(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(11);return 0;
}
function b197(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(12);return 0;
}
function b198(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(13);return 0;
}
function b199(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(15);return 0;
}
function b200(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(17);return 0;
}
function b201(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(18);return 0;
}
function b202(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(19);return 0;
}
function b203(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(20);return 0;
}
function b204(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(22);return 0;
}
function b205(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(23);return 0;
}
function b206(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(24);return 0;
}
function b207(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(25);return 0;
}
function b208(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(26);return 0;
}
function b209(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(27);return 0;
}
function b210(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(28);return 0;
}
function b211(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(29);return 0;
}
function b212(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(30);return 0;
}
function b213(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(31);return 0;
}
function b214(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(32);return 0;
}
function b215(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(33);return 0;
}
function b216(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(34);return 0;
}
function b217(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(35);return 0;
}
function b218(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(36);return 0;
}
function b219(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(37);return 0;
}
function b220(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(38);return 0;
}
function b221(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(39);return 0;
}
function b222(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(40);return 0;
}
function b223(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(41);return 0;
}
function b224(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(42);return 0;
}
function b225(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(43);return 0;
}
function b226(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(44);return 0;
}
function b227(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(46);return 0;
}
function b228(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(47);return 0;
}
function b229(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(49);return 0;
}
function b230(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(50);return 0;
}
function b231(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(51);return 0;
}
function b232(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(52);return 0;
}
function b233(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(53);return 0;
}
function b234(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(54);return 0;
}
function b235(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(55);return 0;
}
function b236(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(56);return 0;
}
function b237(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(57);return 0;
}
function b238(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(58);return 0;
}
function b239(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(59);return 0;
}
function b240(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(60);return 0;
}
function b241(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(61);return 0;
}
function b242(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(62);return 0;
}
function b243(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(63);return 0;
}
function b245(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(0);return 0;
}
function b246(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(1);return 0;
}
function b247(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(2);return 0;
}
function b248(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(3);return 0;
}
function b249(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(4);return 0;
}
function b250(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(5);return 0;
}
function b251(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(6);return 0;
}
function b252(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(7);return 0;
}
function b253(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(8);return 0;
}
function b254(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(9);return 0;
}
function b255(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(10);return 0;
}
function b256(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(11);return 0;
}
function b257(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(12);return 0;
}
function b258(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(13);return 0;
}
function b259(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(14);return 0;
}
function b260(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(16);return 0;
}
function b261(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(17);return 0;
}
function b262(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(18);return 0;
}
function b263(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(19);return 0;
}
function b264(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(20);return 0;
}
function b265(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(21);return 0;
}
function b266(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(22);return 0;
}
function b267(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(23);return 0;
}
function b268(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(24);return 0;
}
function b269(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(25);return 0;
}
function b270(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(26);return 0;
}
function b271(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(27);return 0;
}
function b272(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(28);return 0;
}
function b273(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(29);return 0;
}
function b274(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(30);return 0;
}
function b275(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(31);return 0;
}
function b276(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(33);return 0;
}
function b277(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(34);return 0;
}
function b278(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(35);return 0;
}
function b279(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(36);return 0;
}
function b280(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(37);return 0;
}
function b281(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(38);return 0;
}
function b282(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(39);return 0;
}
function b283(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(40);return 0;
}
function b284(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(42);return 0;
}
function b285(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(43);return 0;
}
function b286(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(44);return 0;
}
function b287(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(45);return 0;
}
function b288(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(46);return 0;
}
function b289(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(47);return 0;
}
function b290(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(48);return 0;
}
function b291(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(49);return 0;
}
function b292(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(50);return 0;
}
function b293(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(51);return 0;
}
function b294(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(52);return 0;
}
function b295(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(53);return 0;
}
function b296(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(54);return 0;
}
function b297(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(55);return 0;
}
function b298(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(56);return 0;
}
function b299(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(57);return 0;
}
function b300(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(58);return 0;
}
function b301(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(59);return 0;
}
function b302(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(60);return 0;
}
function b303(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(61);return 0;
}
function b304(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(62);return 0;
}
function b305(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(63);return 0;
}
function b307(p0) {
 p0 = p0|0; nullFunc_vi(0);
}
function b308(p0) {
 p0 = p0|0; nullFunc_vi(1);
}
function b309(p0) {
 p0 = p0|0; nullFunc_vi(2);
}
function b310(p0) {
 p0 = p0|0; nullFunc_vi(3);
}
function b311(p0) {
 p0 = p0|0; nullFunc_vi(4);
}
function b312(p0) {
 p0 = p0|0; nullFunc_vi(5);
}
function b313(p0) {
 p0 = p0|0; nullFunc_vi(6);
}
function b314(p0) {
 p0 = p0|0; nullFunc_vi(7);
}
function b315(p0) {
 p0 = p0|0; nullFunc_vi(8);
}
function b316(p0) {
 p0 = p0|0; nullFunc_vi(9);
}
function b317(p0) {
 p0 = p0|0; nullFunc_vi(10);
}
function b318(p0) {
 p0 = p0|0; nullFunc_vi(11);
}
function b319(p0) {
 p0 = p0|0; nullFunc_vi(12);
}
function b320(p0) {
 p0 = p0|0; nullFunc_vi(13);
}
function b321(p0) {
 p0 = p0|0; nullFunc_vi(14);
}
function b322(p0) {
 p0 = p0|0; nullFunc_vi(15);
}
function b323(p0) {
 p0 = p0|0; nullFunc_vi(16);
}
function b324(p0) {
 p0 = p0|0; nullFunc_vi(21);
}
function b325(p0) {
 p0 = p0|0; nullFunc_vi(22);
}
function b326(p0) {
 p0 = p0|0; nullFunc_vi(23);
}
function b327(p0) {
 p0 = p0|0; nullFunc_vi(24);
}
function b328(p0) {
 p0 = p0|0; nullFunc_vi(26);
}
function b329(p0) {
 p0 = p0|0; nullFunc_vi(27);
}
function b330(p0) {
 p0 = p0|0; nullFunc_vi(28);
}
function b331(p0) {
 p0 = p0|0; nullFunc_vi(29);
}
function b332(p0) {
 p0 = p0|0; nullFunc_vi(30);
}
function b333(p0) {
 p0 = p0|0; nullFunc_vi(31);
}
function b335(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(0);
}
function b336(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(1);
}
function b337(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(2);
}
function b338(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(3);
}
function b339(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(4);
}
function b340(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(5);
}
function b341(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(6);
}
function b342(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(7);
}
function b343(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(8);
}
function b344(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(9);
}
function b345(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(10);
}
function b346(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(11);
}
function b347(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(12);
}
function b348(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(13);
}
function b349(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(14);
}
function b350(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(15);
}
function b351(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(16);
}
function b352(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(17);
}
function b353(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(18);
}
function b354(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(19);
}
function b355(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(20);
}
function b356(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(21);
}
function b357(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(22);
}
function b358(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(23);
}
function b359(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(24);
}
function b360(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(25);
}
function b361(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(26);
}
function b362(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(27);
}
function b363(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(28);
}
function b364(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(29);
}
function b365(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(31);
}
function b366(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(32);
}
function b367(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(33);
}
function b368(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(34);
}
function b369(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(35);
}
function b370(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(36);
}
function b371(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(37);
}
function b372(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(39);
}
function b373(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(40);
}
function b374(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(41);
}
function b375(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(42);
}
function b376(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(43);
}
function b377(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(45);
}
function b378(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(46);
}
function b379(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(48);
}
function b380(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(49);
}
function b381(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(50);
}
function b382(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(51);
}
function b383(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(52);
}
function b384(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(53);
}
function b385(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(54);
}
function b386(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(55);
}
function b387(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(56);
}
function b388(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(57);
}
function b389(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(58);
}
function b390(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(59);
}
function b391(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(60);
}
function b392(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(61);
}
function b393(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(62);
}
function b394(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(63);
}
function b396(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(0);
}
function b397(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(2);
}
function b398(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(3);
}
function b399(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(4);
}
function b400(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(5);
}
function b401(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(6);
}
function b402(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(7);
}
function b403(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(13);
}
function b404(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(14);
}
function b405(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(15);
}
function b407(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(0);
}
function b408(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(1);
}
function b409(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(2);
}
function b410(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(3);
}
function b411(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(4);
}
function b412(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(5);
}
function b413(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(6);
}
function b414(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(7);
}
function b415(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(8);
}
function b416(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(9);
}
function b417(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(10);
}
function b418(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(11);
}
function b419(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(12);
}
function b420(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(13);
}
function b421(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(14);
}
function b422(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(15);
}
function b423(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(16);
}
function b424(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(17);
}
function b425(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(18);
}
function b426(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(19);
}
function b427(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(20);
}
function b428(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(21);
}
function b429(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(22);
}
function b430(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(23);
}
function b431(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(25);
}
function b432(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(26);
}
function b433(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(27);
}
function b434(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(30);
}
function b436(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(0);
}
function b437(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(1);
}
function b438(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(8);
}
function b439(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(9);
}
function b440(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(10);
}
function b441(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(11);
}
function b442(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(12);
}
function b443(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(13);
}
function b444(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(14);
}
function b445(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(15);
}
function b446(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(16);
}
function b447(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(17);
}
function b448(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(18);
}
function b449(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(19);
}
function b450(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(20);
}
function b451(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(21);
}
function b452(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(22);
}
function b453(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(24);
}
function b454(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(25);
}
function b455(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(26);
}
function b456(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(28);
}
function b457(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(29);
}
function b458(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(30);
}
function b459(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(31);
}
function b461(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(0);
}
function b462(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(1);
}
function b463(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(2);
}
function b464(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(3);
}
function b465(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(4);
}
function b466(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(5);
}
function b467(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(6);
}
function b468(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(7);
}
function b469(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(8);
}
function b470(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(9);
}
function b471(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(10);
}
function b472(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(11);
}
function b473(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(12);
}
function b474(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(13);
}
function b475(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(14);
}
function b476(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(15);
}
function b477(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(16);
}
function b478(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(17);
}
function b479(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(18);
}
function b480(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(19);
}
function b481(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(20);
}
function b482(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(21);
}
function b483(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(23);
}
function b484(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(24);
}
function b485(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(25);
}
function b486(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(27);
}
function b487(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(28);
}
function b488(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(29);
}
function b489(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(30);
}
function b490(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(31);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_ii = [b1,b2,b3,b4,b5,b6,b7,b8,b9,b10,b11,b12,b13,___stdio_close,b14,b15,b16,b17,b18,b19,b20,b21,b22,b23,b24,b25,b26,b27,b28
,b29,b30,b31,b32,b33,_bfLexer_isWhitespace,_bfLexer_isNotNewline,_bfLexer_isID,_bfLexer_isNotQuote,b34,_bfHashMap_defaultHash,b35,b36,_ModuleMap_hash,b37,b38,b39,b40,b41,b42,b43,b44,b45,b46,b47,b48,b49,b50,b51,b52
,b53,b54,b55,b56,b57];
var FUNCTION_TABLE_iidiiii = [b59,b60,b61,b62,b63,b64,b65,b66,b67,b68,b69,b70,b71,b72,b73,b74,b75,b76,b77,b78,b79,b80,b81,b82,b83,b84,b85,b86,b87
,b88,b89,b90,b91,b92,b93,b94,b95,b96,b97,b98,b99,b100,b101,b102,b103,b104,_fmt_fp,b105,b106,b107,b108,b109,b110,b111,b112,b113,b114,b115,b116
,b117,b118,b119,b120,b121];
var FUNCTION_TABLE_iii = [b123,b124,b125,b126,b127,b128,b129,b130,b131,b132,b133,b134,b135,b136,b137,b138,b139,b140,b141,b142,b143,b144,b145,b146,b147,b148,b149,b150,b151
,b152,b153,b154,b155,_bfVM_getSymbolHelper,b156,b157,b158,b159,b160,b161,_bfHashMap_defaultCmp,b162,b163,_ModuleMap_cmp,b164,b165,b166,b167,b168,b169,b170,b171,b172,b173,b174,b175,b176,b177,b178
,b179,b180,b181,b182,b183];
var FUNCTION_TABLE_iiii = [b185,b186,b187,b188,b189,b190,b191,b192,b193,b194,b195,b196,b197,b198,___stdout_write,b199,_sn_write,b200,b201,b202,b203,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,b204,b205,b206,b207,b208,b209,b210
,b211,b212,b213,b214,b215,b216,b217,b218,b219,b220,b221,b222,b223,b224,b225,b226,___stdio_write,b227,b228,___stdio_read,b229,b230,b231,b232,b233,b234,b235,b236,b237,b238
,b239,b240,b241,b242,b243];
var FUNCTION_TABLE_iiiii = [b245,b246,b247,b248,b249,b250,b251,b252,b253,b254,b255,b256,b257,b258,b259,___stdio_seek,b260,b261,b262,b263,b264,b265,b266,b267,b268,b269,b270,b271,b272
,b273,b274,b275,__ZL13memoryHandlerPvS_mm,b276,b277,b278,b279,b280,b281,b282,b283,_bfGCDefaultAllocator,b284,b285,b286,b287,b288,b289,b290,b291,b292,b293,b294,b295,b296,b297,b298,b299,b300
,b301,b302,b303,b304,b305];
var FUNCTION_TABLE_vi = [b307,b308,b309,b310,b311,b312,b313,b314,b315,b316,b317,b318,b319,b320,b321,b322,b323,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,b324,b325,b326,b327,__ZN10__cxxabiv120__si_class_type_infoD0Ev,b328,b329,b330
,b331,b332,b333];
var FUNCTION_TABLE_vii = [b335,b336,b337,b338,b339,b340,b341,b342,b343,b344,b345,b346,b347,b348,b349,b350,b351,b352,b353,b354,b355,b356,b357,b358,b359,b360,b361,b362,b363
,b364,__ZL12printHandlerP11BifrostVM_tPKc,b365,b366,b367,b368,b369,b370,b371,_bfHashMap_defaultDtor,b372,b373,b374,b375,b376,_bfVM_moduleLoadStdIOPrint,b377,b378,_pop_arg_long_double,b379,b380,b381,b382,b383,b384,b385,b386,b387,b388,b389
,b390,b391,b392,b393,b394];
var FUNCTION_TABLE_viii = [b396,_parseGroup,b397,b398,b399,b400,b401,b402,_parseVariable,_parseFunctionExpr,_parseLiteral,_parseNew,_parseSuper,b403,b404,b405];
var FUNCTION_TABLE_viiii = [b407,b408,b409,b410,b411,b412,b413,b414,b415,b416,b417,b418,b419,b420,b421,b422,b423,b424,b425,b426,b427,b428,b429,b430,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b431,b432,b433,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi
,__ZL12errorHandlerP11BifrostVM_t14BifrostVMErroriPKc,b434,__ZL13moduleHandlerP11BifrostVM_tPKcS2_P21BifrostVMModuleLookUp];
var FUNCTION_TABLE_viiiii = [b436,b437,_parseCall,_parseSubscript,_parseMethodCall,_parseAssign,_parseBinOp,_parseDotOp,b438,b439,b440,b441,b442,b443,b444,b445,b446,b447,b448,b449,b450,b451,b452,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b453,b454,b455,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b456
,b457,b458,b459];
var FUNCTION_TABLE_viiiiii = [b461,b462,b463,b464,b465,b466,b467,b468,b469,b470,b471,b472,b473,b474,b475,b476,b477,b478,b479,b480,b481,b482,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b483,b484,b485,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b486,b487
,b488,b489,b490];

  return { __ZSt18uncaught_exceptionv: __ZSt18uncaught_exceptionv, ___cxa_can_catch: ___cxa_can_catch, ___cxa_is_pointer_type: ___cxa_is_pointer_type, ___errno_location: ___errno_location, ___muldi3: ___muldi3, ___udivdi3: ___udivdi3, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, _fflush: _fflush, _free: _free, _i64Add: _i64Add, _i64Subtract: _i64Subtract, _main: _main, _malloc: _malloc, _memcpy: _memcpy, _memmove: _memmove, _memset: _memset, _sbrk: _sbrk, dynCall_ii: dynCall_ii, dynCall_iidiiii: dynCall_iidiiii, dynCall_iii: dynCall_iii, dynCall_iiii: dynCall_iiii, dynCall_iiiii: dynCall_iiiii, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_viii: dynCall_viii, dynCall_viiii: dynCall_viiii, dynCall_viiiii: dynCall_viiiii, dynCall_viiiiii: dynCall_viiiiii, establishStackSpace: establishStackSpace, stackAlloc: stackAlloc, stackRestore: stackRestore, stackSave: stackSave };
})
// EMSCRIPTEN_END_ASM
(asmGlobalArg, asmLibraryArg, buffer);

var real___ZSt18uncaught_exceptionv = asm["__ZSt18uncaught_exceptionv"];
asm["__ZSt18uncaught_exceptionv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZSt18uncaught_exceptionv.apply(null, arguments);
};

var real____cxa_can_catch = asm["___cxa_can_catch"];
asm["___cxa_can_catch"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxa_can_catch.apply(null, arguments);
};

var real____cxa_is_pointer_type = asm["___cxa_is_pointer_type"];
asm["___cxa_is_pointer_type"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxa_is_pointer_type.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"];
asm["___errno_location"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____errno_location.apply(null, arguments);
};

var real____muldi3 = asm["___muldi3"];
asm["___muldi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____muldi3.apply(null, arguments);
};

var real____udivdi3 = asm["___udivdi3"];
asm["___udivdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____udivdi3.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"];
asm["_bitshift64Lshr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Lshr.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"];
asm["_bitshift64Shl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Shl.apply(null, arguments);
};

var real__fflush = asm["_fflush"];
asm["_fflush"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fflush.apply(null, arguments);
};

var real__free = asm["_free"];
asm["_free"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__free.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"];
asm["_i64Add"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Add.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"];
asm["_i64Subtract"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Subtract.apply(null, arguments);
};

var real__main = asm["_main"];
asm["_main"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__main.apply(null, arguments);
};

var real__malloc = asm["_malloc"];
asm["_malloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__malloc.apply(null, arguments);
};

var real__memmove = asm["_memmove"];
asm["_memmove"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__memmove.apply(null, arguments);
};

var real__sbrk = asm["_sbrk"];
asm["_sbrk"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__sbrk.apply(null, arguments);
};

var real_establishStackSpace = asm["establishStackSpace"];
asm["establishStackSpace"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_establishStackSpace.apply(null, arguments);
};

var real_stackAlloc = asm["stackAlloc"];
asm["stackAlloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackAlloc.apply(null, arguments);
};

var real_stackRestore = asm["stackRestore"];
asm["stackRestore"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackRestore.apply(null, arguments);
};

var real_stackSave = asm["stackSave"];
asm["stackSave"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackSave.apply(null, arguments);
};
var __ZSt18uncaught_exceptionv = Module["__ZSt18uncaught_exceptionv"] = asm["__ZSt18uncaught_exceptionv"];
var ___cxa_can_catch = Module["___cxa_can_catch"] = asm["___cxa_can_catch"];
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = asm["___cxa_is_pointer_type"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var ___muldi3 = Module["___muldi3"] = asm["___muldi3"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var _free = Module["_free"] = asm["_free"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _main = Module["_main"] = asm["_main"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _memset = Module["_memset"] = asm["_memset"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
var stackRestore = Module["stackRestore"] = asm["stackRestore"];
var stackSave = Module["stackSave"] = asm["stackSave"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iidiiii = Module["dynCall_iidiiii"] = asm["dynCall_iidiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
;



// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;

if (!Module["intArrayFromString"]) Module["intArrayFromString"] = function() { abort("'intArrayFromString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["intArrayToString"]) Module["intArrayToString"] = function() { abort("'intArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["ccall"]) Module["ccall"] = function() { abort("'ccall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["cwrap"]) Module["cwrap"] = function() { abort("'cwrap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["setValue"]) Module["setValue"] = function() { abort("'setValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getValue"]) Module["getValue"] = function() { abort("'getValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocate"]) Module["allocate"] = function() { abort("'allocate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["getMemory"] = getMemory;
if (!Module["AsciiToString"]) Module["AsciiToString"] = function() { abort("'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToAscii"]) Module["stringToAscii"] = function() { abort("'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ArrayToString"]) Module["UTF8ArrayToString"] = function() { abort("'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ToString"]) Module["UTF8ToString"] = function() { abort("'UTF8ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8Array"]) Module["stringToUTF8Array"] = function() { abort("'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8"]) Module["stringToUTF8"] = function() { abort("'stringToUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF8"]) Module["lengthBytesUTF8"] = function() { abort("'lengthBytesUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF16ToString"]) Module["UTF16ToString"] = function() { abort("'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF16"]) Module["stringToUTF16"] = function() { abort("'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF16"]) Module["lengthBytesUTF16"] = function() { abort("'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF32ToString"]) Module["UTF32ToString"] = function() { abort("'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF32"]) Module["stringToUTF32"] = function() { abort("'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF32"]) Module["lengthBytesUTF32"] = function() { abort("'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocateUTF8"]) Module["allocateUTF8"] = function() { abort("'allocateUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackTrace"]) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreRun"]) Module["addOnPreRun"] = function() { abort("'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnInit"]) Module["addOnInit"] = function() { abort("'addOnInit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreMain"]) Module["addOnPreMain"] = function() { abort("'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnExit"]) Module["addOnExit"] = function() { abort("'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPostRun"]) Module["addOnPostRun"] = function() { abort("'addOnPostRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeStringToMemory"]) Module["writeStringToMemory"] = function() { abort("'writeStringToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeArrayToMemory"]) Module["writeArrayToMemory"] = function() { abort("'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeAsciiToMemory"]) Module["writeAsciiToMemory"] = function() { abort("'writeAsciiToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["addRunDependency"] = addRunDependency;
Module["removeRunDependency"] = removeRunDependency;
if (!Module["ENV"]) Module["ENV"] = function() { abort("'ENV' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["FS"]) Module["FS"] = function() { abort("'FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["FS_createFolder"] = FS.createFolder;
Module["FS_createPath"] = FS.createPath;
Module["FS_createDataFile"] = FS.createDataFile;
Module["FS_createPreloadedFile"] = FS.createPreloadedFile;
Module["FS_createLazyFile"] = FS.createLazyFile;
Module["FS_createLink"] = FS.createLink;
Module["FS_createDevice"] = FS.createDevice;
Module["FS_unlink"] = FS.unlink;
if (!Module["GL"]) Module["GL"] = function() { abort("'GL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynamicAlloc"]) Module["dynamicAlloc"] = function() { abort("'dynamicAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["warnOnce"]) Module["warnOnce"] = function() { abort("'warnOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadDynamicLibrary"]) Module["loadDynamicLibrary"] = function() { abort("'loadDynamicLibrary' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadWebAssemblyModule"]) Module["loadWebAssemblyModule"] = function() { abort("'loadWebAssemblyModule' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getLEB"]) Module["getLEB"] = function() { abort("'getLEB' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFunctionTables"]) Module["getFunctionTables"] = function() { abort("'getFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["alignFunctionTables"]) Module["alignFunctionTables"] = function() { abort("'alignFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["registerFunctions"]) Module["registerFunctions"] = function() { abort("'registerFunctions' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addFunction"]) Module["addFunction"] = function() { abort("'addFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["removeFunction"]) Module["removeFunction"] = function() { abort("'removeFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFuncWrapper"]) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["prettyPrint"]) Module["prettyPrint"] = function() { abort("'prettyPrint' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["makeBigInt"]) Module["makeBigInt"] = function() { abort("'makeBigInt' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynCall"]) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getCompilerSetting"]) Module["getCompilerSetting"] = function() { abort("'getCompilerSetting' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackSave"]) Module["stackSave"] = function() { abort("'stackSave' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackRestore"]) Module["stackRestore"] = function() { abort("'stackRestore' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackAlloc"]) Module["stackAlloc"] = function() { abort("'stackAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["establishStackSpace"]) Module["establishStackSpace"] = function() { abort("'establishStackSpace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["print"]) Module["print"] = function() { abort("'print' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["printErr"]) Module["printErr"] = function() { abort("'printErr' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getTempRet0"]) Module["getTempRet0"] = function() { abort("'getTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["setTempRet0"]) Module["setTempRet0"] = function() { abort("'setTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["Pointer_stringify"]) Module["Pointer_stringify"] = function() { abort("'Pointer_stringify' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["intArrayFromBase64"]) Module["intArrayFromBase64"] = function() { abort("'intArrayFromBase64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["tryParseAsDataURI"]) Module["tryParseAsDataURI"] = function() { abort("'tryParseAsDataURI' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };if (!Module["ALLOC_NORMAL"]) Object.defineProperty(Module, "ALLOC_NORMAL", { get: function() { abort("'ALLOC_NORMAL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_STACK"]) Object.defineProperty(Module, "ALLOC_STACK", { get: function() { abort("'ALLOC_STACK' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_DYNAMIC"]) Object.defineProperty(Module, "ALLOC_DYNAMIC", { get: function() { abort("'ALLOC_DYNAMIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_NONE"]) Object.defineProperty(Module, "ALLOC_NONE", { get: function() { abort("'ALLOC_NONE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });

if (memoryInitializer) {
  if (!isDataURI(memoryInitializer)) {
    memoryInitializer = locateFile(memoryInitializer);
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, GLOBAL_BASE);
  } else {
    addRunDependency('memory initializer');
    var applyMemoryInitializer = function(data) {
      if (data.byteLength) data = new Uint8Array(data);
      for (var i = 0; i < data.length; i++) {
        assert(HEAPU8[GLOBAL_BASE + i] === 0, "area for memory initializer should not have been touched before it's loaded");
      }
      HEAPU8.set(data, GLOBAL_BASE);
      // Delete the typed array that contains the large blob of the memory initializer request response so that
      // we won't keep unnecessary memory lying around. However, keep the XHR object itself alive so that e.g.
      // its .status field can still be accessed later.
      if (Module['memoryInitializerRequest']) delete Module['memoryInitializerRequest'].response;
      removeRunDependency('memory initializer');
    }
    var doBrowserLoad = function() {
      Module['readAsync'](memoryInitializer, applyMemoryInitializer, function() {
        throw 'could not load memory initializer ' + memoryInitializer;
      });
    }
    var memoryInitializerBytes = tryParseAsDataURI(memoryInitializer);
    if (memoryInitializerBytes) {
      applyMemoryInitializer(memoryInitializerBytes.buffer);
    } else
    if (Module['memoryInitializerRequest']) {
      // a network request has already been created, just use that
      var useRequest = function() {
        var request = Module['memoryInitializerRequest'];
        var response = request.response;
        if (request.status !== 200 && request.status !== 0) {
          var data = tryParseAsDataURI(Module['memoryInitializerRequestURL']);
          if (data) {
            response = data.buffer;
          } else {
            // If you see this warning, the issue may be that you are using locateFile and defining it in JS. That
            // means that the HTML file doesn't know about it, and when it tries to create the mem init request early, does it to the wrong place.
            // Look in your browser's devtools network console to see what's going on.
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest, status: ' + request.status + ', retrying ' + memoryInitializer);
            doBrowserLoad();
            return;
          }
        }
        applyMemoryInitializer(response);
      }
      if (Module['memoryInitializerRequest'].response) {
        setTimeout(useRequest, 0); // it's already here; but, apply it asynchronously
      } else {
        Module['memoryInitializerRequest'].addEventListener('load', useRequest); // wait for it
      }
    } else {
      // fetch it from the network ourselves
      doBrowserLoad();
    }
  }
}



/**
 * @constructor
 * @extends {Error}
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on Module["onRuntimeInitialized"])');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  var argc = args.length+1;
  var argv = stackAlloc((argc + 1) * 4);
  HEAP32[argv >> 2] = allocateUTF8OnStack(Module['thisProgram']);
  for (var i = 1; i < argc; i++) {
    HEAP32[(argv >> 2) + i] = allocateUTF8OnStack(args[i - 1]);
  }
  HEAP32[(argv >> 2) + argc] = 0;


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
      exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      var toLog = e;
      if (e && typeof e === 'object' && e.stack) {
        toLog = [e, e.stack];
      }
      err('exception thrown: ' + toLog);
      Module['quit'](1, e);
    }
  } finally {
    calledMain = true;
  }
}




/** @type {function(Array=)} */
function run(args) {
  args = args || Module['arguments'];

  if (runDependencies > 0) {
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    initRuntime();

    preMain();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = run;

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in SYSCALLS_REQUIRE_FILESYSTEM=0
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var print = out;
  var printErr = err;
  var has = false;
  out = err = function(x) {
    has = true;
  }
  try { // it doesn't matter if it fails
    var flush = Module['_fflush'];
    if (flush) flush(0);
    // also flush in the JS FS layer
    ['stdout', 'stderr'].forEach(function(name) {
      var info = FS.analyzePath('/dev/' + name);
      if (!info) return;
      var stream = info.object;
      var rdev = stream.rdev;
      var tty = TTY.ttys[rdev];
      if (tty && tty.output && tty.output.length) {
        has = true;
      }
    });
  } catch(e) {}
  out = print;
  err = printErr;
  if (has) {
    warnOnce('stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the FAQ), or make sure to emit a newline when you printf etc.');
  }
}

function exit(status, implicit) {
  checkUnflushedContent();

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && Module['noExitRuntime'] && status === 0) {
    return;
  }

  if (Module['noExitRuntime']) {
    // if exit() was called, we may warn the user if the runtime isn't actually being shut down
    if (!implicit) {
      err('exit(' + status + ') called, but EXIT_RUNTIME is not set, so halting execution but not exiting the runtime or preventing further async execution (build with EXIT_RUNTIME=1, if you want a true shutdown)');
    }
  } else {

    ABORT = true;
    EXITSTATUS = status;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  Module['quit'](status, new ExitStatus(status));
}

var abortDecorators = [];

function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  if (what !== undefined) {
    out(what);
    err(what);
    what = '"' + what + '"';
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';
  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = abort;

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}

  Module["noExitRuntime"] = true;

run();





// {{MODULE_ADDITIONS}}



